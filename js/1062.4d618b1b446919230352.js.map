{"version":3,"sources":["webpack://sources-ui/./src/addSourceWizard/addSourceWizard/ValidatorReset.js","webpack://sources-ui/./src/addSourceWizard/addSourceWizard/superKey/SuperKeyCredentials.js","webpack://sources-ui/./src/addSourceWizard/addSourceWizard/superKey/configurationStep.js","webpack://sources-ui/./src/addSourceWizard/addSourceWizard/descriptions/SubWatchDescription.js","webpack://sources-ui/./src/addSourceWizard/addSourceWizard/compileAllApplicationComboOptions.js","webpack://sources-ui/./src/addSourceWizard/addSourceWizard/superKey/applicationsStep.js","webpack://sources-ui/./src/addSourceWizard/addSourceWizard/SourceAddSchema.js","webpack://sources-ui/./src/addSourceWizard/utilities/debouncePromise.js"],"names":["ValidatorReset","name","formOptions","useFormApi","useEffect","setTimeout","change","propTypes","PropTypes","SuperKeyCredentials","sourceTypes","renderForm","values","getState","generateSuperKeyFields","source_type","intl","title","formatMessage","id","defaultMessage","nextStep","source","app_creation_workflow","fields","component","componentTypes","label","isRequired","options","className","Label","color","description","value","validate","type","validatorTypes","Content","condition","when","is","Point","isEnabled","props","StackItem","Flex","FlexItem","spacer","default","fill","Text","SubWatchDescription","useIntl","applications","includes","application","application_type_id","Stack","descriptionMapper","COST_MANAGEMENT_APP_NAME","CLOUD_METER_APP_NAME","labelMapper","compileAllApplicationComboOptions","applicationTypes","sort","a","b","display_name","localeCompare","map","t","getActiveVendor","REDHAT_VENDOR","NO_APPLICATION_VALUE","asyncValidator","sourceId","undefined","findSource","response","console","error","handleError","data","sources","find","firstValidation","setFirstValidated","bool","asyncValidatorDebounced","asyncFunction","debounceTime","onlyResolvesLast","awesomeDebouncePromise","debouncePromise","compileAllSourcesComboOptions","product_name","vendor","replace","appMutatorRedHat","appTypes","option","selectedSourceType","appType","app","supported_source_types","shortIcons","amazon","azure","openshift","satellite","google","iconMapper","sourceType","icon_url","src","alt","appId","sourceTypeSelect","redhatTypes","disableAppSelection","mutator","isDisabled","isNotEmpty","applicationStep","menuIsPortal","hideField","typesStep","hasSuperKeyType","schema","authentication","is_superkey","cloudTypesStep","NameDescription","TextContent","key","TextVariants","nameStep","selectedType","placeholder","asyncValidatorDebouncedWrapper","resolveProps","validated","SummaryDescription","chunks","length","Math","floor","random","summaryStep","container","initialWizardState","wizardTitle","inModal","wizardDescription","buttonLabels","submit","back","cancel","next","showTitles","initialState","crossroads","configurationStep","applicationsStep","schemaBuilder"],"mappings":"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","file":"js/1062.4d618b1b446919230352.js","sourcesContent":["import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/esm/use-form-api';\n\n// see https://github.com/data-driven-forms/react-forms/issues/431\nconst ValidatorReset = ({ name }) => {\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setTimeout(() => formOptions.change(name, '1'));\n\n    return () => formOptions.change(name, '');\n  }, []);\n\n  return null;\n};\n\nValidatorReset.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n\nexport default ValidatorReset;\n","import PropTypes from 'prop-types';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/esm/use-form-api';\nimport generateSuperKeyFields from './generateSuperKeyFields';\n\nconst SuperKeyCredentials = ({ sourceTypes }) => {\n  const { renderForm, getState } = useFormApi();\n\n  const values = getState().values;\n\n  return renderForm(generateSuperKeyFields(sourceTypes, values.source_type));\n};\n\nSuperKeyCredentials.propTypes = {\n  sourceTypes: PropTypes.array,\n};\n\nexport default SuperKeyCredentials;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/esm/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/esm/validator-types';\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport SuperKeyCredentials from './SuperKeyCredentials';\n\nconst configurationStep = (intl, sourceTypes) => ({\n  name: 'configuration_step',\n  title: intl.formatMessage({\n    id: 'wizard.configurationStep',\n    defaultMessage: 'Select configuration',\n  }),\n  nextStep: ({ values }) => {\n    if (!values.source?.app_creation_workflow) {\n      return;\n    }\n\n    return values.source?.app_creation_workflow === 'account_authorization' ? 'select_applications' : 'application_step';\n  },\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'conf-desc',\n      label: 'Configure your source manually or let us manage all necessary credentials by selecting Superkey configuration.',\n    },\n    {\n      component: componentTypes.RADIO,\n      name: 'source.app_creation_workflow',\n      label: intl.formatMessage({\n        id: 'wizard.configurationMode',\n        defaultMessage: 'Select a configuration mode',\n      }),\n      isRequired: true,\n      options: [\n        {\n          label: (\n            <span className=\"ins-c-sources__wizard--rhel-mag-label\">\n              {intl.formatMessage({\n                id: 'wizard.accountAuth',\n                defaultMessage: 'Account authorization',\n              })}\n              <Label className=\"pf-u-ml-sm\" color=\"purple\">\n                {intl.formatMessage({ id: 'wizard.confMode.reccomended', defaultMessage: 'Recommended' })}\n              </Label>\n            </span>\n          ),\n          description: intl.formatMessage({\n            id: 'wizard.accountAuth.desc',\n            defaultMessage:\n              'A new automated source configuration method. Provide your AWS account credentials and let Red Hat configure and manage your source for you.',\n          }),\n          value: 'account_authorization',\n        },\n      ],\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n    {\n      component: componentTypes.SUB_FORM,\n      name: 'sub-form',\n      fields: [\n        {\n          component: 'description',\n          name: 'super-key-credentials',\n          Content: SuperKeyCredentials,\n          sourceTypes,\n        },\n      ],\n      condition: { when: 'source.app_creation_workflow', is: 'account_authorization' },\n      className: 'pf-u-ml-md',\n    },\n    {\n      component: componentTypes.RADIO,\n      name: 'source.app_creation_workflow',\n      options: [\n        {\n          label: intl.formatMessage({\n            id: 'wizard.manualAuth',\n            defaultMessage: 'Manual configuration',\n          }),\n          description: intl.formatMessage({\n            id: 'wizard.manualAuth.desc',\n            defaultMessage:\n              'Configure and manage your source manually if you do not wish to provide Superkey credentials. You will set up sources the same way you do today.',\n          }),\n          value: 'manual_configuration',\n        },\n      ],\n    },\n  ],\n});\n\nexport default configurationStep;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Text } from '@patternfly/react-core/dist/esm/components/Text/Text';\nimport { Stack } from '@patternfly/react-core/dist/esm/layouts/Stack/Stack';\nimport { StackItem } from '@patternfly/react-core/dist/esm/layouts/Stack/StackItem';\nimport { Flex } from '@patternfly/react-core/dist/esm/layouts/Flex/Flex';\nimport { FlexItem } from '@patternfly/react-core/dist/esm/layouts/Flex/FlexItem';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/esm/use-form-api';\n\nconst Point = ({ title, description, isEnabled, ...props }) => (\n  <StackItem {...props}>\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>\n        <CheckCircleIcon fill={isEnabled ? '#3E8635' : '#6A6E73'} />\n      </FlexItem>\n      <FlexItem>\n        <Text className=\"pf-u-mb-xs ins-c-sources__wizard--rhel-desc-title\">{title}</Text>\n        <Text>{description}</Text>\n      </FlexItem>\n    </Flex>\n  </StackItem>\n);\n\nPoint.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  isEnabled: PropTypes.bool,\n};\n\nconst SubWatchDescription = ({ id }) => {\n  const intl = useIntl();\n  const { getState } = useFormApi();\n\n  const values = getState().values;\n\n  const isEnabled =\n    (values.source.app_creation_workflow === 'account_authorization' && values.applications?.includes(id)) ||\n    (values.source.app_creation_workflow !== 'account_authorization' && values.application?.application_type_id === id);\n\n  return (\n    <Stack>\n      <Point\n        title={intl.formatMessage({\n          id: 'rhelbundle.goldImages.title',\n          defaultMessage: 'Red Hat Gold Images',\n        })}\n        description={intl.formatMessage({\n          id: 'rhelbundle.goldImages.description',\n          defaultMessage: 'Unlock cloud images in AWS and bring your own subscription instead of paying hourly.',\n        })}\n        className=\"pf-u-mb-sm\"\n        isEnabled={isEnabled}\n      />\n      <Point\n        title={intl.formatMessage({\n          id: 'rhelbundle.subwatch.title',\n          defaultMessage: 'High precision subscription watch data',\n        })}\n        description={intl.formatMessage({\n          id: 'rhelbundle.subwatch.description',\n          defaultMessage: 'View precise public cloud usage data in subscription watch.',\n        })}\n        className=\"pf-u-mb-sm\"\n        isEnabled={isEnabled}\n      />\n      <Point\n        title={intl.formatMessage({\n          id: 'rhelbundle.autoregistration.title',\n          defaultMessage: 'Autoregistration',\n        })}\n        description={intl.formatMessage({\n          id: 'rhelbundle.goldImages.description',\n          defaultMessage: 'Cloud instances automatically connect to cloud.redhat.com when provisioned.',\n        })}\n        className=\"pf-u-mb-sm\"\n        isEnabled={isEnabled}\n      />\n      <Point\n        title={intl.formatMessage({\n          id: 'rhelbundle.redhatconnector.title',\n          defaultMessage: 'Red Hat Connector',\n        })}\n        description={intl.formatMessage({\n          id: 'rhelbundle.redhatconnector.description',\n          defaultMessage: 'Simplified set up and registration of connected hosts.',\n        })}\n        isEnabled={isEnabled}\n      />\n    </Stack>\n  );\n};\n\nSubWatchDescription.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default SubWatchDescription;\n","import React from 'react';\n\nimport { NO_APPLICATION_VALUE } from '../utilities/stringConstants';\n\nimport { COST_MANAGEMENT_APP_NAME, CLOUD_METER_APP_NAME } from '../api/constants';\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport SubWatchDescription from './descriptions/SubWatchDescription';\nimport { getActiveVendor, REDHAT_VENDOR } from '../../utilities/constants';\n\nexport const descriptionMapper = (type, intl) =>\n  ({\n    [COST_MANAGEMENT_APP_NAME]: intl.formatMessage({\n      id: 'cost.app.description',\n      defaultMessage: 'Analyze, forecast, and optimize your Red Hat OpenShift cluster costs in hybrid cloud environments.',\n    }),\n    [CLOUD_METER_APP_NAME]: <SubWatchDescription id={type.id} />,\n  }[type.name]);\n\nexport const labelMapper = (type, intl) =>\n  ({\n    [CLOUD_METER_APP_NAME]: (\n      <span className=\"ins-c-sources__wizard--rhel-mag-label\">\n        RHEL management{' '}\n        <Label className=\"pf-u-ml-sm\" color=\"purple\">\n          {intl.formatMessage({ id: 'sub.bundle', defaultMessage: 'Bundle' })}\n        </Label>\n      </span>\n    ),\n  }[type.name]);\n\nexport const compileAllApplicationComboOptions = (applicationTypes, intl) => [\n  ...applicationTypes\n    .sort((a, b) => a.display_name.localeCompare(b.display_name))\n    .map((t) => ({\n      value: t.id,\n      label: labelMapper(t, intl) || t.display_name,\n      description: descriptionMapper(t, intl),\n    })),\n  ...(getActiveVendor() !== REDHAT_VENDOR\n    ? [\n        {\n          label: intl.formatMessage({\n            id: 'wizard.noApplication',\n            defaultMessage: 'No application',\n          }),\n          value: NO_APPLICATION_VALUE,\n        },\n      ]\n    : []),\n];\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/esm/component-types';\nimport { compileAllApplicationComboOptions } from '../compileAllApplicationComboOptions';\n\nconst applicationsStep = (applicationTypes, intl) => ({\n  name: 'select_applications',\n  title: intl.formatMessage({\n    id: 'applications.select',\n    defaultMessage: 'Select applications',\n  }),\n  nextStep: 'summary',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'conf-desc',\n      label: intl.formatMessage({\n        id: 'applications.description',\n        defaultMessage:\n          // eslint-disable-next-line max-len\n          'Configuring your cloud sources provides additional capabilities included with your subscription. You can turn these features on or off at any time after source creation.',\n      }),\n    },\n    {\n      component: 'switch-group',\n      name: 'applications',\n      label: intl.formatMessage({\n        id: 'applications.availableApplications',\n        defaultMessage: 'Available applications',\n      }),\n      options: compileAllApplicationComboOptions(applicationTypes, intl),\n      applicationTypes,\n    },\n  ],\n});\n\nexport default applicationsStep;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/esm/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/esm/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/esm/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/esm/components/Text/TextContent';\n\nimport debouncePromise from '../utilities/debouncePromise';\nimport { findSource } from '../api';\nimport { schemaBuilder } from './schemaBuilder';\nimport { NO_APPLICATION_VALUE, wizardDescription, wizardTitle } from '../utilities/stringConstants';\nimport ValidatorReset from './ValidatorReset';\nimport { handleError } from '../api/handleError';\nimport validated from '../sourceFormRenderer/resolveProps/validated';\nimport configurationStep from './superKey/configurationStep';\nimport { compileAllApplicationComboOptions } from './compileAllApplicationComboOptions';\nimport applicationsStep from './superKey/applicationsStep';\nimport { getActiveVendor, REDHAT_VENDOR } from '../../utilities/constants';\n\nexport const asyncValidator = async (value, sourceId = undefined, intl) => {\n  if (!value) {\n    return undefined;\n  }\n\n  let response;\n  try {\n    response = await findSource(value);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(handleError(error));\n    return undefined;\n  }\n\n  if (response.data.sources.find(({ id }) => id !== sourceId)) {\n    throw intl.formatMessage({ defaultMessage: 'That name is taken. Try another.', id: 'wizard.nameTaken' });\n  }\n\n  return undefined;\n};\n\nlet firstValidation = true;\nexport const setFirstValidated = (bool) => (firstValidation = bool);\nexport const getFirstValidated = () => firstValidation;\n\nexport const asyncValidatorDebounced = debouncePromise(asyncValidator);\n\nexport const asyncValidatorDebouncedWrapper = (intl) => {\n  if (getFirstValidated()) {\n    setFirstValidated(false);\n    return (value, id) => (value ? asyncValidator(value, id, intl) : undefined);\n  }\n\n  return asyncValidatorDebounced;\n};\n\nexport const compileAllSourcesComboOptions = (sourceTypes) => [\n  ...sourceTypes\n    .map((type) => ({\n      ...type,\n      product_name: type.vendor === 'Red Hat' ? type.product_name.replace('Red Hat ', '') : type.product_name,\n    }))\n    .sort((a, b) => a.product_name.localeCompare(b.product_name))\n    .map((t) => ({\n      value: t.name,\n      label: t.product_name,\n    })),\n];\n\nexport const appMutatorRedHat = (appTypes) => (option, formOptions) => {\n  const selectedSourceType = formOptions.getState().values.source_type;\n  const appType = appTypes.find((app) => app.id === option.value);\n  const isEnabled = selectedSourceType && appType ? appType.supported_source_types.includes(selectedSourceType) : true;\n\n  if (!isEnabled) {\n    return;\n  }\n\n  return option;\n};\n\nexport const sourceTypeMutator = (appTypes, sourceTypes) => (option, formOptions) => {\n  const selectedApp = formOptions.getState().values.application\n    ? formOptions.getState().values.application.application_type_id\n    : undefined;\n  const appType = appTypes.find((app) => app.id === selectedApp);\n  const isEnabled = appType\n    ? appType.supported_source_types.includes(sourceTypes.find((type) => type.product_name === option.label).name)\n    : true;\n  return {\n    ...option,\n    isDisabled: !isEnabled,\n  };\n};\n\nconst shortIcons = {\n  amazon: '/apps/frontend-assets/partners-icons/aws.svg',\n  'ansible-tower': '/apps/frontend-assets/red-hat-logos/stacked.svg',\n  azure: '/apps/frontend-assets/partners-icons/microsoft-azure-short.svg',\n  openshift: '/apps/frontend-assets/red-hat-logos/stacked.svg',\n  satellite: '/apps/frontend-assets/red-hat-logos/stacked.svg',\n  google: '/apps/frontend-assets/partners-icons/google-cloud-short.svg',\n};\n\nexport const iconMapper = (sourceTypes) => (name) => {\n  const sourceType = sourceTypes.find((type) => type.name === name);\n\n  if (!sourceType || (sourceType.icon_url && !shortIcons[name])) {\n    return null;\n  }\n\n  const Icon = () => (\n    <img\n      src={shortIcons[name] || sourceType.icon_url}\n      alt={sourceType.product_name}\n      className={`ins-c-sources__wizard--icon ${sourceType.vendor === 'Red Hat' ? 'redhat-icon' : 'pf-u-mb-sm'}`}\n    />\n  );\n\n  return Icon;\n};\n\nexport const nextStep = ({ values: { application, source_type } }) => {\n  const appId = application && application.application_type_id !== NO_APPLICATION_VALUE && application.application_type_id;\n  const resultedStep = appId ? `${source_type}-${appId}` : source_type;\n\n  return resultedStep;\n};\n\nconst sourceTypeSelect = ({ intl, sourceTypes, applicationTypes }) => ({\n  component: 'card-select',\n  name: 'source_type',\n  isRequired: true,\n  label: intl.formatMessage({\n    id: 'wizard.selectYourSourceType',\n    defaultMessage: 'A. Select your source type',\n  }),\n  iconMapper: iconMapper(sourceTypes),\n  validate: [\n    {\n      type: validatorTypes.REQUIRED,\n    },\n  ],\n  options: compileAllSourcesComboOptions(sourceTypes, applicationTypes),\n});\n\nconst redhatTypes = ({ intl, sourceTypes, applicationTypes, disableAppSelection }) => [\n  sourceTypeSelect({ intl, sourceTypes, applicationTypes }),\n  {\n    component: 'enhanced-radio',\n    name: 'application.application_type_id',\n    label: intl.formatMessage({\n      id: 'wizard.selectApplication',\n      defaultMessage: 'B. Application',\n    }),\n    options: compileAllApplicationComboOptions(applicationTypes, intl, sourceTypes),\n    mutator: appMutatorRedHat(applicationTypes),\n    isDisabled: disableAppSelection,\n    isRequired: true,\n    validate: [{ type: validatorTypes.REQUIRED }],\n    condition: { when: 'source_type', isNotEmpty: true },\n  },\n];\n\nexport const applicationStep = (applicationTypes, intl) => ({\n  name: 'application_step',\n  title: intl.formatMessage({\n    id: 'wizard.selectApplication',\n    defaultMessage: 'Select application',\n  }),\n  nextStep,\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'app-description',\n      label: intl.formatMessage({\n        id: 'wizard.applicationDescription',\n        defaultMessage:\n          'Select an application to connect to your source. You can connect additional applications after source creation.',\n      }),\n    },\n    {\n      component: 'enhanced-radio',\n      name: 'application.application_type_id',\n      options: compileAllApplicationComboOptions(applicationTypes, intl),\n      mutator: appMutatorRedHat(applicationTypes),\n      menuIsPortal: true,\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'source_type',\n      hideField: true,\n    },\n  ],\n});\n\nexport const typesStep = (sourceTypes, applicationTypes, disableAppSelection, intl) => ({\n  title: intl.formatMessage({\n    id: 'wizard.chooseAppAndType',\n    defaultMessage: 'Source type and application',\n  }),\n  name: 'types_step',\n  nextStep,\n  fields: [\n    ...redhatTypes({ intl, sourceTypes, applicationTypes, disableAppSelection }),\n    {\n      component: 'description',\n      name: 'fixasyncvalidation',\n      Content: ValidatorReset,\n    },\n  ],\n});\n\nexport const hasSuperKeyType = (sourceType) =>\n  sourceType?.schema.authentication.find(({ is_superkey, type }) => is_superkey || type === 'access_key_secret_key');\n\nexport const cloudTypesStep = (sourceTypes, applicationTypes, intl) => ({\n  title: intl.formatMessage({\n    id: 'wizard.chooseAppAndType',\n    defaultMessage: 'Select source type',\n  }),\n  name: 'types_step',\n  nextStep: ({ values }) => {\n    if (!values.source_type) {\n      return;\n    }\n\n    const sourceType = sourceTypes.find(({ name }) => name === values.source_type);\n\n    return hasSuperKeyType(sourceType) ? 'configuration_step' : 'application_step';\n  },\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'plain-text',\n      label: intl.formatMessage({\n        id: 'wizard.selectCloudType',\n        defaultMessage: 'Select a cloud provider to connect to your Red Hat account.',\n      }),\n    },\n    {\n      ...sourceTypeSelect({ intl, sourceTypes, applicationTypes }),\n      label: intl.formatMessage({\n        id: 'wizard.selectCloudProvider',\n        defaultMessage: 'Select a cloud provider',\n      }),\n    },\n    {\n      component: 'description',\n      name: 'fixasyncvalidation',\n      Content: ValidatorReset,\n    },\n  ],\n});\n\nexport const NameDescription = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent key=\"step1\">\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'wizard.nameDescription',\n          // eslint-disable-next-line max-len\n          defaultMessage:\n            'To import data for an application, you need to connect to a data source. Enter a name, then proceed to select your application and source type.',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n\nconst nameStep = (intl, selectedType, sourceTypes) => ({\n  title: intl.formatMessage({\n    id: 'wizard.nameSource',\n    defaultMessage: 'Name source',\n  }),\n  name: 'name_step',\n  nextStep: () => {\n    if (selectedType) {\n      if (hasSuperKeyType(sourceTypes.find(({ name }) => name === selectedType))) {\n        return 'configuration_step';\n      }\n\n      return 'application_step';\n    }\n\n    return 'types_step';\n  },\n  fields: [\n    {\n      component: 'description',\n      name: 'description-summary',\n      Content: NameDescription,\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'source.name',\n      type: 'text',\n      label: intl.formatMessage({\n        id: 'wizard.name',\n        defaultMessage: 'Name',\n      }),\n      placeholder: 'Source_1',\n      isRequired: true,\n      validate: [(value) => asyncValidatorDebouncedWrapper(intl)(value, undefined, intl), { type: validatorTypes.REQUIRED }],\n      resolveProps: validated,\n    },\n  ],\n});\n\nexport const SummaryDescription = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'wizard.summaryDescription',\n            defaultMessage:\n              'Review the information below and click <b>Add</b> to add your source. To edit details in previous steps, click <b>Back</b>.',\n          },\n          {\n            // eslint-disable-next-line react/display-name\n            b: (chunks) => <b key={`b-${chunks.length}-${Math.floor(Math.random() * 1000)}`}>{chunks}</b>,\n          }\n        )}\n      </Text>\n    </TextContent>\n  );\n};\n\nconst summaryStep = (sourceTypes, applicationTypes, intl) => ({\n  fields: [\n    {\n      component: 'description',\n      name: 'description-summary',\n      Content: SummaryDescription,\n    },\n    {\n      name: 'summary',\n      component: 'summary',\n      sourceTypes,\n      applicationTypes,\n    },\n  ],\n  name: 'summary',\n  title: intl.formatMessage({\n    id: 'wizard.reviewDetails',\n    defaultMessage: 'Review details',\n  }),\n});\n\nexport default (sourceTypes, applicationTypes, disableAppSelection, container, intl, selectedType, initialWizardState) => {\n  setFirstValidated(true);\n\n  return {\n    fields: [\n      {\n        component: componentTypes.WIZARD,\n        name: 'wizard',\n        className: 'sources',\n        title: wizardTitle(),\n        inModal: true,\n        description: wizardDescription(),\n        buttonLabels: {\n          submit: intl.formatMessage({\n            id: 'sources.add',\n            defaultMessage: 'Add',\n          }),\n          back: intl.formatMessage({\n            id: 'wizard.back',\n            defaultMessage: 'Back',\n          }),\n          cancel: intl.formatMessage({\n            id: 'wizard.cancel',\n            defaultMessage: 'Cancel',\n          }),\n          next: intl.formatMessage({\n            id: 'wizard.next',\n            defaultMessage: 'Next',\n          }),\n        },\n        container,\n        showTitles: true,\n        initialState: initialWizardState,\n        crossroads: ['application.application_type_id', 'source_type', 'auth_select', 'source.app_creation_workflow'],\n        fields: [\n          nameStep(intl, selectedType, sourceTypes),\n          !selectedType && getActiveVendor() === REDHAT_VENDOR\n            ? typesStep(sourceTypes, applicationTypes, disableAppSelection, intl)\n            : cloudTypesStep(sourceTypes, applicationTypes, intl),\n          configurationStep(intl, sourceTypes),\n          applicationsStep(applicationTypes, intl),\n          applicationStep(applicationTypes, intl),\n          ...schemaBuilder(sourceTypes, applicationTypes),\n          summaryStep(sourceTypes, applicationTypes, intl),\n        ],\n      },\n    ],\n  };\n};\n","import awesomeDebouncePromise from 'awesome-debounce-promise';\n\nexport default (asyncFunction, debounceTime = 250, options = { onlyResolvesLast: false }) =>\n  awesomeDebouncePromise(asyncFunction, debounceTime, options);\n"],"sourceRoot":""}