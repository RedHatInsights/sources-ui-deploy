{"version":3,"sources":["webpack://sources-ui/./src/components/CloseModal.js","webpack://sources-ui/./src/components/steps/AmazonFinishedStep.js","webpack://sources-ui/./src/components/steps/FinishedStep.js","webpack://sources-ui/./src/components/steps/TimeoutStep.js","webpack://sources-ui/./src/utilities/computeSourceError.js","webpack://sources-ui/./src/utilities/computeSourcesUrl.js"],"names":["CloseModal","onExit","onStay","title","exitTitle","stayTitle","description","intl","useIntl","isMounted","useRef","onEscapePress","e","current","className","variant","aria-label","formatMessage","id","defaultMessage","header","headingLevel","size","isOpen","onClose","actions","key","onClick","propTypes","PropTypes","defaultProps","AwsLink","href","children","fill","component","target","rel","PREFIX","insights","chrome","isBeta","SUBWATCH_HREF","INSIGHTS_HREF","COST_HREF","AmazonFinishedStep","Fragment","isInline","EmptyStateVariant","icon","CheckCircleIcon","color","hasGutter","md","FinishedStep","successfulMessage","hideSourcesButton","returnButtonTitle","linkText","secondaryActions","computeSourcesUrl","TimeoutStep","WrenchIcon","newLine","source","applications","filter","Boolean","find","availability_status_error","endpoint","authentications"],"mappings":"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","file":"js/8774.966b2cfd716a26caae52.js","sourcesContent":["import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl, FormattedMessage } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { Modal } from '@patternfly/react-core/dist/esm/components/Modal/Modal';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\n\nconst CloseModal = ({ onExit, onStay, title, exitTitle, stayTitle, description }) => {\n  const intl = useIntl();\n\n  const isMounted = useRef(false);\n\n  return (\n    <Modal\n      onEscapePress={(e) => {\n        isMounted.current ? onStay(e) : undefined;\n        isMounted.current = true;\n      }}\n      className=\"sources\"\n      variant=\"small\"\n      title={title}\n      aria-label={intl.formatMessage({ id: 'wizard.closeAriaLabel', defaultMessage: 'Close add source wizard' })}\n      header={\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          <ExclamationTriangleIcon size=\"sm\" className=\"ins-c-source__warning-icon\" />\n          {title}\n        </Title>\n      }\n      isOpen\n      onClose={onStay}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" id=\"on-exit-button\" onClick={onExit}>\n          {exitTitle}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" id=\"on-stay-button\" onClick={onStay}>\n          {stayTitle}\n        </Button>,\n      ]}\n    >\n      {description}\n    </Modal>\n  );\n};\n\nCloseModal.propTypes = {\n  onExit: PropTypes.func.isRequired,\n  onStay: PropTypes.func.isRequired,\n  title: PropTypes.node,\n  exitTitle: PropTypes.node,\n  stayTitle: PropTypes.node,\n  description: PropTypes.node,\n};\n\nCloseModal.defaultProps = {\n  title: <FormattedMessage id=\"wizard.closeTitle\" defaultMessage=\"Exit source creation?\" />,\n  exitTitle: <FormattedMessage id=\"wizard.exitText\" defaultMessage=\"Exit\" />,\n  stayTitle: <FormattedMessage id=\"wizard.stayText\" defaultMessage=\"Stay\" />,\n  description: <FormattedMessage id=\"wizard.closeWarning\" defaultMessage=\"All inputs will be discarded.\" />,\n};\n\nexport default CloseModal;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Text } from '@patternfly/react-core/dist/esm/components/Text/Text';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody';\nimport { EmptyStateSecondaryActions } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateSecondaryActions';\nimport { Bullseye } from '@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport { GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/GridItem';\nimport { Alert } from '@patternfly/react-core/dist/esm/components/Alert/Alert';\nimport { Grid } from '@patternfly/react-core/dist/esm/layouts/Grid/Grid';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\n\nconst AwsLink = ({ href, children }) => (\n  <React.Fragment>\n    <CheckCircleIcon className=\"pf-u-mr-sm\" fill=\"var(--pf-global--success-color--100)\" />\n    <Text component=\"a\" href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      {children}\n    </Text>\n  </React.Fragment>\n);\n\nAwsLink.propTypes = {\n  href: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PREFIX = insights.chrome.isBeta() ? 'beta/' : '';\n\nconst GOLDIMAGES_HREF = 'https://access.redhat.com/management/cloud';\nconst SUBWATCH_HREF = `/${PREFIX}subscriptions`;\nconst INSIGHTS_HREF = `/${PREFIX}insights`;\nconst COST_HREF = `/${PREFIX}cost-management`;\nconst LEARNMORE_HREF = 'https://access.redhat.com/public-cloud/aws';\n\nconst AmazonFinishedStep = ({ onClose }) => {\n  const intl = useIntl();\n\n  return (\n    <Fragment>\n      <Alert\n        variant=\"info\"\n        isInline\n        title={intl.formatMessage({ id: 'aws.alertTitle', defaultMessage: 'Allow 24 hours for full activation' })}\n      >\n        {intl.formatMessage({\n          id: 'aws.alertDescription',\n          defaultMessage: 'Manage connections for this source at any time in Settings > Sources.',\n        })}\n      </Alert>\n      <Bullseye>\n        <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-md\">\n          <EmptyStateIcon icon={CheckCircleIcon} color=\"var(--pf-global--success-color--100)\" className=\"pf-u-mb-0\" />\n          <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n            {intl.formatMessage({ id: 'aws.successTitle', defaultMessage: 'Amazon Web Services connection established' })}\n          </Title>\n          <EmptyStateBody>\n            {intl.formatMessage({\n              id: 'aws.successDescription',\n              defaultMessage: 'Discover the benefits of your connection or exit to manage your new source.',\n            })}\n            <Grid hasGutter className=\"ins-c-source__aws-grid pf-u-mt-md\">\n              <GridItem md=\"6\">\n                <AwsLink href={GOLDIMAGES_HREF}>\n                  {intl.formatMessage({ id: 'aws.goldImages', defaultMessage: 'View enabled AWS Gold images' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={SUBWATCH_HREF}>\n                  {intl.formatMessage({ id: 'aws.subwtachUsage', defaultMessage: 'Subscription Watch usage' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={INSIGHTS_HREF}>\n                  {intl.formatMessage({ id: 'aws.insights', defaultMessage: 'Get started with Red Hat Insights' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={COST_HREF}>\n                  {intl.formatMessage({ id: 'aws.costLink', defaultMessage: 'Cost Management reporting' })}\n                </AwsLink>\n              </GridItem>\n            </Grid>\n          </EmptyStateBody>\n          <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n            {intl.formatMessage({ id: 'exit', defaultMessage: 'Exit' })}\n          </Button>\n          <EmptyStateSecondaryActions>\n            <Text component=\"a\" href={LEARNMORE_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n              {intl.formatMessage({ id: 'aws.learnMore', defaultMessage: 'Learn more about this Cloud' })}\n            </Text>\n          </EmptyStateSecondaryActions>\n        </EmptyState>\n      </Bullseye>\n    </Fragment>\n  );\n};\n\nAmazonFinishedStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default AmazonFinishedStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody';\nimport { EmptyStateSecondaryActions } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateSecondaryActions';\nimport { Bullseye } from '@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport computeSourcesUrl from '../../utilities/computeSourcesUrl';\n\nconst FinishedStep = ({\n  onClose,\n  successfulMessage,\n  hideSourcesButton,\n  returnButtonTitle,\n  title,\n  linkText,\n  secondaryActions,\n}) => (\n  <Bullseye>\n    <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n      <EmptyStateIcon icon={CheckCircleIcon} color=\"var(--pf-global--success-color--100)\" className=\"pf-u-mb-0\" />\n      <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n        {title}\n      </Title>\n      <EmptyStateBody className=\"ins-c-sources__wizard--step-text\">{successfulMessage}</EmptyStateBody>\n      <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n        {returnButtonTitle}\n      </Button>\n      {!hideSourcesButton && (\n        <EmptyStateSecondaryActions>\n          <Button variant=\"link\" component=\"a\" target=\"_blank\" rel=\"noopener noreferrer\" href={computeSourcesUrl()}>\n            {linkText}\n          </Button>\n        </EmptyStateSecondaryActions>\n      )}\n      {secondaryActions && <EmptyStateSecondaryActions>{secondaryActions}</EmptyStateSecondaryActions>}\n    </EmptyState>\n  </Bullseye>\n);\n\nFinishedStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  successfulMessage: PropTypes.node.isRequired,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node.isRequired,\n  title: PropTypes.node,\n  linkText: PropTypes.node,\n  secondaryActions: PropTypes.node,\n};\n\nFinishedStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.succConfiguration\" defaultMessage=\"Configuration successful\" />,\n  linkText: <FormattedMessage id=\"wizard.toSources\" defaultMessage=\"Take me to sources\" />,\n};\n\nexport default FinishedStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody';\nimport { EmptyStateSecondaryActions } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateSecondaryActions';\nimport { Bullseye } from '@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\n\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\n\nconst TimeoutStep = ({ onClose, returnButtonTitle, title, secondaryActions }) => {\n  const intl = useIntl();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n        <EmptyStateIcon icon={WrenchIcon} color=\"var(--pf-global--Color--200)\" className=\"pf-u-mb-0\" />\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n          {title}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage(\n            {\n              id: 'wizard.uncompleteConfigurationDescription',\n              defaultMessage:\n                'We are still working to confirm credentials and app settings.{newLine}To track progress, check the Status column in the Sources table.',\n            },\n            { newLine: <br key=\"br\" /> }\n          )}\n        </EmptyStateBody>\n        <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n          {returnButtonTitle}\n        </Button>\n        {secondaryActions && <EmptyStateSecondaryActions>{secondaryActions}</EmptyStateSecondaryActions>}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nTimeoutStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  returnButtonTitle: PropTypes.node.isRequired,\n  title: PropTypes.node,\n  secondaryActions: PropTypes.node,\n};\n\nTimeoutStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.uncompleteConfigurationTitle\" defaultMessage=\"Configuration in progress\" />,\n};\n\nexport default TimeoutStep;\n","const computeSourceError = (source, intl) =>\n  source.applications?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  source.endpoint?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  source.authentications?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  intl.formatMessage({ id: 'wizard.unknownError', defaultMessage: 'Unknown error' });\n\nexport default computeSourceError;\n","const computeSourcesUrl = () => (insights.chrome.isBeta() ? `/beta/settings/sources` : `/settings/sources`);\n\nexport default computeSourcesUrl;\n"],"sourceRoot":""}