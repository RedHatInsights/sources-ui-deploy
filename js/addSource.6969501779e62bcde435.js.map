{"version":3,"sources":["webpack://sources-ui/./src/addSourceWizard/addSourceWizard/SourceAddModal.js","webpack://sources-ui/./src/addSourceWizard/addSourceWizard/EditLink.js","webpack://sources-ui/./src/addSourceWizard/addSourceWizard/FinalWizard.js","webpack://sources-ui/./src/addSourceWizard/api/createSource.js","webpack://sources-ui/./src/addSourceWizard/addSourceWizard/index.js"],"names":["initialValues","schema","sourceTypes","isLoading","reducer","state","type","applicationTypes","container","disableAppSelection","intl","selectedType","initialWizardState","createSchema","filter","filterTypes","filterVendorTypes","filterApps","filterVendorAppTypes","SourceAddModal","isCancelling","onCancel","values","onSubmit","useReducer","stateSourceTypes","dispatch","isMounted","useRef","document","createElement","useIntl","useEffect","current","promises","push","doLoadSourceTypes","doLoadApplicationTypes","Promise","all","then","data","sourceTypesOut","find","types","Object","prototype","hasOwnProperty","call","applicationTypesOut","style","opacity","Wizard","className","isOpen","onClose","title","wizardTitle","description","wizardDescription","steps","name","component","LoadingStep","isFinishedStep","source_type","_formApi","wizardState","propTypes","PropTypes","id","product_name","authentication","endpoint","display_name","defaultProps","EditLink","message","formatMessage","defaultMessage","insights","chrome","getApp","Link","to","Button","variant","target","href","computeSourcesUrl","rel","FinalWizard","step","afterSubmit","afterError","isFinished","isErrored","successfulMessage","hideSourcesButton","returnButtonTitle","reset","createdSource","tryAgain","afterSuccess","useState","isDeletingSource","setIsDeleting","isAfterDeletion","setDeleted","addAnotherSourceButton","onClick","FinishedStep","secondaryActions","customText","computeSourceStatus","ErroredStep","getSourcesApi","removeSource","Component","applications","availability_status_error","TimeoutStep","source_type_id","AmazonFinishedStep","primaryAction","Text","TextContent","cancelTitle","errorMessage","urlOrHost","formData","url","u","URL","scheme","protocol","replace","host","hostname","port","path","pathname","error","console","log","parseUrl","doCreateSource","timetoutedApps","x","createSource","source","sourceDataOut","endPointPort","parseInt","endpointData","default","source_id","isNaN","undefined","createEndpoint","resolve","application","application_type_id","NO_APPLICATION_VALUE","applicationData","createApplication","endpointDataOut","applicationDataOut","authenticationData","resource_id","resource_type","createAuthentication","authenticationDataOut","authAppData","application_id","authentication_id","createAuthApp","checkAvailabilitySource","timeout","includes","checkAppAvailability","handleError","prepareInitialValues","isSubmitted","toString","AddSourceWizard","submitCallback","formValues","timeoutedApps","CloseModal","onExit","onStay","isEmpty","AddSourceButton","props","setIsOpen"],"mappings":"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","file":"js/addSource.6969501779e62bcde435.js","sourcesContent":["import React, { useRef, useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Wizard } from '@patternfly/react-core/dist/esm/components/Wizard/Wizard';\n\nimport SourcesFormRenderer from '../sourceFormRenderer/index';\nimport createSchema from './SourceAddSchema';\nimport { doLoadSourceTypes, doLoadApplicationTypes } from '../api/index';\nimport LoadingStep from './steps/LoadingStep';\nimport { wizardDescription, wizardTitle } from '../utilities/stringConstants';\n\nimport filterApps, { filterVendorAppTypes } from '../utilities/filterApps';\nimport filterTypes, { filterVendorTypes } from '../utilities/filterTypes';\n\nconst initialValues = {\n  schema: {},\n  sourceTypes: [],\n  isLoading: true,\n};\n\nconst reducer = (\n  state,\n  { type, sourceTypes, applicationTypes, container, disableAppSelection, intl, selectedType, initialWizardState }\n) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        schema: createSchema(\n          sourceTypes.filter(filterTypes).filter(filterVendorTypes),\n          applicationTypes.filter(filterApps).filter(filterVendorAppTypes(sourceTypes)),\n          disableAppSelection,\n          container,\n          intl,\n          selectedType,\n          initialWizardState\n        ),\n        isLoading: false,\n        sourceTypes,\n      };\n  }\n};\n\nconst SourceAddModal = ({\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  isCancelling,\n  onCancel,\n  values,\n  onSubmit,\n  selectedType,\n  initialWizardState,\n}) => {\n  const [{ schema, sourceTypes: stateSourceTypes, isLoading }, dispatch] = useReducer(reducer, initialValues);\n  const isMounted = useRef(false);\n  const container = useRef(document.createElement('div'));\n  const intl = useIntl();\n\n  useEffect(() => {\n    isMounted.current = true;\n\n    const promises = [];\n    if (!sourceTypes) {\n      promises.push(doLoadSourceTypes());\n    }\n\n    if (!applicationTypes) {\n      promises.push(doLoadApplicationTypes());\n    }\n\n    Promise.all(promises).then((data) => {\n      const sourceTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'sourceTypes'));\n      const applicationTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'applicationTypes'));\n\n      if (isMounted.current) {\n        dispatch({\n          type: 'loaded',\n          sourceTypes: sourceTypes || sourceTypesOut.sourceTypes,\n          applicationTypes: applicationTypes || applicationTypesOut.applicationTypes,\n          disableAppSelection,\n          container: container.current,\n          intl,\n          selectedType,\n          initialWizardState,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    container.current.style.opacity = isCancelling ? 0 : 1;\n  }, [isCancelling]);\n\n  if (isLoading) {\n    return (\n      <Wizard\n        className=\"sources\"\n        isOpen={true}\n        onClose={onCancel}\n        title={wizardTitle()}\n        description={wizardDescription()}\n        steps={[\n          {\n            name: 'Loading',\n            component: <LoadingStep onClose={() => onCancel()} />,\n            isFinishedStep: true,\n          },\n        ]}\n      />\n    );\n  }\n\n  return (\n    <SourcesFormRenderer\n      initialValues={{\n        ...values,\n        ...(selectedType && { source_type: selectedType }),\n      }}\n      schema={schema}\n      onSubmit={(values, _formApi, wizardState) => onSubmit(values, stateSourceTypes, wizardState)}\n      onCancel={onCancel}\n    />\n  );\n};\n\nSourceAddModal.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    })\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    })\n  ),\n  values: PropTypes.object,\n  disableAppSelection: PropTypes.bool,\n  isCancelling: PropTypes.bool,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n};\n\nSourceAddModal.defaultProps = {\n  values: {},\n  disableAppSelection: false,\n};\n\nexport default SourceAddModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\n\nimport computeSourcesUrl from '../utilities/computeSourcesUrl';\n\nconst EditLink = ({ id }) => {\n  const intl = useIntl();\n  const message = intl.formatMessage({ id: 'wizard.editSource', defaultMessage: 'Edit source' });\n\n  if (insights.chrome.getApp() === 'sources') {\n    return (\n      <Link to={`/sources/detail/${id}`}>\n        <Button variant=\"primary\" className=\"pf-u-mt-xl\">\n          {message}\n        </Button>\n      </Link>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"primary\"\n      className=\"pf-u-mt-xl\"\n      component=\"a\"\n      target=\"_blank\"\n      href={`${computeSourcesUrl()}/detail/${id}`}\n      rel=\"noopener noreferrer\"\n    >\n      {message}\n    </Button>\n  );\n};\n\nEditLink.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default EditLink;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Text } from '@patternfly/react-core/dist/esm/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/esm/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { Wizard } from '@patternfly/react-core/dist/esm/components/Wizard/Wizard';\n\nimport FinishedStep from './steps/FinishedStep';\nimport ErroredStep from './steps/ErroredStep';\nimport LoadingStep from './steps/LoadingStep';\nimport TimeoutStep from './steps/TimeoutStep';\nimport AmazonFinishedStep from './steps/AmazonFinishedStep';\n\nimport { wizardDescription, wizardTitle } from '../utilities/stringConstants';\nimport { getSourcesApi } from '../api';\nimport computeSourceStatus from '../utilities/computeSourceStatus';\nimport EditLink from './EditLink';\n\nconst FinalWizard = ({\n  afterSubmit,\n  afterError,\n  isFinished,\n  isErrored,\n  successfulMessage,\n  hideSourcesButton,\n  returnButtonTitle,\n  reset,\n  createdSource = {},\n  tryAgain,\n  afterSuccess,\n  sourceTypes,\n}) => {\n  const [isDeletingSource, setIsDeleting] = useState();\n  const [isAfterDeletion, setDeleted] = useState();\n\n  const intl = useIntl();\n\n  const removeSource = () => {\n    setIsDeleting(true);\n\n    return getSourcesApi()\n      .removeSource(createdSource.id)\n      .then(() => {\n        afterSuccess && afterSuccess();\n        setDeleted(true);\n      })\n      .catch(() => setIsDeleting(false));\n  };\n\n  const addAnotherSourceButton = (\n    <Button variant=\"link\" onClick={reset}>\n      {intl.formatMessage({\n        id: 'wizard.addAnotherSource',\n        defaultMessage: 'Add another source',\n      })}\n    </Button>\n  );\n\n  let step;\n  if (isAfterDeletion) {\n    step = (\n      <FinishedStep\n        onClose={afterSubmit}\n        title={intl.formatMessage({ id: 'wizard.removeSourceSuccessTitle', defaultMessage: 'Removing successful' })}\n        successfulMessage={intl.formatMessage({\n          id: 'wizard.removeSourceSuccessDescription',\n          defaultMessage: 'Source was successfully removed.',\n        })}\n        hideSourcesButton={hideSourcesButton}\n        returnButtonTitle={returnButtonTitle}\n        secondaryActions={addAnotherSourceButton}\n      />\n    );\n  } else if (isDeletingSource) {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.removingSource',\n          defaultMessage: 'Removing source',\n        })}\n      />\n    );\n  } else if (isFinished) {\n    switch (computeSourceStatus(createdSource)) {\n      case 'unavailable':\n        step = (\n          <ErroredStep\n            onClose={afterSubmit}\n            secondaryActions={\n              <Button variant=\"link\" onClick={removeSource}>\n                {intl.formatMessage({ id: 'wizard.removeSource', defaultMessage: 'Remove source' })}\n              </Button>\n            }\n            Component={() => <EditLink id={createdSource.id} />}\n            message={\n              createdSource.applications?.[0]?.availability_status_error ||\n              createdSource.endpoint?.[0]?.availability_status_error ||\n              intl.formatMessage({ id: 'wizard.unknownError', defaultMessage: 'Unknown error' })\n            }\n            title={intl.formatMessage({ id: 'wizard.configurationUnsuccessful', defaultMessage: 'Configuration unsuccessful' })}\n          />\n        );\n        break;\n      case 'timeout':\n        step = (\n          <TimeoutStep onClose={afterSubmit} returnButtonTitle={returnButtonTitle} secondaryActions={addAnotherSourceButton} />\n        );\n        break;\n      default:\n        if (createdSource.source_type_id === sourceTypes.find(({ name }) => name === 'amazon')?.id) {\n          step = <AmazonFinishedStep onClose={afterSubmit} />;\n        } else {\n          step = (\n            <FinishedStep\n              onClose={afterSubmit}\n              successfulMessage={successfulMessage}\n              hideSourcesButton={hideSourcesButton}\n              returnButtonTitle={returnButtonTitle}\n              secondaryActions={addAnotherSourceButton}\n            />\n          );\n        }\n\n        break;\n    }\n  } else if (isErrored) {\n    step = (\n      <ErroredStep\n        onClose={afterError}\n        primaryAction={tryAgain}\n        secondaryActions={\n          <Text\n            component=\"a\"\n            target=\"_blank\"\n            href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n            rel=\"noopener noreferrer\"\n          >\n            {intl.formatMessage({ id: 'wizard.openTicket', defaultMessage: 'Open a support case' })}\n          </Text>\n        }\n        returnButtonTitle={intl.formatMessage({\n          id: 'wizard.retryText',\n          defaultMessage: 'Retry',\n        })}\n      />\n    );\n  } else {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.loadingText',\n          defaultMessage: 'Validating credentials',\n        })}\n        description={\n          <TextContent>\n            <Text className=\"pf-u-mb-md\">\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-a',\n                defaultMessage:\n                  // eslint-disable-next-line max-len\n                  \"This might take some time. You'll receive a notification if you are still in the Sources application when the process completes. Otherwise, you can check the status in the main sources table at any time.\",\n              })}\n            </Text>\n            <Text>\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-b',\n                defaultMessage: 'In the meantime, you can close this window while the validation process continues.',\n              })}\n            </Text>\n          </TextContent>\n        }\n        onClose={afterError}\n        cancelTitle={intl.formatMessage({ id: 'wizard.close', defaultMessage: 'Close' })}\n      />\n    );\n  }\n\n  return (\n    <Wizard\n      className=\"sources\"\n      isOpen={true}\n      onClose={isFinished ? afterSubmit : afterError}\n      title={wizardTitle()}\n      description={wizardDescription()}\n      steps={[\n        {\n          name: 'Finish',\n          component: step,\n          isFinishedStep: true,\n        },\n      ]}\n    />\n  );\n};\n\nFinalWizard.propTypes = {\n  afterSubmit: PropTypes.func.isRequired,\n  afterError: PropTypes.func.isRequired,\n  isFinished: PropTypes.bool.isRequired,\n  isErrored: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node.isRequired,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node.isRequired,\n  errorMessage: PropTypes.node,\n  reset: PropTypes.func,\n  createdSource: PropTypes.object,\n  tryAgain: PropTypes.func,\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default FinalWizard;\n","import { handleError } from './handleError';\n\nimport { getSourcesApi } from './index';\nimport { checkAppAvailability } from './getApplicationStatus';\nimport { NO_APPLICATION_VALUE } from '../utilities/stringConstants';\n\nexport const parseUrl = (url) => {\n  if (!url) {\n    return {};\n  }\n\n  try {\n    const u = new URL(url);\n    return {\n      scheme: u.protocol.replace(/:$/, ''),\n      host: u.hostname,\n      port: u.port,\n      path: u.pathname,\n    };\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n    return {};\n  }\n};\n\nexport const urlOrHost = (formData) => (formData.url ? parseUrl(formData.url) : formData);\n\nexport const handleErrorWrapper = (sourceId) => async (error) => await handleError(error, sourceId);\n\nexport const doCreateSource = async (formData, sourceTypes, timetoutedApps = []) => {\n  let sourceDataOut;\n\n  try {\n    const source_type_id = sourceTypes.find((x) => x.name === formData.source_type).id;\n\n    sourceDataOut = await getSourcesApi().createSource({ ...formData.source, source_type_id });\n\n    const promises = [];\n\n    if (formData.endpoint) {\n      const { scheme, host, port, path } = urlOrHost(formData);\n\n      const endPointPort = parseInt(port, 10);\n\n      const endpointData = {\n        ...formData.endpoint,\n        default: true,\n        source_id: sourceDataOut.id,\n        scheme,\n        host,\n        port: isNaN(endPointPort) ? undefined : endPointPort,\n        path,\n      };\n\n      promises.push(getSourcesApi().createEndpoint(endpointData));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    if (\n      formData.application &&\n      formData.application.application_type_id &&\n      formData.application.application_type_id !== NO_APPLICATION_VALUE\n    ) {\n      const applicationData = {\n        ...formData.application,\n        source_id: sourceDataOut.id,\n      };\n\n      promises.push(getSourcesApi().createApplication(applicationData));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    let [endpointDataOut, applicationDataOut] = await Promise.all(promises);\n\n    let authenticationDataOut;\n\n    if (endpointDataOut || (formData.authentication && applicationDataOut?.id)) {\n      const authenticationData = {\n        ...formData.authentication,\n        resource_id: endpointDataOut?.id || applicationDataOut?.id,\n        resource_type: endpointDataOut?.id ? 'Endpoint' : 'Application',\n        source_id: sourceDataOut.id,\n      };\n\n      authenticationDataOut = await getSourcesApi().createAuthentication(authenticationData);\n    }\n\n    if (authenticationDataOut && applicationDataOut) {\n      const authAppData = {\n        application_id: applicationDataOut.id,\n        authentication_id: authenticationDataOut.id,\n      };\n\n      await getSourcesApi().createAuthApp(authAppData);\n    }\n\n    sourceDataOut?.id && getSourcesApi().checkAvailabilitySource(sourceDataOut.id);\n\n    if (applicationDataOut) {\n      const timeout = timetoutedApps.includes(applicationDataOut.application_type_id) ? 10000 : 0;\n      applicationDataOut = await checkAppAvailability(applicationDataOut.id, timeout);\n    }\n\n    if (endpointDataOut) {\n      endpointDataOut = await checkAppAvailability(endpointDataOut.id, undefined, undefined, 'getEndpoint');\n    }\n\n    return {\n      ...sourceDataOut,\n      endpoint: [endpointDataOut],\n      applications: [applicationDataOut],\n    };\n  } catch (error) {\n    const errorMessage = await handleError(error, sourceDataOut ? sourceDataOut.id : undefined);\n    throw errorMessage;\n  }\n};\n","import React, { useState, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\n\nimport Form from './SourceAddModal';\nimport FinalWizard from './FinalWizard';\n\nimport { doCreateSource } from '../api/createSource';\nimport { wizardTitle } from '../utilities/stringConstants';\nimport CloseModal from './CloseModal';\n\nimport { timeoutedApps } from '../api/constants';\n\nconst prepareInitialValues = (initialValues) => ({\n  isSubmitted: false,\n  isFinished: false,\n  isErrored: false,\n  isCancelling: false,\n  values: initialValues,\n  createdSource: {},\n  error: undefined,\n});\n\nconst reducer = (state, { type, values, data, error, initialValues, sourceTypes }) => {\n  switch (type) {\n    case 'reset':\n      return prepareInitialValues(initialValues);\n    case 'prepareSubmitState':\n      return {\n        ...state,\n        isFinished: false,\n        isErrored: false,\n        error: undefined,\n        isSubmitted: true,\n        values,\n        sourceTypes,\n      };\n    case 'setSubmitted':\n      return { ...state, isFinished: true, createdSource: data };\n    case 'setErrored':\n      return { ...state, isErrored: true, error: error.toString() };\n    case 'onStay':\n      return { ...state, isCancelling: false };\n    case 'showCancelModal':\n      return { ...state, isCancelling: true, values };\n  }\n};\n\nconst AddSourceWizard = ({\n  successfulMessage,\n  isOpen,\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  hideSourcesButton,\n  returnButtonTitle,\n  initialValues,\n  onClose,\n  afterSuccess,\n  selectedType,\n  initialWizardState,\n  submitCallback,\n}) => {\n  const [{ isErrored, isFinished, isSubmitted, values, error, isCancelling, createdSource, ...state }, dispatch] = useReducer(\n    reducer,\n    prepareInitialValues(initialValues)\n  );\n\n  const onSubmit = (formValues, sourceTypes, wizardState) => {\n    dispatch({ type: 'prepareSubmitState', values: formValues, sourceTypes });\n\n    return doCreateSource(formValues, sourceTypes, timeoutedApps(applicationTypes))\n      .then((data) => {\n        afterSuccess && afterSuccess(data);\n        submitCallback && submitCallback({ isSubmitted: true, createdSource: data, sourceTypes });\n        dispatch({ type: 'setSubmitted', data });\n      })\n      .catch((error) => {\n        submitCallback && submitCallback({ isErrored: true, error, values: formValues, sourceTypes, wizardState });\n        dispatch({ type: 'setErrored', error });\n      });\n  };\n\n  const afterSubmit = () => {\n    onClose(undefined, createdSource);\n    dispatch({ type: 'reset', initialValues });\n  };\n\n  const onCancelBeforeExit = (values) => (isEmpty(values) ? onClose({}) : dispatch({ type: 'showCancelModal', values }));\n\n  const onExit = () => onClose(values);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  if (!isSubmitted) {\n    return (\n      <React.Fragment>\n        {isCancelling && <CloseModal onExit={onExit} onStay={() => dispatch({ type: 'onStay' })} />}\n        <Form\n          isCancelling={isCancelling}\n          values={values}\n          onSubmit={onSubmit}\n          onCancel={onCancelBeforeExit}\n          sourceTypes={sourceTypes}\n          applicationTypes={applicationTypes}\n          disableAppSelection={disableAppSelection}\n          selectedType={selectedType}\n          initialWizardState={initialWizardState}\n        />\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <FinalWizard\n      afterSubmit={afterSubmit}\n      afterError={() => onClose({})}\n      isFinished={isFinished}\n      isErrored={isErrored}\n      successfulMessage={successfulMessage}\n      hideSourcesButton={hideSourcesButton}\n      returnButtonTitle={returnButtonTitle}\n      errorMessage={error}\n      reset={() => dispatch({ type: 'reset', initialValues })}\n      createdSource={createdSource}\n      tryAgain={() => onSubmit(values, state.sourceTypes)}\n      afterSuccess={afterSuccess}\n      sourceTypes={state.sourceTypes}\n    />\n  );\n};\n\nAddSourceWizard.propTypes = {\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    })\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    })\n  ),\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node,\n  initialValues: PropTypes.shape({\n    [PropTypes.string]: PropTypes.oneOf([PropTypes.string, PropTypes.array, PropTypes.number, PropTypes.bool]),\n  }),\n  disableAppSelection: PropTypes.bool,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n  submitCallback: PropTypes.func,\n};\n\nAddSourceWizard.defaultProps = {\n  successfulMessage: <FormattedMessage id=\"wizard.successfulMessage\" defaultMessage=\"Your source was successfully added.\" />,\n  initialValues: {},\n  returnButtonTitle: <FormattedMessage id=\"wizard.goBackToSources\" defaultMessage=\"Go back to Sources\" />,\n};\n\nconst AddSourceButton = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Button variant=\"primary\" onClick={() => setIsOpen(true)}>\n        {wizardTitle()}\n      </Button>\n      <AddSourceWizard isOpen={isOpen} onClose={() => setIsOpen(false)} {...props} />\n    </React.Fragment>\n  );\n};\n\nexport { AddSourceButton, AddSourceWizard };\n"],"sourceRoot":""}