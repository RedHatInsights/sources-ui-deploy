{"version":3,"sources":["webpack://sources-ui/./src/components/FormComponents/Authentication.js","webpack://sources-ui/./src/components/addSourceWizard/SourceAddModal.js","webpack://sources-ui/./src/components/addSourceWizard/EditLink.js","webpack://sources-ui/./src/components/addSourceWizard/FinalWizard.js","webpack://sources-ui/./src/api/createSuperSource.js","webpack://sources-ui/./src/api/createSource.js","webpack://sources-ui/./src/components/addSourceWizard/index.js"],"names":["rest","intl","useIntl","authentication","useFormApi","getState","values","doNotRequirePassword","validate","filter","type","validatorTypes","componentProps","id","isRequired","helperText","formatMessage","defaultMessage","label","Component","componentMapper","componentTypes","initialValues","schema","sourceTypes","isLoading","reducer","state","applicationTypes","container","disableAppSelection","selectedType","initialWizardState","createSchema","filterTypes","filterVendorTypes","filterApps","filterVendorAppTypes","FormTemplateWrapper","props","showFormControls","SourceAddModal","isCancelling","onCancel","onSubmit","useReducer","stateSourceTypes","dispatch","isMounted","useRef","document","createElement","useEffect","current","promises","push","doLoadSourceTypes","doLoadApplicationTypes","Promise","all","then","data","sourceTypesOut","find","types","Object","prototype","hasOwnProperty","call","applicationTypesOut","style","opacity","Wizard","className","isOpen","onClose","title","wizardTitle","description","wizardDescription","steps","name","component","LoadingStep","isFinishedStep","SourcesFormRenderer","source_type","_formApi","wizardState","FormTemplate","subscription","Authentication","propTypes","PropTypes","product_name","endpoint","display_name","defaultProps","EditLink","message","insights","chrome","getApp","Link","to","Button","variant","target","href","computeSourcesUrl","rel","FinalWizard","step","afterSubmit","afterError","isFinished","isErrored","successfulMessage","hideSourcesButton","returnButtonTitle","reset","createdSource","tryAgain","afterSuccess","useState","isDeletingSource","setIsDeleting","isAfterDeletion","setDeleted","addAnotherSourceButton","onClick","FinishedStep","secondaryActions","customText","computeSourceStatus","ErroredStep","getSourcesApi","deleteSource","computeSourceError","TimeoutStep","source_type_id","AmazonFinishedStep","primaryAction","Text","TextContent","cancelTitle","errorMessage","formData","_sourceTypes","_timetoutedApps","startDate","Date","bulkCreate","sources","source","source_type_name","authentications","resource_name","resource_type","applications","map","appId","application_type_id","source_name","sourceData","checkSourceStatus","checkStatusPromises","checkAppAvailability","undefined","forEach","authenticationDataOut","handleError","urlOrHost","url","u","URL","scheme","protocol","replace","host","hostname","port","path","pathname","error","console","log","parseUrl","doCreateSource","timetoutedApps","x","createSource","sourceDataOut","endPointPort","parseInt","endpointData","default","source_id","isNaN","createEndpoint","resolve","application","NO_APPLICATION_VALUE","applicationData","createApplication","endpointDataOut","applicationDataOut","authenticationData","resource_id","createAuthentication","authAppData","application_id","authentication_id","createAuthApp","checkAvailabilitySource","timeout","includes","prepareInitialValues","isSubmitted","toString","AddSourceWizard","submitCallback","formValues","isSuperKey","createSuperSource","timeoutedApps","CloseModal","onExit","onStay","isEmpty","AddSourceButton","setIsOpen"],"mappings":"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","file":"js/addSource.7de6170515e618ff0a09.js","sourcesContent":["import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/esm/component-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/esm/component-mapper';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/esm/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/esm/validator-types';\nimport { useIntl } from 'react-intl';\n\nconst Authentication = (rest) => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  const { authentication } = formOptions.getState().values;\n\n  const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n  const componentProps = {\n    ...rest,\n    ...(authentication && authentication.id\n      ? {\n          isRequired: false,\n          helperText: intl.formatMessage(\n            {\n              id: 'wizard.changeAuthHelper',\n              defaultMessage: 'Changing this resets your current {label}.',\n            },\n            { label: rest.label }\n          ),\n          validate: doNotRequirePassword,\n        }\n      : {}),\n  };\n\n  const Component = componentMapper[componentTypes.TEXT_FIELD];\n\n  return <Component {...componentProps} />;\n};\n\nexport default Authentication;\n","import React, { useRef, useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/esm/form-template';\n\nimport { Wizard } from '@patternfly/react-core/dist/esm/components/Wizard/Wizard';\n\nimport createSchema from './SourceAddSchema';\nimport { doLoadSourceTypes, doLoadApplicationTypes } from '../../api/wizardHelpers';\nimport { wizardDescription, wizardTitle } from './stringConstants';\nimport filterApps, { filterVendorAppTypes } from '../../utilities/filterApps';\nimport filterTypes, { filterVendorTypes } from '../../utilities/filterTypes';\nimport Authentication from '../FormComponents/Authentication';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport LoadingStep from '../steps/LoadingStep';\n\nconst initialValues = {\n  schema: {},\n  sourceTypes: [],\n  isLoading: true,\n};\n\nconst reducer = (\n  state,\n  { type, sourceTypes, applicationTypes, container, disableAppSelection, intl, selectedType, initialWizardState }\n) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        schema: createSchema(\n          sourceTypes.filter(filterTypes).filter(filterVendorTypes),\n          applicationTypes.filter(filterApps).filter(filterVendorAppTypes(sourceTypes)),\n          disableAppSelection,\n          container,\n          intl,\n          selectedType,\n          initialWizardState\n        ),\n        isLoading: false,\n        sourceTypes,\n      };\n  }\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst SourceAddModal = ({\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  isCancelling,\n  onCancel,\n  values,\n  onSubmit,\n  selectedType,\n  initialWizardState,\n}) => {\n  const [{ schema, sourceTypes: stateSourceTypes, isLoading }, dispatch] = useReducer(reducer, initialValues);\n  const isMounted = useRef(false);\n  const container = useRef(document.createElement('div'));\n  const intl = useIntl();\n\n  useEffect(() => {\n    isMounted.current = true;\n\n    const promises = [];\n    if (!sourceTypes) {\n      promises.push(doLoadSourceTypes());\n    }\n\n    if (!applicationTypes) {\n      promises.push(doLoadApplicationTypes());\n    }\n\n    Promise.all(promises).then((data) => {\n      const sourceTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'sourceTypes'));\n      const applicationTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'applicationTypes'));\n\n      if (isMounted.current) {\n        dispatch({\n          type: 'loaded',\n          sourceTypes: sourceTypes || sourceTypesOut.sourceTypes,\n          applicationTypes: applicationTypes || applicationTypesOut.applicationTypes,\n          disableAppSelection,\n          container: container.current,\n          intl,\n          selectedType,\n          initialWizardState,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    container.current.style.opacity = isCancelling ? 0 : 1;\n  }, [isCancelling]);\n\n  if (isLoading) {\n    return (\n      <Wizard\n        className=\"sources\"\n        isOpen={true}\n        onClose={onCancel}\n        title={wizardTitle()}\n        description={wizardDescription()}\n        steps={[\n          {\n            name: 'Loading',\n            component: <LoadingStep onClose={() => onCancel()} />,\n            isFinishedStep: true,\n          },\n        ]}\n      />\n    );\n  }\n\n  return (\n    <SourcesFormRenderer\n      initialValues={{\n        ...values,\n        ...(selectedType && { source_type: selectedType }),\n      }}\n      schema={schema}\n      onSubmit={(values, _formApi, wizardState) => onSubmit(values, stateSourceTypes, wizardState)}\n      onCancel={onCancel}\n      FormTemplate={FormTemplateWrapper}\n      subscription={{ values: true }}\n      componentMapper={{\n        authentication: Authentication,\n      }}\n    />\n  );\n};\n\nSourceAddModal.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    })\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    })\n  ),\n  values: PropTypes.object,\n  disableAppSelection: PropTypes.bool,\n  isCancelling: PropTypes.bool,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n};\n\nSourceAddModal.defaultProps = {\n  values: {},\n  disableAppSelection: false,\n};\n\nexport default SourceAddModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport computeSourcesUrl from '../../utilities/computeSourcesUrl';\n\nconst EditLink = ({ id }) => {\n  const intl = useIntl();\n  const message = intl.formatMessage({ id: 'wizard.editSource', defaultMessage: 'Edit source' });\n\n  if (insights.chrome.getApp() === 'sources') {\n    return (\n      <Link to={`/sources/detail/${id}`}>\n        <Button variant=\"primary\" className=\"pf-u-mt-xl\">\n          {message}\n        </Button>\n      </Link>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"primary\"\n      className=\"pf-u-mt-xl\"\n      component=\"a\"\n      target=\"_blank\"\n      href={`${computeSourcesUrl()}/detail/${id}`}\n      rel=\"noopener noreferrer\"\n    >\n      {message}\n    </Button>\n  );\n};\n\nEditLink.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default EditLink;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Text } from '@patternfly/react-core/dist/esm/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/esm/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { Wizard } from '@patternfly/react-core/dist/esm/components/Wizard/Wizard';\n\nimport { wizardDescription, wizardTitle } from './stringConstants';\nimport { getSourcesApi } from '../../api/entities';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport EditLink from './EditLink';\nimport computeSourceError from '../../utilities/computeSourceError';\n\nimport FinishedStep from '../steps/FinishedStep';\nimport LoadingStep from '../steps/LoadingStep';\nimport ErroredStep from '../steps/ErroredStep';\nimport TimeoutStep from '../steps/TimeoutStep';\nimport AmazonFinishedStep from '../steps/AmazonFinishedStep';\n\nconst FinalWizard = ({\n  afterSubmit,\n  afterError,\n  isFinished,\n  isErrored,\n  successfulMessage,\n  hideSourcesButton,\n  returnButtonTitle,\n  reset,\n  createdSource = {},\n  tryAgain,\n  afterSuccess,\n  sourceTypes,\n}) => {\n  const [isDeletingSource, setIsDeleting] = useState();\n  const [isAfterDeletion, setDeleted] = useState();\n\n  const intl = useIntl();\n\n  const removeSource = () => {\n    setIsDeleting(true);\n\n    return getSourcesApi()\n      .deleteSource(createdSource.id)\n      .then(() => {\n        afterSuccess && afterSuccess();\n        setDeleted(true);\n      })\n      .catch(() => setIsDeleting(false));\n  };\n\n  const addAnotherSourceButton = (\n    <Button variant=\"link\" onClick={reset}>\n      {intl.formatMessage({\n        id: 'wizard.addAnotherSource',\n        defaultMessage: 'Add another source',\n      })}\n    </Button>\n  );\n\n  let step;\n  if (isAfterDeletion) {\n    step = (\n      <FinishedStep\n        onClose={afterSubmit}\n        title={intl.formatMessage({ id: 'wizard.removeSourceSuccessTitle', defaultMessage: 'Removing successful' })}\n        successfulMessage={intl.formatMessage({\n          id: 'wizard.removeSourceSuccessDescription',\n          defaultMessage: 'Source was successfully removed.',\n        })}\n        hideSourcesButton={hideSourcesButton}\n        returnButtonTitle={returnButtonTitle}\n        secondaryActions={addAnotherSourceButton}\n      />\n    );\n  } else if (isDeletingSource) {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.removingSource',\n          defaultMessage: 'Removing source',\n        })}\n      />\n    );\n  } else if (isFinished) {\n    switch (computeSourceStatus(createdSource)) {\n      case 'unavailable':\n        step = (\n          <ErroredStep\n            onClose={afterSubmit}\n            secondaryActions={\n              <Button variant=\"link\" onClick={removeSource}>\n                {intl.formatMessage({ id: 'wizard.removeSource', defaultMessage: 'Remove source' })}\n              </Button>\n            }\n            Component={() => <EditLink id={createdSource.id} />}\n            message={computeSourceError(createdSource, intl)}\n            title={intl.formatMessage({ id: 'wizard.configurationUnsuccessful', defaultMessage: 'Configuration unsuccessful' })}\n          />\n        );\n        break;\n      case 'timeout':\n        step = (\n          <TimeoutStep onClose={afterSubmit} returnButtonTitle={returnButtonTitle} secondaryActions={addAnotherSourceButton} />\n        );\n        break;\n      default:\n        if (createdSource.source_type_id === sourceTypes.find(({ name }) => name === 'amazon')?.id) {\n          step = <AmazonFinishedStep onClose={afterSubmit} />;\n        } else {\n          step = (\n            <FinishedStep\n              onClose={afterSubmit}\n              successfulMessage={successfulMessage}\n              hideSourcesButton={hideSourcesButton}\n              returnButtonTitle={returnButtonTitle}\n              secondaryActions={addAnotherSourceButton}\n            />\n          );\n        }\n\n        break;\n    }\n  } else if (isErrored) {\n    step = (\n      <ErroredStep\n        onClose={afterError}\n        primaryAction={tryAgain}\n        secondaryActions={\n          <Text\n            component=\"a\"\n            target=\"_blank\"\n            href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n            rel=\"noopener noreferrer\"\n          >\n            {intl.formatMessage({ id: 'wizard.openTicket', defaultMessage: 'Open a support case' })}\n          </Text>\n        }\n        returnButtonTitle={intl.formatMessage({\n          id: 'wizard.retryText',\n          defaultMessage: 'Retry',\n        })}\n      />\n    );\n  } else {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.loadingText',\n          defaultMessage: 'Validating credentials',\n        })}\n        description={\n          <TextContent>\n            <Text className=\"pf-u-mb-md\">\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-a',\n                defaultMessage:\n                  // eslint-disable-next-line max-len\n                  \"This might take some time. You'll receive a notification if you are still in the Sources application when the process completes. Otherwise, you can check the status in the main sources table at any time.\",\n              })}\n            </Text>\n            <Text>\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-b',\n                defaultMessage: 'In the meantime, you can close this window while the validation process continues.',\n              })}\n            </Text>\n          </TextContent>\n        }\n        onClose={afterError}\n        cancelTitle={intl.formatMessage({ id: 'wizard.close', defaultMessage: 'Close' })}\n      />\n    );\n  }\n\n  return (\n    <Wizard\n      className=\"sources\"\n      isOpen={true}\n      onClose={isFinished ? afterSubmit : afterError}\n      title={wizardTitle()}\n      description={wizardDescription()}\n      steps={[\n        {\n          name: 'Finish',\n          component: step,\n          isFinishedStep: true,\n        },\n      ]}\n    />\n  );\n};\n\nFinalWizard.propTypes = {\n  afterSubmit: PropTypes.func.isRequired,\n  afterError: PropTypes.func.isRequired,\n  isFinished: PropTypes.bool.isRequired,\n  isErrored: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node.isRequired,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node.isRequired,\n  errorMessage: PropTypes.node,\n  reset: PropTypes.func,\n  createdSource: PropTypes.object,\n  tryAgain: PropTypes.func,\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default FinalWizard;\n","import { getSourcesApi } from './entities';\nimport checkSourceStatus from './checkSourceStatus';\nimport { checkAppAvailability } from './getApplicationStatus';\nimport handleError from './handleError';\n\nconst createSuperSource = async (formData, _sourceTypes, _timetoutedApps) => {\n  try {\n    const startDate = new Date();\n\n    const sourceData = await getSourcesApi().bulkCreate({\n      sources: [{ ...formData.source, source_type_name: formData.source_type }],\n      authentications: [{ ...formData.authentication, resource_name: formData.source.name, resource_type: 'source' }],\n      applications: formData.applications.map((appId) => ({\n        application_type_id: appId,\n        source_name: formData.source.name,\n      })),\n    });\n\n    await checkSourceStatus(sourceData.sources[0].id);\n\n    const checkStatusPromises = [];\n\n    checkStatusPromises.push(\n      checkAppAvailability(sourceData.authentications[0].id, undefined, undefined, 'showAuthentication', startDate)\n    );\n\n    sourceData.applications.forEach(({ id }) =>\n      checkStatusPromises.push(checkAppAvailability(id, undefined, undefined, 'showApplication', startDate))\n    );\n\n    const [authenticationDataOut, ...applications] = await Promise.all(checkStatusPromises);\n\n    return {\n      ...sourceData,\n      ...sourceData.sources[0],\n      authentications: [authenticationDataOut],\n      applications,\n    };\n  } catch (error) {\n    const errorMessage = await handleError(error);\n    throw errorMessage;\n  }\n};\n\nexport default createSuperSource;\n","import { handleError } from './handleError';\n\nimport { getSourcesApi } from './entities';\nimport { checkAppAvailability } from './getApplicationStatus';\nimport { NO_APPLICATION_VALUE } from '../components/addSourceWizard/stringConstants';\n\nexport const parseUrl = (url) => {\n  if (!url) {\n    return {};\n  }\n\n  try {\n    const u = new URL(url);\n    return {\n      scheme: u.protocol.replace(/:$/, ''),\n      host: u.hostname,\n      port: u.port,\n      path: u.pathname,\n    };\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n    return {};\n  }\n};\n\nexport const urlOrHost = (formData) => (formData.url ? parseUrl(formData.url) : formData);\n\nexport const handleErrorWrapper = (sourceId) => async (error) => await handleError(error, sourceId);\n\nexport const doCreateSource = async (formData, sourceTypes, timetoutedApps = []) => {\n  let sourceDataOut;\n\n  try {\n    const source_type_id = sourceTypes.find((x) => x.name === formData.source_type).id;\n\n    sourceDataOut = await getSourcesApi().createSource({ ...formData.source, source_type_id });\n\n    const promises = [];\n\n    if (formData.endpoint) {\n      const { scheme, host, port, path } = urlOrHost(formData);\n\n      const endPointPort = parseInt(port, 10);\n\n      const endpointData = {\n        ...formData.endpoint,\n        default: true,\n        source_id: sourceDataOut.id,\n        scheme,\n        host,\n        port: isNaN(endPointPort) ? undefined : endPointPort,\n        path,\n      };\n\n      promises.push(getSourcesApi().createEndpoint(endpointData));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    if (\n      formData.application &&\n      formData.application.application_type_id &&\n      formData.application.application_type_id !== NO_APPLICATION_VALUE\n    ) {\n      const applicationData = {\n        ...formData.application,\n        source_id: sourceDataOut.id,\n      };\n\n      promises.push(getSourcesApi().createApplication(applicationData));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    let [endpointDataOut, applicationDataOut] = await Promise.all(promises);\n\n    let authenticationDataOut;\n\n    if (endpointDataOut || (formData.authentication && applicationDataOut?.id)) {\n      const authenticationData = {\n        ...formData.authentication,\n        resource_id: endpointDataOut?.id || applicationDataOut?.id,\n        resource_type: endpointDataOut?.id ? 'Endpoint' : 'Application',\n        source_id: sourceDataOut.id,\n      };\n\n      authenticationDataOut = await getSourcesApi().createAuthentication(authenticationData);\n    }\n\n    if (authenticationDataOut && applicationDataOut) {\n      const authAppData = {\n        application_id: applicationDataOut.id,\n        authentication_id: authenticationDataOut.id,\n      };\n\n      await getSourcesApi().createAuthApp(authAppData);\n    }\n\n    sourceDataOut?.id && getSourcesApi().checkAvailabilitySource(sourceDataOut.id);\n\n    if (applicationDataOut) {\n      const timeout = timetoutedApps.includes(applicationDataOut.application_type_id) ? 10000 : 0;\n      applicationDataOut = await checkAppAvailability(applicationDataOut.id, timeout);\n    }\n\n    if (endpointDataOut) {\n      endpointDataOut = await checkAppAvailability(endpointDataOut.id, undefined, undefined, 'getEndpoint');\n    }\n\n    return {\n      ...sourceDataOut,\n      endpoint: [endpointDataOut],\n      applications: [applicationDataOut],\n    };\n  } catch (error) {\n    const errorMessage = await handleError(error, sourceDataOut ? sourceDataOut.id : undefined);\n    throw errorMessage;\n  }\n};\n","import React, { useState, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\n\nimport Form from './SourceAddModal';\nimport FinalWizard from './FinalWizard';\n\nimport { wizardTitle } from './stringConstants';\n\nimport isSuperKey from '../../utilities/isSuperKey';\nimport { timeoutedApps } from '../../utilities/constants';\nimport createSuperSource from '../../api/createSuperSource';\nimport { doCreateSource } from '../../api/createSource';\nimport CloseModal from '../CloseModal';\n\nconst prepareInitialValues = (initialValues) => ({\n  isSubmitted: false,\n  isFinished: false,\n  isErrored: false,\n  isCancelling: false,\n  values: initialValues,\n  createdSource: {},\n  error: undefined,\n});\n\nconst reducer = (state, { type, values, data, error, initialValues, sourceTypes }) => {\n  switch (type) {\n    case 'reset':\n      return prepareInitialValues(initialValues);\n    case 'prepareSubmitState':\n      return {\n        ...state,\n        isFinished: false,\n        isErrored: false,\n        error: undefined,\n        isSubmitted: true,\n        values,\n        sourceTypes,\n      };\n    case 'setSubmitted':\n      return { ...state, isFinished: true, createdSource: data };\n    case 'setErrored':\n      return { ...state, isErrored: true, error: error.toString() };\n    case 'onStay':\n      return { ...state, isCancelling: false };\n    case 'showCancelModal':\n      return { ...state, isCancelling: true, values };\n  }\n};\n\nconst AddSourceWizard = ({\n  successfulMessage,\n  isOpen,\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  hideSourcesButton,\n  returnButtonTitle,\n  initialValues,\n  onClose,\n  afterSuccess,\n  selectedType,\n  initialWizardState,\n  submitCallback,\n}) => {\n  const [{ isErrored, isFinished, isSubmitted, values, error, isCancelling, createdSource, ...state }, dispatch] = useReducer(\n    reducer,\n    prepareInitialValues(initialValues)\n  );\n\n  const onSubmit = (formValues, sourceTypes, wizardState) => {\n    dispatch({ type: 'prepareSubmitState', values: formValues, sourceTypes });\n\n    const fn = isSuperKey(formValues.source) ? createSuperSource : doCreateSource;\n\n    return fn(formValues, sourceTypes, timeoutedApps(applicationTypes))\n      .then((data) => {\n        afterSuccess && afterSuccess(data);\n        submitCallback && submitCallback({ isSubmitted: true, createdSource: data, sourceTypes });\n        dispatch({ type: 'setSubmitted', data });\n      })\n      .catch((error) => {\n        submitCallback && submitCallback({ isErrored: true, error, values: formValues, sourceTypes, wizardState });\n        dispatch({ type: 'setErrored', error });\n      });\n  };\n\n  const reset = () => dispatch({ type: 'reset', initialValues });\n\n  const afterSubmit = () => {\n    onClose(undefined, createdSource);\n    reset();\n  };\n\n  const onCancelBeforeExit = (values) => (isEmpty(values) ? onClose({}) : dispatch({ type: 'showCancelModal', values }));\n\n  const onExit = () => onClose(values);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  if (!isSubmitted) {\n    return (\n      <React.Fragment>\n        {isCancelling && <CloseModal onExit={onExit} onStay={() => dispatch({ type: 'onStay' })} />}\n        <Form\n          isCancelling={isCancelling}\n          values={values}\n          onSubmit={onSubmit}\n          onCancel={onCancelBeforeExit}\n          sourceTypes={sourceTypes}\n          applicationTypes={applicationTypes}\n          disableAppSelection={disableAppSelection}\n          selectedType={selectedType}\n          initialWizardState={initialWizardState}\n        />\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <FinalWizard\n      afterSubmit={afterSubmit}\n      afterError={() => onClose({})}\n      isFinished={isFinished}\n      isErrored={isErrored}\n      successfulMessage={successfulMessage}\n      hideSourcesButton={hideSourcesButton}\n      returnButtonTitle={returnButtonTitle}\n      errorMessage={error}\n      reset={reset}\n      createdSource={createdSource}\n      tryAgain={() => onSubmit(values, state.sourceTypes)}\n      afterSuccess={afterSuccess}\n      sourceTypes={state.sourceTypes}\n    />\n  );\n};\n\nAddSourceWizard.propTypes = {\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    })\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    })\n  ),\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node,\n  initialValues: PropTypes.shape({\n    [PropTypes.string]: PropTypes.oneOf([PropTypes.string, PropTypes.array, PropTypes.number, PropTypes.bool]),\n  }),\n  disableAppSelection: PropTypes.bool,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n  submitCallback: PropTypes.func,\n};\n\nAddSourceWizard.defaultProps = {\n  successfulMessage: <FormattedMessage id=\"wizard.successfulMessage\" defaultMessage=\"Your source was successfully added.\" />,\n  initialValues: {},\n  returnButtonTitle: <FormattedMessage id=\"wizard.goBackToSources\" defaultMessage=\"Go back to Sources\" />,\n};\n\nconst AddSourceButton = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Button variant=\"primary\" onClick={() => setIsOpen(true)}>\n        {wizardTitle()}\n      </Button>\n      <AddSourceWizard isOpen={isOpen} onClose={() => setIsOpen(false)} {...props} />\n    </React.Fragment>\n  );\n};\n\nexport { AddSourceButton, AddSourceWizard };\n"],"sourceRoot":""}