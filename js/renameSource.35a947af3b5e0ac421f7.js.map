{"version":3,"sources":["webpack://sources-ui/./src/components/SourceDetail/SourceRenameModal.js"],"names":["SourceRenameModal","source","useSource","intl","useIntl","dispatch","useDispatch","useHistory","push","returnToSource","replaceRouteId","routes","id","formatMessage","defaultMessage","props","name","renameSource","fields","label","component","componentTypes","validate","value","asyncValidatorDebounced","type","validatorTypes","REQUIRED","isRequired","resolveProps","validated","initialValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,MAAMC,MAAM,GAAGC,2DAAS,EAAxB;AACA,MAAMC,IAAI,GAAGC,oDAAO,EAApB;AACA,MAAMC,QAAQ,GAAGC,wDAAW,EAA5B;;AAH8B,oBAIbC,4DAAU,EAJG;AAAA,MAItBC,IAJsB,eAItBA,IAJsB;;AAM9B,MAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,WAAMD,IAAI,CAACE,wDAAc,CAACC,+DAAD,EAA4BV,MAAM,CAACW,EAAnC,CAAf,CAAV;AAAA,GAAvB;;AAEA,sBACE,2DAAC,0FAAD;AACE,SAAK,EAAET,IAAI,CAACU,aAAL,CAAmB;AAAED,QAAE,EAAE,qBAAN;AAA6BE,oBAAc,EAAE;AAA7C,KAAnB,CADT;AAEE,eAAW,EAAEX,IAAI,CAACU,aAAL,CAAmB;AAAED,QAAE,EAAE,2BAAN;AAAmCE,oBAAc,EAAE;AAAnD,KAAnB,CAFf;AAGE,WAAO,EAAEL,cAHX;AAIE,UAAM,MAJR;AAKE,WAAO,EAAC;AALV,kBAOE,2DAAC,oEAAD;AACE,gBAAY,EAAE,sBAACM,KAAD;AAAA,0BACZ,2DAAC,mGAAD,4EACMA,KADN;AAEE,qBAAa,EAAE,CAAC,UAAD,EAAa,YAAb,EAA2B,SAA3B,CAFjB;AAGE,mBAAW,EAAEZ,IAAI,CAACU,aAAL,CAAmB;AAAED,YAAE,EAAE,cAAN;AAAsBE,wBAAc,EAAE;AAAtC,SAAnB;AAHf,SADY;AAAA,KADhB;AAQE,YAAQ,EAAE,wBAAc;AAAA,UAAXE,IAAW,QAAXA,IAAW;AACtBP,oBAAc;AAEd,aAAOJ,QAAQ,CACbY,qEAAY,CACVhB,MAAM,CAACW,EADG,EAEVI,IAFU,EAGVb,IAAI,CAACU,aAAL,CAAmB;AAAED,UAAE,EAAE,qBAAN;AAA6BE,sBAAc,EAAE;AAA7C,OAAnB,CAHU,CADC,CAAf;AAOD,KAlBH;AAmBE,YAAQ,EAAEL,cAnBZ;AAoBE,UAAM,EAAE;AACNS,YAAM,EAAE,CACN;AACEF,YAAI,EAAE,MADR;AAEEG,aAAK,EAAEhB,IAAI,CAACU,aAAL,CAAmB;AACxBD,YAAE,EAAE,cADoB;AAExBE,wBAAc,EAAE;AAFQ,SAAnB,CAFT;AAMEM,iBAAS,EAAEC,+GANb;AAOEC,gBAAQ,EAAE,CAAC,UAACC,KAAD;AAAA,iBAAWC,+HAAuB,CAACD,KAAD,EAAQtB,MAAM,CAACW,EAAf,EAAmBT,IAAnB,CAAlC;AAAA,SAAD,EAA6D;AAAEsB,cAAI,EAAEC,6GAAuBC;AAA/B,SAA7D,CAPZ;AAQEC,kBAAU,EAAE,IARd;AASEC,oBAAY,EAAEC,qGAThB;AAUEC,oBAAY,EAAE9B,MAAM,CAACe;AAVvB,OADM;AADF;AApBV,IAPF,CADF;AA+CD,CAvDD;;AAyDA,iEAAehB,iBAAf,E","file":"js/renameSource.35a947af3b5e0ac421f7.js","sourcesContent":["import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { Modal } from '@patternfly/react-core/dist/esm/components/Modal/Modal';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/esm/component-types';\nimport { asyncValidatorDebounced } from '@redhat-cloud-services/frontend-components-sources/esm/SourceAddSchema';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/esm/validator-types';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/esm/form-template';\nimport validated from '@redhat-cloud-services/frontend-components-sources/esm/validated';\n\nimport { useSource } from '../../hooks/useSource';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport { replaceRouteId, routes } from '../../Routes';\nimport { renameSource } from '../../redux/sources/actions';\n\nconst SourceRenameModal = () => {\n  const source = useSource();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n\n  const returnToSource = () => push(replaceRouteId(routes.sourcesDetail.path, source.id));\n\n  return (\n    <Modal\n      title={intl.formatMessage({ id: 'sources.renameTitle', defaultMessage: 'Rename source' })}\n      description={intl.formatMessage({ id: 'sources.renameDescription', defaultMessage: 'Enter a new name for your source.' })}\n      onClose={returnToSource}\n      isOpen\n      variant=\"medium\"\n    >\n      <SourcesFormRenderer\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            disableSubmit={['pristine', 'validating', 'invalid']}\n            submitLabel={intl.formatMessage({ id: 'sources.save', defaultMessage: 'Save' })}\n          />\n        )}\n        onSubmit={({ name }) => {\n          returnToSource();\n\n          return dispatch(\n            renameSource(\n              source.id,\n              name,\n              intl.formatMessage({ id: 'sources.renameError', defaultMessage: 'Renaming was unsuccessful' })\n            )\n          );\n        }}\n        onCancel={returnToSource}\n        schema={{\n          fields: [\n            {\n              name: 'name',\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              component: componentTypes.TEXT_FIELD,\n              validate: [(value) => asyncValidatorDebounced(value, source.id, intl), { type: validatorTypes.REQUIRED }],\n              isRequired: true,\n              resolveProps: validated,\n              initialValue: source.name,\n            },\n          ],\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport default SourceRenameModal;\n"],"sourceRoot":""}