{"version":3,"sources":["webpack://sources-ui/./src/components/SourceDetail/SourceRenameModal.js"],"names":["source","useSource","intl","useIntl","dispatch","useDispatch","push","useHistory","returnToSource","replaceRouteId","routes","id","title","formatMessage","defaultMessage","description","onClose","isOpen","variant","className","FormTemplate","props","disableSubmit","submitLabel","onSubmit","name","renameSource","onCancel","schema","fields","label","component","componentTypes","validate","value","asyncValidatorDebounced","type","validatorTypes","isRequired","resolveProps","validated","initialValue"],"mappings":"+TA2EA,QA1D0B,WACxB,IAAMA,GAASC,SACTC,GAAOC,SACPC,GAAWC,mBACTC,GAASC,kBAATD,KAEFE,EAAiB,kBAAMF,GAAKG,QAAeC,wBAA2BV,EAAOW,MAEnF,OACE,kBAAC,IAAD,CACEC,MAAOV,EAAKW,cAAc,CAAEF,GAAI,sBAAuBG,eAAgB,kBACvEC,YAAab,EAAKW,cAAc,CAAEF,GAAI,4BAA6BG,eAAgB,sCACnFE,QAASR,EACTS,QAAM,EACNC,QAAQ,SACRC,UAAU,WAEV,kBAAC,IAAD,CACEC,aAAc,SAACC,GAAD,OACZ,kBAAC,KAAD,OACMA,EADN,CAEEC,cAAe,CAAC,WAAY,aAAc,WAC1CC,YAAarB,EAAKW,cAAc,CAAEF,GAAI,eAAgBG,eAAgB,aAG1EU,SAAU,YAAc,IAAXC,EAAW,EAAXA,KAGX,OAFAjB,IAEOJ,GACLsB,QACE1B,EAAOW,GACPc,EACAvB,EAAKW,cAAc,CAAEF,GAAI,sBAAuBG,eAAgB,iCAItEa,SAAUnB,EACVoB,OAAQ,CACNC,OAAQ,CACN,CACEJ,KAAM,OACNK,MAAO5B,EAAKW,cAAc,CACxBF,GAAI,eACJG,eAAgB,SAElBiB,UAAWC,eACXC,SAAU,CAAC,SAACC,GAAD,OAAWC,QAAwBD,EAAOlC,EAAOW,GAAIT,IAAO,CAAEkC,KAAMC,eAC/EC,YAAY,EACZC,aAAcC,IACdC,aAAczC,EAAOyB","file":"js/renameSource.a67b64b49ede5052b98f.js","sourcesContent":["import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { Modal } from '@patternfly/react-core/dist/esm/components/Modal/Modal';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/esm/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/esm/validator-types';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/esm/form-template';\n\nimport { useSource } from '../../hooks/useSource';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport { replaceRouteId, routes } from '../../Routes';\nimport { renameSource } from '../../redux/sources/actions';\nimport { asyncValidatorDebounced } from '../../components/addSourceWizard/SourceAddSchema';\nimport validated from '../../utilities/resolveProps/validated';\n\nconst SourceRenameModal = () => {\n  const source = useSource();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n\n  const returnToSource = () => push(replaceRouteId(routes.sourcesDetail.path, source.id));\n\n  return (\n    <Modal\n      title={intl.formatMessage({ id: 'sources.renameTitle', defaultMessage: 'Rename source' })}\n      description={intl.formatMessage({ id: 'sources.renameDescription', defaultMessage: 'Enter a new name for your source.' })}\n      onClose={returnToSource}\n      isOpen\n      variant=\"medium\"\n      className=\"sources\"\n    >\n      <SourcesFormRenderer\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            disableSubmit={['pristine', 'validating', 'invalid']}\n            submitLabel={intl.formatMessage({ id: 'sources.save', defaultMessage: 'Save' })}\n          />\n        )}\n        onSubmit={({ name }) => {\n          returnToSource();\n\n          return dispatch(\n            renameSource(\n              source.id,\n              name,\n              intl.formatMessage({ id: 'sources.renameError', defaultMessage: 'Renaming was unsuccessful' })\n            )\n          );\n        }}\n        onCancel={returnToSource}\n        schema={{\n          fields: [\n            {\n              name: 'name',\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              component: componentTypes.TEXT_FIELD,\n              validate: [(value) => asyncValidatorDebounced(value, source.id, intl), { type: validatorTypes.REQUIRED }],\n              isRequired: true,\n              resolveProps: validated,\n              initialValue: source.name,\n            },\n          ],\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport default SourceRenameModal;\n"],"sourceRoot":""}