{"version":3,"sources":["webpack://sources-ui/./src/api/checkSourceStatus.js","webpack://sources-ui/./src/api/doUpdateSource.js","webpack://sources-ui/./src/components/SourceDetail/AvailabilityChecker.js","webpack://sources-ui/./src/components/SourceDetail/SourceSummaryCard.js","webpack://sources-ui/./src/components/SourceDetail/ApplicationStatusLabel.js","webpack://sources-ui/./src/components/SourceDetail/ApplicationsCard.js","webpack://sources-ui/./src/components/SourceDetail/NoApplications.js","webpack://sources-ui/./src/components/SourceDetail/NoPermissions.js","webpack://sources-ui/./src/api/doLoadSourceForEdit.js","webpack://sources-ui/./src/components/SourceEditForm/helpers.js","webpack://sources-ui/./src/components/SourceEditForm/onSubmit.js","webpack://sources-ui/./src/components/SourceEditForm/parser/endpoint.js","webpack://sources-ui/./src/components/SourceEditForm/parser/parseSourceToSchema.js","webpack://sources-ui/./src/components/SourceEditForm/reducer.js","webpack://sources-ui/./src/components/SourceEditForm/SubmittingModal.js","webpack://sources-ui/./src/components/SourceEditForm/ErroredModal.js","webpack://sources-ui/./src/components/SourceEditForm/SourceEditModal.js","webpack://sources-ui/./src/components/SourceDetail/ApplicationResourcesCard.js","webpack://sources-ui/./src/components/SourceDetail/Breadcrumbs.js","webpack://sources-ui/./src/components/SourceDetail/SourceKebab.js","webpack://sources-ui/./src/components/SourceDetail/DetailHeader.js","webpack://sources-ui/./src/pages/Detail.js","webpack://sources-ui/./src/components/Authentication.js","webpack://sources-ui/./src/utilities/SourcesFormRenderer.js"],"names":["checkSourceStatus","id","getSourcesApi","checkAvailabilitySource","urlOrHost","formData","url","scheme","host","port","path","u","URL","protocol","replace","hostname","defaultPort","pathname","error","parseUrl","endpoint","doUpdateSource","source","values","promises","push","updateSource","endPointPort","parseInt","endpointData","isNaN","undefined","updateEndpoint","endpoints","authentications","Object","keys","forEach","key","idWithoutPrefix","updateAuthentication","applications","updateApplication","extra","Promise","all","useSource","intl","useIntl","dispatch","useDispatch","useState","loading","setLoading","Button","variant","aria-label","formatMessage","defaultMessage","onClick","addMessage","title","description","isDisabled","Spinner","size","sourceTypes","useSelector","sources","shallowEqual","Card","className","CardTitle","CardBody","DescriptionList","columnModifier","default","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","sourceTypeFormatter","source_type_id","last_checked_at","last_available_at","dateFormatter","created_at","updated_at","ApplicationStatusLabel","app","appTypes","finalApp","getAppStatus","Popover","showClose","display_name","bodyContent","getStatusTooltipTextApp","availability_status","availability_status_error","Label","color","getStatusColor","getStatusText","propTypes","PropTypes","isRequired","useHistory","hasRightAccess","useHasWritePermissions","sourceType","find","type","sourceTypeName","name","filteredAppTypes","filter","supported_source_types","includes","filterApps","map","connectedApp","application_type_id","APP_NAMES","descriptionMapper","FormGroup","Switch","label","isChecked","Boolean","isDeleting","onChange","value","replaceRouteId","routes","EmptyState","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","EmptyStateBody","PrivateIcon","CHECK_ENDPOINT_COMMAND","selectOnlyEditedValues","editing","filteredValues","set","get","prepareInitialValues","rest","auhenticationsFinal","mergeAuths","reduce","acc","curr","length","auth","endpointToUrl","applicationsFinal","source_type","addIfUnique","array","item","getEditedApplications","editedApplications","editedId","match","startsWith","resource_type","onSubmit","setState","startDate","Date","loadEntities","messages","checkApplications","checkInfo","checkAppAvailability","then","data","statusResults","AVAILABLE","UNAVAILABLE","endpointFields","schema","hidden","modifiedFields","fields","field","hardcodedSchemas","getEnhancedEndpointField","subForm","component","componentTypes","condition","when","isNotEmpty","validate","validation","validatorTypes","isEmpty","parseSourceToSchema","applicationsFields","initialState","initialValues","isSubmitting","initialLoad","submitError","state","product_name","LoadingStep","customText","ErroredModal","onRetry","ErroredStep","onClose","secondaryActions","Text","target","href","rel","returnButtonTitle","useReducer","reducer","sourceRedux","isLoaded","useIsLoaded","message","sourceTypesLoaded","appTypesLoaded","useEffect","showSource","listSourceEndpoints","doLoadApplicationsForEdit","sourceData","apps","basicValues","addToApp","appAuthenticationIds","showAuthentication","appAuths","index","listEndpointAuthentications","doLoadSourceForEdit","prepareMessages","isLoading","Bullseye","SourcesFormRenderer","formApi","getState","dirtyFields","FormTemplate","props","canReset","submitLabel","disableSubmit","clearedValue","Breadcrumb","BreadcrumbItem","Link","to","isActive","isOpen","setOpen","disabledProps","tooltip","Dropdown","toggle","KebabToggle","onToggle","isPlain","position","dropdownItems","DropdownItem","PageHeader","Flex","FlexItem","availabilityFormatter","align","TextContent","SourceRemoveModal","lazy","AddApplication","RemoveAppModal","SourceRenameModal","Suspense","fallback","CustomRoute","exact","route","Component","componentProps","backPath","Grid","GridItem","md","RedirectNoId","formOptions","useFormApi","isEditing","authentication","isModified","edited","setEdited","firstClick","useRef","mounted","current","pristine","doNotRequirePassword","resolveProps","validated","helperText","onFocus","TextInput","autoFocus","componentMapper","mapperExtension","Authentication"],"mappings":"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","file":"js/sourceDetail.c26f64ef6288a5271c4b.js","sourcesContent":["import { getSourcesApi } from './entities';\n\nexport const checkSourceStatus = (id) =>\n  getSourcesApi()\n    .checkAvailabilitySource(id)\n    .catch(() => {});\n\nexport default checkSourceStatus;\n","import { defaultPort } from '../views/formatters';\nimport { getSourcesApi } from './entities';\n\nexport const parseUrl = (url) => {\n  if (url === null) {\n    return {\n      scheme: null,\n      host: null,\n      port: null,\n      path: null,\n    };\n  }\n\n  if (!url) {\n    return {};\n  }\n\n  try {\n    const u = new URL(url);\n    const scheme = u.protocol.replace(/:$/, '');\n\n    return {\n      scheme,\n      host: u.hostname,\n      port: u.port === '' ? defaultPort(scheme) : u.port,\n      path: u.pathname,\n    };\n  } catch (error) {\n    return {};\n  }\n};\n\nexport const urlOrHost = (formData) =>\n  formData.url || formData.url === null ? parseUrl(formData.url) : formData.endpoint ? formData.endpoint : formData;\n\nexport const doUpdateSource = (source, formData, values) => {\n  const promises = [];\n\n  if (formData.source) {\n    promises.push(getSourcesApi().updateSource(source.source.id, formData.source));\n  }\n\n  if (formData.endpoint || formData.url || formData.url === null) {\n    const { scheme, host, port, path } = urlOrHost(formData);\n    const endPointPort = port === null ? null : parseInt(port, 10);\n\n    const endpointData = {\n      scheme,\n      host,\n      path,\n      port: endPointPort === null ? null : isNaN(endPointPort) ? undefined : endPointPort,\n      ...formData.endpoint,\n    };\n\n    promises.push(getSourcesApi().updateEndpoint(source.endpoints[0].id, endpointData));\n  }\n\n  if (formData.authentications) {\n    Object.keys(formData.authentications).forEach((key) => {\n      const idWithoutPrefix = key.replace('a', '');\n\n      promises.push(getSourcesApi().updateAuthentication(idWithoutPrefix, formData.authentications[key]));\n    });\n  }\n\n  if (formData.applications) {\n    Object.keys(formData.applications).forEach((key) => {\n      const idWithoutPrefix = key.replace('a', '');\n\n      promises.push(getSourcesApi().updateApplication(idWithoutPrefix, { extra: values.applications[key].extra }));\n    });\n  }\n\n  return Promise.all(promises);\n};\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport RedoIcon from '@patternfly/react-icons/dist/esm/icons/redo-icon';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { Spinner } from '@patternfly/react-core/dist/esm/components/Spinner/Spinner';\n\nimport { useSource } from '../../hooks/useSource';\nimport checkSourceStatus from '../../api/checkSourceStatus';\nimport { addMessage } from '../../redux/sources/actions';\n\nconst AvailabilityChecker = () => {\n  const source = useSource();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n\n  return (\n    <Button\n      variant=\"plain\"\n      aria-label={intl.formatMessage({ id: 'sources.checkavailability', defaultMessage: 'Check source availability' })}\n      onClick={async () => {\n        setLoading(true);\n        await checkSourceStatus(source.id);\n        setLoading(false);\n        dispatch(\n          addMessage({\n            title: intl.formatMessage({\n              id: 'sources.checkavailability.notificationTitle',\n              defaultMessage: 'Request to check source status was sent',\n            }),\n            variant: 'info',\n            description: intl.formatMessage({\n              id: 'sources.checkavailability.notificationDescription',\n              defaultMessage: 'Check this page later for updates',\n            }),\n          })\n        );\n      }}\n      isDisabled={loading}\n    >\n      {!loading && <RedoIcon />}\n      {loading && <Spinner size=\"md\" />}\n    </Button>\n  );\n};\n\nexport default AvailabilityChecker;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useSelector } from 'react-redux';\n\nimport { Card } from '@patternfly/react-core/dist/esm/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/esm/components/Card/CardBody';\nimport { CardTitle } from '@patternfly/react-core/dist/esm/components/Card/CardTitle';\nimport { DescriptionList } from '@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionList';\nimport { DescriptionListGroup } from '@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListGroup';\nimport { DescriptionListTerm } from '@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTerm';\nimport { DescriptionListDescription } from '@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListDescription';\n\nimport { useSource } from '../../hooks/useSource';\nimport { dateFormatter, sourceTypeFormatter } from '../../views/formatters';\nimport AvailabilityChecker from './AvailabilityChecker';\n\nconst SourceSummaryCard = () => {\n  const intl = useIntl();\n  const source = useSource();\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n\n  return (\n    <Card className=\"pf-m-selectable pf-m-selected card summary-card pf-u-m-lg pf-u-mr-sm-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'detail.summary.title',\n          defaultMessage: 'Source summary',\n        })}\n      </CardTitle>\n      <CardBody>\n        <DescriptionList\n          columnModifier={{\n            default: '2Col',\n          }}\n        >\n          <DescriptionListGroup>\n            <DescriptionListTerm>\n              {intl.formatMessage({\n                id: 'detail.summary.type',\n                defaultMessage: 'Source type',\n              })}\n            </DescriptionListTerm>\n            <DescriptionListDescription>\n              {sourceTypeFormatter(source.source_type_id, undefined, { sourceTypes })}\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>\n              {intl.formatMessage({\n                id: 'detail.summary.lastChecked',\n                defaultMessage: 'Last availability check',\n              })}\n            </DescriptionListTerm>\n            <DescriptionListDescription>\n              {source.last_checked_at || source.last_available_at\n                ? dateFormatter(source.last_checked_at || source.last_available_at)\n                : intl.formatMessage({\n                    id: 'detail.summary.notChecked',\n                    defaultMessage: 'Not checked yet',\n                  })}\n              <AvailabilityChecker />\n            </DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>\n              {intl.formatMessage({\n                id: 'detail.summary.dateAdded',\n                defaultMessage: 'Date added',\n              })}\n            </DescriptionListTerm>\n            <DescriptionListDescription>{dateFormatter(source.created_at)}</DescriptionListDescription>\n          </DescriptionListGroup>\n          <DescriptionListGroup>\n            <DescriptionListTerm>\n              {intl.formatMessage({\n                id: 'detail.summary.lastModified',\n                defaultMessage: 'Last modified',\n              })}\n            </DescriptionListTerm>\n            <DescriptionListDescription>{dateFormatter(source.updated_at)}</DescriptionListDescription>\n          </DescriptionListGroup>\n        </DescriptionList>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default SourceSummaryCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label/Label';\nimport { Popover } from '@patternfly/react-core/dist/esm/components/Popover/Popover';\n\nimport { useSource } from '../../hooks/useSource';\nimport { getAppStatus, getStatusTooltipTextApp, getStatusColor, getStatusText } from '../../views/formatters';\n\nconst ApplicationStatusLabel = ({ app }) => {\n  const intl = useIntl();\n  const source = useSource();\n\n  const appTypes = useSelector(({ sources }) => sources.appTypes);\n\n  const finalApp = getAppStatus(app, source, appTypes);\n\n  return (\n    <Popover\n      showClose={false}\n      aria-label={`${finalApp.display_name} popover`}\n      bodyContent={getStatusTooltipTextApp(finalApp.availability_status, finalApp.availability_status_error, intl)}\n    >\n      <Label className=\"pf-u-ml-sm clickable\" color={getStatusColor(finalApp.availability_status)}>\n        {getStatusText(finalApp.availability_status)}\n      </Label>\n    </Popover>\n  );\n};\n\nApplicationStatusLabel.propTypes = {\n  app: PropTypes.shape({\n    availability_status: PropTypes.string,\n    availability_status_error: PropTypes.string,\n    display_name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ApplicationStatusLabel;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { Card } from '@patternfly/react-core/dist/esm/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/esm/components/Card/CardBody';\nimport { CardTitle } from '@patternfly/react-core/dist/esm/components/Card/CardTitle';\nimport { Switch } from '@patternfly/react-core/dist/esm/components/Switch/Switch';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\n\nimport { useSource } from '../../hooks/useSource';\nimport { replaceRouteId, routes } from '../../Routes';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport ApplicationStatusLabel from './ApplicationStatusLabel';\nimport { APP_NAMES } from '../SourceEditForm/parser/application';\nimport filterApps from '../../addSourceWizard/utilities/filterApps';\n\nconst descriptionMapper = (name, intl) =>\n  ({\n    [APP_NAMES.COST_MANAGAMENT]: intl.formatMessage({\n      id: 'cost.app.description',\n      defaultMessage: 'Analyze, forecast, and optimize your Red Hat OpenShift cluster costs in hybrid cloud environments.',\n    }),\n    [APP_NAMES.CLOUD_METER]: intl.formatMessage({\n      id: 'cost.app.description',\n      defaultMessage:\n        'Includes access to Red Hat Gold Images, high precision subscription watch data, autoregistration, and Red Hat Connector.',\n    }),\n  }[name]);\n\nconst ApplicationsCard = () => {\n  const intl = useIntl();\n  const source = useSource();\n  const { push } = useHistory();\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n  const appTypes = useSelector(({ sources }) => sources.appTypes, shallowEqual);\n  const hasRightAccess = useHasWritePermissions();\n\n  const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n  const sourceTypeName = sourceType?.name;\n  const filteredAppTypes = appTypes.filter((type) => type.supported_source_types.includes(sourceTypeName)).filter(filterApps);\n\n  return (\n    <Card className=\"card applications-card pf-u-p-lg pf-u-pl-sm-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'detail.applications.title',\n          defaultMessage: 'Applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        {!hasRightAccess && (\n          <div className=\"pf-u-mb-md\" id=\"no-permissions-applications\">\n            {intl.formatMessage({\n              id: 'sources.notAdminButton',\n              defaultMessage:\n                'To perform this adding/removing applications, you must be granted write permissions from your Organization Administrator.',\n            })}\n          </div>\n        )}\n        <div className=\"pf-c-form\">\n          {filteredAppTypes.map((app) => {\n            const connectedApp = source.applications.find((connectedApp) => connectedApp.application_type_id === app.id);\n            const description = descriptionMapper(app.name, intl);\n\n            return (\n              <FormGroup key={app.id}>\n                <Switch\n                  id={`app-switch-${app.id}`}\n                  label={app.display_name}\n                  isChecked={Boolean(connectedApp)}\n                  isDisabled={connectedApp?.isDeleting || !hasRightAccess}\n                  onChange={(value) =>\n                    !value\n                      ? push(replaceRouteId(routes.sourcesDetailRemoveApp.path, source.id).replace(':app_id', connectedApp.id))\n                      : push(replaceRouteId(routes.sourcesDetailAddApp.path, source.id).replace(':app_type_id', app.id))\n                  }\n                />\n                {Boolean(connectedApp) && <ApplicationStatusLabel app={connectedApp} />}\n                {description && (\n                  <div className=\"pf-c-switch pf-u-mt-sm\">\n                    <span className=\"pf-c-switch__toggle ins-c-sources__hide-me\" />\n                    <div className=\"pf-c-switch__label ins-c-sources__switch-description\">{description}</div>\n                  </div>\n                )}\n              </FormGroup>\n            );\n          })}\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ApplicationsCard;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { EmptyState } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport PlusCircleIcon from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\n\nconst NoApplications = () => {\n  const intl = useIntl();\n\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {intl.formatMessage({\n          id: 'detail.noapplications.title',\n          defaultMessage: 'No connected applications',\n        })}\n      </Title>\n      <EmptyStateBody className=\"empty-state-body\">\n        {intl.formatMessage({\n          id: 'detail.noapplications.description',\n          defaultMessage: 'You have not connected any applications to this source. Use the switches above to add applications.',\n        })}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nexport default NoApplications;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { EmptyState } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport PrivateIcon from '@patternfly/react-icons/dist/esm/icons/private-icon';\n\nconst NoPermissions = () => {\n  const intl = useIntl();\n\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={PrivateIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {intl.formatMessage({\n          id: 'detail.nopermissions.title',\n          defaultMessage: 'Missing permissions',\n        })}\n      </Title>\n      <EmptyStateBody className=\"empty-state-body\">\n        {intl.formatMessage({\n          id: 'detail.nopermissions.description',\n          defaultMessage: 'To perform this action, you must be granted write permissions from your Organization Administrator.',\n        })}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nexport default NoPermissions;\n","import { getSourcesApi, doLoadApplicationsForEdit } from './entities';\n\nexport const doLoadSourceForEdit = (source, appTypes, sourceTypes) =>\n  Promise.all([\n    getSourcesApi().showSource(source.id),\n    getSourcesApi().listSourceEndpoints(source.id),\n    doLoadApplicationsForEdit(source.id, appTypes, sourceTypes),\n  ]).then(async ([sourceData, endpoints, applications]) => {\n    const endpoint = endpoints && endpoints.data && endpoints.data[0];\n\n    const apps = applications?.sources[0]?.applications || [];\n\n    let basicValues = {\n      source: {\n        ...source,\n        ...sourceData,\n      },\n      applications: apps,\n    };\n\n    const promises = [];\n    let appAuths;\n    const addToApp = [];\n    const appAuthenticationIds = [];\n\n    apps.forEach((app) => {\n      app?.authentications?.forEach((auth) => {\n        if (auth?.id) {\n          promises.push(getSourcesApi().showAuthentication(auth.id));\n          addToApp.push(app.id);\n          appAuthenticationIds.push(auth.id);\n        }\n      });\n    });\n\n    if (promises.length > 0) {\n      appAuths = await Promise.all(promises);\n\n      addToApp.forEach((id, index) => {\n        basicValues.applications.find((app) => app.id === id).authentications.push(appAuths[index]);\n      });\n    }\n\n    if (!endpoint) {\n      return basicValues;\n    }\n\n    return getSourcesApi()\n      .listEndpointAuthentications(endpoint.id)\n      .then((authentications) => ({\n        ...basicValues,\n        endpoints: endpoints.data,\n        authentications: authentications.data.filter(({ id }) => !appAuthenticationIds.includes(id)),\n      }));\n  });\n","import get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { endpointToUrl, UNAVAILABLE } from '../../views/formatters';\n\nexport const CHECK_ENDPOINT_COMMAND = 'check-endpoint';\n\nexport const selectOnlyEditedValues = (values, editing) => {\n  const filteredValues = {};\n\n  Object.keys(editing)\n    .filter((key) => editing[key])\n    .forEach((key) => {\n      set(filteredValues, key, get(values, key));\n    });\n\n  return filteredValues;\n};\n\nexport const prepareInitialValues = ({ endpoints, authentications, applications, ...rest }, sourceTypeName) => {\n  const auhenticationsFinal = {};\n\n  const mergeAuths = [\n    ...(authentications || []),\n    ...(applications?.reduce((acc, curr) => [...acc, ...curr.authentications], []) || []),\n  ];\n\n  if (mergeAuths.length > 0) {\n    mergeAuths.forEach((auth) => {\n      auhenticationsFinal[`a${auth.id}`] = auth;\n    });\n  }\n\n  let endpoint;\n  let url;\n\n  if (endpoints && endpoints.length > 0) {\n    endpoint = endpoints[0];\n  }\n\n  if (endpoint) {\n    url = endpoint.scheme || endpoint.host || endpoint.path || endpoint.port ? endpointToUrl(endpoint) : undefined;\n  }\n\n  const applicationsFinal = {};\n  if (applications?.length > 0) {\n    applications.forEach((app) => {\n      if (app.extra && Object.keys(app.extra).length > 0) {\n        applicationsFinal[`a${app.id}`] = { extra: app.extra };\n      }\n    });\n  }\n\n  return {\n    source_type: sourceTypeName,\n    endpoint,\n    authentications: auhenticationsFinal,\n    url,\n    ...(Object.keys(applicationsFinal).length && {\n      applications: applicationsFinal,\n    }),\n    ...rest,\n  };\n};\n\nconst addIfUnique = (array, item) => !array.includes(item) && array.push(item);\n\nexport const getEditedApplications = (source, editing) => {\n  const editedApplications = [];\n\n  const editedFields = Object.keys(editing);\n\n  editedFields.forEach((key) => {\n    if (editing[key]) {\n      const editedId = key.match(/.a\\d+/)?.[0]?.replace('.a', '');\n\n      if (key.startsWith('applications')) {\n        addIfUnique(editedApplications, editedId);\n      }\n\n      if (key.startsWith('authentications')) {\n        source.applications.forEach((app) =>\n          app.authentications.forEach(\n            ({ id, resource_type }) =>\n              resource_type &&\n              id === editedId &&\n              addIfUnique(editedApplications, resource_type === 'Application' ? app.id : `${CHECK_ENDPOINT_COMMAND}-${app.id}`)\n          )\n        );\n      }\n\n      if (key.startsWith('url') || key.startsWith('endpoint')) {\n        source.applications.forEach((app) =>\n          app.authentications.forEach(\n            ({ resource_type }) =>\n              resource_type === 'Endpoint' && addIfUnique(editedApplications, `${CHECK_ENDPOINT_COMMAND}-${app.id}`)\n          )\n        );\n      }\n    }\n  });\n\n  return editedApplications.filter(Boolean);\n};\n\nexport const prepareMessages = (source, intl) => {\n  const messages = {};\n\n  source.applications.forEach(({ id, availability_status_error, availability_status }) => {\n    if (availability_status === UNAVAILABLE) {\n      messages[id] = {\n        title: intl.formatMessage({\n          id: 'wizard.failEditToastTitleBeforeEdit',\n          defaultMessage: 'This application is unavailable',\n        }),\n        description: availability_status_error,\n        variant: 'danger',\n      };\n    }\n  });\n\n  if (source.endpoints?.[0]?.availability_status_error) {\n    const applicationsUsingEndpoint = source.applications\n      .map((app) => (app.authentications.find(({ resource_type }) => resource_type === 'Endpoint') ? app.id : undefined))\n      .filter(Boolean);\n\n    applicationsUsingEndpoint.forEach((id) => {\n      messages[id] = {\n        title: intl.formatMessage({\n          id: 'wizard.failEditToastTitleBeforeEdit',\n          defaultMessage: 'This application is unavailable',\n        }),\n        description: source.endpoints?.[0]?.availability_status_error,\n        variant: 'danger',\n      };\n    });\n  }\n\n  return messages;\n};\n","import { CHECK_ENDPOINT_COMMAND, getEditedApplications, selectOnlyEditedValues } from './helpers';\nimport { loadEntities } from '../../redux/sources/actions';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\nimport { doUpdateSource } from '../../api/doUpdateSource';\n\nimport { AVAILABLE, UNAVAILABLE } from '../../views/formatters';\nimport { checkAppAvailability } from '../../addSourceWizard/api/getApplicationStatus';\n\nexport const onSubmit = async (values, editing, dispatch, source, intl, setState) => {\n  setState({ type: 'submit', values, editing });\n\n  const startDate = new Date();\n\n  try {\n    await doUpdateSource(source, selectOnlyEditedValues(values, editing), values);\n  } catch {\n    await dispatch(loadEntities());\n    setState({ type: 'submitFailed' });\n\n    return;\n  }\n\n  checkSourceStatus(source.source.id);\n\n  let messages = {};\n\n  const checkApplications = getEditedApplications(source, editing);\n\n  const promises = [];\n\n  checkApplications.forEach((checkInfo) => {\n    if (checkInfo.includes(CHECK_ENDPOINT_COMMAND)) {\n      promises.push(\n        checkAppAvailability(source.endpoints[0].id, undefined, undefined, 'getEndpoint', startDate).then((data) => ({\n          ...data,\n          id: checkInfo.replace(`${CHECK_ENDPOINT_COMMAND}-`, ''),\n        }))\n      );\n    } else {\n      promises.push(checkAppAvailability(checkInfo, undefined, undefined, undefined, startDate));\n    }\n  });\n\n  let statusResults;\n  if (promises.length > 0) {\n    try {\n      statusResults = await Promise.all(promises);\n    } catch (error) {\n      await dispatch(loadEntities());\n      setState({ type: 'submitFailed' });\n      return;\n    }\n\n    statusResults.forEach(({ availability_status, availability_status_error, id }) => {\n      if (availability_status === AVAILABLE) {\n        messages[id] = {\n          title: intl.formatMessage({\n            id: 'wizard.successEditToastTitle',\n            defaultMessage: 'Application credentials were edited successfully.',\n          }),\n          description: availability_status_error,\n          variant: 'success',\n        };\n      }\n\n      if (availability_status === UNAVAILABLE) {\n        messages[id] = {\n          title: intl.formatMessage({\n            id: 'wizard.failEditToastTitle',\n            defaultMessage: 'Edit application credentials failed.',\n          }),\n          description: availability_status_error,\n          variant: 'danger',\n        };\n      }\n\n      if (!availability_status) {\n        messages[id] = {\n          title: intl.formatMessage({\n            id: 'wizard.timeoutEditToastTitle',\n            defaultMessage: 'Edit in progress',\n          }),\n          description: intl.formatMessage({\n            id: 'wizard.timeoutEditToastDescription',\n            defaultMessage:\n              'We are still working to confirm your updated credentials. Changes will be reflected in this table when complete.',\n          }),\n          variant: 'warning',\n        };\n      }\n    });\n  }\n\n  await dispatch(loadEntities());\n  setState({ type: 'submitFinished', messages });\n};\n","import get from 'lodash/get';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/esm/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/esm/validator-types';\n\nimport hardcodedSchemas from '../../../addSourceWizard/addSourceWizard/hardcodedSchemas';\n\nexport const getEnhancedEndpointField = (sourceType, name) => get(hardcodedSchemas, [sourceType, 'endpoint', name], {});\n\nexport const endpointFields = (sourceType) => {\n  if (!sourceType.schema || !sourceType.schema.endpoint || sourceType.schema.endpoint.hidden) {\n    return undefined;\n  }\n\n  const schemaAuth = sourceType.schema.endpoint;\n\n  const enhancedFields = schemaAuth.fields.map((field) => ({\n    ...field,\n    ...getEnhancedEndpointField(sourceType.name, field.name),\n  }));\n\n  const modifiedFields = enhancedFields;\n\n  const subForm = {\n    component: componentTypes.SUB_FORM,\n    name: 'endpoint',\n  };\n\n  if (sourceType.name === 'ansible-tower') {\n    const url = modifiedFields.find(({ name }) => name === 'url');\n\n    return {\n      ...subForm,\n      fields: [\n        {\n          component: componentTypes.SUB_FORM,\n          name: 'receptor_node_group',\n          condition: {\n            when: 'endpoint.receptor_node',\n            isNotEmpty: true,\n          },\n          fields: [\n            {\n              ...url,\n              isRequired: false,\n              validate: url?.validate?.filter((validation) => validation.type !== validatorTypes.REQUIRED),\n            },\n          ],\n        },\n        {\n          component: componentTypes.SUB_FORM,\n          name: 'hostname_group',\n          condition: {\n            when: 'endpoint.receptor_node',\n            isEmpty: true,\n          },\n          fields: modifiedFields,\n        },\n      ],\n    };\n  }\n\n  return {\n    ...subForm,\n    fields: modifiedFields,\n  };\n};\n","import { endpointFields } from './endpoint';\nimport { applicationsFields } from './application';\n\nexport const parseSourceToSchema = (source, sourceType, appTypes, intl) => ({\n  description: intl.formatMessage({\n    id: 'sources.editFormDescripiton',\n    defaultMessage: 'Use the form fields to edit application credentials.',\n  }),\n  fields: [\n    ...applicationsFields(source.applications, sourceType, appTypes),\n    source.endpoints && source.endpoints.length > 0 ? endpointFields(sourceType) : false,\n  ].filter(Boolean),\n});\n","import { parseSourceToSchema } from './parser/parseSourceToSchema';\nimport { prepareInitialValues } from './helpers';\n\nexport const initialState = {\n  loading: true,\n  source: undefined,\n  initialValues: {},\n  sourceType: undefined,\n  schema: undefined,\n  isSubmitting: false,\n  initialLoad: true,\n  submitError: false,\n};\n\nconst reducer = (state, { type, source, sourceType, appTypes, intl, values, editing, messages }) => {\n  switch (type) {\n    case 'createForm':\n      return {\n        ...state,\n        sourceType,\n        initialValues: prepareInitialValues(state.source, sourceType.product_name),\n        schema: parseSourceToSchema(state.source, sourceType, appTypes, intl),\n        loading: false,\n      };\n    case 'setSource':\n      return {\n        ...state,\n        messages: {\n          ...messages,\n          ...state.messages,\n        },\n        source,\n        initialLoad: false,\n      };\n    case 'submit':\n      return {\n        ...state,\n        isSubmitting: true,\n        submitError: false,\n        values,\n        editing,\n      };\n    case 'submitFinished':\n      return {\n        ...state,\n        isSubmitting: false,\n        source,\n        messages,\n      };\n    case 'submitFailed':\n      return {\n        ...state,\n        isSubmitting: false,\n        submitError: true,\n        messages: undefined,\n      };\n    case 'sourceChanged':\n      return {\n        ...state,\n        initialLoad: true,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport LoadingStep from '../../addSourceWizard/addSourceWizard/steps/LoadingStep';\n\nconst SubmittingModal = () => {\n  const intl = useIntl();\n\n  return (\n    <LoadingStep\n      customText={intl.formatMessage({\n        id: 'sources.editSubmittingTitle',\n        defaultMessage: 'Validating edited source credentials',\n      })}\n    />\n  );\n};\n\nexport default SubmittingModal;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Text } from '@patternfly/react-core/dist/esm/components/Text/Text';\nimport ErroredStep from '../../addSourceWizard/addSourceWizard/steps/ErroredStep';\n\nconst ErroredModal = ({ onRetry }) => {\n  const intl = useIntl();\n\n  return (\n    <ErroredStep\n      onClose={onRetry}\n      customText={intl.formatMessage({\n        id: 'sources.editErrorDescription',\n        defaultMessage:\n          'There was a problem while trying to edit your source. Please try again. If the error persists, open a support case.',\n      })}\n      secondaryActions={\n        <Text\n          component=\"a\"\n          target=\"_blank\"\n          href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n          rel=\"noopener noreferrer\"\n        >\n          {intl.formatMessage({\n            id: 'sources.openTicket',\n            defaultMessage: 'Open a support case',\n          })}\n        </Text>\n      }\n      returnButtonTitle={intl.formatMessage({\n        id: 'sources.retryText',\n        defaultMessage: 'Retry',\n      })}\n    />\n  );\n};\n\nErroredModal.propTypes = {\n  onRetry: PropTypes.func.isRequired,\n};\n\nexport default ErroredModal;\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Spinner } from '@patternfly/react-core/dist/esm/components/Spinner';\nimport { Bullseye } from '@patternfly/react-core/dist/esm/layouts/Bullseye';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/esm/form-template';\n\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport { doLoadSourceForEdit } from '../../api/doLoadSourceForEdit';\nimport { onSubmit } from './onSubmit';\n\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport reducer, { initialState } from './reducer';\nimport SubmittingModal from './SubmittingModal';\nimport ErroredModal from './ErroredModal';\nimport { prepareMessages } from './helpers';\n\nconst SourceEditModal = () => {\n  const [state, setState] = useReducer(reducer, initialState);\n  const sourceRedux = useSource();\n  const isLoaded = useIsLoaded();\n\n  const {\n    loading,\n    editing,\n    source,\n    initialValues,\n    schema,\n    isSubmitting,\n    initialLoad,\n    message,\n    messages,\n    submitError,\n    values,\n  } = state;\n\n  const intl = useIntl();\n\n  const { sourceTypes, appTypes, sourceTypesLoaded, appTypesLoaded } = useSelector(({ sources }) => sources, shallowEqual);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!initialLoad) {\n      setState({ type: 'sourceChanged' });\n    }\n  }, [sourceRedux, sourceRedux?.applications?.length]);\n\n  useEffect(() => {\n    if (sourceRedux && initialLoad && appTypesLoaded) {\n      doLoadSourceForEdit(sourceRedux, appTypes, sourceTypes).then((source) => {\n        const messages = prepareMessages(source, intl);\n\n        setState({ type: 'setSource', source, messages });\n      });\n    }\n  }, [sourceRedux, isLoaded, appTypesLoaded, initialLoad]);\n\n  useEffect(() => {\n    if (source && appTypesLoaded && sourceTypesLoaded) {\n      const sourceType = sourceTypes.find(({ id }) => id === source.source.source_type_id);\n\n      setState({ type: 'createForm', sourceType, source, appTypes, intl });\n    }\n  }, [appTypesLoaded, source, sourceTypesLoaded]);\n\n  const isLoading = !appTypesLoaded || !sourceTypesLoaded || loading;\n\n  if (submitError) {\n    return <ErroredModal onRetry={() => onSubmit(values, editing, dispatch, source, intl, setState)} />;\n  }\n\n  if (isSubmitting) {\n    return <SubmittingModal />;\n  }\n\n  if (isLoading) {\n    return (\n      <Bullseye className=\"pf-u-m-2xl\">\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  return (\n    <SourcesFormRenderer\n      schema={schema}\n      onSubmit={(values, formApi) => onSubmit(values, formApi.getState().dirtyFields, dispatch, source, intl, setState)}\n      FormTemplate={(props) => (\n        <FormTemplate canReset submitLabel=\"Save changes\" disableSubmit={['pristine', 'invalid']} {...props} />\n      )}\n      clearedValue={null}\n      initialValues={{\n        ...initialValues,\n        message,\n        messages,\n      }}\n    />\n  );\n};\n\nexport default SourceEditModal;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Card } from '@patternfly/react-core/dist/esm/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/esm/components/Card/CardBody';\nimport { CardTitle } from '@patternfly/react-core/dist/esm/components/Card/CardTitle';\n\nimport NoApplications from './NoApplications';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { useSource } from '../../hooks/useSource';\nimport NoPermissions from './NoPermissions';\nimport SourceEditModal from '../SourceEditForm/SourceEditModal';\n\nconst ApplicationResourcesCard = () => {\n  const intl = useIntl();\n  const source = useSource();\n  const hasRightAccess = useHasWritePermissions();\n\n  return (\n    <Card className=\"card pf-u-m-lg pf-u-mt-0\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'detail.resources.title',\n          defaultMessage: 'Manage connected applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        {!hasRightAccess && <NoPermissions />}\n        {hasRightAccess && source.applications.length === 0 && <NoApplications />}\n        {hasRightAccess && source.applications.length > 0 && <SourceEditModal />}\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ApplicationResourcesCard;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { Breadcrumb } from '@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb';\nimport { BreadcrumbItem } from '@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem';\nimport { routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\n\nconst Breadcrumbs = () => {\n  const intl = useIntl();\n  const source = useSource();\n\n  return (\n    <Breadcrumb>\n      <BreadcrumbItem component={({ href, ...props }) => <Link to={href} {...props} />} to={routes.sources.path}>\n        {intl.formatMessage({\n          id: 'sources.sources',\n          defaultMessage: 'Sources',\n        })}\n      </BreadcrumbItem>\n      <BreadcrumbItem isActive>{source.name}</BreadcrumbItem>\n    </Breadcrumb>\n  );\n};\n\nexport default Breadcrumbs;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\n\nimport { Dropdown } from '@patternfly/react-core/dist/esm/components/Dropdown/Dropdown';\nimport { DropdownItem } from '@patternfly/react-core/dist/esm/components/Dropdown/DropdownItem';\nimport { KebabToggle } from '@patternfly/react-core/dist/esm/components/Dropdown/KebabToggle';\n\nimport { replaceRouteId, routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\n\nconst SourceKebab = () => {\n  const [isOpen, setOpen] = useState(false);\n  const intl = useIntl();\n  const { push } = useHistory();\n  const source = useSource();\n  const hasRightAccess = useHasWritePermissions();\n\n  const tooltip = intl.formatMessage({\n    id: 'sources.notAdminButton',\n    defaultMessage: 'To perform this action, you must be granted write permissions from your Organization Administrator.',\n  });\n\n  const disabledProps = {\n    tooltip,\n    isDisabled: true,\n    className: 'ins-c-sources__disabled-drodpown-item',\n  };\n\n  return (\n    <Dropdown\n      toggle={<KebabToggle onToggle={() => setOpen(!isOpen)} id=\"toggle-id-6\" />}\n      isOpen={isOpen}\n      isPlain\n      position=\"right\"\n      dropdownItems={[\n        <DropdownItem\n          {...(!hasRightAccess && disabledProps)}\n          key=\"rename\"\n          onClick={() => push(replaceRouteId(routes.sourcesDetailRename.path, source.id))}\n        >\n          {intl.formatMessage({\n            id: 'detail.rename.button',\n            defaultMessage: 'Rename',\n          })}\n        </DropdownItem>,\n        <DropdownItem\n          {...(!hasRightAccess && disabledProps)}\n          key=\"remove\"\n          onClick={() => push(replaceRouteId(routes.sourcesDetailRemove.path, source.id))}\n        >\n          {intl.formatMessage({\n            id: 'detail.remove.button',\n            defaultMessage: 'Remove',\n          })}\n        </DropdownItem>,\n      ]}\n    />\n  );\n};\n\nexport default SourceKebab;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useSelector } from 'react-redux';\n\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport { TextContent } from '@patternfly/react-core/dist/esm/components/Text/TextContent';\nimport { Text } from '@patternfly/react-core/dist/esm/components/Text/Text';\nimport { Flex } from '@patternfly/react-core/dist/esm/layouts/Flex/Flex';\nimport { FlexItem } from '@patternfly/react-core/dist/esm/layouts/Flex/FlexItem';\n\nimport Breadcrumbs from './Breadcrumbs';\nimport { useSource } from '../../hooks/useSource';\nimport { availabilityFormatter } from '../../views/formatters';\nimport SourceKebab from './SourceKebab';\n\nconst DetailHeader = () => {\n  const intl = useIntl();\n  const source = useSource();\n  const appTypes = useSelector(({ sources }) => sources.appTypes, shallowEqual);\n\n  return (\n    <PageHeader>\n      <Breadcrumbs />\n      <Flex className=\"pf-u-mb-sm\">\n        <FlexItem>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {source.name}\n          </Title>\n        </FlexItem>\n        <FlexItem>{availabilityFormatter(undefined, source, { appTypes })}</FlexItem>\n        <FlexItem align={{ default: 'alignRight' }}>\n          <SourceKebab />\n        </FlexItem>\n      </Flex>\n      <TextContent>\n        <Text>\n          {intl.formatMessage({\n            id: 'detail.description',\n            defaultMessage: 'View details and manage connections for this source.',\n          })}\n        </Text>\n      </TextContent>\n    </PageHeader>\n  );\n};\n\nexport default DetailHeader;\n","import React, { lazy, Suspense } from 'react';\n\nimport { Grid } from '@patternfly/react-core/dist/esm/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/GridItem';\n\nimport SourceSummaryCard from '../components/SourceDetail/SourceSummaryCard';\nimport ApplicationsCard from '../components/SourceDetail/ApplicationsCard';\nimport ApplicationResourcesCard from '../components/SourceDetail/ApplicationResourcesCard';\nimport RedirectNoId from '../components/RedirectNoId/RedirectNoId';\nimport { useSource } from '../hooks/useSource';\nimport { DetailLoader } from '../components/SourcesTable/loaders';\nimport CustomRoute from '../components/CustomRoute/CustomRoute';\nimport { replaceRouteId, routes } from '../Routes';\nimport DetailHeader from '../components/SourceDetail/DetailHeader';\n\nconst SourceRemoveModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"removeSource\" */\n    '../components/SourceRemoveModal/SourceRemoveModal'\n  )\n);\n\nconst AddApplication = lazy(() =>\n  import(\n    /* webpackChunkName: \"addApplication\" */\n    '../components/AddApplication/AddApplication'\n  )\n);\n\nconst RemoveAppModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"removeApplication\" */\n    '../components/AddApplication/RemoveAppModal'\n  )\n);\n\nconst SourceRenameModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"renameSource\" */\n    '../components/SourceDetail/SourceRenameModal'\n  )\n);\n\nconst Detail = () => {\n  const source = useSource();\n\n  if (!source) {\n    return (\n      <React.Fragment>\n        <DetailLoader />\n        <RedirectNoId />\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div className=\"ins-c-sources__detail-page\">\n      <Suspense fallback={null}>\n        <CustomRoute\n          exact\n          route={routes.sourcesDetailRemove}\n          Component={SourceRemoveModal}\n          componentProps={{ backPath: replaceRouteId(routes.sourcesDetail.path, source.id) }}\n        />\n        <CustomRoute exact route={routes.sourcesDetailAddApp} Component={AddApplication} />\n        <CustomRoute exact route={routes.sourcesDetailRemoveApp} Component={RemoveAppModal} />\n        <CustomRoute exact route={routes.sourcesDetailRename} Component={SourceRenameModal} />\n      </Suspense>\n      <DetailHeader />\n      <Grid>\n        <GridItem md=\"6\">\n          <SourceSummaryCard />\n        </GridItem>\n        <GridItem md=\"6\">\n          <ApplicationsCard />\n        </GridItem>\n        <GridItem md=\"12\">\n          <ApplicationResourcesCard />\n        </GridItem>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Detail;\n","import React, { useState, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\n\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\n\nimport TextField from '@data-driven-forms/pf4-component-mapper/dist/esm/text-field';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/esm/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/esm/validator-types';\nimport validated from '../addSourceWizard/sourceFormRenderer/resolveProps/validated';\n\nconst Authentication = (rest) => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n\n  const [authenticationId] = rest?.name?.match(/\\d+/) || [];\n  const isEditing = authenticationId || values.authentication?.id;\n\n  // If there is any value, the field is modified (password is always empty on start)\n  let isModified = get(values, rest.name);\n\n  const [edited, setEdited] = useState(!isEditing || isModified);\n  const firstClick = useRef(true);\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    if (mounted.current) {\n      // reset on restart\n      if (!firstClick.current && formOptions.getState().pristine) {\n        setEdited(false);\n        firstClick.current = true;\n      }\n\n      if (edited) {\n        firstClick.current = false;\n      }\n    }\n  });\n\n  useEffect(() => {\n    mounted.current = true;\n  }, []);\n\n  const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n  const componentProps = {\n    ...rest,\n    ...(isEditing\n      ? {\n          validate: doNotRequirePassword,\n          resolveProps: validated,\n        }\n      : {}),\n  };\n\n  if (!edited && isEditing) {\n    return (\n      <FormGroup helperText={componentProps.helperText} label={componentProps.label} onFocus={() => setEdited(true)} isRequired>\n        <TextInput aria-label=\"pre-filled-authentication\" value=\"•••••••••••••\" />\n      </FormGroup>\n    );\n  }\n\n  return <TextField {...componentProps} autoFocus={true} />;\n};\n\nexport default Authentication;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer/dist/esm/form-renderer';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/esm/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/esm/component-mapper';\n\nimport Authentication from '../components/Authentication';\nimport { mapperExtension } from '../addSourceWizard/sourceFormRenderer';\n\nconst SourcesFormRenderer = (props) => (\n  <FormRenderer\n    FormTemplate={FormTemplate}\n    componentMapper={{\n      ...componentMapper,\n      ...mapperExtension,\n      authentication: Authentication,\n    }}\n    {...props}\n  />\n);\n\nexport default SourcesFormRenderer;\n"],"sourceRoot":""}