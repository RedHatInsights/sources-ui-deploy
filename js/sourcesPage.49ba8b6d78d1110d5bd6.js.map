{"version":3,"sources":["webpack://sources-ui/./src/components/SourcesTable/EmptyStateTable.js","webpack://sources-ui/./src/components/SourcesTable/SourcesTable.js","webpack://sources-ui/./src/components/SourcesErrorState.js","webpack://sources-ui/./src/pages/Sources/helpers.js","webpack://sources-ui/./src/components/TilesShared/ImageWithPlaceholder.js","webpack://sources-ui/./src/components/TilesShared/DisabledTile.js","webpack://sources-ui/./src/components/TilesShared/TilesArray.js","webpack://sources-ui/./src/components/CloudTiles/CloudTiles.js","webpack://sources-ui/./src/components/CloudTiles/CloudEmptyState.js","webpack://sources-ui/./src/components/RedHatTiles/RedHatTiles.js","webpack://sources-ui/./src/components/RedHatTiles/RedHatEmptyState.js","webpack://sources-ui/./src/components/TabNavigation.js","webpack://sources-ui/./src/components/SourcesHeader.js","webpack://sources-ui/./src/pages/Sources.js","webpack://sources-ui/./src/utilities/filterTypes.js"],"names":["intl","useIntl","dispatch","useDispatch","Bullseye","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","formatMessage","id","defaultMessage","EmptyStateBody","Button","onClick","clearFilters","itemToCells","item","columns","sourceTypes","appTypes","filter","column","title","hidden","map","col","formatter","value","renderSources","entities","removingSources","reduce","acc","isDeleting","includes","isOpen","expanded","cells","disableActions","prepareColumnsCells","transforms","wrappable","sortable","reducer","state","payload","actionResolver","push","isOrgAdmin","rowData","disabledProps","tooltip","isDisabled","className","actions","imported","splice","_ev","_i","replaceRouteId","routes","component","insertEditAction","useHistory","loaded","useIsLoaded","writePermissions","useHasWritePermissions","useSelector","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","sortBy","sortDirection","numberOfEntities","reduxDispatch","notSortable","useReducer","sourcesColumns","rows","isLoaded","refreshSources","useEffect","refreshColumns","shownRows","heightAuto","props","colSpan","COLUMN_COUNT","Table","gridBreakPoint","aria-label","onSort","_event","key","direction","sortEntities","index","cell","indexOf","undefined","rowWrapper","RowWrapperLoader","TableHeader","TableBody","ExclamationCircleIcon","color","a","chunks","Text","href","target","rel","window","location","debouncedFiltering","awesomeDebounce","refresh","afterSuccessLoadParameters","pageNumber","prepareSourceTypeSelection","label","product_name","sort","b","localeCompare","prepareApplicationTypeSelection","display_name","setFilter","filterSources","prepareChips","filterValue","Object","keys","length","name","source_type_id","category","chips","sourceType","find","type","applications","appType","availability_status","AVAILABLE","chipsFormatters","Boolean","loadedTypes","types","ImageWithPlaceholder","src","rest","useState","setLoaded","height","width","onLoad","style","display","propTypes","PropTypes","Tooltip","content","Tile","TilesArray","setSelectedType","mapper","activeVendor","hasWritePermissions","openWizard","TileComponent","DisabledTile","filterVendorTypes","amazon","isStacked","alt","google","azure","CloudEmptyState","Card","CardTitle","CardBody","CardFooter","RedHatEmptyState","Tabs","activeKey","onSelect","_e","setActiveVendor","Tab","eventKey","CLOUD_VENDOR","TabTitleIcon","TabTitleText","REDHAT_VENDOR","SourcesHeader","PageHeader","PageHeaderTitle","React","SourceRemoveModal","lazy","AddSourceWizard","then","module","default","initialState","selectedType","wizardInitialState","wizardInitialValues","initialValues","stateDispatch","entitiesLoaded","history","pageSize","fetchingError","paginationClicked","onSetPage","page","pageAndSize","maximumPageNumber","Math","ceil","max","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","filteredSourceTypes","hasSomeFilter","entries","Array","isArray","showEmptyState","showInfoCards","Suspense","fallback","CustomRoute","exact","route","Component","componentProps","applicationTypes","onClose","afterSuccess","source","loadEntities","hideSourcesButton","submitCallback","Date","now","pathname","split","pop","isErrored","wizardState","activeStep","activeStepIndex","maxStepIndex","prevSteps","registeredFieldsHistory","addMessage","description","values","actionLinks","AlertActionLink","removeMessage","computeSourceStatus","createdSource","availability_status_error","endpoint","checkSubmit","initialWizardState","Section","CloudCards","PrimaryToolbar","pagination","actionsConfig","Link","to","tabIndex","filterConfig","items","filterValues","onChange","filterVendorAppTypes","event","_value","selectedValue","checked","UNAVAILABLE","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips","vendor","schema","authentication"],"mappings":"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","file":"js/sourcesPage.49ba8b6d78d1110d5bd6.js","sourcesContent":["import React from 'react';\n\nimport { Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody, Bullseye, Title } from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.small}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundTitle',\n            defaultMessage: 'No sources found',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundDescription',\n            defaultMessage: 'No sources match the filter criteria. Remove all filters or clear all filters to show sources.',\n          })}\n        </EmptyStateBody>\n        <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n          {intl.formatMessage({\n            id: 'sources.clearAllFilters',\n            defaultMessage: 'Clear all filters',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default EmptyStateTable;\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, sortable, wrappable } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\n\nimport { sortEntities } from '../../redux/sources/actions';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { sourcesColumns, COLUMN_COUNT } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { replaceRouteId, routes } from '../../Routes';\n\nconst itemToCells = (item, columns, sourceTypes, appTypes) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((col) => ({\n      title: col.formatter\n        ? col.formatter(item[col.value], item, {\n            sourceTypes,\n            appTypes,\n          })\n        : item[col.value] || '',\n    }));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes, removingSources) =>\n  entities\n    .filter(({ hidden }) => !hidden)\n    .reduce((acc, item) => {\n      const isDeleting = removingSources.includes(item.id);\n\n      return [\n        ...acc,\n        {\n          ...item,\n          isOpen: !!item.expanded,\n          cells: itemToCells(item, columns, sourceTypes, appTypes),\n          disableActions: isDeleting,\n          isDeleting,\n        },\n      ];\n    }, []);\n\nexport const prepareColumnsCells = (columns) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((column) => ({\n      title: column.title || '',\n      value: column.value,\n      hidden: column.hidden,\n      transforms: [wrappable],\n      ...(column.sortable && { transforms: [sortable, wrappable] }),\n    }));\n\nconst reducer = (state, payload) => ({ ...state, ...payload });\n\nconst initialState = (columns) => ({\n  rows: [],\n  sortBy: {},\n  isLoaded: false,\n  cells: prepareColumnsCells(columns),\n});\n\nexport const insertEditAction = (actions, intl, push, isOrgAdmin, disabledProps) =>\n  actions.splice(1, 0, {\n    title: intl.formatMessage({\n      id: 'sources.edit',\n      defaultMessage: 'Edit',\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesDetail.path, id)),\n    ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n  });\n\nexport const actionResolver = (intl, push, isOrgAdmin) => (rowData) => {\n  const tooltip = intl.formatMessage({\n    id: 'sources.notAdminButton',\n    defaultMessage: 'To perform this action, you must be granted write permissions from your Organization Administrator.',\n  });\n\n  const disabledProps = {\n    tooltip,\n    isDisabled: true,\n    className: 'ins-c-sources__disabled-drodpown-item',\n  };\n\n  const actions = [];\n\n  const isSourceEditable = !rowData.imported;\n\n  if (isSourceEditable) {\n    insertEditAction(actions, intl, push, isOrgAdmin, disabledProps);\n  }\n\n  actions.push({\n    title: intl.formatMessage({\n      id: 'sources.remove',\n      defaultMessage: 'Remove',\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesRemove.path, id)),\n    ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n  });\n\n  return actions;\n};\n\nconst SourcesTable = () => {\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const loaded = useIsLoaded();\n  const writePermissions = useHasWritePermissions();\n\n  const {\n    appTypes,\n    entities,\n    sourceTypes,\n    sourceTypesLoaded,\n    appTypesLoaded,\n    sortBy,\n    sortDirection,\n    numberOfEntities,\n    removingSources,\n  } = useSelector(({ sources }) => sources, shallowEqual);\n  const reduxDispatch = useDispatch();\n\n  const notSortable = numberOfEntities === 0 || !loaded;\n\n  const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n  const refreshColumns = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  const refreshSources = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      rows: renderSources(entities, columns, sourceTypes, appTypes, removingSources),\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  useEffect(() => {\n    if (loaded && sourceTypesLoaded && appTypesLoaded) {\n      dispatch({ isLoaded: true });\n      refreshSources();\n    } else {\n      dispatch({ isLoaded: false });\n      refreshColumns();\n    }\n  }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n  useEffect(() => {\n    if (state.isLoaded) {\n      refreshSources();\n    }\n  }, [entities, removingSources]);\n\n  let shownRows = state.rows;\n  if (numberOfEntities === 0 && state.isLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: COLUMN_COUNT },\n            title: <EmptyStateTable />,\n          },\n        ],\n      },\n    ];\n  } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: {\n              colSpan: COLUMN_COUNT,\n              className: 'sources-placeholder-row',\n            },\n            title: <PlaceHolderTable />,\n          },\n        ],\n      },\n    ];\n  }\n\n  return (\n    <Table\n      gridBreakPoint=\"grid-lg\"\n      aria-label={intl.formatMessage({\n        id: 'sources.list',\n        defaultMessage: 'List of Sources',\n      })}\n      onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n      sortBy={{\n        index: state.cells.map((cell) => (cell.hidden ? 'hidden' : cell.value)).indexOf(sortBy),\n        direction: sortDirection,\n      }}\n      rows={shownRows}\n      cells={state.cells}\n      actionResolver={loaded && numberOfEntities > 0 ? actionResolver(intl, push, writePermissions) : undefined}\n      rowWrapper={RowWrapperLoader}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default SourcesTable;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Button, EmptyState, EmptyStateIcon, EmptyStateBody, Bullseye, Title, Text } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\n\nconst SourcesErrorState = () => {\n  const intl = useIntl();\n\n  return (\n    <Bullseye>\n      <EmptyState className=\"ins-c-sources__empty-state\">\n        <EmptyStateIcon icon={ExclamationCircleIcon} color=\"var(--pf-global--danger-color--100)\" />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.errorStateTitle',\n            defaultMessage: 'Something went wrong',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage(\n            {\n              id: 'sources.errorStateBody',\n              defaultMessage:\n                'There was a problem processing the request. Try refreshing the page. If the problem persists, contact <a>Red Hat support.</a>',\n            },\n            {\n              // eslint-disable-next-line react/display-name\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href=\"https://access.redhat.com/support\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            }\n          )}\n        </EmptyStateBody>\n        <Button className=\"pf-u-mt-xl\" variant=\"primary\" component=\"a\" href={window.location.href}>\n          {intl.formatMessage({\n            id: 'sources.retry',\n            defaultMessage: 'Retry',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default SourcesErrorState;\n","import React from 'react';\nimport awesomeDebounce from 'awesome-debounce-promise';\n\nimport { AlertActionLink } from '@patternfly/react-core';\n\nimport { loadEntities, filterSources, addMessage, removeMessage } from '../../redux/sources/actions';\nimport { replaceRouteId, routes } from '../../Routes';\nimport { AVAILABLE } from '../../views/formatters';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = {\n  pageNumber: 1,\n  sortBy: 'created_at',\n  sortDirection: 'desc',\n};\n\nexport const afterSuccess = (dispatch) => dispatch(loadEntities(afterSuccessLoadParameters));\n\nexport const prepareSourceTypeSelection = (sourceTypes) =>\n  sourceTypes.map(({ id, product_name }) => ({ label: product_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const prepareApplicationTypeSelection = (appTypes) =>\n  appTypes.map(({ id, display_name }) => ({ label: display_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) =>\n  dispatch(\n    filterSources({\n      [column]: value,\n    })\n  );\n\nexport const chipsFormatters = (key, filterValue, sourceTypes, appTypes, intl) =>\n  ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n      category: 'Source Type',\n      key,\n      chips: filterValue[key].map((id) => {\n        const sourceType = sourceTypes.find((type) => type.id === id);\n\n        return { name: sourceType ? sourceType.product_name : id, value: id };\n      }),\n    }),\n    applications: () => ({\n      category: 'Application',\n      key,\n      chips: filterValue[key].map((id) => {\n        const appType = appTypes.find((type) => type.id === id);\n\n        return { name: appType ? appType.display_name : id, value: id };\n      }),\n    }),\n    availability_status: () => ({\n      category: 'Status',\n      key,\n      chips: [\n        {\n          value: filterValue[key][0],\n          name:\n            filterValue[key][0] === AVAILABLE\n              ? intl.formatMessage({\n                  id: 'sources.available',\n                  defaultMessage: 'Available',\n                })\n              : intl.formatMessage({\n                  id: 'sources.unavailable',\n                  defaultMessage: 'Unavailable',\n                }),\n        },\n      ],\n    }),\n  }[key] || (() => ({ name: key })));\n\nexport const prepareChips = (filterValue, sourceTypes, appTypes, intl) =>\n  Object.keys(filterValue)\n    .map((key) =>\n      filterValue[key] && filterValue[key].length > 0\n        ? chipsFormatters(key, filterValue, sourceTypes, appTypes, intl)()\n        : undefined\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n  if (deleteAll) {\n    return Object.keys(filterValue).reduce(\n      (acc, curr) => ({\n        ...acc,\n        [curr]: undefined,\n      }),\n      {}\n    );\n  }\n\n  const chip = chips[0];\n\n  return {\n    ...filterValue,\n    [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined,\n  };\n};\n\nexport const loadedTypes = (types, loaded) => (loaded && types.length > 0 ? types : undefined);\n\nexport const checkSubmit = (state, dispatch, push, intl, stateDispatch) => {\n  const id = `sources-wizard-notification-${Date.now()}`;\n\n  if (location.pathname.split('/').filter(Boolean).pop() !== routes.sourcesNew.path.split('/').pop()) {\n    if (state.isErrored) {\n      const { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory } = state.wizardState;\n\n      dispatch(\n        addMessage({\n          title: intl.formatMessage({\n            id: 'alert.error.title',\n            defaultMessage: 'Error adding source',\n          }),\n          description: intl.formatMessage(\n            {\n              id: 'alert.error.description',\n              defaultMessage:\n                'There was a problem while trying to add source {name}. Please try again. If the error persists, open a support case.',\n            },\n            { name: <b>{state.values.source.name}</b> }\n          ),\n          variant: 'danger',\n          id,\n          actionLinks: (\n            <AlertActionLink\n              onClick={() => {\n                stateDispatch({\n                  type: 'retryWizard',\n                  initialValues: state.values,\n                  initialState: { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory },\n                });\n                dispatch(removeMessage(id));\n                push(routes.sourcesNew.path);\n              }}\n            >\n              {intl.formatMessage({\n                id: 'alert.error.link',\n                defaultMessage: 'Retry',\n              })}\n            </AlertActionLink>\n          ),\n        })\n      );\n    } else {\n      switch (computeSourceStatus(state.createdSource)) {\n        case 'unavailable':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.error.title',\n                defaultMessage: 'Source configuration unsuccessful',\n              }),\n              description: (\n                <React.Fragment>\n                  {state.createdSource.applications?.[0]?.availability_status_error ||\n                    state.createdSource.endpoint?.[0]?.availability_status_error ||\n                    intl.formatMessage({\n                      id: 'wizard.unknownError',\n                      defaultMessage: 'Unknown error',\n                    })}\n                  &nbsp;[<b>{state.createdSource.name}</b>]\n                </React.Fragment>\n              ),\n              variant: 'danger',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.unavailable.link',\n                    defaultMessage: 'Edit source',\n                  })}\n                </AlertActionLink>\n              ),\n            })\n          );\n          break;\n        case 'timeout':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.timeout.title',\n                defaultMessage: 'Source configuration in progress',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.timeout.description',\n                  defaultMessage:\n                    'We are still working to confirm credentials for source {name}. To track progress, check the Status column in the Sources table.',\n                },\n                { name: <b>{state.createdSource.name}</b> }\n              ),\n              variant: 'info',\n            })\n          );\n          break;\n        default:\n          dispatch(\n            addMessage({\n              title: intl.formatMessage(\n                {\n                  id: 'alert.success.title',\n                  defaultMessage: '{type} connection successful',\n                },\n                { type: state.sourceTypes.find(({ id }) => id === state.createdSource.source_type_id)?.product_name }\n              ),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.success.description',\n                  defaultMessage: 'Source {name} was successfully added',\n                },\n                { name: <b>{state.createdSource.name}</b> }\n              ),\n              variant: 'success',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.success.link',\n                    defaultMessage: 'View source details',\n                  })}\n                </AlertActionLink>\n              ),\n            })\n          );\n          break;\n      }\n    }\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Loader } from '../SourcesTable/loaders';\n\nconst ImageWithPlaceholder = ({ src, ...rest }) => {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <React.Fragment>\n      {!loaded && <Loader height=\"40px\" width=\"110px\" {...rest} />}\n      <img src={src} onLoad={() => setLoaded(true)} style={{ display: loaded ? 'initial' : 'none' }} {...rest} />\n    </React.Fragment>\n  );\n};\n\nImageWithPlaceholder.propTypes = {\n  src: PropTypes.string.isRequired,\n};\n\nexport default ImageWithPlaceholder;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Tile, Tooltip } from '@patternfly/react-core';\n\nconst DisabledTile = (props) => {\n  const intl = useIntl();\n\n  const tooltip = intl.formatMessage({\n    id: 'sources.notAdminButton',\n    defaultMessage: 'To perform this action, you must be granted write permissions from your Organization Administrator.',\n  });\n\n  return (\n    <Tooltip content={tooltip}>\n      <div className=\"disabled-tile-with-tooltip\">\n        <Tile {...props} isDisabled />\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default DisabledTile;\n","import PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes } from '../../Routes';\n\nimport { Tile } from '@patternfly/react-core';\n\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport DisabledTile from '../TilesShared/DisabledTile';\nimport { filterVendorTypes } from '../../utilities/filterTypes';\n\nconst TilesArray = ({ setSelectedType, mapper }) => {\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n  const activeVendor = useSelector(({ sources }) => sources.activeVendor);\n\n  const { push } = useHistory();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const openWizard = (type) => {\n    setSelectedType(type);\n    push(routes.sourcesNew.path);\n  };\n\n  const TileComponent = hasWritePermissions ? Tile : DisabledTile;\n\n  return sourceTypes\n    .filter(filterVendorTypes(activeVendor))\n    .sort((a, b) => a.product_name.localeCompare(b.product_name))\n    .map(({ name }) => mapper(name, openWizard, TileComponent));\n};\n\nTilesArray.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n  mapper: PropTypes.func.isRequired,\n};\n\nexport default TilesArray;\n","import React from 'react';\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    amazon: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Amazon Web Services\"\n        onClick={() => openWizard('amazon')}\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/aws.svg\"\n            alt=\"aws logo\"\n          />\n        }\n      />\n    ),\n    google: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Google Cloud\"\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        onClick={() => openWizard('google')}\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/google-cloud-short.svg\"\n            alt=\"google logo\"\n          />\n        }\n      />\n    ),\n    azure: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Microsoft Azure\"\n        onClick={() => openWizard('azure')}\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/microsoft-azure-short.svg\"\n            alt=\"azure logo\"\n          />\n        }\n      />\n    ),\n  }[type]);\n\nconst CloudTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default CloudTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardTitle, CardFooter, Text } from '@patternfly/react-core';\n\nimport CloudTiles from './CloudTiles';\n\nconst CLOUD_CATALOG_HREF = 'https://catalog.redhat.com/cloud';\n\nconst CloudEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"ins-c-sources__cloud-empty-state-card pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'cloud.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your public clouds',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'cloud.emptystate.cardDescription',\n            defaultMessage: 'Select an available provider.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <CloudTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n      <CardFooter className=\"cloud-footer\">\n        <Text className=\"catalog-link pf-u-mt-lg\">\n          {intl.formatMessage(\n            {\n              id: 'cloud.emptystate.catalogLink',\n              defaultMessage: 'Looking for a different provider? <a>See all Red Hat Certified Cloud and Service Providers</a>',\n            },\n            {\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href={CLOUD_CATALOG_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            }\n          )}\n        </Text>\n      </CardFooter>\n    </Card>\n  );\n};\n\nCloudEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default CloudEmptyState;\n","import React from 'react';\n\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst icon = (\n  <ImageWithPlaceholder className=\"redhat-icon\" src=\"/apps/frontend-assets/red-hat-logos/stacked.svg\" alt=\"red hat logo\" />\n);\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    ['ansible-tower']: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Ansible Automation Platform\"\n        onClick={() => openWizard('ansible-tower')}\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        icon={icon}\n      />\n    ),\n    openshift: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"OpenShift Container Platfrom\"\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        onClick={() => openWizard('openshift')}\n        icon={icon}\n      />\n    ),\n  }[type]);\n\nconst RedHatTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default RedHatTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardTitle, Text } from '@patternfly/react-core';\n\nimport RedHatTiles from './RedHatTiles';\n\nconst RedHatEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"ins-c-sources__cloud-empty-state-card pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'redhat.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your Red Hat applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'redhat.emptystate.cardDescription',\n            defaultMessage: 'Select an available application.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <RedHatTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nRedHatEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default RedHatEmptyState;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Tabs, Tab, TabTitleIcon, TabTitleText } from '@patternfly/react-core';\nimport RedhatIcon from '@patternfly/react-icons/dist/esm/icons/redhat-icon';\nimport CloudIcon from '@patternfly/react-icons/dist/esm/icons/cloud-icon';\n\nimport { setActiveVendor } from '../redux/sources/actions';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\n\nconst TabNavigation = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const activeVendor = useSelector(({ sources }) => sources.activeVendor);\n\n  return (\n    <Tabs activeKey={activeVendor} onSelect={(_e, key) => dispatch(setActiveVendor(key))} className=\"pf-u-mt-md\">\n      <Tab\n        eventKey={CLOUD_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <CloudIcon />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.cloudSources', defaultMessage: 'Cloud sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n      <Tab\n        eventKey={REDHAT_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <RedhatIcon />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.redhatSources', defaultMessage: 'Red Hat sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n    </Tabs>\n  );\n};\n\nexport default TabNavigation;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport TabNavigation from './TabNavigation';\n\nconst SourcesHeader = () => {\n  const intl = useIntl();\n\n  return (\n    <PageHeader className=\"pf-u-pb-0\">\n      <PageHeaderTitle\n        title={intl.formatMessage({\n          id: 'sources.sources',\n          defaultMessage: 'Sources',\n        })}\n      />\n      <TabNavigation />\n    </PageHeader>\n  );\n};\n\nexport default React.memo(SourcesHeader);\n","import React, { useEffect, lazy, Suspense, useReducer } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\n\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\n\nimport { filterSources, pageAndSize } from '../redux/sources/actions';\nimport SourcesTable from '../components/SourcesTable/SourcesTable';\nimport SourcesErrorState from '../components/SourcesErrorState';\nimport { routes } from '../Routes';\n\nconst SourceRemoveModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"remove\" */\n    '../components/SourceRemoveModal/SourceRemoveModal'\n  )\n);\nconst AddSourceWizard = lazy(() =>\n  import(/* webpackChunkName: \"addSource\" */ '../components/addSourceWizard/index').then((module) => ({\n    default: module.AddSourceWizard,\n  }))\n);\n\nimport {\n  prepareChips,\n  removeChips,\n  setFilter,\n  debouncedFiltering,\n  prepareSourceTypeSelection,\n  afterSuccess,\n  loadedTypes,\n  prepareApplicationTypeSelection,\n  checkSubmit,\n} from './Sources/helpers';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../hooks/useHasWritePermissions';\nimport CustomRoute from '../components/CustomRoute/CustomRoute';\nimport { PaginationLoader } from '../components/SourcesTable/loaders';\nimport CloudCards from '../components/CloudTiles/CloudCards';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\nimport CloudEmptyState from '../components/CloudTiles/CloudEmptyState';\nimport { AVAILABLE, UNAVAILABLE } from '../views/formatters';\nimport RedHatEmptyState from '../components/RedHatTiles/RedHatEmptyState';\nimport { filterVendorTypes } from '../utilities/filterTypes';\nimport { filterVendorAppTypes } from '../utilities/filterApps';\nimport SourcesHeader from '../components/SourcesHeader';\n\nconst initialState = {\n  filter: undefined,\n  selectedType: undefined,\n  wizardInitialState: undefined,\n  wizardInitialValues: undefined,\n};\n\nconst reducer = (state, { type, value, selectedType, initialValues, initialState }) => {\n  switch (type) {\n    case 'setFilterValue':\n      return { ...state, filter: value };\n    case 'setSelectedType':\n      return { ...state, selectedType };\n    case 'retryWizard':\n      return { ...state, wizardInitialState: initialState, wizardInitialValues: initialValues };\n    case 'closeWizard':\n      return { ...state, selectedType: undefined, wizardInitialState: undefined, wizardInitialValues: undefined };\n  }\n};\n\nconst SourcesPage = () => {\n  const [{ filter, selectedType, wizardInitialState, wizardInitialValues }, stateDispatch] = useReducer(reducer, initialState);\n\n  const entitiesLoaded = useIsLoaded();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const history = useHistory();\n  const intl = useIntl();\n\n  const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n  const {\n    filterValue,\n    numberOfEntities,\n    appTypes,\n    pageSize,\n    pageNumber,\n    fetchingError,\n    sourceTypes,\n    paginationClicked,\n    appTypesLoaded,\n    sourceTypesLoaded,\n    activeVendor,\n  } = sources;\n\n  const loaded = entitiesLoaded && sourceTypesLoaded && appTypesLoaded;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (filter !== filterValue.name) {\n      stateDispatch({ type: 'setFilterValue', value: filterValue.name });\n    }\n  }, [filterValue.name]);\n\n  const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n  const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n  const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n  useEffect(() => {\n    if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n      onSetPage({}, maximumPageNumber);\n    }\n  });\n\n  const paginationConfig = {\n    itemCount: numberOfEntities,\n    page: pageNumber,\n    perPage: pageSize,\n    onSetPage,\n    onPerPageSelect,\n    className: 'top-pagination',\n  };\n\n  const paginationConfigBottom = {\n    ...paginationConfig,\n    dropDirection: 'up',\n    variant: 'bottom',\n    isCompact: false,\n    className: 'bottom-pagination',\n  };\n\n  const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n  const filteredSourceTypes = sourceTypes.filter(filterVendorTypes(activeVendor));\n\n  const mainContent = () => (\n    <React.Fragment>\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n        actionsConfig={\n          hasWritePermissions\n            ? {\n                actions: [\n                  <Link to={routes.sourcesNew.path} key=\"addSourceButton\">\n                    <Button variant=\"primary\" id=\"addSourceButton\">\n                      {intl.formatMessage({\n                        id: 'sources.addSource',\n                        defaultMessage: 'Add source',\n                      })}\n                    </Button>\n                  </Link>,\n                ],\n              }\n            : {\n                actions: [\n                  <Tooltip\n                    content={intl.formatMessage({\n                      id: 'sources.notAdminAddButton',\n                      defaultMessage:\n                        'To add a source, you must be granted write permissions from your Organization Administrator.',\n                    })}\n                    key=\"addSourceButton\"\n                  >\n                    <span tabIndex=\"0\">\n                      <Button variant=\"primary\" isDisabled id=\"addSourceButton\">\n                        {intl.formatMessage({\n                          id: 'sources.addSource',\n                          defaultMessage: 'Add source',\n                        })}\n                      </Button>\n                    </span>\n                  </Tooltip>,\n                ],\n              }\n        }\n        filterConfig={{\n          items: [\n            {\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              filterValues: {\n                'aria-label': intl.formatMessage({\n                  id: 'sources.filterByName',\n                  defaultMessage: 'Filter by name',\n                }),\n                onChange: (_event, value) => {\n                  stateDispatch({ type: 'setFilterValue', value });\n                  debouncedFiltering(() => setFilter('name', value, dispatch));\n                },\n                value: filter,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.type',\n                defaultMessage: 'Type',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('source_type_id', value, dispatch),\n                items: prepareSourceTypeSelection(filteredSourceTypes),\n                value: filterValue.source_type_id,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.application',\n                defaultMessage: 'Application',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('applications', value, dispatch),\n                items: prepareApplicationTypeSelection(\n                  appTypes?.filter(filterVendorAppTypes(filteredSourceTypes, activeVendor)) || []\n                ),\n                value: filterValue.applications,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.availabilityStatus',\n                defaultMessage: 'Status',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (event, _value, selectedValue) =>\n                  setFilter('availability_status', event.target.checked ? [selectedValue] : [], dispatch),\n                items: [\n                  { label: intl.formatMessage({ id: 'sources.available', defaultMessage: 'Available' }), value: AVAILABLE },\n                  {\n                    label: intl.formatMessage({ id: 'sources.unavailable', defaultMessage: 'Unavailable' }),\n                    value: UNAVAILABLE,\n                  },\n                ],\n                value: filterValue.availability_status,\n              },\n            },\n          ],\n        }}\n        activeFiltersConfig={{\n          filters: prepareChips(filterValue, sourceTypes, appTypes, intl),\n          onDelete: (_event, chips, deleteAll) => dispatch(filterSources(removeChips(chips, filterValue, deleteAll))),\n        }}\n      />\n      <SourcesTable />\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfigBottom : undefined}\n      />\n    </React.Fragment>\n  );\n\n  const hasSomeFilter =\n    Object.entries(filterValue)\n      .map(([_key, value]) => value && (!Array.isArray(value) || (Array.isArray(value) && value.length > 0)))\n      .filter(Boolean).length > 0;\n\n  const showEmptyState = loaded && numberOfEntities === 0 && !hasSomeFilter;\n  const showInfoCards = activeVendor === CLOUD_VENDOR && !showEmptyState;\n\n  const setSelectedType = (selectedType) => stateDispatch({ type: 'setSelectedType', selectedType });\n\n  return (\n    <React.Fragment>\n      <Suspense fallback={null}>\n        <CustomRoute exact route={routes.sourcesRemove} Component={SourceRemoveModal} />\n        <CustomRoute\n          exact\n          route={routes.sourcesNew}\n          Component={AddSourceWizard}\n          componentProps={{\n            sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n            applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n            isOpen: true,\n            onClose: () => {\n              stateDispatch({ type: 'closeWizard' });\n              history.push(routes.sources.path);\n            },\n            afterSuccess: (source) => afterSuccess(dispatch, source),\n            hideSourcesButton: true,\n            selectedType,\n            submitCallback: (state) => checkSubmit(state, dispatch, history.push, intl, stateDispatch),\n            initialValues: wizardInitialValues,\n            initialWizardState: wizardInitialState,\n            activeVendor,\n          }}\n        />\n      </Suspense>\n      <SourcesHeader />\n      <Section type=\"content\">\n        {showInfoCards && <CloudCards />}\n        {fetchingError && <SourcesErrorState />}\n        {!fetchingError && showEmptyState && activeVendor === CLOUD_VENDOR && (\n          <CloudEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && showEmptyState && activeVendor === REDHAT_VENDOR && (\n          <RedHatEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && !showEmptyState && mainContent()}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nexport default SourcesPage;\n","import { CLOUD_VENDOR, REDHAT_VENDOR } from './constants';\n\nconst filterTypes = (type) => type.schema?.authentication && type.schema?.endpoint;\n\nexport const filterVendorTypes = (activeVendor) => ({ vendor, name }) =>\n  activeVendor === CLOUD_VENDOR ? vendor !== REDHAT_VENDOR : vendor === REDHAT_VENDOR && name !== 'satellite';\n\nexport default filterTypes;\n"],"sourceRoot":""}