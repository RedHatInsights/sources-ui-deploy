{"version":3,"sources":["webpack://sources-ui/./src/addSourceWizard/utilities/filterTypes.js","webpack://sources-ui/./src/components/SourcesTable/EmptyStateTable.js","webpack://sources-ui/./src/components/SourcesTable/SourcesTable.js","webpack://sources-ui/./src/components/SourcesErrorState.js","webpack://sources-ui/./src/pages/Sources/helpers.js","webpack://sources-ui/./src/components/TabNavigation.js","webpack://sources-ui/./src/components/TilesShared/ImageWithPlaceholder.js","webpack://sources-ui/./src/components/TilesShared/DisabledTile.js","webpack://sources-ui/./src/components/TilesShared/TilesArray.js","webpack://sources-ui/./src/components/CloudTiles/CloudTiles.js","webpack://sources-ui/./src/components/CloudTiles/CloudEmptyState.js","webpack://sources-ui/./src/components/RedHatTiles/RedHatTiles.js","webpack://sources-ui/./src/components/RedHatTiles/RedHatEmptyState.js","webpack://sources-ui/./src/pages/Sources.js"],"names":["filterVendorTypes","vendor","name","getActiveVendor","CLOUD_VENDOR","REDHAT_VENDOR","type","schema","authentication","endpoint","intl","useIntl","dispatch","useDispatch","Bullseye","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","formatMessage","id","defaultMessage","EmptyStateBody","Button","onClick","clearFilters","itemToCells","item","columns","sourceTypes","appTypes","filter","column","title","hidden","map","col","formatter","value","renderSources","entities","removingSources","reduce","acc","isDeleting","includes","isOpen","expanded","cells","disableActions","prepareColumnsCells","transforms","wrappable","sortable","reducer","state","payload","actionResolver","push","isOrgAdmin","rowData","disabledProps","tooltip","isDisabled","className","actions","imported","splice","_ev","_i","replaceRouteId","routes","component","insertEditAction","useHistory","loaded","useIsLoaded","writePermissions","useHasWritePermissions","useSelector","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","sortBy","sortDirection","numberOfEntities","reduxDispatch","notSortable","useReducer","sourcesColumns","rows","isLoaded","refreshSources","useEffect","refreshColumns","shownRows","heightAuto","props","colSpan","COLUMN_COUNT","Table","gridBreakPoint","aria-label","onSort","_event","key","direction","sortEntities","index","cell","indexOf","undefined","rowWrapper","RowWrapperLoader","TableHeader","TableBody","ExclamationCircleIcon","color","a","chunks","Text","href","target","rel","window","location","debouncedFiltering","awesomeDebounce","refresh","afterSuccessLoadParameters","pageNumber","prepareSourceTypeSelection","label","product_name","sort","b","localeCompare","prepareApplicationTypeSelection","display_name","setFilter","filterSources","prepareChips","filterValue","Object","keys","length","source_type_id","category","chips","sourceType","find","applications","appType","availability_status","AVAILABLE","chipsFormatters","Boolean","loadedTypes","types","activeVendor","Tabs","activeKey","onSelect","_e","setActiveVendor","Tab","eventKey","TabTitleIcon","TabTitleText","T","ImageWithPlaceholder","src","rest","useState","setLoaded","height","width","onLoad","style","display","propTypes","PropTypes","Tooltip","content","Tile","TilesArray","setSelectedType","mapper","hasWritePermissions","openWizard","TileComponent","DisabledTile","amazon","isStacked","alt","google","azure","CloudEmptyState","Card","CardTitle","CardBody","CardFooter","RedHatEmptyState","SourceRemoveModal","lazy","AddSourceWizard","then","module","default","initialState","selectedType","wizardInitialState","wizardInitialValues","initialValues","stateDispatch","entitiesLoaded","history","pageSize","fetchingError","paginationClicked","onSetPage","page","pageAndSize","maximumPageNumber","Math","ceil","max","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","filteredSourceTypes","hasSomeFilter","entries","Array","isArray","showEmptyState","showInfoCards","Suspense","fallback","CustomRoute","exact","route","Component","componentProps","applicationTypes","onClose","afterSuccess","source","loadEntities","hideSourcesButton","submitCallback","Date","now","pathname","split","pop","isErrored","wizardState","activeStep","activeStepIndex","maxStepIndex","prevSteps","registeredFieldsHistory","addMessage","description","values","actionLinks","AlertActionLink","removeMessage","computeSourceStatus","createdSource","availability_status_error","checkSubmit","initialWizardState","PageHeader","PageHeaderTitle","Section","CloudCards","PrimaryToolbar","pagination","actionsConfig","Link","to","tabIndex","filterConfig","items","filterValues","onChange","filterVendorAppTypes","event","_value","selectedValue","checked","UNAVAILABLE","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips"],"mappings":"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","file":"js/sourcesPage.7d3ee08aa634a5c216a0.js","sourcesContent":["import { CLOUD_VENDOR, getActiveVendor, REDHAT_VENDOR } from '../../utilities/constants';\n\nconst filterTypes = (type) => type.schema?.authentication && type.schema?.endpoint;\n\nexport const filterVendorTypes = ({ vendor, name }) =>\n  getActiveVendor() === CLOUD_VENDOR ? vendor !== REDHAT_VENDOR : vendor === REDHAT_VENDOR && name !== 'satellite';\n\nexport default filterTypes;\n","import React from 'react';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.small}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundTitle',\n            defaultMessage: 'No sources found',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundDescription',\n            defaultMessage: 'No sources match the filter criteria. Remove all filters or clear all filters to show sources.',\n          })}\n        </EmptyStateBody>\n        <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n          {intl.formatMessage({\n            id: 'sources.clearAllFilters',\n            defaultMessage: 'Clear all filters',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default EmptyStateTable;\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, sortable, wrappable } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\n\nimport { sortEntities } from '../../redux/sources/actions';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { sourcesColumns, COLUMN_COUNT } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { replaceRouteId, routes } from '../../Routes';\n\nconst itemToCells = (item, columns, sourceTypes, appTypes) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((col) => ({\n      title: col.formatter\n        ? col.formatter(item[col.value], item, {\n            sourceTypes,\n            appTypes,\n          })\n        : item[col.value] || '',\n    }));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes, removingSources) =>\n  entities\n    .filter(({ hidden }) => !hidden)\n    .reduce((acc, item) => {\n      const isDeleting = removingSources.includes(item.id);\n\n      return [\n        ...acc,\n        {\n          ...item,\n          isOpen: !!item.expanded,\n          cells: itemToCells(item, columns, sourceTypes, appTypes),\n          disableActions: isDeleting,\n          isDeleting,\n        },\n      ];\n    }, []);\n\nexport const prepareColumnsCells = (columns) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((column) => ({\n      title: column.title || '',\n      value: column.value,\n      hidden: column.hidden,\n      transforms: [wrappable],\n      ...(column.sortable && { transforms: [sortable, wrappable] }),\n    }));\n\nconst reducer = (state, payload) => ({ ...state, ...payload });\n\nconst initialState = (columns) => ({\n  rows: [],\n  sortBy: {},\n  isLoaded: false,\n  cells: prepareColumnsCells(columns),\n});\n\nexport const insertEditAction = (actions, intl, push, isOrgAdmin, disabledProps) =>\n  actions.splice(1, 0, {\n    title: intl.formatMessage({\n      id: 'sources.edit',\n      defaultMessage: 'Edit',\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesDetail.path, id)),\n    ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n  });\n\nexport const actionResolver = (intl, push, isOrgAdmin) => (rowData) => {\n  const tooltip = intl.formatMessage({\n    id: 'sources.notAdminButton',\n    defaultMessage: 'To perform this action, you must be granted write permissions from your Organization Administrator.',\n  });\n\n  const disabledProps = {\n    tooltip,\n    isDisabled: true,\n    className: 'ins-c-sources__disabled-drodpown-item',\n  };\n\n  const actions = [];\n\n  const isSourceEditable = !rowData.imported;\n\n  if (isSourceEditable) {\n    insertEditAction(actions, intl, push, isOrgAdmin, disabledProps);\n  }\n\n  actions.push({\n    title: intl.formatMessage({\n      id: 'sources.remove',\n      defaultMessage: 'Remove',\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesRemove.path, id)),\n    ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n  });\n\n  return actions;\n};\n\nconst SourcesTable = () => {\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const loaded = useIsLoaded();\n  const writePermissions = useHasWritePermissions();\n\n  const {\n    appTypes,\n    entities,\n    sourceTypes,\n    sourceTypesLoaded,\n    appTypesLoaded,\n    sortBy,\n    sortDirection,\n    numberOfEntities,\n    removingSources,\n  } = useSelector(({ sources }) => sources, shallowEqual);\n  const reduxDispatch = useDispatch();\n\n  const notSortable = numberOfEntities === 0 || !loaded;\n\n  const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n  const refreshColumns = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  const refreshSources = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      rows: renderSources(entities, columns, sourceTypes, appTypes, removingSources),\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  useEffect(() => {\n    if (loaded && sourceTypesLoaded && appTypesLoaded) {\n      dispatch({ isLoaded: true });\n      refreshSources();\n    } else {\n      dispatch({ isLoaded: false });\n      refreshColumns();\n    }\n  }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n  useEffect(() => {\n    if (state.isLoaded) {\n      refreshSources();\n    }\n  }, [entities, removingSources]);\n\n  let shownRows = state.rows;\n  if (numberOfEntities === 0 && state.isLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: COLUMN_COUNT },\n            title: <EmptyStateTable />,\n          },\n        ],\n      },\n    ];\n  } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: {\n              colSpan: COLUMN_COUNT,\n              className: 'sources-placeholder-row',\n            },\n            title: <PlaceHolderTable />,\n          },\n        ],\n      },\n    ];\n  }\n\n  return (\n    <Table\n      gridBreakPoint=\"grid-lg\"\n      aria-label={intl.formatMessage({\n        id: 'sources.list',\n        defaultMessage: 'List of Sources',\n      })}\n      onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n      sortBy={{\n        index: state.cells.map((cell) => (cell.hidden ? 'hidden' : cell.value)).indexOf(sortBy),\n        direction: sortDirection,\n      }}\n      rows={shownRows}\n      cells={state.cells}\n      actionResolver={loaded && numberOfEntities > 0 ? actionResolver(intl, push, writePermissions) : undefined}\n      rowWrapper={RowWrapperLoader}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default SourcesTable;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { EmptyState } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\nimport { Text } from '@patternfly/react-core/dist/esm/components/Text/Text';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\n\nconst SourcesErrorState = () => {\n  const intl = useIntl();\n\n  return (\n    <Bullseye>\n      <EmptyState className=\"ins-c-sources__empty-state\">\n        <EmptyStateIcon icon={ExclamationCircleIcon} color=\"var(--pf-global--danger-color--100)\" />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.errorStateTitle',\n            defaultMessage: 'Something went wrong',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage(\n            {\n              id: 'sources.errorStateBody',\n              defaultMessage:\n                'There was a problem processing the request. Try refreshing the page. If the problem persists, contact <a>Red Hat support.</a>',\n            },\n            {\n              // eslint-disable-next-line react/display-name\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href=\"https://access.redhat.com/support\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            }\n          )}\n        </EmptyStateBody>\n        <Button className=\"pf-u-mt-xl\" variant=\"primary\" component=\"a\" href={window.location.href}>\n          {intl.formatMessage({\n            id: 'sources.retry',\n            defaultMessage: 'Retry',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default SourcesErrorState;\n","import React from 'react';\nimport awesomeDebounce from 'awesome-debounce-promise';\n\nimport { AlertActionLink } from '@patternfly/react-core/dist/esm/components/Alert/AlertActionLink';\n\nimport { loadEntities, filterSources, addMessage, removeMessage } from '../../redux/sources/actions';\nimport { replaceRouteId, routes } from '../../Routes';\nimport { AVAILABLE } from '../../views/formatters';\nimport computeSourceStatus from '../../addSourceWizard/utilities/computeSourceStatus';\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = {\n  pageNumber: 1,\n  sortBy: 'created_at',\n  sortDirection: 'desc',\n};\n\nexport const afterSuccess = (dispatch) => dispatch(loadEntities(afterSuccessLoadParameters));\n\nexport const prepareSourceTypeSelection = (sourceTypes) =>\n  sourceTypes.map(({ id, product_name }) => ({ label: product_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const prepareApplicationTypeSelection = (appTypes) =>\n  appTypes.map(({ id, display_name }) => ({ label: display_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) =>\n  dispatch(\n    filterSources({\n      [column]: value,\n    })\n  );\n\nexport const chipsFormatters = (key, filterValue, sourceTypes, appTypes, intl) =>\n  ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n      category: 'Source Type',\n      key,\n      chips: filterValue[key].map((id) => {\n        const sourceType = sourceTypes.find((type) => type.id === id);\n\n        return { name: sourceType ? sourceType.product_name : id, value: id };\n      }),\n    }),\n    applications: () => ({\n      category: 'Application',\n      key,\n      chips: filterValue[key].map((id) => {\n        const appType = appTypes.find((type) => type.id === id);\n\n        return { name: appType ? appType.display_name : id, value: id };\n      }),\n    }),\n    availability_status: () => ({\n      category: 'Status',\n      key,\n      chips: [\n        {\n          value: filterValue[key][0],\n          name:\n            filterValue[key][0] === AVAILABLE\n              ? intl.formatMessage({\n                  id: 'sources.available',\n                  defaultMessage: 'Available',\n                })\n              : intl.formatMessage({\n                  id: 'sources.unavailable',\n                  defaultMessage: 'Unavailable',\n                }),\n        },\n      ],\n    }),\n  }[key] || (() => ({ name: key })));\n\nexport const prepareChips = (filterValue, sourceTypes, appTypes, intl) =>\n  Object.keys(filterValue)\n    .map((key) =>\n      filterValue[key] && filterValue[key].length > 0\n        ? chipsFormatters(key, filterValue, sourceTypes, appTypes, intl)()\n        : undefined\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n  if (deleteAll) {\n    return Object.keys(filterValue).reduce(\n      (acc, curr) => ({\n        ...acc,\n        [curr]: undefined,\n      }),\n      {}\n    );\n  }\n\n  const chip = chips[0];\n\n  return {\n    ...filterValue,\n    [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined,\n  };\n};\n\nexport const loadedTypes = (types, loaded) => (loaded && types.length > 0 ? types : undefined);\n\nexport const checkSubmit = (state, dispatch, push, intl, stateDispatch) => {\n  const id = `sources-wizard-notification-${Date.now()}`;\n\n  if (location.pathname.split('/').filter(Boolean).pop() !== routes.sourcesNew.path.split('/').pop()) {\n    if (state.isErrored) {\n      const { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory } = state.wizardState;\n\n      dispatch(\n        addMessage({\n          title: intl.formatMessage({\n            id: 'alert.error.title',\n            defaultMessage: 'Error adding source',\n          }),\n          description: intl.formatMessage(\n            {\n              id: 'alert.error.description',\n              defaultMessage:\n                'There was a problem while trying to add source {name}. Please try again. If the error persists, open a support case.',\n            },\n            { name: <b>{state.values.source.name}</b> }\n          ),\n          variant: 'danger',\n          id,\n          actionLinks: (\n            <AlertActionLink\n              onClick={() => {\n                stateDispatch({\n                  type: 'retryWizard',\n                  initialValues: state.values,\n                  initialState: { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory },\n                });\n                dispatch(removeMessage(id));\n                push(routes.sourcesNew.path);\n              }}\n            >\n              {intl.formatMessage({\n                id: 'alert.error.link',\n                defaultMessage: 'Retry',\n              })}\n            </AlertActionLink>\n          ),\n        })\n      );\n    } else {\n      switch (computeSourceStatus(state.createdSource)) {\n        case 'unavailable':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.error.title',\n                defaultMessage: 'Source configuration unsuccessful',\n              }),\n              description: (\n                <React.Fragment>\n                  {state.createdSource.applications?.[0]?.availability_status_error ||\n                    state.createdSource.endpoint?.[0]?.availability_status_error ||\n                    intl.formatMessage({\n                      id: 'wizard.unknownError',\n                      defaultMessage: 'Unknown error',\n                    })}\n                  &nbsp;[<b>{state.createdSource.name}</b>]\n                </React.Fragment>\n              ),\n              variant: 'danger',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.unavailable.link',\n                    defaultMessage: 'Edit source',\n                  })}\n                </AlertActionLink>\n              ),\n            })\n          );\n          break;\n        case 'timeout':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.timeout.title',\n                defaultMessage: 'Source configuration in progress',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.timeout.description',\n                  defaultMessage:\n                    'We are still working to confirm credentials for source {name}. To track progress, check the Status column in the Sources table.',\n                },\n                { name: <b>{state.createdSource.name}</b> }\n              ),\n              variant: 'info',\n            })\n          );\n          break;\n        default:\n          dispatch(\n            addMessage({\n              title: intl.formatMessage(\n                {\n                  id: 'alert.success.title',\n                  defaultMessage: '{type} connection successful',\n                },\n                { type: state.sourceTypes.find(({ id }) => id === state.createdSource.source_type_id)?.product_name }\n              ),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.success.description',\n                  defaultMessage: 'Source {name} was successfully added',\n                },\n                { name: <b>{state.createdSource.name}</b> }\n              ),\n              variant: 'success',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.success.link',\n                    defaultMessage: 'View source details',\n                  })}\n                </AlertActionLink>\n              ),\n            })\n          );\n          break;\n      }\n    }\n  }\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Tabs } from '@patternfly/react-core/dist/esm/components/Tabs/Tabs';\nimport { Tab } from '@patternfly/react-core/dist/esm/components/Tabs/Tab';\nimport { TabTitleIcon } from '@patternfly/react-core/dist/esm/components/Tabs/TabTitleIcon';\nimport { TabTitleText } from '@patternfly/react-core/dist/esm/components/Tabs/TabTitleText';\nimport RedhatIcon from '@patternfly/react-icons/dist/esm/icons/redhat-icon';\nimport CloudIcon from '@patternfly/react-icons/dist/esm/icons/cloud-icon';\n\nimport { setActiveVendor } from '../redux/sources/actions';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\n\nconst TabNavigation = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const activeVendor = useSelector(({ sources }) => sources.activeVendor);\n\n  return (\n    <Tabs activeKey={activeVendor} onSelect={(_e, key) => dispatch(setActiveVendor(key))} className=\"pf-u-mt-md\">\n      <Tab\n        eventKey={CLOUD_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <CloudIcon />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.cloudSources', defaultMessage: 'Cloud sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n      <Tab\n        eventKey={REDHAT_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <RedhatIcon />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.redhatSources', defaultMessage: 'Red Hat sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n    </Tabs>\n  );\n};\n\nexport default TabNavigation;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Loader } from '../SourcesTable/loaders';\n\nconst ImageWithPlaceholder = ({ src, ...rest }) => {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <React.Fragment>\n      {!loaded && <Loader height=\"40px\" width=\"110px\" {...rest} />}\n      <img src={src} onLoad={() => setLoaded(true)} style={{ display: loaded ? 'initial' : 'none' }} {...rest} />\n    </React.Fragment>\n  );\n};\n\nImageWithPlaceholder.propTypes = {\n  src: PropTypes.string.isRequired,\n};\n\nexport default ImageWithPlaceholder;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Tile } from '@patternfly/react-core/dist/esm/components/Tile/Tile';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nconst DisabledTile = (props) => {\n  const intl = useIntl();\n\n  const tooltip = intl.formatMessage({\n    id: 'sources.notAdminButton',\n    defaultMessage: 'To perform this action, you must be granted write permissions from your Organization Administrator.',\n  });\n\n  return (\n    <Tooltip content={tooltip}>\n      <div className=\"disabled-tile-with-tooltip\">\n        <Tile {...props} isDisabled />\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default DisabledTile;\n","import PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes } from '../../Routes';\n\nimport { Tile } from '@patternfly/react-core/dist/esm/components/Tile/Tile';\n\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport DisabledTile from '../TilesShared/DisabledTile';\nimport { filterVendorTypes } from '../../addSourceWizard/utilities/filterTypes';\n\nconst TilesArray = ({ setSelectedType, mapper }) => {\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n  const { push } = useHistory();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const openWizard = (type) => {\n    setSelectedType(type);\n    push(routes.sourcesNew.path);\n  };\n\n  const TileComponent = hasWritePermissions ? Tile : DisabledTile;\n\n  return sourceTypes\n    .filter(filterVendorTypes)\n    .sort((a, b) => a.product_name.localeCompare(b.product_name))\n    .map(({ name }) => mapper(name, openWizard, TileComponent));\n};\n\nTilesArray.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n  mapper: PropTypes.func.isRequired,\n};\n\nexport default TilesArray;\n","import React from 'react';\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    amazon: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Amazon Web Services\"\n        onClick={() => openWizard('amazon')}\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/aws.svg\"\n            alt=\"aws logo\"\n          />\n        }\n      />\n    ),\n    google: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Google Cloud\"\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        onClick={() => openWizard('google')}\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/google-cloud-short.svg\"\n            alt=\"google logo\"\n          />\n        }\n      />\n    ),\n    azure: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Microsoft Azure\"\n        onClick={() => openWizard('azure')}\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/microsoft-azure-short.svg\"\n            alt=\"azure logo\"\n          />\n        }\n      />\n    ),\n  }[type]);\n\nconst CloudTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default CloudTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card } from '@patternfly/react-core/dist/esm/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/esm/components/Card/CardBody';\nimport { CardTitle } from '@patternfly/react-core/dist/esm/components/Card/CardTitle';\nimport { CardFooter } from '@patternfly/react-core/dist/esm/components/Card/CardFooter';\nimport { Text } from '@patternfly/react-core/dist/esm/components/Text/Text';\n\nimport CloudTiles from './CloudTiles';\n\nconst CLOUD_CATALOG_HREF = 'https://catalog.redhat.com/cloud';\n\nconst CloudEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"ins-c-sources__cloud-empty-state-card pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'cloud.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your public clouds',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'cloud.emptystate.cardDescription',\n            defaultMessage: 'Select an available provider.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <CloudTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n      <CardFooter className=\"cloud-footer\">\n        <Text className=\"catalog-link pf-u-mt-lg\">\n          {intl.formatMessage(\n            {\n              id: 'cloud.emptystate.catalogLink',\n              defaultMessage: 'Looking for a different provider? <a>See all Red Hat Certified Cloud and Service Providers</a>',\n            },\n            {\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href={CLOUD_CATALOG_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            }\n          )}\n        </Text>\n      </CardFooter>\n    </Card>\n  );\n};\n\nCloudEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default CloudEmptyState;\n","import React from 'react';\n\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst icon = (\n  <ImageWithPlaceholder className=\"redhat-icon\" src=\"/apps/frontend-assets/red-hat-logos/stacked.svg\" alt=\"red hat logo\" />\n);\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    ['ansible-tower']: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Ansible Automation Platform\"\n        onClick={() => openWizard('ansible-tower')}\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        icon={icon}\n      />\n    ),\n    openshift: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"OpenShift Container Platfrom\"\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        onClick={() => openWizard('openshift')}\n        icon={icon}\n      />\n    ),\n  }[type]);\n\nconst RedHatTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default RedHatTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card } from '@patternfly/react-core/dist/esm/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/esm/components/Card/CardBody';\nimport { CardTitle } from '@patternfly/react-core/dist/esm/components/Card/CardTitle';\nimport { Text } from '@patternfly/react-core/dist/esm/components/Text/Text';\n\nimport RedHatTiles from './RedHatTiles';\n\nconst RedHatEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"ins-c-sources__cloud-empty-state-card pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'redhat.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your Red Hat applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'redhat.emptystate.cardDescription',\n            defaultMessage: 'Select an available application.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <RedHatTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nRedHatEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default RedHatEmptyState;\n","import React, { useEffect, lazy, Suspense, useReducer } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { useIntl } from 'react-intl';\n\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\n\nimport { filterSources, pageAndSize } from '../redux/sources/actions';\nimport SourcesTable from '../components/SourcesTable/SourcesTable';\nimport SourcesErrorState from '../components/SourcesErrorState';\nimport { routes } from '../Routes';\n\nconst SourceRemoveModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"remove\" */\n    '../components/SourceRemoveModal/SourceRemoveModal'\n  )\n);\nconst AddSourceWizard = lazy(() =>\n  import(/* webpackChunkName: \"addSource\" */ '../addSourceWizard/addSourceWizard/index').then((module) => ({\n    default: module.AddSourceWizard,\n  }))\n);\n\nimport {\n  prepareChips,\n  removeChips,\n  setFilter,\n  debouncedFiltering,\n  prepareSourceTypeSelection,\n  afterSuccess,\n  loadedTypes,\n  prepareApplicationTypeSelection,\n  checkSubmit,\n} from './Sources/helpers';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../hooks/useHasWritePermissions';\nimport CustomRoute from '../components/CustomRoute/CustomRoute';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { PaginationLoader } from '../components/SourcesTable/loaders';\nimport TabNavigation from '../components/TabNavigation';\nimport CloudCards from '../components/CloudTiles/CloudCards';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\nimport CloudEmptyState from '../components/CloudTiles/CloudEmptyState';\nimport { AVAILABLE, UNAVAILABLE } from '../views/formatters';\nimport RedHatEmptyState from '../components/RedHatTiles/RedHatEmptyState';\nimport { filterVendorTypes } from '../addSourceWizard/utilities/filterTypes';\nimport { filterVendorAppTypes } from '../addSourceWizard/utilities/filterApps';\n\nconst initialState = {\n  filter: undefined,\n  selectedType: undefined,\n  wizardInitialState: undefined,\n  wizardInitialValues: undefined,\n};\n\nconst reducer = (state, { type, value, selectedType, initialValues, initialState }) => {\n  switch (type) {\n    case 'setFilterValue':\n      return { ...state, filter: value };\n    case 'setSelectedType':\n      return { ...state, selectedType };\n    case 'retryWizard':\n      return { ...state, wizardInitialState: initialState, wizardInitialValues: initialValues };\n    case 'closeWizard':\n      return { ...state, selectedType: undefined, wizardInitialState: undefined, wizardInitialValues: undefined };\n  }\n};\n\nconst SourcesPage = () => {\n  const [{ filter, selectedType, wizardInitialState, wizardInitialValues }, stateDispatch] = useReducer(reducer, initialState);\n\n  const entitiesLoaded = useIsLoaded();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const history = useHistory();\n  const intl = useIntl();\n\n  const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n  const {\n    filterValue,\n    numberOfEntities,\n    appTypes,\n    pageSize,\n    pageNumber,\n    fetchingError,\n    sourceTypes,\n    paginationClicked,\n    appTypesLoaded,\n    sourceTypesLoaded,\n    activeVendor,\n  } = sources;\n\n  const loaded = entitiesLoaded && sourceTypesLoaded && appTypesLoaded;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (filter !== filterValue.name) {\n      stateDispatch({ type: 'setFilterValue', value: filterValue.name });\n    }\n  }, [filterValue.name]);\n\n  const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n  const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n  const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n  useEffect(() => {\n    if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n      onSetPage({}, maximumPageNumber);\n    }\n  });\n\n  const paginationConfig = {\n    itemCount: numberOfEntities,\n    page: pageNumber,\n    perPage: pageSize,\n    onSetPage,\n    onPerPageSelect,\n    className: 'top-pagination',\n  };\n\n  const paginationConfigBottom = {\n    ...paginationConfig,\n    dropDirection: 'up',\n    variant: 'bottom',\n    isCompact: false,\n    className: 'bottom-pagination',\n  };\n\n  const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n  const filteredSourceTypes = sourceTypes.filter(filterVendorTypes);\n\n  const mainContent = () => (\n    <React.Fragment>\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n        actionsConfig={\n          hasWritePermissions\n            ? {\n                actions: [\n                  <Link to={routes.sourcesNew.path} key=\"addSourceButton\">\n                    <Button variant=\"primary\" id=\"addSourceButton\">\n                      {intl.formatMessage({\n                        id: 'sources.addSource',\n                        defaultMessage: 'Add source',\n                      })}\n                    </Button>\n                  </Link>,\n                ],\n              }\n            : {\n                actions: [\n                  <Tooltip\n                    content={intl.formatMessage({\n                      id: 'sources.notAdminAddButton',\n                      defaultMessage:\n                        'To add a source, you must be granted write permissions from your Organization Administrator.',\n                    })}\n                    key=\"addSourceButton\"\n                  >\n                    <span tabIndex=\"0\">\n                      <Button variant=\"primary\" isDisabled id=\"addSourceButton\">\n                        {intl.formatMessage({\n                          id: 'sources.addSource',\n                          defaultMessage: 'Add source',\n                        })}\n                      </Button>\n                    </span>\n                  </Tooltip>,\n                ],\n              }\n        }\n        filterConfig={{\n          items: [\n            {\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              filterValues: {\n                'aria-label': intl.formatMessage({\n                  id: 'sources.filterByName',\n                  defaultMessage: 'Filter by name',\n                }),\n                onChange: (_event, value) => {\n                  stateDispatch({ type: 'setFilterValue', value });\n                  debouncedFiltering(() => setFilter('name', value, dispatch));\n                },\n                value: filter,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.type',\n                defaultMessage: 'Type',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('source_type_id', value, dispatch),\n                items: prepareSourceTypeSelection(filteredSourceTypes),\n                value: filterValue.source_type_id,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.application',\n                defaultMessage: 'Application',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('applications', value, dispatch),\n                items: prepareApplicationTypeSelection(appTypes?.filter(filterVendorAppTypes(filteredSourceTypes)) || []),\n                value: filterValue.applications,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.availabilityStatus',\n                defaultMessage: 'Status',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (event, _value, selectedValue) =>\n                  setFilter('availability_status', event.target.checked ? [selectedValue] : [], dispatch),\n                items: [\n                  { label: intl.formatMessage({ id: 'sources.available', defaultMessage: 'Available' }), value: AVAILABLE },\n                  {\n                    label: intl.formatMessage({ id: 'sources.unavailable', defaultMessage: 'Unavailable' }),\n                    value: UNAVAILABLE,\n                  },\n                ],\n                value: filterValue.availability_status,\n              },\n            },\n          ],\n        }}\n        activeFiltersConfig={{\n          filters: prepareChips(filterValue, sourceTypes, appTypes, intl),\n          onDelete: (_event, chips, deleteAll) => dispatch(filterSources(removeChips(chips, filterValue, deleteAll))),\n        }}\n      />\n      <SourcesTable />\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfigBottom : undefined}\n      />\n    </React.Fragment>\n  );\n\n  const hasSomeFilter =\n    Object.entries(filterValue)\n      .map(([_key, value]) => value && (!Array.isArray(value) || (Array.isArray(value) && value.length > 0)))\n      .filter(Boolean).length > 0;\n\n  const showEmptyState = loaded && numberOfEntities === 0 && !hasSomeFilter;\n  const showInfoCards = activeVendor === CLOUD_VENDOR && !showEmptyState;\n\n  const setSelectedType = (selectedType) => stateDispatch({ type: 'setSelectedType', selectedType });\n\n  return (\n    <React.Fragment>\n      <Suspense fallback={null}>\n        <CustomRoute exact route={routes.sourcesRemove} Component={SourceRemoveModal} />\n        <CustomRoute\n          exact\n          route={routes.sourcesNew}\n          Component={AddSourceWizard}\n          componentProps={{\n            sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n            applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n            isOpen: true,\n            onClose: () => {\n              stateDispatch({ type: 'closeWizard' });\n              history.push(routes.sources.path);\n            },\n            afterSuccess: (source) => afterSuccess(dispatch, source),\n            hideSourcesButton: true,\n            selectedType,\n            submitCallback: (state) => checkSubmit(state, dispatch, history.push, intl, stateDispatch),\n            initialValues: wizardInitialValues,\n            initialWizardState: wizardInitialState,\n          }}\n        />\n      </Suspense>\n      <PageHeader className=\"pf-u-pb-0\">\n        <PageHeaderTitle\n          title={intl.formatMessage({\n            id: 'sources.sources',\n            defaultMessage: 'Sources',\n          })}\n        />\n        <TabNavigation />\n      </PageHeader>\n      <Section type=\"content\">\n        {showInfoCards && <CloudCards />}\n        {fetchingError && <SourcesErrorState />}\n        {!fetchingError && showEmptyState && activeVendor === CLOUD_VENDOR && (\n          <CloudEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && showEmptyState && activeVendor === REDHAT_VENDOR && (\n          <RedHatEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && !showEmptyState && mainContent()}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nexport default SourcesPage;\n"],"sourceRoot":""}