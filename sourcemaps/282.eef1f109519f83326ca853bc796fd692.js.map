{"version":3,"file":"js/282.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/components/CredentialsForm/ModalFormTemplate.js","webpack:///./src/components/CredentialsForm/CredentialsForm.js","webpack:///./src/components/addSourceWizard/superKey/generateSuperKeyFields.js","webpack:///./src/hooks/useAppNavigate.js"],"sourcesContent":["import React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport FormSpy from '@data-driven-forms/react-form-renderer/form-spy';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nimport { ActionGroup, Button, Form, Modal } from '@patternfly/react-core';\n\nconst CustomFormWrapper = (props) => <Form {...props} id=\"modal-form\" />;\n\nconst CustomButtons = () => {\n  const intl = useIntl();\n  const { onCancel } = useFormApi();\n\n  return (\n    <FormSpy\n      subscription={{\n        submitting: true,\n        pristine: true,\n        invalid: true,\n        validating: true,\n      }}\n    >\n      {({ pristine, invalid, validating, submitting }) => (\n        <div className=\"pf-c-form\">\n          <ActionGroup className=\"pf-u-mt-0\">\n            <Button\n              variant=\"primary\"\n              form=\"modal-form\"\n              type=\"submit\"\n              isDisabled={pristine || validating || submitting || invalid}\n            >\n              {intl.formatMessage({\n                id: 'sources.submit',\n                defaultMessage: 'Submit',\n              })}\n            </Button>\n            <Button variant=\"link\" onClick={onCancel} id=\"cancel-modal\">\n              {intl.formatMessage({\n                id: 'sources.cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n          </ActionGroup>\n        </div>\n      )}\n    </FormSpy>\n  );\n};\n\nconst ModalFormTemplate = ({ ModalProps, ...props }) => (\n  <Modal footer={<CustomButtons />} {...ModalProps}>\n    <FormTemplate {...props} showFormControls={false} FormWrapper={CustomFormWrapper} />\n  </Modal>\n);\n\nModalFormTemplate.propTypes = {\n  ModalProps: PropTypes.object,\n};\n\nexport default ModalFormTemplate;\n","import React, { useEffect, useReducer } from 'react';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\n\nimport { Bullseye, Modal, Spinner } from '@patternfly/react-core';\n\nimport { useSource } from '../../hooks/useSource';\n\nimport { replaceRouteId, routes } from '../../Routing';\n\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport ModalFormTemplate from './ModalFormTemplate';\nimport { getSourcesApi } from '../../api/entities';\nimport { addMessage } from '../../redux/sources/actions';\nimport generateSuperKeyFields from '../../components/addSourceWizard/superKey/generateSuperKeyFields';\nimport { useAppNavigate } from '../../hooks/useAppNavigate';\n\nconst initialState = {\n  loading: true,\n  initialValues: {},\n};\n\nconst reducer = (state, { type, values }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        loading: false,\n        initialValues: {\n          authentication: values,\n        },\n      };\n  }\n};\n\nconst CredentialsForm = () => {\n  const source = useSource();\n  const navigate = useAppNavigate();\n  const intl = useIntl();\n  const reduxDispatch = useDispatch();\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n  const sourceTypeName = sourceTypes.find(({ id }) => id === source.source_type_id).name;\n\n  const [{ loading, initialValues }, dispatch] = useReducer(reducer, initialState);\n\n  const goBackToDetail = () => navigate(replaceRouteId(routes.sourcesDetail.path, source.id));\n\n  const isPaused = source.paused_at;\n\n  const title = isPaused\n    ? intl.formatMessage({ id: 'editCredentials.paused.title', defaultMessage: 'View account authorization credentials' })\n    : intl.formatMessage({ id: 'editCredentials.title', defaultMessage: 'Edit account authorization credentials' });\n  const description = isPaused\n    ? undefined\n    : intl.formatMessage({\n        id: 'editCredentials.description',\n        defaultMessage:\n          'Use the fields below to reset your account authorization credentials. It may take some time to validate new information.',\n      });\n\n  useEffect(() => {\n    getSourcesApi()\n      .listSourceAuthentications(source.id)\n      .then(({ data }) => {\n        const authhype = sourceTypes\n          .find(({ name }) => name === sourceTypeName)\n          ?.schema.authentication.find(({ is_superkey }) => is_superkey);\n\n        const values = data.find(({ authtype }) => authtype === authhype.type);\n\n        dispatch({ type: 'loaded', values });\n      });\n  }, []);\n\n  if (loading) {\n    return (\n      <Modal title={title} variant=\"small\" isOpen onClose={goBackToDetail}>\n        <Bullseye className=\"pf-u-m-2xl\">\n          <Spinner />\n        </Bullseye>\n      </Modal>\n    );\n  }\n\n  return (\n    <SourcesFormRenderer\n      clearedValue={null}\n      schema={{\n        fields: generateSuperKeyFields(sourceTypes, sourceTypeName).map((field) =>\n          source.paused_at ? { ...field, isDisabled: true } : field\n        ),\n      }}\n      // eslint-disable-next-line no-unused-vars\n      onSubmit={async ({ authentication: { tenant, source_id, id, authtype, resource_id, resource_type, ...values } }) => {\n        goBackToDetail();\n\n        try {\n          await getSourcesApi().updateAuthentication(id, values);\n\n          reduxDispatch(\n            addMessage({\n              title: intl.formatMessage({ id: 'editCredentials.alert.title', defaultMessage: 'New credentials saved' }),\n              description: intl.formatMessage({\n                id: 'editCredentials.alert.description',\n                defaultMessage: 'It may take some time to validate your new credentials. Check this page for status updates.',\n              }),\n              variant: 'info',\n            })\n          );\n        } catch (error) {\n          reduxDispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'editCredentials.alert.warning.title',\n                defaultMessage: 'Error updating credentials',\n              }),\n              description: intl.formatMessage({\n                id: 'editCredentials.alert.warning.description',\n                defaultMessage:\n                  'There was a problem while trying to update credentials. Please try again. If the error persists, open a support case.',\n              }),\n              variant: 'danger',\n            })\n          );\n        }\n      }}\n      initialValues={initialValues}\n      FormTemplate={(props) => (\n        <ModalFormTemplate\n          {...props}\n          ModalProps={{\n            isOpen: true,\n            onClose: goBackToDetail,\n            variant: 'small',\n            title,\n            description,\n            ...(isPaused && {\n              footer: null,\n            }),\n          }}\n        />\n      )}\n      onCancel={goBackToDetail}\n    />\n  );\n};\n\nexport default CredentialsForm;\n","import { getAdditionalAuthFields, getAdditionalStepKeys, getNoStepsFields, injectAuthFieldsInfo } from '../schemaBuilder';\n\nconst generateSuperKeyFields = (sourceTypes, source_type) => {\n  const authype = sourceTypes\n    .find(({ name }) => name === source_type)\n    ?.schema.authentication.find(({ is_superkey, type }) => is_superkey || type === 'access_key_secret_key');\n\n  const additionalIncludesStepKeys = getAdditionalStepKeys(source_type, authype.type);\n\n  const fields = [\n    ...getAdditionalAuthFields(source_type, authype.type),\n    ...injectAuthFieldsInfo(getNoStepsFields(authype.fields, additionalIncludesStepKeys), source_type, authype.type),\n  ];\n\n  return fields;\n};\n\nexport default generateSuperKeyFields;\n","import { useNavigate } from 'react-router-dom';\nimport { linkBasename, mergeToBasename } from '../utilities/utils';\n\nexport const useAppNavigate = () => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n"],"names":["CustomFormWrapper","props","Form","id","CustomButtons","intl","useIntl","onCancel","useFormApi","subscription","submitting","pristine","invalid","validating","className","ActionGroup","Button","variant","form","type","isDisabled","formatMessage","defaultMessage","onClick","ModalFormTemplate","ModalProps","Modal","footer","showFormControls","FormWrapper","propTypes","PropTypes","initialState","loading","initialValues","reducer","state","values","authentication","source","useSource","navigate","useAppNavigate","reduxDispatch","useDispatch","sourceTypes","useSelector","sources","shallowEqual","sourceTypeName","find","source_type_id","name","useReducer","dispatch","goBackToDetail","replaceRouteId","routes","isPaused","paused_at","title","description","undefined","useEffect","getSourcesApi","listSourceAuthentications","then","data","authhype","schema","is_superkey","authtype","isOpen","onClose","Bullseye","Spinner","SourcesFormRenderer","clearedValue","fields","generateSuperKeyFields","map","field","onSubmit","tenant","source_id","resource_id","resource_type","updateAuthentication","addMessage","FormTemplate","source_type","authype","additionalIncludesStepKeys","getAdditionalStepKeys","getAdditionalAuthFields","injectAuthFieldsInfo","getNoStepsFields","useNavigate","to","options","mergeToBasename","linkBasename"],"sourceRoot":""}