{"version":3,"file":"js/3631.f89863349bddd19c296f.js","mappings":"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","sources":["webpack:///./node_modules/tabbable/dist/index.esm.js","webpack:///./node_modules/focus-trap/dist/focus-trap.esm.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/helpers/FocusTrap/FocusTrap.js"],"sourcesContent":["/*!\n* tabbable 6.2.0\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\n// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nvar candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable=\"false\"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  var _element$getRootNode;\n  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);\n} : function (element) {\n  return element === null || element === void 0 ? void 0 : element.ownerDocument;\n};\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nvar isInert = function isInert(node, lookUp) {\n  var _node$getAttribute;\n  if (lookUp === void 0) {\n    lookUp = true;\n  }\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');\n  var inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  var result = inert || lookUp && node && isInert(node.parentNode); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nvar isContentEditable = function isContentEditable(node) {\n  var _node$getAttribute2;\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      var shadowRoot = element.shadowRoot ||\n      // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\nvar hasTabIndex = function hasTabIndex(node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\nvar getTabIndex = function getTabIndex(node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {\n      return 0;\n    }\n  }\n  return node.tabIndex;\n};\n\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\nvar getSortOrderTabIndex = function getSortOrderTabIndex(node, isScope) {\n  var tabIndex = getTabIndex(node);\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n  return tabIndex;\n};\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n  var radioScope = node.form || getRootNode(node);\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n  var radioSet;\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nvar isNodeAttached = function isNodeAttached(node) {\n  var _nodeRoot;\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  var nodeRoot = node && getRootNode(node);\n  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  var attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;\n    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));\n    while (!attached && nodeRootHost) {\n      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;\n      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));\n    }\n  }\n  return attached;\n};\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n    width = _node$getBoundingClie.width,\n    height = _node$getBoundingClie.height;\n  return width === 0 && height === 0;\n};\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n    getShadowRoot = _ref.getShadowRoot;\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled ||\n  // we must do an inert look up to filter out any elements inside an inert ancestor\n  //  because we're limited in the type of selectors we can use in JSDom (see related\n  //  note related to `candidateSelectors`)\n  isInert(node) || isHiddenInput(node) || isHidden(node, options) ||\n  // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n  return true;\n};\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n  return true;\n};\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scopeParent;\n    var element = isScope ? item.scopeParent : item;\n    var candidateTabindex = getSortOrderTabIndex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\nvar tabbable = function tabbable(container, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n  return sortByOrder(candidates);\n};\nvar focusable = function focusable(container, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n  return candidates;\n};\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, getTabIndex, isFocusable, isTabbable, tabbable };\n//# sourceMappingURL=index.esm.js.map\n","/*!\n* focus-trap 7.4.3\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { isFocusable, tabbable, focusable, isTabbable } from 'tabbable';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event]\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || ( // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : null,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          var nodeIdx = focusableNodes.findIndex(function (n) {\n            return n === node;\n          });\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n          if (forward) {\n            return focusableNodes.slice(nodeIdx + 1).find(function (n) {\n              return isTabbable(n, config.tabbableOptions);\n            });\n          }\n          return focusableNodes.slice(0, nodeIdx).reverse().find(function (n) {\n            return isTabbable(n, config.tabbableOptions);\n          });\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n  };\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === doc.activeElement) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  var checkFocusIn = function checkFocusIn(e) {\n    var target = getActualTarget(e);\n    var targetContained = findContainerIndex(target, e) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var target = getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {\n          var firstTabbableNode = _ref2.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var lastTabbableNode = _ref3.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = _destinationGroup.firstTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  var checkKey = function checkKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      onActivate === null || onActivate === void 0 ? void 0 : onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === void 0 ? void 0 : onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 ? void 0 : onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === void 0 ? void 0 : onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      var onPause = getOption(pauseOptions, 'onPause');\n      var onPostPause = getOption(pauseOptions, 'onPostPause');\n      state.paused = true;\n      onPause === null || onPause === void 0 ? void 0 : onPause();\n      removeListeners();\n      updateObservedNodes();\n      onPostPause === null || onPostPause === void 0 ? void 0 : onPostPause();\n      return this;\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      var onUnpause = getOption(unpauseOptions, 'onUnpause');\n      var onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n      state.paused = false;\n      onUnpause === null || onUnpause === void 0 ? void 0 : onUnpause();\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n      onPostUnpause === null || onPostUnpause === void 0 ? void 0 : onPostUnpause();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      updateObservedNodes();\n      return this;\n    }\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };\n//# sourceMappingURL=focus-trap.esm.js.map\n","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { createFocusTrap } from 'focus-trap';\nclass FocusTrapBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.divRef = this.props.innerRef || React.createRef();\n        if (typeof document !== 'undefined') {\n            this.previouslyFocusedElement = document.activeElement;\n        }\n    }\n    componentDidMount() {\n        // We need to hijack the returnFocusOnDeactivate option,\n        // because React can move focus into the element before we arrived at\n        // this lifecycle hook (e.g. with autoFocus inputs). So the component\n        // captures the previouslyFocusedElement in componentWillMount,\n        // then (optionally) returns focus to it in componentWillUnmount.\n        this.focusTrap = createFocusTrap(this.divRef.current, Object.assign(Object.assign({}, this.props.focusTrapOptions), { returnFocusOnDeactivate: false }));\n        if (this.props.active) {\n            this.focusTrap.activate();\n        }\n        if (this.props.paused) {\n            this.focusTrap.pause();\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.active && !this.props.active) {\n            this.focusTrap.deactivate();\n        }\n        else if (!prevProps.active && this.props.active) {\n            this.focusTrap.activate();\n        }\n        if (prevProps.paused && !this.props.paused) {\n            this.focusTrap.unpause();\n        }\n        else if (!prevProps.paused && this.props.paused) {\n            this.focusTrap.pause();\n        }\n    }\n    componentWillUnmount() {\n        this.focusTrap.deactivate();\n        if (this.props.focusTrapOptions.returnFocusOnDeactivate !== false &&\n            this.previouslyFocusedElement &&\n            this.previouslyFocusedElement.focus) {\n            this.previouslyFocusedElement.focus({ preventScroll: this.props.preventScrollOnDeactivate });\n        }\n    }\n    render() {\n        const _a = this.props, { children, className, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        focusTrapOptions, active, paused, preventScrollOnDeactivate, innerRef } = _a, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        rest = __rest(_a, [\"children\", \"className\", \"focusTrapOptions\", \"active\", \"paused\", \"preventScrollOnDeactivate\", \"innerRef\"]);\n        return (React.createElement(\"div\", Object.assign({ ref: this.divRef, className: className }, rest), children));\n    }\n}\nFocusTrapBase.displayName = 'FocusTrap';\nFocusTrapBase.defaultProps = {\n    active: true,\n    paused: false,\n    focusTrapOptions: {},\n    preventScrollOnDeactivate: false\n};\nexport const FocusTrap = React.forwardRef((props, ref) => (React.createElement(FocusTrapBase, Object.assign({ innerRef: ref }, props))));\n//# sourceMappingURL=FocusTrap.js.map"],"names":["candidateSelectors","candidateSelector","join","NoElement","Element","matches","prototype","msMatchesSelector","webkitMatchesSelector","getRootNode","element","_element$getRootNode","call","ownerDocument","isInert","node","lookUp","_node$getAttribute","inertAtt","getAttribute","parentNode","getCandidates","el","includeContainer","filter","candidates","Array","slice","apply","querySelectorAll","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","length","shift","tagName","assigned","assignedElements","nestedCandidates","children","flatten","push","scopeParent","includes","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","_nestedCandidates","hasTabIndex","isNaN","parseInt","getTabIndex","Error","tabIndex","test","_node$getAttribute2","attValue","isContentEditable","sortOrderedTabbables","a","b","documentOrder","isInput","isZeroArea","_node$getBoundingClie","getBoundingClientRect","width","height","isNodeMatchingSelectorFocusable","disabled","type","isHiddenInput","_ref","displayCheck","getComputedStyle","visibility","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","host","_nodeRoot","_nodeRootHost","_nodeRootHost$ownerDo","_node$ownerDocument","nodeRoot","nodeRootHost","attached","contains","_nodeRoot2","_nodeRootHost2","_nodeRootHost2$ownerD","isNodeAttached","getClientRects","isHidden","some","child","isDetailsWithSummary","i","item","isDisabledFromFieldset","isNodeMatchingSelectorTabbable","isRadio","name","radioSet","radioScope","form","queryRadios","window","CSS","escape","err","console","error","message","checked","nodes","getCheckedRadio","isTabbableRadio","isNonTabbableRadio","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","isScope","candidateTabindex","getSortOrderTabIndex","content","sort","reduce","acc","sortable","concat","isTabbable","focusableCandidateSelector","isFocusable","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","_objectSpread2","target","arguments","source","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","String","_toPrimitive","_toPropertyKey","configurable","writable","isTabEvent","e","keyCode","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","valueOrHandler","_len","params","_key","getActualTarget","event","composedPath","internalTrapStack","createFocusTrap","userOptions","trap","doc","document","trapStack","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","container","tabbableNodes","find","getNodeForOption","optionValue","_len2","_key2","querySelector","getInitialFocusNode","tabbableOptions","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","bind","tabbable","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","reverse","group","tryFocus","focus","preventScroll","toLowerCase","select","isSelectableInput","getReturnFocusNode","previousActiveElement","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkKey","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref2","destinationGroupIndex","lastOfGroupIndex","_ref3","_destinationGroupIndex","checkKeyNav","checkClick","addListeners","activeTrap","pause","trapIndex","indexOf","splice","activeFocusTraps","addEventListener","capture","passive","removeListeners","removeEventListener","mutationObserver","MutationObserver","mutations","mutation","removedNodes","updateObservedNodes","disconnect","observe","subtree","childList","activate","activateOptions","this","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","unpause","finishDeactivation","pauseOptions","onPause","onPostPause","unpauseOptions","onUnpause","onPostUnpause","updateContainerElements","containerElements","elementsAsArray","Boolean","FocusTrapBase","constructor","props","super","divRef","innerRef","previouslyFocusedElement","componentDidMount","focusTrap","current","assign","focusTrapOptions","componentDidUpdate","prevProps","componentWillUnmount","preventScrollOnDeactivate","render","_a","className","rest","ref","displayName","defaultProps","FocusTrap"],"sourceRoot":""}