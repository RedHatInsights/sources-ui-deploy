{"version":3,"file":"js/494.8c4df4ad034c2edaf914.js","mappings":"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","sources":["webpack:///./src/api/checkSourceStatus.js","webpack:///./src/api/delay.js","webpack:///./src/api/getApplicationStatus.js","webpack:///./src/components/addSourceWizard/emptyAuthType.js","webpack:///./src/components/addSourceWizard/SSLFormLabel.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/openshift/token.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/aws/arn.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/aws/provisioningArn.js","webpack:///./src/api/subscriptionWatch.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/aws/subscriptionWatch.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/azure/subscriptionWatch.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/gcp/subscriptionWatch.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/openshift/costManagement.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/azure/costManagement.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/gcp/costManagement.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/oci/costManagement.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/tower/catalog.js","webpack:///./src/components/addSourceWizard/hardcodedSchemas.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/ibm/costManagement.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/openshift/endpoint.js","webpack:///./src/components/addSourceWizard/hardcodedComponents/aws/access_key.js","webpack:///./src/components/addSourceWizard/schemaBuilder.js","webpack:///./src/components/addSourceWizard/stringConstants.js","webpack:///./src/components/steps/ErroredStep.js","webpack:///./src/components/steps/LoadingStep.js","webpack:///./src/components/FormComponents/ValuePopover.js","webpack:///./src/components/FormComponents/SourceWizardSummary.js","webpack:///./src/components/FormComponents/Description.js","webpack:///./src/components/FormComponents/CardSelect.js","webpack:///./src/components/FormComponents/AuthSelect.js","webpack:///./src/components/FormComponents/EnhancedRadio.js","webpack:///./src/components/FormComponents/CheckboxWithIcon.js","webpack:///./src/utilities/SourcesFormRenderer.js","webpack:///./src/components/FormComponents/SwitchGroup.js","webpack:///./src/components/Authentication.js","webpack:///./src/utilities/isSuperKey.js","webpack:///./src/utilities/resolveProps/validated.js"],"sourcesContent":["import { getSourcesApi } from './entities';\n\nexport const checkSourceStatus = (id) =>\n  getSourcesApi()\n    .checkAvailabilitySource(id)\n    .catch(() => {});\n\nexport default checkSourceStatus;\n","export const delay = (interval, prms) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve.bind(null, prms), interval);\n  });\n};\n","import { getSourcesApi } from './entities';\nimport { delay } from './delay';\n\nexport const checkAppAvailability = (id, timeout = 10000, interval = 1000, entity = 'showApplication', updatedTime) =>\n  new Promise((res, rej) => {\n    const start = Date.now();\n\n    const checkSource = () =>\n      // eslint-disable-next-line prettier/prettier\n      getSourcesApi()[entity](id)\n        .then((data) => {\n          const isTimeOuted = Date.now() - start >= timeout;\n\n          if (isTimeOuted) {\n            if (updatedTime) {\n              return {\n                ...data,\n                availability_status: null,\n                availability_status_error: null,\n              };\n            }\n\n            return data;\n          }\n\n          if (data.availability_status === 'available' || data.availability_status === 'unavailable') {\n            if (updatedTime && new Date(data.last_checked_at || data.updated_at) > updatedTime) {\n              return data;\n            }\n\n            if (!updatedTime) {\n              return data;\n            }\n          }\n\n          return delay(interval).then(() => checkSource());\n        });\n\n    return checkSource()\n      .then((data) => res(data))\n      .catch((error) => rej(error));\n  });\n","const emptyAuthType = {\n  type: 'empty',\n  name: 'empty',\n  fields: [],\n};\n\nexport default emptyAuthType;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Popover, Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\n\nconst SSLFormLabel = () => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      {intl.formatMessage({\n        id: 'wizard.sslCertificate',\n        defaultMessage: 'SSL Certificate',\n      })}\n      <Popover\n        aria-label=\"Help text\"\n        maxWidth=\"50%\"\n        bodyContent={\n          <TextContent>\n            <Text component={TextVariants.p}>\n              {intl.formatMessage(\n                {\n                  id: 'wizard.openshiftCADescription1',\n                  // eslint-disable-next-line max-len\n                  defaultMessage:\n                    'You can obtain your OpenShift Container Platform provider’s CA certificate for all endpoints (default, metrics, alerts) from {cmd}.',\n                },\n                { cmd: <b key=\"b\">/etc/origin/master/ca.crt</b> }\n              )}\n            </Text>\n            <Text component={TextVariants.p}>\n              {intl.formatMessage({\n                id: 'wizard.openshiftCADescription2',\n                defaultMessage:\n                  'Paste the output (a block of text starting with --BEGIN CERTIFICATE--) into the Trusted CA Certificates field.',\n              })}\n            </Text>\n          </TextContent>\n        }\n      >\n        <QuestionCircleIcon className=\"pf-u-ml-sm\" />\n      </Popover>\n    </React.Fragment>\n  );\n};\n\nexport default SSLFormLabel;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { ClipboardCopy, Text, TextContent, TextList, TextListItem, TextVariants } from '@patternfly/react-core';\n\nexport const DescriptionSummary = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'openshift.token.description',\n          defaultMessage: 'An OpenShift Container Platform login token is required to communicate with the application.',\n        })}\n      </Text>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'openshift.token.collectData',\n          defaultMessage: 'To collect data from a Red Hat OpenShift Container Platform source:',\n        })}\n      </Text>\n      <TextList component=\"ol\">\n        <TextListItem component=\"li\">\n          {intl.formatMessage({\n            id: 'openshift.token.logIn',\n            defaultMessage:\n              'Log in to the Red Hat OpenShift Container Platform cluster with an account that has access to the namespace',\n          })}\n        </TextListItem>\n        <TextListItem component=\"li\">\n          {intl.formatMessage({\n            id: 'openshift.token.runCommand',\n            defaultMessage: 'Run the following command to obtain your login token:',\n          })}\n        </TextListItem>\n        <ClipboardCopy className=\"pf-u-mb-md\" isReadOnly>\n          {intl.formatMessage({\n            id: 'openshift.token.comman',\n            defaultMessage: '# oc sa get-token -n management-infra management-admin',\n          })}\n        </ClipboardCopy>\n        <TextListItem component=\"li\">\n          {intl.formatMessage({\n            id: 'openshift.token.copyToken',\n            defaultMessage: 'Copy the token and paste it in the Token field',\n          })}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Button,\n  ButtonVariant,\n  ClipboardCopy,\n  ClipboardCopyVariant,\n  Popover,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  TextVariants,\n} from '@patternfly/react-core';\n\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nimport { HCCM_DOCS_PREFIX } from '../../stringConstants';\nimport { HCS_APP_NAME } from '../../../../utilities/constants';\n\nconst CREATE_HCS_S3_BUCKET = ''; // specify when HCS docs links are available\nconst CREATE_S3_BUCKET = `${HCCM_DOCS_PREFIX}/html/adding_an_amazon_web_services_aws_source_to_cost_management/assembly-adding-aws-sources#creating-an-aws-s3-bucket_adding-aws-sources`;\nconst ENABLE_AWS_ACCOUNT = `${HCCM_DOCS_PREFIX}/html/adding_an_amazon_web_services_aws_source_to_cost_management/assembly-adding-aws-sources#enabling-aws-account-access_adding-aws-sources`;\nconst ENABLE_HCS_AWS_ACCOUNT = ''; // specify when HCS docs links are available\nconst CONFIG_AWS_TAGS = `${HCCM_DOCS_PREFIX}/html/adding_an_amazon_web_services_aws_source_to_cost_management/assembly-cost-management-next-steps-aws#configure-cost-models-next-step_next-steps-aws`;\nconst CONFIG_HCS_AWS_TAGS = ''; // specify when HCS docs links are available\n\nexport const UsageDescription = ({ showHCS }) => {\n  const intl = useIntl();\n  return (\n    <TextContent>\n      <Text>\n        {intl.formatMessage(\n          {\n            id: 'cost.usageDescription.usageDescription',\n            defaultMessage:\n              'To collect and store the information needed for cost management, you need to set up an Amazon S3 bucket for cost and usage reports. {link}',\n          },\n          {\n            link: showHCS ? null : ( // remove when HCS docs links are available\n              <Text\n                key=\"link\"\n                component={TextVariants.a}\n                href={showHCS ? CREATE_HCS_S3_BUCKET : CREATE_S3_BUCKET}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                {intl.formatMessage({\n                  id: 'cost.learnMore',\n                  defaultMessage: 'Learn more',\n                })}\n              </Text>\n            ),\n          }\n        )}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.usageDescription.specifyBucker',\n            defaultMessage: 'Specify or create an Amazon S3 bucket for your account.',\n          })}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.usageDescription.addFollowingValues',\n            defaultMessage: 'Create a cost and usage report using the following values:',\n          })}\n          <TextList>\n            <TextListItem>\n              {intl.formatMessage({\n                id: 'cost.usageDescription.repornName',\n                defaultMessage: 'Report name: koku',\n              })}\n            </TextListItem>\n            <TextListItem>\n              {intl.formatMessage({\n                id: 'cost.usageDescription.timeUnitHoulry',\n                defaultMessage: 'Time unit: hourly',\n              })}\n            </TextListItem>\n            <TextListItem>\n              {intl.formatMessage({\n                id: 'cost.usageDescription.includesResourceIDs',\n                defaultMessage: 'Include: Resource IDs',\n              })}\n            </TextListItem>\n            <TextListItem>\n              {intl.formatMessage({\n                id: 'cost.usageDescription.enableSuppor',\n                defaultMessage: 'Enable support for: RedShift, QuickSight and disable support for Athena',\n              })}\n            </TextListItem>\n            <TextListItem>\n              {intl.formatMessage({\n                id: 'cost.usageDescription.reportPathPrefix',\n                defaultMessage: 'Report path prefix: cost',\n              })}\n            </TextListItem>\n            <TextListItem>\n              {intl.formatMessage({\n                id: 'cost.usageDescription.compression',\n                defaultMessage: 'Compression type: GZIP',\n              })}\n            </TextListItem>\n          </TextList>\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.usageDescription.enterNameOfCreatedBucker',\n            defaultMessage: 'Enter the name of the Amazon S3 bucket you just created below:',\n          })}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nUsageDescription.propTypes = {\n  showHCS: PropTypes.bool,\n};\n\nexport const IAMRoleDescription = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text>\n        {intl.formatMessage({\n          id: 'cost.iamrole.createIamRole',\n          defaultMessage: 'To delegate account access, create an IAM role to associate with your IAM policy.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.iamrole.createNewRole',\n            defaultMessage: 'From the AWS Identity Access Management console, create a new role.',\n          })}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.iamrole.enterAccountId',\n            defaultMessage:\n              'Select another AWS account from the list of trusted entities and paste the following value into the Account ID field:',\n          })}\n        </TextListItem>\n        <ClipboardCopy className=\"pf-u-m-sm-on-sm\" isReadOnly>\n          589173575009\n        </ClipboardCopy>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.iamrole.attachPolicy',\n            defaultMessage: 'Attach the permissions policy that you just created.',\n          })}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.iamrole.completeProccess',\n            defaultMessage: 'Complete the process to create your new role.',\n          })}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport const IAMPolicyDescription = ({ showHCS }) => {\n  const formOptions = useFormApi();\n  const intl = useIntl();\n\n  const values = formOptions.getState().values;\n  const s3Bucket = values.application?.extra?.bucket;\n  const aliasesEnabled = values.aws?.aliases?.enabled;\n  const orgUnitsEnabled = values.aws?.org_units?.enabled;\n\n  if (!s3Bucket) {\n    return (\n      <Text>\n        {intl.formatMessage({\n          id: 'cost.iampolicy.somethingWrong',\n          defaultMessage: 'Something went wrong, you are missing bucket value.',\n        })}\n      </Text>\n    );\n  }\n\n  return (\n    <TextContent>\n      <Text>\n        {intl.formatMessage(\n          {\n            id: 'cost.iampolicy.grantPermissions',\n            defaultMessage:\n              'To grant permissions to the cost management report you just configured, create an AWS Identity and Access Management (IAM) policy. {link}',\n          },\n          {\n            link: showHCS ? null : ( // remove when HCS docs links are available\n              <Text\n                key=\"link\"\n                component={TextVariants.a}\n                href={showHCS ? ENABLE_HCS_AWS_ACCOUNT : ENABLE_AWS_ACCOUNT}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                {intl.formatMessage({\n                  id: 'wizard.learnMore',\n                  defaultMessage: 'Learn more',\n                })}\n              </Text>\n            ),\n          }\n        )}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem component={TextListItemVariants.li}>\n          {intl.formatMessage({\n            id: 'cost.iampolicy.signInIAMConsole',\n            defaultMessage: 'Sign in to the AWS Identity and Access Management (IAM) console.',\n          })}\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.li}>\n          {intl.formatMessage({\n            id: 'cost.iampolicy.createPolicy',\n            defaultMessage: 'Create a new policy, pasting the following content into the JSON text box.',\n          })}\n        </TextListItem>\n        <ClipboardCopy isCode variant={ClipboardCopyVariant.expansion} className=\"pf-u-m-sm-on-sm\" isReadOnly>\n          {JSON.stringify(\n            {\n              Version: '2012-10-17',\n              Statement: [\n                {\n                  Sid: 'VisualEditor0',\n                  Effect: 'Allow',\n                  Action: ['s3:Get*', 's3:List*'],\n                  Resource: [`arn:aws:s3:::${s3Bucket}`, `arn:aws:s3:::${s3Bucket}/*`],\n                },\n                {\n                  Sid: 'VisualEditor1',\n                  Effect: 'Allow',\n                  Action: [\n                    's3:ListBucket',\n                    'cur:DescribeReportDefinitions',\n                    ...(aliasesEnabled ? ['iam:ListAccountAliases'] : []),\n                    ...(orgUnitsEnabled ? ['organizations:List*', 'organizations:Describe*'] : []),\n                  ],\n                  Resource: '*',\n                },\n              ],\n            },\n            null,\n            2\n          )}\n        </ClipboardCopy>\n        <TextListItem component={TextListItemVariants.li}>\n          {intl.formatMessage({\n            id: 'cost.iampolicy.completeProccess',\n            defaultMessage: 'Complete the process to create your new policy.',\n          })}\n        </TextListItem>\n      </TextList>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'cost.iampolicy.logInIam',\n            defaultMessage: '{bold} You will need to be logged in to the IAM console to complete the next step.',\n          },\n          {\n            bold: (\n              <b key=\"bold\">\n                {intl.formatMessage({\n                  id: 'cost.DoNotCloseYourBrowser',\n                  defaultMessage: 'Do not close your browser.',\n                })}\n              </b>\n            ),\n          }\n        )}\n      </Text>\n    </TextContent>\n  );\n};\n\nIAMPolicyDescription.propTypes = {\n  showHCS: PropTypes.bool,\n};\n\nexport const TagsDescription = ({ showHCS }) => {\n  const intl = useIntl();\n  const application = showHCS ? HCS_APP_NAME : 'Cost Management';\n\n  return (\n    <TextContent>\n      {showHCS ? null : ( // remove when HCS docs links are available\n        <Text>\n          <Text\n            component={TextVariants.a}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            href={showHCS ? CONFIG_HCS_AWS_TAGS : CONFIG_AWS_TAGS}\n          >\n            {intl.formatMessage({\n              id: 'cost.tags.readMeLink',\n              defaultMessage: 'Learn more',\n            })}\n          </Text>\n        </Text>\n      )}\n      <Text>\n        {intl.formatMessage(\n          {\n            id: 'cost.tags.desciption',\n            defaultMessage:\n              'To use tags to organize your AWS resources in the {application} application, activate your tags in AWS to allow them to be imported automatically.',\n          },\n          { application }\n        )}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.tags.openSection',\n            defaultMessage: 'In the AWS Billing and Cost Management console, open the Cost Allocation Tags section.',\n          })}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.tags.selectTags',\n              defaultMessage: 'Select the tags you want to use in the {application} application, and click Activate.',\n            },\n            { application }\n          )}\n        </TextListItem>\n      </TextList>\n      <Text>\n        {intl.formatMessage({\n          id: 'cost.tags.aliasessOrgUnits',\n          defaultMessage:\n            'To use account aliases and organizational units in the display and filter of AWS resources, select the following',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n\nTagsDescription.propTypes = {\n  showHCS: PropTypes.bool,\n};\n\nexport const ArnDescription = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text>\n        {intl.formatMessage({\n          id: 'cost.arn.enableAccess',\n          defaultMessage: 'To enable account access, capture the ARN associated with the role you just created.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.arn.selectRole',\n            defaultMessage: 'From the Roles tab, select the role you just created.',\n          })}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.arn.copyArn',\n            defaultMessage: 'From the Summary screen, copy the role ARN and paste it in the ARN field:',\n          })}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport const IncludeAliasesLabel = ({ appendTo }) => {\n  const intl = useIntl();\n\n  return (\n    <Popover\n      appendTo={appendTo}\n      aria-label=\"Help text\"\n      position=\"right\"\n      maxWidth=\"40%\"\n      bodyContent={intl.formatMessage({\n        id: 'cost.arn.includeAliasesPopover',\n        defaultMessage:\n          'If there are account aliases, they will appear and be used for filtering when reporting on AWS accounts. This will include \"iam:ListAccountAliases\" to the Action of the IAM Policy.',\n      })}\n    >\n      <Button className=\"pf-u-p-0 pf-u-m-0\" variant={ButtonVariant.plain}>\n        <QuestionCircleIcon className=\"pf-u-ml-sm\" />\n      </Button>\n    </Popover>\n  );\n};\n\nIncludeAliasesLabel.propTypes = {\n  appendTo: PropTypes.instanceOf(Element).isRequired,\n};\n\nexport const IncludeOrgUnitsLabel = ({ appendTo }) => {\n  const intl = useIntl();\n\n  return (\n    <Popover\n      appendTo={appendTo}\n      aria-label=\"Help text\"\n      position=\"right\"\n      maxWidth=\"35%\"\n      bodyContent={intl.formatMessage({\n        id: 'cost.arn.includeOrgUnitsPopover',\n        defaultMessage:\n          'If there are organizational units, they will be used for filtering when reporting on AWS resources. This will include \"organizations:List*\" and \"organizations:Describe*\" to the Action of the IAM Policy',\n      })}\n    >\n      <Button className=\"pf-u-p-0 pf-u-m-0\" variant={ButtonVariant.plain}>\n        <QuestionCircleIcon className=\"pf-u-ml-sm\" />\n      </Button>\n    </Popover>\n  );\n};\n\nIncludeOrgUnitsLabel.propTypes = {\n  appendTo: PropTypes.instanceOf(Element).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Alert,\n  ClipboardCopy,\n  ClipboardCopyVariant,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextVariants,\n} from '@patternfly/react-core';\n\nimport { getSourcesApi } from '../../../../api/entities';\n\nconst ROLE_NAME = 'RH-HCC-provisioning-role';\nconst POLICY_COMMAND_STRING = `\nPOLICY_ARN=$(aws iam create-policy --policy-name RH-HCC-provisioning-policy --policy-document '{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n  {\n    \"Sid\": \"RedHatProvisioning\",\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"iam:GetPolicyVersion\",\n      \"iam:GetPolicy\",\n      \"iam:ListAttachedRolePolicies\",\n      \"iam:GetRolePolicy\",\n      \"ec2:CreateKeyPair\",\n      \"ec2:CreateLaunchTemplate\",\n      \"ec2:CreateLaunchTemplateVersion\",\n      \"ec2:CreateTags\",\n      \"ec2:DeleteKeyPair\",\n      \"ec2:DeleteTags\",\n      \"ec2:DescribeAvailabilityZones\",\n      \"ec2:DescribeImages\",\n      \"ec2:DescribeInstanceTypes\",\n      \"ec2:DescribeInstances\",\n      \"ec2:DescribeKeyPairs\",\n      \"ec2:DescribeLaunchTemplates\",\n      \"ec2:DescribeLaunchTemplateVersions\",\n      \"ec2:DescribeRegions\",\n      \"ec2:DescribeSecurityGroups\",\n      \"ec2:DescribeSnapshotAttribute\",\n      \"ec2:DescribeTags\",\n      \"ec2:ImportKeyPair\",\n      \"ec2:RunInstances\",\n      \"ec2:StartInstances\"\n    ],\n    \"Resource\": \"*\"\n  }\n]\n}' | jq -r '.Policy.Arn')`;\n\nconst ROLE_COMMAND_STRING = `\nROLE_ARN=$(aws iam create-role --role-name ${ROLE_NAME} --assume-role-policy-document '{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": {\n    \"Effect\": \"Allow\",\n    \"Principal\": {\n      \"AWS\": \"<PROVISIONING_AWS_ACCOUNT>\"\n    },\n    \"Action\": \"sts:AssumeRole\"\n  }\n}' | jq '.Role.Arn')`;\n\nconst ATTACH_COMMAND_STRING = `aws iam attach-role-policy --role-name ${ROLE_NAME} --policy-arn $POLICY_ARN`;\n\nexport const IAMPolicyDescription = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'provisioning.iam.grantPermissions',\n          defaultMessage:\n            'Create the following AWS Identity and Access Management (IAM) policy to grant Red Hat permissions to run instances on your Amazon Web Services (AWS) Elastic Cloud (EC2).',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'provisioning.iam.signIn',\n              defaultMessage: 'Log in to AWS CLI by running: {awsCliCommand}.',\n            },\n            {\n              awsCliCommand: (\n                <b>\n                  {intl.formatMessage({\n                    id: 'provisioning.iam.signInCommand',\n                    defaultMessage: 'aws configure',\n                  })}\n                </b>\n              ),\n            }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'provisioning.iam.createPolicty',\n            defaultMessage: 'Create a new policy and store its ARN by running following command in your terminal.',\n          })}\n        </TextListItem>\n      </TextList>\n      <ClipboardCopy isCode variant={ClipboardCopyVariant.expansion} className=\"pf-u-m-sm-on-sm\" isReadOnly>\n        {POLICY_COMMAND_STRING}\n      </ClipboardCopy>\n    </TextContent>\n  );\n};\n\nexport const IAMRoleDescription = () => {\n  const intl = useIntl();\n\n  const [provAppTypeId, setAppTypeId] = useState();\n  const [provAwsAccount, setAwsAccount] = useState(null);\n  const [fetchError, setFetchError] = useState(null);\n\n  useEffect(() => {\n    getSourcesApi()\n      .getProvAppType()\n      .then((data) => setAppTypeId(data?.data?.[0]?.id || null))\n      .catch((_e) => {\n        setFetchError(true);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (provAppTypeId) {\n      getSourcesApi()\n        .getProvMetadata(provAppTypeId)\n        .then((data) => {\n          const accID = data?.data?.[0]?.payload;\n          accID ? setAwsAccount(accID) : setFetchError(true);\n        })\n        .catch((_e) => {\n          setFetchError(true);\n        });\n    }\n  }, [provAppTypeId]);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'provisioning.iam.delegateAccount',\n          defaultMessage: 'To delegate account access, create an IAM role and associate it with your IAM policy.',\n        })}\n      </Text>\n      {provAwsAccount === null && fetchError === null && (\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({ id: 'provisioning.iam.loading', defaultMessage: 'Loading configuration...' })}\n        </Text>\n      )}\n      {fetchError && (\n        <Alert\n          variant=\"warning\"\n          title={intl.formatMessage({\n            id: 'provisioning.iam.fetchError',\n            defaultMessage: 'There was an error while loading the commands. Please go back and return to this step to try again.',\n          })}\n        />\n      )}\n      {provAwsAccount !== null && (\n        <TextList component={TextListVariants.ol}>\n          <TextListItem>\n            {intl.formatMessage({\n              id: 'provisioning.iam.createRole',\n              defaultMessage: 'Create a new role and add the Red Hat account as a trusted entity and fetch the role ARN:',\n            })}\n            <ClipboardCopy isCode variant={ClipboardCopyVariant.expansion} className=\"pf-u-m-sm-on-sm\" isReadOnly>\n              {ROLE_COMMAND_STRING.replace('<PROVISIONING_AWS_ACCOUNT>', provAwsAccount)}\n            </ClipboardCopy>\n          </TextListItem>\n          <TextListItem>\n            {intl.formatMessage({\n              id: 'provisioning.iam.attachPolicy',\n              defaultMessage: 'Attach the permissions policy that you just created.',\n            })}\n          </TextListItem>\n          <ClipboardCopy isCode variant={ClipboardCopyVariant.expansion} className=\"pf-u-m-sm-on-sm\" isReadOnly>\n            {ATTACH_COMMAND_STRING}\n          </ClipboardCopy>\n        </TextList>\n      )}\n    </TextContent>\n  );\n};\n\nexport const ArnDescription = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'provisioning.iam.enableAccount',\n          defaultMessage: 'To enable account access, capture the ARN associated with the role you just created.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'provisioning.iam.getRoleArn',\n              defaultMessage: 'Run {command} in your terminal to print the role ARN',\n            },\n            {\n              command: <b>echo $ROLE_ARN</b>,\n            }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'provisioning.iam.copyArn',\n            defaultMessage: 'Copy it to the ARN field below.',\n          })}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n","import { axiosInstance } from './entities';\n\nexport const getSubWatchConfig = () => axiosInstance.get('/api/cloudigrade/v2/sysconfig/');\n","import React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport {\n  ClipboardCopy,\n  ClipboardCopyVariant,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextVariants,\n} from '@patternfly/react-core';\n\nimport { getSubWatchConfig } from '../../../../api/subscriptionWatch';\n\nconst b = (chunks) => <b key={`b-${chunks.length}-${Math.floor(Math.random() * 1000)}`}>{chunks}</b>;\n\nexport const IAMRoleDescription = () => {\n  const intl = useIntl();\n  const [config, setConfig] = useState();\n\n  useEffect(() => {\n    getSubWatchConfig()\n      .then((conf) => setConfig(conf?.aws_account_id))\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error(e);\n        setConfig(\n          intl.formatMessage({\n            id: 'subwatch.iampolicy.subWatchConfigError',\n            defaultMessage: 'There is an error with loading of the configuration. Please go back and return to this step.',\n          })\n        );\n      });\n  }, []);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'subwatch.iamrole.delegateAccount',\n          defaultMessage: 'To delegate account access, create an IAM role to associate with your IAM policy.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'subwatch.iamrole.createRole',\n            defaultMessage: 'From the AWS IAM console, create a new role.',\n          })}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'subwatch.iamrole.pasteAccountID',\n              defaultMessage:\n                'Select <b>Another AWS account</b> from the list of trusted entities and paste the following value into the <b>Account{space}ID</b> field:',\n            },\n            {\n              b,\n              space: <React.Fragment>&nbsp;</React.Fragment>,\n            }\n          )}\n        </TextListItem>\n        <ClipboardCopy className=\"pf-u-m-sm-on-sm\" isReadOnly>\n          {config || intl.formatMessage({ id: 'subwatch.iampolicy.loading', defaultMessage: 'Loading configuration...' })}\n        </ClipboardCopy>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'subwatch.iamrole.attachPolicy',\n            defaultMessage: 'Attach the permissions policy that you just created.',\n          })}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'subwatch.iamrole.completeProcess',\n            defaultMessage: 'Complete the process to create your new role.',\n          })}\n        </TextListItem>\n      </TextList>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'subwatch.iampolicy.BDoNotCloseYourBrowserBYouWillNeedToBeLoggedInToTheIamConsoleToComputeTheNextStep',\n            defaultMessage: '{bold} You will need to be logged in to the IAM console to complete the next step.',\n          },\n          {\n            bold: (\n              <b key=\"bold\">\n                {intl.formatMessage({\n                  id: 'subwatch.iampolicy.dontCloseBrowser',\n                  defaultMessage: 'Do not close your browser.',\n                })}\n              </b>\n            ),\n          }\n        )}\n      </Text>\n    </TextContent>\n  );\n};\n\nexport const IAMPolicyDescription = () => {\n  const intl = useIntl();\n  const [config, setConfig] = useState();\n\n  useEffect(() => {\n    getSubWatchConfig()\n      .then((conf) => setConfig(conf?.aws_policies?.traditional_inspection))\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error(e);\n        setConfig(\n          intl.formatMessage({\n            id: 'subwatch.iampolicy.subWatchConfigError',\n            defaultMessage: 'There is an error with loading of the configuration. Please go back and return to this step.',\n          })\n        );\n      });\n  }, []);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'subwatch.iampolicy.grantPermissions',\n          defaultMessage:\n            'To grant Red Hat access to your Amazon Web Services (AWS) subscription data, create an AWS Identity and Access Management (IAM) policy.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'subwatch.iampolicy.signIn',\n              defaultMessage: 'Log in to the {link}.',\n            },\n            {\n              link: (\n                <a\n                  key=\"link\"\n                  href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/console.html\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  {intl.formatMessage({\n                    id: 'subwatch.iampolicy.IAMconsole',\n                    defaultMessage: 'AWS Identity and Management (IAM) console',\n                  })}\n                </a>\n              ),\n            }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'subwatch.iampolicy.createPolicty',\n            defaultMessage: 'Create a new policy, pasting the following content into the JSON text box.',\n          })}\n        </TextListItem>\n        <ClipboardCopy isCode variant={ClipboardCopyVariant.expansion} className=\"pf-u-m-sm-on-sm\" isReadOnly>\n          {config\n            ? JSON.stringify(config, null, 2)\n            : intl.formatMessage({ id: 'subwatch.iampolicy.loading', defaultMessage: 'Loading configuration...' })}\n        </ClipboardCopy>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'subwatch.iampolicy.completeProcess',\n            defaultMessage: 'Complete the process to create your new policy.',\n          })}\n        </TextListItem>\n      </TextList>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'subwatch.iampolicy.BDoNotCloseYourBrowserBYouWillNeedToBeLoggedInToTheIamConsoleToComputeTheNextStep',\n            defaultMessage: '{bold} You will need to be logged in to the IAM console to complete the next step.',\n          },\n          {\n            bold: (\n              <b key=\"bold\">\n                {intl.formatMessage({\n                  id: 'subwatch.iampolicy.dontCloseBrowser',\n                  defaultMessage: 'Do not close your browser.',\n                })}\n              </b>\n            ),\n          }\n        )}\n      </Text>\n    </TextContent>\n  );\n};\n\nexport const ArnDescription = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'subwatch.arn.enableAccount',\n          defaultMessage: 'To enable account access, capture the ARN associated with the role you just created.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'subwatch.arn.selectRole',\n            defaultMessage: 'Navigate to the role that you just created. ',\n          })}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'subwatch.arn.copyArn',\n              defaultMessage: 'From the <b>Summary</b> screen, copy the role ARN and paste it in the <b>ARN field</b> below.',\n            },\n            { b }\n          )}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { getSourcesApi } from '../../../../api/entities';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Button,\n  ClipboardCopy,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextVariants,\n} from '@patternfly/react-core';\nconst API_LINK = 'https://access.redhat.com/management/api';\n\nexport const OfflineToken = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text>\n        {intl.formatMessage({\n          id: 'subwatch.azure.tokenDesc',\n          defaultMessage: 'Generate a token to authenticate the calls to APIs for Red Hat services.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol} className=\"pf-u-ml-0\">\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'subwatch.azure.tokenLink',\n              defaultMessage: 'To obtain an offline token, follow the steps at {link}.',\n            },\n            {\n              link: (\n                <Text key=\"link\" rel=\"noopener noreferrer\" target=\"_blank\" component={TextVariants.a} href={API_LINK}>\n                  {API_LINK}\n                </Text>\n              ),\n            }\n          )}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport const AnsiblePlaybook = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'subwatch.azure.ansiblePlaybookDesc',\n          defaultMessage: 'Download and run the following commands against a running Azure VM.',\n        })}\n      </Text>\n      <ClipboardCopy className=\"pf-u-mb-lg\">ansible-galaxy collection install redhatinsights.subscriptions</ClipboardCopy>\n      <ClipboardCopy>\n        {\n          'ansible-playbook -i <AZURE_VM_HOSTNAME>, -b ~/.ansible/collections/ansible_collections/redhatinsights/subscriptions/playbooks/verify_account.yml -e rh_api_refresh_token=<OFFLINE_AUTH_TOKEN>'\n        }\n      </ClipboardCopy>\n    </TextContent>\n  );\n};\n\nexport const LightHouseDescription = () => {\n  const intl = useIntl();\n  const [link, setLink] = useState();\n  const [error, setError] = useState(null);\n\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    getSourcesApi()\n      .getLighthouseLink()\n      .then(({ data }) => setLink(data?.[0]?.payload))\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error(e);\n        setError(\n          intl.formatMessage({\n            id: 'subwatch.iampolicy.subWatchConfigError',\n            defaultMessage: 'There is an error with loading of the configuration. Please go back and return to this step.',\n          })\n        );\n      });\n  }, []);\n\n  return (\n    <TextContent>\n      <Text>\n        {intl.formatMessage({\n          id: 'subwatch.lighthouse.desc',\n          defaultMessage:\n            \"Complete configuration steps in Azure Lighthouse according to Microsoft instructions. When you're finished, return to this wizard to finish creating this Azure source.\",\n        })}\n      </Text>\n      <Button\n        component=\"a\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href={link}\n        isLoading={!link}\n        isDisabled={!link}\n        onClick={() => {\n          formOptions.change('lighthouse-clicked', true);\n        }}\n        isBlock\n      >\n        {intl.formatMessage({\n          id: 'subwatch.lighthouse.button',\n          defaultMessage: 'Take me to Lighthouse',\n        })}\n      </Button>\n      {error}\n    </TextContent>\n  );\n};\n\nexport const SubscriptionID = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text>\n        {intl.formatMessage({\n          id: 'subwatch.subscriptionId.desc',\n          defaultMessage:\n            'Log in to your Azure account and navigate to your subscriptions. Copy the subscription ID you wish to use and paste it into the field below.',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { ClipboardCopy, Text, TextContent, TextList, TextListItem, TextListVariants, TextVariants } from '@patternfly/react-core';\n\nconst API_LINK = 'https://access.redhat.com/management/api';\n\nexport const OfflineToken = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text>\n        {intl.formatMessage({\n          id: 'subwatch.google.tokenDesc',\n          defaultMessage: 'Generate a token to authenticate the calls to APIs for Red Hat services.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol} className=\"pf-u-ml-0\">\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'subwatch.google.tokenLink',\n              defaultMessage: 'To obtain an offline token, follow the steps at {link}.',\n            },\n            {\n              link: (\n                <Text key=\"link\" rel=\"noopener noreferrer\" target=\"_blank\" component={TextVariants.a} href={API_LINK}>\n                  {API_LINK}\n                </Text>\n              ),\n            }\n          )}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport const AnsiblePlaybook = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'subwatch.google.ansiblePlaybookDesc',\n          defaultMessage: 'Download and run the following commands against a running Google Cloud VM.',\n        })}\n      </Text>\n      <ClipboardCopy className=\"pf-u-mb-lg\">ansible-galaxy collection install redhatinsights.subscriptions</ClipboardCopy>\n      <ClipboardCopy variant=\"expansion\">\n        {\n          'ansible-playbook -i <GCE_VM_HOSTNAME>, -b ~/.ansible/collections/ansible_collections/redhatinsights/subscriptions/playbooks/verify_account.yml -e rh_api_refresh_token=<OFFLINE_AUTH_TOKEN>'\n        }\n      </ClipboardCopy>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { HCCM_DOCS_PREFIX } from '../../stringConstants';\n\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nimport { bold } from '../../../../utilities/intlShared';\n\nconst INSTALL_PREREQUISITE = `${HCCM_DOCS_PREFIX}/html/adding_an_openshift_container_platform_source_to_cost_management/assembly-adding-openshift-container-platform-source#installing-cost-operator_adding-an-ocp-source`;\n\nexport const ConfigureCostOperator = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text>\n        {intl.formatMessage(\n          {\n            id: 'cost.openshift.description',\n            defaultMessage:\n              'For Red Hat OpenShift Container Platform 4.6 and later, install the {operator} from the OpenShift Container Platform web console.',\n          },\n          {\n            operator: <b key=\"bold\">costmanagement-metrics-operator</b>,\n          }\n        )}\n      </Text>\n      <Text>\n        <Text key=\"link\" component={TextVariants.a} href={INSTALL_PREREQUISITE} target=\"_blank\" rel=\"noopener noreferrer\">\n          {intl.formatMessage({\n            id: 'wizard.learnMore',\n            defaultMessage: 'Learn more',\n          })}\n        </Text>\n      </Text>\n      <Text>\n        {intl.formatMessage(\n          {\n            id: 'cost.openshift.operator_configured',\n            defaultMessage:\n              'If you configured the operator to create a source (create_source: true), <b>STOP</b> here and <b>CANCEL</b> out of this flow.',\n          },\n          {\n            b: bold,\n          }\n        )}\n      </Text>\n      <Text>\n        {intl.formatMessage({\n          id: 'cost.openshift.operator_not_configured',\n          defaultMessage:\n            'Otherwise, enter the cluster identifier below. You can find the cluster identifier in the cluster’s Help > About screen.',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {\n  ClipboardCopy,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  TextVariants,\n  Title,\n} from '@patternfly/react-core';\n\nimport { HCCM_DOCS_PREFIX } from '../../stringConstants';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport FormSpy from '@data-driven-forms/react-form-renderer/form-spy';\n\nconst CREATE_AZURE_STORAGE = `${HCCM_DOCS_PREFIX}/html/adding_a_microsoft_azure_source_to_cost_management/assembly-adding-azure-sources#creating-an-azure-storage-account_adding-an-azure-source`;\nconst AZURE_CREDS_URL = `${HCCM_DOCS_PREFIX}/html/adding_a_microsoft_azure_source_to_cost_management/assembly-adding-azure-sources#configuring-azure-roles_adding-an-azure-source`;\nconst RECURRING_TASK_URL = `${HCCM_DOCS_PREFIX}/html/adding_a_microsoft_azure_source_to_cost_management/assembly-adding-azure-sources#configuring-an-azure-daily-export-schedule_adding-an-azure-source`;\n\nexport const ConfigureResourceGroupAndStorageAccount = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'cost.azure.storageAccountDescription',\n            defaultMessage:\n              'Red Hat recommends creating a dedicated resource group and storage account in Azure to collect cost data and metrics for cost management. {link}',\n          },\n          {\n            link: (\n              <Text key=\"link\" rel=\"noopener noreferrer\" target=\"_blank\" component={TextVariants.a} href={CREATE_AZURE_STORAGE}>\n                {intl.formatMessage({\n                  id: 'wizard.learnMore defaultMessage=Learn more',\n                  defaultMessage: 'Learn more',\n                })}\n              </Text>\n            ),\n          }\n        )}\n      </Text>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.azure.storageAccountAfterDescription',\n          defaultMessage: 'After configuring a resource group and storage account in the Azure portal, enter the following:',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n\nexport const SubscriptionID = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.azure.subscriptionIdCommand',\n          defaultMessage:\n            'Run the following command in Cloud Shell to obtain the Subscription ID where the cost export is being stored and enter it below:',\n        })}\n      </Text>\n      <ClipboardCopy>{`az account show --query \"{ id: id }\" | jq '.id' | tr -d '\"'`}</ClipboardCopy>\n    </TextContent>\n  );\n};\n\nexport const ConfigureRolesDescription = () => {\n  const intl = useIntl();\n\n  const { getState } = useFormApi();\n  const values = getState().values;\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'cost.azure.dedicatedCredentials',\n            defaultMessage:\n              'Red Hat recommends configuring dedicated credentials to grant Cost Management read-only access to Azure cost data.  {link}',\n          },\n          {\n            link: (\n              <Text key=\"link\" rel=\"noopener noreferrer\" target=\"_blank\" component={TextVariants.a} href={AZURE_CREDS_URL}>\n                {intl.formatMessage({\n                  id: 'wizard.learnMore defaultMessage=Learn more',\n                  defaultMessage: 'Learn more',\n                })}\n              </Text>\n            ),\n          }\n        )}\n      </Text>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.azure.createContributorRole',\n          defaultMessage:\n            'Run the following command in Cloud Shell to create a Cost Management Storage Account Contributor role. From the output enter the values in the fields below:',\n        })}\n      </Text>\n      <ClipboardCopy>{`az ad sp create-for-rbac -n \"CostManagement\" --role \"Storage Account Contributor\"  --scope /subscriptions/${values?.application?.extra?.subscription_id}/resourceGroups/${values?.application?.extra?.resource_group} --query '{\"tenant\": tenant, \"client_id\": appId, \"secret\": password}'`}</ClipboardCopy>\n    </TextContent>\n  );\n};\n\nconst InternalReaderRoleDescription = () => {\n  const form = useFormApi();\n  const {\n    values: { authentication, application },\n  } = form.getState();\n  const intl = useIntl();\n\n  let scope = application?.extra?.scope || `/subscriptions/${application?.extra?.subscription_id}`;\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.azure.createReaderRole',\n          defaultMessage: 'Run the following command in Cloud Shell to create a Cost Management Reader role:',\n        })}\n      </Text>\n      <ClipboardCopy>\n        {`az role assignment create --assignee \"${authentication?.username}\" --role \"Cost Management Reader\" --scope \"${scope}\"`}\n      </ClipboardCopy>\n    </TextContent>\n  );\n};\n\nexport const ReaderRoleDescription = () => (\n  <FormSpy subscription={{ values: true }}>{() => <InternalReaderRoleDescription />}</FormSpy>\n);\n\nexport const ExportSchedule = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'cost.azure.storageAccountDescription',\n            defaultMessage:\n              'Create a recurring task to export cost data to your Azure storage account, where Cost Management will retrieve the data.  {link}',\n          },\n          {\n            link: (\n              <Text key=\"link\" rel=\"noopener noreferrer\" target=\"_blank\" component={TextVariants.a} href={RECURRING_TASK_URL}>\n                {intl.formatMessage({\n                  id: 'wizard.learnMore defaultMessage=Learn more',\n                  defaultMessage: 'Learn more',\n                })}\n              </Text>\n            ),\n          }\n        )}\n      </Text>\n      <TextContent className=\"list-align-left\">\n        <TextList component={TextListVariants.ol}>\n          <TextListItem component={TextListItemVariants.li}>\n            {intl.formatMessage({\n              id: 'cost.azure.storageExportDescription',\n              defaultMessage: 'From the Azure portal, add a new cost export.',\n            })}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.li}>\n            {intl.formatMessage({\n              id: 'cost.azure.storageAccountDescription',\n              defaultMessage:\n                'Provide a name for the container and directory path, and specify the below settings to create the daily export. Leave all other options as the default.',\n            })}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n      <TextList className=\"export-table\" component={TextListVariants.dl}>\n        <TextListItem component={TextListItemVariants.dt}>\n          <Text component={TextVariants.b}>\n            {intl.formatMessage({\n              id: 'cost.azure.exportType',\n              defaultMessage: 'Export type',\n            })}\n          </Text>\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {intl.formatMessage({\n            id: 'cost.azure.dailyExport',\n            defaultMessage: 'Daily export of month-to-date costs',\n          })}\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dt}>\n          <Text component={TextVariants.b}>\n            {intl.formatMessage({\n              id: 'cost.azure.storageAccountName',\n              defaultMessage: 'Storage account name',\n            })}\n          </Text>\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {intl.formatMessage({\n            id: 'cost.azure.createdAccountName',\n            defaultMessage: 'Created storage account name or existing storage account name',\n          })}\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dt}>\n          <Text component={TextVariants.b}>\n            {intl.formatMessage({\n              id: 'cost.azure.resourceGroupName',\n              defaultMessage: 'Resource group name',\n            })}\n          </Text>\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {intl.formatMessage({\n            id: 'cost.azure.createdResourceGroupName',\n            defaultMessage: 'Resource group for the storage account',\n          })}\n        </TextListItem>\n      </TextList>\n      <br />\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.azure.exportNameFollowup',\n          defaultMessage: 'After configuring the daily export, enter the following:',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n\nconst CostExportSelect = ({ handleSelect }) => {\n  const [isOpen, setOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState('Subscription');\n  const onToggle = (isOpen) => setOpen(isOpen);\n\n  const clearSelection = () => {\n    setSelected(null);\n    setOpen(false);\n  };\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setSelected(selection);\n      setOpen(false);\n      handleSelect(selection);\n    }\n  };\n\n  return (\n    <Select\n      variant={SelectVariant.single}\n      aria-label=\"Select Input\"\n      onToggle={onToggle}\n      onSelect={onSelect}\n      selections={selected}\n      isOpen={isOpen}\n    >\n      <SelectOption key=\"subscription\" value=\"Subscription\" />\n      <SelectOption key=\"resourceGroup\" value=\"Resource Group\" />\n      <SelectOption key=\"billingAccount\" value=\"Billing Account\" />\n      <SelectOption key=\"enrollment\" value=\"Enrollment Account\" />\n      <SelectOption key=\"management\" value=\"Management Group\" />\n      <SelectOption key=\"billingProfile\" value=\"Billing Profile\" />\n      <SelectOption key=\"invoiceSection\" value=\"Invoice Section\" />\n    </Select>\n  );\n};\n\nCostExportSelect.propTypes = {\n  handleSelect: PropTypes.func.isRequired,\n};\n\nconst CostExportDescription = ({ selection }) => {\n  const intl = useIntl();\n  const selectionText = {\n    Subscription: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.subscription',\n            defaultMessage:\n              'Run the following command from the Cloud Shell to obtain the Subscription ID associated with the generated cost export.',\n          })}\n        </Text>\n        <ClipboardCopy>\n          {`az account show --query \"{ id: id }\" | jq '.id' | tr -d '\"' | awk '{print \"/subscriptions/\"$0}'`}\n        </ClipboardCopy>\n        <br />\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.costExportInput',\n            defaultMessage: 'After running the command, enter the output in the following field:',\n          })}\n        </Text>\n      </TextContent>\n    ),\n    'Resource Group': (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.resourceGroup',\n            defaultMessage:\n              'Run the following command from the Cloud Shell, providing the Resource Group name, to obtain the Resource Group scope associated with the generated cost export.',\n          })}\n        </Text>\n        <ClipboardCopy>{`az group show --name {ResourceGroupName} | jq .id | tr -d '\"'`}</ClipboardCopy>\n        <br />\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.costExportInput',\n            defaultMessage: 'After running the command, enter the output in the following field:',\n          })}\n        </Text>\n      </TextContent>\n    ),\n    'Billing Account': (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.billingAccount',\n            defaultMessage:\n              'Run the following command from the Cloud Shell, providing the Billing Account name, to obtain the Billing Account scope associated with the generated cost export.',\n          })}\n        </Text>\n        <ClipboardCopy>{`az billing account show --name \"{billingAccountName}\" | jq '.id' | tr -d '\"'`}</ClipboardCopy>\n        <br />\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.costExportInput',\n            defaultMessage: 'After running the command, enter the output in the following field:',\n          })}\n        </Text>\n      </TextContent>\n    ),\n    'Enrollment Account': (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.enrollment',\n            defaultMessage: 'enrollment.',\n          })}\n        </Text>\n        <ClipboardCopy>\n          {`az billing enrollment-account show --name \"{enrollmentAccountName}\" | jq '.id' | tr -d '\"'`}\n        </ClipboardCopy>\n        <br />\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.costExportInput',\n            defaultMessage: 'After running the command, enter the output in the following field:',\n          })}\n        </Text>\n      </TextContent>\n    ),\n    'Management Group': (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.management',\n            defaultMessage:\n              'Run the following command from the Cloud Shell, providing the Management Group name, to obtain the Management Group scope associated with the generated cost export.',\n          })}\n        </Text>\n        <ClipboardCopy>{`az account management-group show --name \"{GroupName}\" | jq '.id' | tr -d '\"'`}</ClipboardCopy>\n        <br />\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.costExportInput',\n            defaultMessage: 'After running the command, enter the output in the following field:',\n          })}\n        </Text>\n      </TextContent>\n    ),\n    'Billing Profile': (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.billingProfile',\n            defaultMessage:\n              'Run the following command from the Cloud Shell, providing the Billing Account name and the Billig Profile name, to obtain the Billing Profile scope associated with the generated cost export.',\n          })}\n        </Text>\n        <ClipboardCopy>\n          {`az billing profile show --account-name \"{billingAccountName}\" --name \"{billingProfileName}\" | jq '.id' | tr -d '\"'`}\n        </ClipboardCopy>\n        <br />\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.costExportInput',\n            defaultMessage: 'After running the command, enter the output in the following field:',\n          })}\n        </Text>\n      </TextContent>\n    ),\n    'Invoice Section': (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.invoiceSection',\n            defaultMessage:\n              'Run the following command from the Cloud Shell, providing the Billing Account name, Billing Profile name, and Invoice Section name, to obtain the Invoice Section scope associated with the generated cost export.',\n          })}\n        </Text>\n        <ClipboardCopy>\n          {`az billing invoice section show --account-name \"{billingAccountName}\" --profile-name \"{billingProfileName}\" --name \"{invoiceSectionName}\" | jq '.id' | tr -d '\"'`}\n        </ClipboardCopy>\n        <br />\n        <Text component={TextVariants.p}>\n          {intl.formatMessage({\n            id: 'cost.azure.invoiceSectionInput',\n            defaultMessage: 'After running the command, enter the output in the following field:',\n          })}\n        </Text>\n      </TextContent>\n    ),\n  };\n  return selection ? selectionText[selection] : selectionText.Subscription;\n};\n\nexport const ExportScope = () => {\n  const intl = useIntl();\n  const [selection, setSelection] = useState('');\n  const handleSelect = (selection = 'Subscription') => setSelection(selection);\n\n  return (\n    <div>\n      <div>\n        <TextContent>\n          <Text component={TextVariants.p}>\n            {intl.formatMessage({\n              id: 'cost.azure.costExportScopeDescrption',\n              defaultMessage: 'From the Azure portal, select the scope for the new cost export.',\n            })}\n          </Text>\n        </TextContent>\n      </div>\n      <br />\n      <div>\n        <Title headingLevel=\"h6\">Scope</Title>\n        <CostExportSelect handleSelect={handleSelect} />\n      </div>\n      <br />\n      <div>\n        <CostExportDescription selection={selection} />\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport {\n  ClipboardCopy,\n  Hint,\n  HintBody,\n  HintTitle,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextVariants,\n} from '@patternfly/react-core';\n\nimport { HCCM_DOCS_PREFIX } from '../../stringConstants';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nimport { getSourcesApi } from '../../../../api/entities';\n\nconst b = (chunks) => <b key={`b-${chunks.length}-${Math.floor(Math.random() * 1000)}`}>{chunks}</b>;\n\nconst PROJECT_LINK = `${HCCM_DOCS_PREFIX}/html/adding_a_google_cloud_source_to_cost_management`;\n\nexport const Project = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p} className=\"pf-u-mb-lg\">\n        {intl.formatMessage(\n          {\n            id: 'cost.gcp.projectDescription',\n            defaultMessage:\n              'Enter the ID of a project within your Google Cloud Platform (GCP) billing account. We’ll use this project to set up your BigQuery billing export. {link}',\n          },\n          {\n            link: (\n              <Text key=\"link\" component={TextVariants.a} href={PROJECT_LINK} rel=\"noopener noreferrer\" target=\"_blank\">\n                {intl.formatMessage({\n                  id: 'wizard.learnMore',\n                  defaultMessage: 'Learn more',\n                })}\n              </Text>\n            ),\n          }\n        )}\n      </Text>\n      <Hint>\n        <HintTitle>\n          {intl.formatMessage({\n            id: 'cost.gcp.project.hintTitle',\n            defaultMessage: 'GCP Recommendation',\n          })}\n        </HintTitle>\n        <HintBody>\n          {intl.formatMessage({\n            id: 'cost.gcp.project.hintDescription',\n            defaultMessage: 'Create a cloud project to contain all your billing administration needs.',\n          })}\n        </HintBody>\n      </Hint>\n    </TextContent>\n  );\n};\n\nexport const IAMRole = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.gcp.iamRoleDescription',\n          defaultMessage: 'To specify GCP access permissions for Red Hat, create an Identity and Access Management (IAM) role.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.iam.firstStep',\n              defaultMessage: 'From the GCP console, navigate to <b>IAM & Admin > Roles.</b>',\n            },\n            { b }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.iam.firstStepB',\n              defaultMessage: 'Create a new role.',\n            },\n            { b }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.gcp.iam.secondStep',\n            defaultMessage: 'Add the following permissions to your custom role:',\n          })}\n        </TextListItem>\n        <TextList>\n          <TextListItem>\n            <b>bigquery.jobs.create</b>\n          </TextListItem>\n          <TextListItem>\n            <b>bigquery.tables.getData</b>\n          </TextListItem>\n          <TextListItem>\n            <b>bigquery.tables.get</b>\n          </TextListItem>\n          <TextListItem>\n            <b>bigquery.tables.list</b>\n          </TextListItem>\n        </TextList>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.iam.thirdStep',\n              defaultMessage: 'Click <b>Create role.</b>',\n            },\n            { b }\n          )}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport const Dataset = () => {\n  const intl = useIntl();\n  const { getState } = useFormApi();\n\n  const projectId = getState().values.authentication?.username;\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.gcp.dataset.description',\n          defaultMessage: 'To collect and store the information needed for Cost Management, create a BigQuery dataset.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.dataset.firstStep',\n              defaultMessage: 'In the BigQuery console, select your project (<b>{projectId}</b>) from the navigation menu.',\n            },\n            { b, projectId }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.dataset.secondStep',\n              defaultMessage: 'Click <b>Create dataset.</b>',\n            },\n            { b }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.dataset.thirdStep',\n              defaultMessage: 'In the <b>Dataset ID</b> field, enter a name for your dataset.',\n            },\n            { b }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.dataset.fourthStep',\n              defaultMessage: 'Click <b>Create dataset.</b>',\n            },\n            { b }\n          )}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport const AssignAccess = () => {\n  const intl = useIntl();\n  const [googleAccount, setGoogleAccount] = useState();\n\n  useEffect(() => {\n    const errorMessage = intl.formatMessage({\n      id: 'cost.gcp.noAccount',\n      defaultMessage: 'There is an error with loading of the account address. Please go back and return to this step.',\n    });\n\n    getSourcesApi()\n      .getGoogleAccount()\n      .then((data) => setGoogleAccount(data?.data?.[0]?.payload || errorMessage))\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error(e);\n        setGoogleAccount(errorMessage);\n      });\n  }, []);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.gcp.assignAccessDesc',\n          defaultMessage: 'To delegate account access, add a new member to your project.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.access.firstStep',\n              defaultMessage: 'In your IAM & Admin console, navigate to <b>IAM</b> and click <b>Add</b> to add a new member.',\n            },\n            { b }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.access.secondStep',\n              defaultMessage: 'Paste the following value into the <b>New members</b> field:',\n            },\n            { b }\n          )}\n        </TextListItem>\n        <ClipboardCopy className=\"pf-u-m-sm  pf-u-ml-0\" isReadOnly>\n          {googleAccount || intl.formatMessage({ id: 'cost.gcp.access.loading', defaultMessage: 'Loading account address...' })}\n        </ClipboardCopy>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.access.thirdStep',\n              defaultMessage: 'Select the role you just created.',\n            },\n            { b }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.access.fourthStep',\n              defaultMessage: 'Click <b>Save.</b>',\n            },\n            { b }\n          )}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport const BillingExport = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.gcp.billingExport.description',\n          defaultMessage: 'To enable detailed billing data exports to BigQuery, set up daily cost export.',\n        })}\n      </Text>\n      <TextList component={TextListVariants.ol}>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.billingExport.firstStep',\n              defaultMessage: 'In the Billing console, click <b>Billing export.</b>',\n            },\n            { b }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.billingExport.firstStepB',\n              defaultMessage: 'Click the <b>BigQuery export</b> tab.',\n            },\n            { b }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.billingExport.secondStep',\n              defaultMessage: 'In the <b>Detailed usage cost</b> section, click <b>Edit settings.</b>',\n            },\n            { b }\n          )}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.gcp.billingExport.thirdStep',\n            defaultMessage: 'Use the dropdown menus to select the correct project and dataset.',\n          })}\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage(\n            {\n              id: 'cost.gcp.billingExport.fourthStep',\n              defaultMessage: 'Click <b>Save.</b>',\n            },\n            { b }\n          )}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nimport {\n  ClipboardCopy,\n  ClipboardCopyVariant,\n  Text,\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextVariants,\n  Title,\n} from '@patternfly/react-core';\n\nexport const CompartmentId = ({ fields }) => {\n  const intl = useIntl();\n  const { renderForm } = useFormApi();\n\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">\n        {intl.formatMessage({\n          id: 'cost.oci.compartmentIdStepTitle',\n          defaultMessage: 'Global compartment-id',\n        })}\n      </Title>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.oci.compartmentId.description',\n          defaultMessage:\n            'To collect and store the information needed to manage your costs, you need to first find your Global compartment-id.',\n        })}\n      </Text>\n      <TextList className=\"pf-u-ml-0 pf-u-pl-md\" component={TextListVariants.ol}>\n        <TextListItem className=\"pf-u-mb-lg\">\n          {intl.formatMessage({\n            id: 'cost.oci.compartmentId.subtitle1',\n            defaultMessage: 'In the Oracle Cloud shell, copy and paste this command into the terminal to list your compartments',\n          })}\n          <ClipboardCopy className=\"pf-u-mt-sm\">oci iam compartment list</ClipboardCopy>\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.oci.compartmentId.subtitle2',\n            defaultMessage: 'Enter the name of your global compartment-id (tenant-id)',\n          })}\n          {fields.map((field) => (\n            <div className=\"pf-u-mt-sm\" key={field.name}>\n              {renderForm([field])}\n            </div>\n          ))}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nCompartmentId.propTypes = {\n  fields: PropTypes.array.isRequired,\n};\n\nexport const PolicyCompartment = ({ fields }) => {\n  const intl = useIntl();\n\n  const { renderForm, getState } = useFormApi();\n  const values = getState().values;\n\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">\n        {intl.formatMessage({\n          id: 'cost.oci.policyCompartmentStepTitle',\n          defaultMessage: 'Create new policy and compartment',\n        })}\n      </Title>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.oci.policyCompartment.description',\n          defaultMessage:\n            'In the Oracle Cloud shell, copy and paste these commands to create your cost and usage reports policy, and new cost compartment.',\n        })}\n      </Text>\n      <TextList className=\"pf-u-ml-0 pf-u-pl-md\" component={TextListVariants.ol}>\n        <TextListItem className=\"pf-u-mb-lg\">\n          {intl.formatMessage({\n            id: 'cost.oci.policyCompartment.subtitle1',\n            defaultMessage: 'Create cost and usage reports policy using the following command',\n          })}\n          <ClipboardCopy className=\"pf-u-mt-sm\" variant={ClipboardCopyVariant.expansion}>\n            {`oci iam policy create --compartment-id ${values?.application?.extra?.compartment_id} --description \"test\" --name \"test\" --statements '[\"define tenancy usage-report as ocid1.tenancy.oc1..aaaaaaaaned4fkpkisbwjlr56u7cj63lf3wffbilvqknstgtvzub7vhqkggq\",\"endorse group Administrators to read objects in tenancy usage-report\"]'`}\n          </ClipboardCopy>\n        </TextListItem>\n        <TextListItem className=\"pf-u-mb-lg\">\n          {intl.formatMessage({\n            id: 'cost.oci.policyCompartment.subtitle2',\n            defaultMessage: 'Create new Cost management compartment',\n          })}\n          <ClipboardCopy className=\"pf-u-mt-sm\" variant={ClipboardCopyVariant.expansion}>\n            {`oci iam compartment create --name cost-mgmt-compartment --compartment-id ${values?.application?.extra?.compartment_id} --description 'Cost management compartment for cost and usage data'`}\n          </ClipboardCopy>\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.oci.policyCompartment.subtitle3',\n            defaultMessage: 'Enter the name of the your new compartment-id',\n          })}\n          {fields.map((field) => (\n            <div className=\"pf-u-mt-sm\" key={field.name}>\n              {renderForm([field])}\n            </div>\n          ))}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nPolicyCompartment.propTypes = {\n  fields: PropTypes.array.isRequired,\n};\n\nexport const CreateBucket = ({ fields }) => {\n  const intl = useIntl();\n\n  const { renderForm, getState } = useFormApi();\n  const values = getState().values;\n\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">\n        {intl.formatMessage({\n          id: 'cost.oci.createBucketStepTitle',\n          defaultMessage: 'Create bucket',\n        })}\n      </Title>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.oci.createBucket.description',\n          defaultMessage:\n            'Because Oracle Cloud does not allow outside access to the usage bucket, you will need to create a new bucket to copy the necessary data into.',\n        })}\n      </Text>\n      <TextList className=\"pf-u-ml-0 pf-u-pl-md\" component={TextListVariants.ol}>\n        <TextListItem className=\"pf-u-mb-lg\">\n          {intl.formatMessage({\n            id: 'cost.oci.createBucket.subtitle1',\n            defaultMessage: 'Create a new bucket for cost and usage data with the following command',\n          })}\n          <ClipboardCopy className=\"pf-u-mt-sm\" variant={ClipboardCopyVariant.expansion}>\n            {`oci os bucket create --name cost-management --compartment-id ${values?.application?.extra?.policy_compartment}`}\n          </ClipboardCopy>\n        </TextListItem>\n        <TextListItem>\n          {intl.formatMessage({\n            id: 'cost.oci.createBucket.subtitle2',\n            defaultMessage: 'Enter the name, namespace, and region of your new data bucket',\n          })}\n          {fields.map((field) => (\n            <div className=\"pf-u-mt-sm\" key={field.name}>\n              {renderForm([field])}\n            </div>\n          ))}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nCreateBucket.propTypes = {\n  fields: PropTypes.array.isRequired,\n};\n\nexport const PopulateBucket = () => {\n  const intl = useIntl();\n\n  const { getState } = useFormApi();\n  const values = getState().values;\n\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">\n        {intl.formatMessage({\n          id: 'cost.oci.populateBucketStepTitle',\n          defaultMessage: 'Populate bucket',\n        })}\n      </Title>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.oci.populateBucket.description',\n          defaultMessage:\n            'Because Oracle Cloud does not have automation scripts, you will need to create a VM to run a script that copies the necessary data to your new cost-management bucket and grant read access to Red Hat.',\n        })}\n      </Text>\n      <TextList className=\"pf-u-ml-0 pf-u-pl-md\" component={TextListVariants.ol}>\n        <TextListItem className=\"pf-u-mb-lg\">\n          {intl.formatMessage({\n            id: 'cost.oci.populateBucket.subtitle1',\n            defaultMessage:\n              'In your Oracle Cloud account, create a VM and run a script similar to the one from this github repository:',\n          })}\n          <a\n            className=\"pf-u-mt-md pf-u-display-block\"\n            href=\"https://github.com/project-koku/koku/blob/main/dev/scripts/oci_replication_func.py\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            https://github.com/project-koku/koku/blob/main/dev/scripts/oci_replication_func.py\n            <i className=\"pf-u-ml-xs fas fa-external-link-alt pf-u-font-size-xs\"></i>\n          </a>\n        </TextListItem>\n        <TextListItem className=\"pf-u-mb-lg\">\n          {intl.formatMessage({\n            id: 'cost.oci.populateBucket.subtitle2',\n            defaultMessage: 'In your Oracle Cloud shell, create this read policy for the new bucket',\n          })}\n          <ClipboardCopy className=\"pf-u-mt-sm\" variant={ClipboardCopyVariant.expansion}>\n            {`oci iam policy create --compartment-id ${values?.application?.extra?.compartment_id} --description 'Grant cost management bucket read access' --name Cost-managment-bucket-read --statements '[\"Define tenancy SourceTenancy as ocid1.tenancy.oc1..aaaaaaaa7bmeqn34urxue57x75fg4nlzh4w6ttjxckhaue2itbefeen2gdma\",\"Define group StorageAdmins as ocid1.group.oc1..aaaaaaaamwx3swyherxtnvtq3vjmcflmteojw6lxf5i6bgwjygq642a2ejpa\",\"Admit group StorageAdmins of tenancy SourceTenancy to read objects in tenancy\"]'`}\n          </ClipboardCopy>\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nPopulateBucket.propTypes = {\n  fields: PropTypes.array.isRequired,\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nexport const AllFieldAreRequired = () => {\n  const intl = useIntl();\n\n  return (\n    <Text component={TextVariants.p} className=\"src-wizard--all-required-text\">\n      {intl.formatMessage({\n        id: 'catalog.auth.allFieldsRequired',\n        defaultMessage: 'All fields are required.',\n      })}\n    </Text>\n  );\n};\n\nexport const AuthDescription = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p} className=\"pf-u-mb-l\">\n        {intl.formatMessage({\n          id: 'catalog.auth.provideTowerCredentials',\n          defaultMessage:\n            'Provide Ansible Tower service account user credentials to ensure optimized availability of resources to Catalog Administrators.',\n        })}\n      </Text>\n      <AllFieldAreRequired />\n    </TextContent>\n  );\n};\n\nexport const EndpointDescription = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p} className=\"pf-u-mb-l\">\n        {intl.formatMessage({\n          id: 'catalog.endpoint.enterHostname',\n          defaultMessage: 'Enter the hostname of the Ansible Tower instance you want to connect to.',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { FormHelperText } from '@patternfly/react-core';\n\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport SSLFormLabel from './SSLFormLabel';\n\nimport * as OpenshiftToken from './hardcodedComponents/openshift/token';\nimport * as AwsSecret from './hardcodedComponents/aws/access_key';\nimport * as AwsArn from './hardcodedComponents/aws/arn';\n\nimport * as ProvAwsArn from './hardcodedComponents/aws/provisioningArn';\n\nimport * as SWAwsArn from './hardcodedComponents/aws/subscriptionWatch';\nimport * as SWAzure from './hardcodedComponents/azure/subscriptionWatch';\nimport * as SWGoogle from './hardcodedComponents/gcp/subscriptionWatch';\n\nimport * as CMOpenshift from './hardcodedComponents/openshift/costManagement';\nimport * as CMAzure from './hardcodedComponents/azure/costManagement';\nimport * as CMGoogle from './hardcodedComponents/gcp/costManagement';\nimport * as CMIbm from './hardcodedComponents/ibm/costManagement';\nimport * as CMOci from './hardcodedComponents/oci/costManagement';\n\nimport * as TowerCatalog from './hardcodedComponents/tower/catalog';\nimport * as Openshift from './hardcodedComponents/openshift/endpoint';\n\nimport {\n  CATALOG_APP,\n  CLOUD_METER_APP_NAME,\n  COST_MANAGEMENT_APP_NAME,\n  HCS_NAME,\n  PROVISIONING_APP_NAME,\n} from '../../utilities/constants';\nimport emptyAuthType from './emptyAuthType';\n\nconst arnMessagePattern = <FormattedMessage id=\"wizard.arnPattern\" defaultMessage=\"ARN must start with arn:aws:\" />;\nconst arnMessageLength = <FormattedMessage id=\"wizard.arnLength\" defaultMessage=\"ARN should have at least 10 characters\" />;\n\nconst arnField = {\n  placeholder: 'arn:aws:iam:123456789:role/CostManagement',\n  isRequired: true,\n  validate: [\n    {\n      type: validatorTypes.REQUIRED,\n    },\n    {\n      type: validatorTypes.PATTERN,\n      pattern: /^arn:aws:.*/,\n      message: arnMessagePattern,\n    },\n    {\n      type: validatorTypes.MIN_LENGTH,\n      threshold: 10,\n      message: arnMessageLength,\n    },\n  ],\n};\n\nconst provArnField = {\n  placeholder: 'arn:aws:iam:123456789:role/Provisioning',\n  isRequired: true,\n  validate: [\n    {\n      type: validatorTypes.REQUIRED,\n    },\n    {\n      type: validatorTypes.PATTERN,\n      pattern: /^arn:aws:.*/,\n      message: arnMessagePattern,\n    },\n    {\n      type: validatorTypes.MIN_LENGTH,\n      threshold: 10,\n      message: arnMessageLength,\n    },\n  ],\n};\n\nconst hcsArnField = {\n  ...arnField,\n  placeholder: 'arn:aws:iam:123456789:role/HybridCommittedSpend',\n};\n\nconst getArn = (authUsername, showHCS) => ({\n  useApplicationAuth: true,\n  skipSelection: true,\n  'authentication.username': authUsername,\n  'application.extra.bucket': {\n    placeholder: 'cost-usage-bucket',\n    validate: [\n      {\n        type: validatorTypes.REQUIRED,\n      },\n      {\n        type: validatorTypes.PATTERN,\n        pattern:\n          /(?!(^((2(5[0-5]|[0-4][0-9])|[01]?[0-9]{1,2})\\.){3}(2(5[0-5]|[0-4][0-9])|[01]?[0-9]{1,2})$|^xn--|-s3alias$))^[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$/,\n        message: (\n          <FormattedMessage\n            id=\"cost.arn.s3BucketPattern\"\n            defaultMessage=\"S3 bucket name must start with alphanumeric character and can contain lowercase letters, numbers, dots, and hyphens\"\n          />\n        ),\n      },\n    ],\n    isRequired: true,\n  },\n  additionalSteps: [\n    {\n      title: <FormattedMessage id=\"cost.arn.usageDescriptionTitle\" defaultMessage=\"Configure cost and usage reporting\" />,\n      nextStep: 'tags',\n      fields: [\n        {\n          name: 'usage-description',\n          component: 'description',\n          Content: () => <AwsArn.UsageDescription showHCS={showHCS} />,\n        },\n        {\n          name: 'application.extra.bucket',\n          component: componentTypes.TEXT_FIELD,\n          label: <FormattedMessage id=\"cost.arn.s3Label\" defaultMessage=\"S3 bucket name\" />,\n        },\n        {\n          component: componentTypes.TEXT_FIELD,\n          name: 'authentication.authtype',\n          hideField: true,\n          initialValue: 'arn',\n          initializeOnMount: true,\n        },\n      ],\n    },\n    {\n      title: <FormattedMessage id=\"cost.arn.tagsStepTitle\" defaultMessage=\"Tags, aliases and organizational units\" />,\n      name: 'tags',\n      nextStep: 'iam-policy',\n      fields: [\n        {\n          name: 'tags-description',\n          component: 'description',\n          Content: () => <AwsArn.TagsDescription showHCS={showHCS} />,\n        },\n        {\n          name: 'aws.aliases.enabled',\n          component: 'checkbox-with-icon',\n          label: <FormattedMessage id=\"cost.arn.includesAliases\" defaultMessage=\"Include AWS account aliases\" />,\n          Icon: AwsArn.IncludeAliasesLabel,\n        },\n        {\n          name: 'aws.org_units.enabled',\n          component: 'checkbox-with-icon',\n          label: <FormattedMessage id=\"cost.arn.includeOrgUnits\" defaultMessage=\"Include AWS organizational units\" />,\n          Icon: AwsArn.IncludeOrgUnitsLabel,\n        },\n      ],\n    },\n    {\n      title: <FormattedMessage id=\"cost.arn.iamPolicyTitle\" defaultMessage=\"Create IAM policy\" />,\n      name: 'iam-policy',\n      nextStep: 'iam-role',\n      substepOf: {\n        name: 'eaa',\n        title: <FormattedMessage id=\"cost.arn.enableAccountAccess\" defaultMessage=\"Enable account access\" />,\n      },\n      fields: [\n        {\n          name: 'iam-policy-description',\n          component: 'description',\n          Content: () => <AwsArn.IAMPolicyDescription showHCS={showHCS} />,\n        },\n      ],\n    },\n    {\n      title: <FormattedMessage id=\"cost.arn.iamRoleStepTitle\" defaultMessage=\"Create IAM role\" />,\n      name: 'iam-role',\n      nextStep: 'arn',\n      substepOf: 'eaa',\n      fields: [\n        {\n          name: 'iam-role-description',\n          component: 'description',\n          Content: AwsArn.IAMRoleDescription,\n        },\n      ],\n    },\n    {\n      title: <FormattedMessage id=\"cost.arn.enterArn\" defaultMessage=\"Enter ARN\" />,\n      name: 'arn',\n      substepOf: 'eaa',\n      fields: [\n        {\n          name: 'arn-description',\n          component: 'description',\n          Content: AwsArn.ArnDescription,\n        },\n      ],\n    },\n  ],\n});\n\nconst subsWatchArnField = {\n  placeholder: 'arn:aws:iam:123456789:role/SubscriptionWatch',\n  isRequired: true,\n  validate: [\n    {\n      type: validatorTypes.REQUIRED,\n    },\n    {\n      type: validatorTypes.PATTERN,\n      pattern: /^arn:aws:.*/,\n      message: arnMessagePattern,\n    },\n    {\n      type: validatorTypes.MIN_LENGTH,\n      threshold: 10,\n      message: arnMessageLength,\n    },\n  ],\n  label: <FormattedMessage id=\"wizard.arn\" defaultMessage=\"ARN\" />,\n};\n\nconst ansibleTowerURL = {\n  isRequired: true,\n  validate: [\n    { type: validatorTypes.REQUIRED },\n    {\n      type: validatorTypes.PATTERN,\n      message: <FormattedMessage id=\"catalog.urlPatternMessage\" defaultMessage=\"URL must start with https:// or http://\" />,\n      pattern: /^https{0,1}:\\/\\//,\n    },\n    { type: validatorTypes.URL },\n  ],\n  helperText: (\n    <FormHelperText isHidden={false}>\n      <FormattedMessage\n        id=\"catalog.hostnameHelper\"\n        defaultMessage=\"For example, https://myansibleinstance.example.com/ or https://127.0.0.1/\"\n      />\n    </FormHelperText>\n  ),\n  label: <FormattedMessage id=\"wizard.hostname\" defaultMessage=\"Hostname\" />,\n};\n\nconst hardcodedSchemas = {\n  ibm: {\n    authentication: {\n      api_token_account_id: {\n        generic: {\n          skipEndpoint: true,\n        },\n        [COST_MANAGEMENT_APP_NAME]: {\n          skipSelection: true,\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"cost.ibm.enterpriseIdTitle\" defaultMessage=\"Add enterprise ID\" />,\n              showTitle: false,\n              fields: [\n                {\n                  name: 'authentication.authtype',\n                  component: 'text-field',\n                  hideField: true,\n                  initialValue: 'api_token_account_id',\n                  initializeOnMount: true,\n                },\n                {\n                  component: 'description',\n                  name: 'description-summary',\n                  Content: CMIbm.EnterpriseId,\n                },\n                {\n                  name: 'application.extra.enterprise_id',\n                  label: 'Enterprise ID',\n                  validate: [\n                    {\n                      type: 'required',\n                    },\n                  ],\n                  component: 'text-field',\n                  isRequired: true,\n                },\n              ],\n              nextStep: 'ibm-cm-account-id',\n              substepOf: {\n                name: 'ibm-cm-substep',\n                title: <FormattedMessage id=\"cost.ibm.substepTitle\" defaultMessage=\"Enter account IDs\" />,\n              },\n            },\n            {\n              title: <FormattedMessage id=\"cost.ibm.accountIdTitle\" defaultMessage=\"Add account ID\" />,\n              showTitle: false,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-summary',\n                  Content: CMIbm.AccountId,\n                },\n                {\n                  name: 'authentication.username',\n                  label: 'Account ID',\n                  component: 'text-field',\n                  validate: [\n                    {\n                      type: 'required',\n                    },\n                  ],\n                  isRequired: true,\n                },\n              ],\n              nextStep: 'ibm-cm-service-id',\n              substepOf: 'ibm-cm-substep',\n              name: 'ibm-cm-account-id',\n            },\n            {\n              title: <FormattedMessage id=\"cost.ibm.serviceIdTitle\" defaultMessage=\"Create a service ID\" />,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-summary',\n                  Content: CMIbm.ServiceId,\n                },\n                {\n                  name: 'cost.service_id',\n                  component: 'text-field',\n                  label: 'Service ID',\n                  validate: [\n                    {\n                      type: 'required',\n                    },\n                  ],\n                  isRequired: true,\n                },\n              ],\n              nextStep: 'ibm-cm-configure-access',\n              name: 'ibm-cm-service-id',\n            },\n            {\n              title: <FormattedMessage id=\"cost.ibm.accessId\" defaultMessage=\"Configure service ID access\" />,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-summary',\n                  Content: CMIbm.ConfigureAccess,\n                },\n              ],\n              nextStep: 'ibm-cm-api-key',\n              name: 'ibm-cm-configure-access',\n            },\n            {\n              title: <FormattedMessage id=\"cost.ibm.apiKeyTitle\" defaultMessage=\"Create an API key\" />,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-summary',\n                  Content: CMIbm.ApiKey,\n                },\n                {\n                  name: 'authentication.password',\n                  label: 'API Key',\n                  validate: [\n                    {\n                      type: 'required',\n                    },\n                  ],\n                  component: 'text-field',\n                  isRequired: true,\n                  type: 'password',\n                },\n              ],\n              name: 'ibm-cm-api-key',\n            },\n          ],\n        },\n      },\n    },\n  },\n  openshift: {\n    authentication: {\n      token: {\n        generic: {\n          'authentication.password': {\n            isRequired: true,\n            validate: [{ type: validatorTypes.REQUIRED }],\n          },\n          additionalFields: [\n            {\n              component: 'description',\n              name: 'description-summary',\n              Content: OpenshiftToken.DescriptionSummary,\n            },\n          ],\n        },\n        [COST_MANAGEMENT_APP_NAME]: {\n          skipSelection: true,\n          skipEndpoint: true,\n          'source.source_ref': {\n            label: <FormattedMessage id=\"wizard.clusterId\" defaultMessage=\"Cluster Identifier\" />,\n            isRequired: true,\n            component: componentTypes.TEXT_FIELD,\n            validate: [\n              {\n                type: validatorTypes.REQUIRED,\n              },\n              {\n                type: validatorTypes.PATTERN,\n                pattern: /^[A-Za-z0-9]+[A-Za-z0-9_-]*$/,\n                message: (\n                  <FormattedMessage\n                    id=\"wizard.clusterIdPattern\"\n                    defaultMessage=\"Cluster ID must start with alphanumeric character and can contain underscore and hyphen\"\n                  />\n                ),\n              },\n            ],\n          },\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"cost.configureOperator\" defaultMessage=\"Install and configure operator\" />,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-summary',\n                  Content: CMOpenshift.ConfigureCostOperator,\n                },\n                {\n                  name: 'source.source_ref',\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.authtype',\n                  hideField: true,\n                  initialValue: 'token',\n                  initializeOnMount: true,\n                },\n              ],\n            },\n          ],\n        },\n      },\n    },\n    endpoint: {\n      url: {\n        placeholder: 'https://myopenshiftcluster.mycompany.com',\n        isRequired: true,\n        validate: [\n          { type: validatorTypes.REQUIRED },\n          {\n            type: validatorTypes.URL,\n            message: <FormattedMessage id=\"wizard.urlPatternMessage\" defaultMessage=\"The URL is not formatted correctly.\" />,\n          },\n        ],\n      },\n      'endpoint.certificate_authority': {\n        label: <SSLFormLabel />,\n        'aria-label': 'SSL Certificate',\n      },\n      additionalFields: [\n        {\n          component: 'description',\n          name: 'description-summary',\n          Content: Openshift.EndpointDesc,\n        },\n      ],\n    },\n  },\n  azure: {\n    authentication: {\n      username_password_tenant_id: {\n        generic: {\n          'authentication.extra.azure.tenant_id': {\n            type: 'password',\n            isRequired: true,\n            validate: [{ type: validatorTypes.REQUIRED }],\n          },\n          'authentication.username': {\n            label: <FormattedMessage id=\"azure.generic.username\" defaultMessage=\"App ID\" />,\n            isRequired: true,\n            validate: [{ type: validatorTypes.REQUIRED }],\n          },\n          'authentication.password': {\n            isRequired: true,\n            validate: [{ type: validatorTypes.REQUIRED }],\n          },\n        },\n      },\n      lighthouse_subscription_id_legacy: {\n        [CLOUD_METER_APP_NAME]: {\n          skipSelection: true,\n          useApplicationAuth: true,\n          customSteps: true,\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"subwatch.azure.tokenTitle\" defaultMessage=\"Obtain offline token\" />,\n              nextStep: 'cost-azure-playbook',\n              substepOf: {\n                name: 'eaa',\n                title: <FormattedMessage id=\"subwatch.azure.substepTitle\" defaultMessage=\"Enable account access\" />,\n              },\n              fields: [\n                {\n                  name: 'azure-1',\n                  component: 'description',\n                  Content: SWAzure.OfflineToken,\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.authtype',\n                  hideField: true,\n                  initialValue: emptyAuthType.type,\n                  initializeOnMount: true,\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"subwatch.azure.playbookTitle\" defaultMessage=\"Run Ansible playbook\" />,\n              name: 'cost-azure-playbook',\n              substepOf: 'eaa',\n              fields: [\n                {\n                  name: 'azure-2',\n                  component: 'description',\n                  Content: SWAzure.AnsiblePlaybook,\n                },\n              ],\n            },\n          ],\n        },\n      },\n      lighthouse_subscription_id: {\n        [CLOUD_METER_APP_NAME]: {\n          skipSelection: true,\n          useApplicationAuth: true,\n          customSteps: true,\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"subwatch.lighthouse.title\" defaultMessage=\"Configure Azure Lighthouse\" />,\n              nextStep: 'subwatch-lighthouse-sub-id',\n              fields: [\n                {\n                  name: 'azure-1',\n                  component: 'description',\n                  Content: SWAzure.LightHouseDescription,\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.authtype',\n                  hideField: true,\n                  initialValue: 'lighthouse_subscription_id',\n                  initializeOnMount: true,\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'lighthouse-clicked',\n                  hideField: true,\n                  validate: [{ type: 'required' }],\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"subwatch.lighthouse.subscriptionId\" defaultMessage=\"Set subscription ID\" />,\n              name: 'subwatch-lighthouse-sub-id',\n              fields: [\n                {\n                  name: 'azure-2',\n                  component: 'description',\n                  Content: SWAzure.SubscriptionID,\n                },\n                {\n                  component: 'text-field',\n                  name: 'authentication.username',\n                  label: 'Subscription ID',\n                  isRequired: true,\n                  placeholder: '291bba3f-e0a5-47bc-a099-3bdcb2a50a05',\n                  validate: [{ type: 'required' }],\n                },\n              ],\n            },\n          ],\n        },\n      },\n      tenant_id_client_id_client_secret: {\n        [COST_MANAGEMENT_APP_NAME]: {\n          useApplicationAuth: true,\n          skipSelection: true,\n          'application.extra.subscription_id': {\n            placeholder: '',\n            validate: [\n              {\n                type: validatorTypes.REQUIRED,\n              },\n              {\n                type: validatorTypes.PATTERN,\n                pattern: /^[A-Za-z0-9]+[A-Za-z0-9_-]*$/,\n                message: (\n                  <FormattedMessage\n                    id=\"cost.subidPattern\"\n                    defaultMessage=\"Subscription ID must start with alphanumeric character and can contain underscore and hyphen\"\n                  />\n                ),\n              },\n            ],\n            isRequired: true,\n          },\n          'application.extra.resource_group': {\n            placeholder: '',\n            validate: [\n              {\n                type: validatorTypes.REQUIRED,\n              },\n              {\n                type: validatorTypes.PATTERN,\n                pattern: /^[A-Za-z0-9]+[A-Za-z0-9_-]*$/,\n                message: (\n                  <FormattedMessage\n                    id=\"cost.resourceGroupPattern\"\n                    defaultMessage=\"Resource group must start with alphanumeric character and can contain underscore and hyphen\"\n                  />\n                ),\n              },\n            ],\n          },\n          'application.extra.storage_account': {\n            placeholder: '',\n            validate: [\n              {\n                type: validatorTypes.REQUIRED,\n              },\n              {\n                type: validatorTypes.PATTERN,\n                pattern: /^[A-Za-z0-9]+[A-Za-z0-9_-]*$/,\n                message: (\n                  <FormattedMessage\n                    id=\"cost.storageAccountPattern\"\n                    defaultMessage=\"Storage account must start with alphanumeric character and can contain underscore and hyphen\"\n                  />\n                ),\n              },\n            ],\n          },\n          'application.extra.scope': {\n            placeholder: '',\n            validate: [\n              {\n                type: validatorTypes.PATTERN,\n                pattern: /^[\\/A-Za-z0-9]+[\\.\\/\\:A-Za-z0-9_-]*$/, // eslint-disable-line no-useless-escape\n                message: (\n                  <FormattedMessage\n                    id=\"cost.scopePattern\"\n                    defaultMessage=\"Cost export scope must start with alphanumeric character and can contain underscore, hyphen, and foward slash\"\n                  />\n                ),\n              },\n            ],\n          },\n          'application.extra.export_name': {\n            placeholder: '',\n            validate: [\n              {\n                type: validatorTypes.PATTERN,\n                pattern: /^[A-Za-z0-9]+[A-Za-z0-9_-]*$/,\n                message: (\n                  <FormattedMessage\n                    id=\"cost.exportNamePattern\"\n                    defaultMessage=\"Cost export name must start with alphanumeric character and can contain underscore and hyphen\"\n                  />\n                ),\n              },\n            ],\n          },\n          'authentication.password': {\n            type: 'password',\n            validate: [\n              {\n                type: validatorTypes.REQUIRED,\n              },\n            ],\n            label: <FormattedMessage id=\"cost.clientSecret\" defaultMessage=\"Client secret\" />,\n          },\n          'authentication.username': {\n            validate: [\n              {\n                type: validatorTypes.REQUIRED,\n              },\n            ],\n            label: <FormattedMessage id=\"cost.clientAppId\" defaultMessage=\"Client (Application) ID\" />,\n          },\n          'authentication.extra.azure.tenant_id': {\n            label: <FormattedMessage id=\"cost.tenantDirId\" defaultMessage=\"Tenant (Directory) ID\" />,\n            validate: [\n              {\n                type: validatorTypes.REQUIRED,\n              },\n            ],\n          },\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"cost.createDailyExport\" defaultMessage=\"Specify cost export scope\" />,\n              nextStep: 'azure-rg-and-sa',\n              fields: [\n                {\n                  name: 'cost-export-scope-description',\n                  component: 'description',\n                  Content: CMAzure.ExportScope,\n                },\n                {\n                  name: 'application.extra.scope',\n                  component: componentTypes.TEXT_FIELD,\n                  label: <FormattedMessage id=\"wizard.costExportScope\" defaultMessage=\"Cost export scope\" />,\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"cost.createDailyExport\" defaultMessage=\"Daily export\" />,\n              name: 'daily-export',\n              nextStep: 'azure-sub-id',\n              fields: [\n                {\n                  name: 'export-schedule-description',\n                  component: 'description',\n                  Content: CMAzure.ExportSchedule,\n                },\n                {\n                  name: 'application.extra.export_name',\n                  component: componentTypes.TEXT_FIELD,\n                  label: <FormattedMessage id=\"wizard.costExportName\" defaultMessage=\"Cost export name\" />,\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"cost.azureSubStepId\" defaultMessage=\"Resource group and storage account\" />,\n              name: 'azure-rg-and-sa',\n              nextStep: 'daily-export',\n              fields: [\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.authtype',\n                  hideField: true,\n                  initialValue: 'tenant_id_client_id_client_secret',\n                  initializeOnMount: true,\n                },\n                {\n                  name: 'azure-storage-account-description',\n                  component: 'description',\n                  Content: CMAzure.ConfigureResourceGroupAndStorageAccount,\n                },\n                {\n                  name: 'all-required',\n                  component: 'description',\n                  Content: TowerCatalog.AllFieldAreRequired,\n                },\n                {\n                  name: 'application.extra.resource_group',\n                  component: componentTypes.TEXT_FIELD,\n                  label: <FormattedMessage id=\"wizard.resourceGroupName\" defaultMessage=\"Resource group name\" />,\n                },\n                {\n                  name: 'application.extra.storage_account',\n                  component: componentTypes.TEXT_FIELD,\n                  label: <FormattedMessage id=\"wizard.storageAccountName\" defaultMessage=\"Storage account name\" />,\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"wizard.subscriptionId\" defaultMessage=\"Subscription ID\" />,\n              name: 'azure-sub-id',\n              nextStep: 'configure-roles',\n              fields: [\n                {\n                  name: 'azure-sub-id-description',\n                  component: 'description',\n                  Content: CMAzure.SubscriptionID,\n                },\n                {\n                  name: 'application.extra.subscription_id',\n                  component: componentTypes.TEXT_FIELD,\n                  label: <FormattedMessage id=\"wizard.subscriptionId\" defaultMessage=\"Subscription ID\" />,\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"wizard.configureRoles\" defaultMessage=\"Roles\" />,\n              name: 'configure-roles',\n              fields: [\n                {\n                  name: 'configure-service-principal',\n                  component: 'description',\n                  Content: CMAzure.ConfigureRolesDescription,\n                },\n                {\n                  name: 'all-required',\n                  component: 'description',\n                  Content: TowerCatalog.AllFieldAreRequired,\n                },\n                {\n                  name: 'authentication.extra.azure.tenant_id',\n                  component: componentTypes.TEXT_FIELD,\n                },\n                {\n                  name: 'authentication.username',\n                  component: componentTypes.TEXT_FIELD,\n                },\n                {\n                  name: 'authentication.password',\n                  component: componentTypes.TEXT_FIELD,\n                },\n                {\n                  name: 'reader-role',\n                  component: 'description',\n                  Content: CMAzure.ReaderRoleDescription,\n                },\n              ],\n            },\n          ],\n        },\n      },\n    },\n  },\n  amazon: {\n    authentication: {\n      access_key_secret_key: {\n        generic: {\n          'authentication.username': {\n            label: <FormattedMessage id=\"wizard.accessKeyId\" defaultMessage=\"Access key ID\" />,\n            placeholder: 'AKIAIOSFODNN7EXAMPLE',\n            isRequired: true,\n            validate: [{ type: validatorTypes.REQUIRED }],\n          },\n          'authentication.password': {\n            label: <FormattedMessage id=\"wizard.secretAccessKey\" defaultMessage=\"Secret access key\" />,\n            placeholder: 'wJairXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',\n            isRequired: true,\n            validate: [{ type: validatorTypes.REQUIRED }],\n            type: 'password',\n          },\n          skipSelection: true,\n          onlyHiddenFields: true,\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"wizard.configureAccountAccess\" defaultMessage=\"Account access\" />,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-summary',\n                  Content: AwsSecret.DescriptionSummary,\n                },\n                {\n                  name: 'authentication.username',\n                  component: componentTypes.TEXT_FIELD,\n                },\n                {\n                  name: 'authentication.password',\n                  component: componentTypes.TEXT_FIELD,\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.authtype',\n                  hideField: true,\n                  initialValue: 'access_key_secret_key',\n                  initializeOnMount: true,\n                },\n              ],\n            },\n          ],\n        },\n      },\n      arn: {\n        generic: {\n          includeStepKeyFields: ['arn'],\n          'authentication.username': arnField,\n        },\n        [COST_MANAGEMENT_APP_NAME]: (() => {\n          return getArn(arnField, false);\n        })(),\n        [HCS_NAME]: getArn(hcsArnField, true),\n      },\n      'cloud-meter-arn': {\n        generic: {\n          includeStepKeyFields: ['arn'],\n          'authentication.username': subsWatchArnField,\n        },\n        [CLOUD_METER_APP_NAME]: {\n          useApplicationAuth: true,\n          skipSelection: true,\n          'authentication.username': subsWatchArnField,\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"cloudmeter.createIamPolicy\" defaultMessage=\"Create IAM policy\" />,\n              nextStep: 'subs-iam-role',\n              substepOf: {\n                name: 'eaa',\n                title: <FormattedMessage id=\"cloudmeter.enableAccountAccess\" defaultMessage=\"Enable account access\" />,\n              },\n              fields: [\n                {\n                  name: 'iam-policy-description',\n                  component: 'description',\n                  Content: SWAwsArn.IAMPolicyDescription,\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.authtype',\n                  hideField: true,\n                  initialValue: 'cloud-meter-arn',\n                  initializeOnMount: true,\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"cloudmeter.createIamRole\" defaultMessage=\"Create IAM role\" />,\n              name: 'subs-iam-role',\n              nextStep: 'subs-arn',\n              substepOf: 'eaa',\n              fields: [\n                {\n                  name: 'iam-role-description',\n                  component: 'description',\n                  Content: SWAwsArn.IAMRoleDescription,\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"cloudmeter.enterArn\" defaultMessage=\"Enter ARN\" />,\n              name: 'subs-arn',\n              substepOf: 'eaa',\n              fields: [\n                {\n                  name: 'arn-description',\n                  component: 'description',\n                  Content: SWAwsArn.ArnDescription,\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.username',\n                },\n              ],\n            },\n          ],\n        },\n      },\n      'provisioning-arn': {\n        generic: {\n          includeStepKeyFields: ['provisioning-arn'],\n          'authentication.username': provArnField,\n        },\n        [PROVISIONING_APP_NAME]: {\n          useApplicationAuth: true,\n          skipSelection: true,\n          'authentication.username': provArnField,\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"provisioning.createIamPolicy\" defaultMessage=\"Create IAM policy\" />,\n              nextStep: 'prov-iam-role',\n              substepOf: {\n                name: 'eaa',\n                title: <FormattedMessage id=\"provisioning.enableAccountAccess\" defaultMessage=\"Enable account access\" />,\n              },\n              fields: [\n                {\n                  name: 'iam-policy-description',\n                  component: 'description',\n                  Content: ProvAwsArn.IAMPolicyDescription,\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.authtype',\n                  hideField: true,\n                  initialValue: 'provisioning-arn',\n                  initializeOnMount: true,\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"provisioning.createIamRole\" defaultMessage=\"Create IAM role\" />,\n              name: 'prov-iam-role',\n              nextStep: 'prov-arn',\n              substepOf: 'eaa',\n              fields: [\n                {\n                  name: 'iam-role-description',\n                  component: 'description',\n                  Content: ProvAwsArn.IAMRoleDescription,\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"provisioning.enterArn\" defaultMessage=\"Enter ARN\" />,\n              name: 'prov-arn',\n              substepOf: 'eaa',\n              fields: [\n                {\n                  name: 'arn-description',\n                  component: 'description',\n                  Content: ProvAwsArn.ArnDescription,\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.username',\n                },\n              ],\n            },\n          ],\n        },\n      },\n    },\n    endpoint: {},\n  },\n  satellite: {\n    endpoint: {},\n    authentication: {\n      receptor_node: {\n        generic: {\n          'source.source_ref': {\n            label: <FormattedMessage id=\"satellite.satelliteId\" defaultMessage=\"Satellite ID\" />,\n            validate: [{ type: validatorTypes.REQUIRED }],\n            component: componentTypes.TEXT_FIELD,\n          },\n          'endpoint.receptor_node': {\n            label: <FormattedMessage id=\"satellite.receptorId\" defaultMessage=\"Receptor ID\" />,\n            validate: [{ type: validatorTypes.REQUIRED }],\n            component: componentTypes.TEXT_FIELD,\n          },\n          skipSelection: true,\n          onlyHiddenFields: true,\n          customSteps: true,\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"satellite.credentials\" defaultMessage=\"Credentials\" />,\n              nextStep: 'summary',\n              fields: [\n                {\n                  name: 'all-required',\n                  component: 'description',\n                  Content: TowerCatalog.AllFieldAreRequired,\n                },\n                {\n                  name: 'source.source_ref',\n                },\n                {\n                  name: 'endpoint.receptor_node',\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'endpoint.role',\n                  hideField: true,\n                  initializeOnMount: true,\n                  initialValue: 'satellite',\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.authtype',\n                  hideField: true,\n                  initializeOnMount: true,\n                  initialValue: 'receptor_node',\n                },\n              ],\n            },\n          ],\n        },\n      },\n    },\n  },\n  'ansible-tower': {\n    authentication: {\n      receptor_node: {\n        generic: {\n          skipEndpoint: true,\n        },\n        [CATALOG_APP]: {\n          skipEndpoint: true,\n        },\n      },\n      username_password: {\n        generic: {\n          skipSelection: true,\n          onlyHiddenFields: true,\n          customSteps: true,\n          'authentication.username': {\n            isRequired: false,\n            validate: [{ type: validatorTypes.REQUIRED }],\n            label: <FormattedMessage id=\"wizard.username\" defaultMessage=\"Username\" />,\n          },\n          'authentication.password': {\n            type: 'password',\n            isRequired: false,\n            validate: [{ type: validatorTypes.REQUIRED }],\n            label: <FormattedMessage id=\"wizard.password\" defaultMessage=\"Password\" />,\n          },\n          url: ansibleTowerURL,\n          'endpoint.certificate_authority': {\n            label: <FormattedMessage id=\"wizard.certificateAuthoriy\" defaultMessage=\"Certificate authority\" />,\n          },\n          'endpoint.verify_ssl': {\n            initialValue: false,\n            label: <FormattedMessage id=\"wizard.verifySsl\" defaultMessage=\"Verify SSL\" />,\n          },\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"wizard.credentials\" defaultMessage=\"Credentials\" />,\n              nextStep: 'ansible-tower-credentials-no-app',\n              fields: [\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.authtype',\n                  hideField: true,\n                  initialValue: 'username_password',\n                  initializeOnMount: true,\n                },\n                {\n                  name: 'required-desc',\n                  component: 'description',\n                  Content: TowerCatalog.AllFieldAreRequired,\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.username',\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.password',\n                },\n              ],\n            },\n            {\n              name: 'ansible-tower-credentials-no-app',\n              title: <FormattedMessage id=\"catalog.ansibleTowerEndpoint\" defaultMessage=\"Ansible Tower endpoint\" />,\n              fields: [\n                {\n                  name: 'endpoint.role',\n                  component: componentTypes.TEXT_FIELD,\n                  hideField: true,\n                  initialValue: 'ansible',\n                  initializeOnMount: true,\n                },\n                {\n                  name: 'url',\n                  component: componentTypes.TEXT_FIELD,\n                },\n                {\n                  name: 'endpoint.verify_ssl',\n                  component: componentTypes.SWITCH,\n                },\n                {\n                  name: 'endpoint.certificate_authority',\n                  component: componentTypes.TEXT_FIELD,\n                  condition: { is: true, when: 'endpoint.verify_ssl' },\n                },\n              ],\n            },\n          ],\n        },\n        [CATALOG_APP]: {\n          skipSelection: true,\n          onlyHiddenFields: true,\n          customSteps: true,\n          'authentication.username': {\n            isRequired: false,\n            validate: [{ type: validatorTypes.REQUIRED }],\n            label: <FormattedMessage id=\"wizard.username\" defaultMessage=\"Username\" />,\n          },\n          'authentication.password': {\n            type: 'password',\n            isRequired: false,\n            validate: [{ type: validatorTypes.REQUIRED }],\n            label: <FormattedMessage id=\"wizard.password\" defaultMessage=\"Password\" />,\n          },\n          url: ansibleTowerURL,\n          'endpoint.certificate_authority': {\n            label: <FormattedMessage id=\"wizard.certificateAuthoriy\" defaultMessage=\"Certificate authority\" />,\n          },\n          'endpoint.verify_ssl': {\n            initialValue: false,\n            label: <FormattedMessage id=\"wizard.verifySsl\" defaultMessage=\"Verify SSL\" />,\n          },\n          additionalSteps: [\n            {\n              nextStep: 'catalog-ansible-tower',\n              title: <FormattedMessage id=\"catalog.ansibleTowerEndpoint\" defaultMessage=\"Ansible Tower endpoint\" />,\n              fields: [\n                {\n                  name: 'ansible-tower-desc',\n                  component: 'description',\n                  Content: TowerCatalog.EndpointDescription,\n                },\n                {\n                  name: 'endpoint.role',\n                  component: componentTypes.TEXT_FIELD,\n                  hideField: true,\n                  initialValue: 'ansible',\n                  initializeOnMount: true,\n                },\n                {\n                  name: 'url',\n                  component: componentTypes.TEXT_FIELD,\n                },\n                {\n                  name: 'endpoint.verify_ssl',\n                  component: componentTypes.SWITCH,\n                },\n                {\n                  name: 'endpoint.certificate_authority',\n                  component: componentTypes.TEXT_FIELD,\n                  condition: { is: true, when: 'endpoint.verify_ssl' },\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"wizard.credentials\" defaultMessage=\"Credentials\" />,\n              name: 'catalog-ansible-tower',\n              fields: [\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.authtype',\n                  hideField: true,\n                  initialValue: 'username_password',\n                  initializeOnMount: true,\n                },\n                {\n                  name: 'required-desc',\n                  component: 'description',\n                  Content: TowerCatalog.AuthDescription,\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.username',\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.password',\n                },\n              ],\n            },\n          ],\n        },\n      },\n    },\n    endpoint: {\n      url: ansibleTowerURL,\n      'endpoint.certificate_authority': {\n        label: <FormattedMessage id=\"wizard.certificateAuthority\" defaultMessage=\"Certificate authority\" />,\n      },\n      'endpoint.verify_ssl': {\n        initialValue: false,\n      },\n    },\n  },\n  google: {\n    authentication: {\n      [emptyAuthType.type]: {\n        [CLOUD_METER_APP_NAME]: {\n          skipSelection: true,\n          useApplicationAuth: true,\n          customSteps: true,\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"subwatch.azure.tokenTitle\" defaultMessage=\"Obtain offline token\" />,\n              nextStep: 'cost-google-playbook',\n              substepOf: {\n                name: 'eaa',\n                title: <FormattedMessage id=\"subwatch.azure.substepTitle\" defaultMessage=\"Enable account access\" />,\n              },\n              fields: [\n                {\n                  name: 'azure-1',\n                  component: 'description',\n                  Content: SWGoogle.OfflineToken,\n                },\n                {\n                  component: componentTypes.TEXT_FIELD,\n                  name: 'authentication.authtype',\n                  hideField: true,\n                  initialValue: emptyAuthType.type,\n                  initializeOnMount: true,\n                },\n              ],\n            },\n            {\n              title: <FormattedMessage id=\"subwatch.azure.playbookTitle\" defaultMessage=\"Run Ansible playbook\" />,\n              name: 'cost-google-playbook',\n              substepOf: 'eaa',\n              fields: [\n                {\n                  name: 'azure-2',\n                  component: 'description',\n                  Content: SWGoogle.AnsiblePlaybook,\n                },\n              ],\n            },\n          ],\n        },\n      },\n      project_id_service_account_json: {\n        [COST_MANAGEMENT_APP_NAME]: {\n          useApplicationAuth: true,\n          skipSelection: true,\n          'authentication.username': {\n            component: 'text-field',\n            label: 'Project ID',\n            isRequired: true,\n            validate: [\n              {\n                type: 'required',\n              },\n            ],\n          },\n          'authentication.authtype': {\n            component: 'text-field',\n            hideField: true,\n            initialValue: 'project_id_service_account_json',\n          },\n          'application.extra.dataset': {\n            component: 'text-field',\n            label: 'Dataset ID',\n            isRequired: true,\n            validate: [\n              {\n                type: 'required',\n              },\n            ],\n          },\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"cost.gcp.projectTitle\" defaultMessage=\"Project\" />,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-google',\n                  Content: CMGoogle.Project,\n                },\n                {\n                  name: 'authentication.username',\n                },\n                {\n                  name: 'authentication.authtype',\n                },\n              ],\n              nextStep: 'cost-gcp-iam',\n            },\n            {\n              title: <FormattedMessage id=\"cost.gcp.iamTitle\" defaultMessage=\"Create IAM role\" />,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-google',\n                  Content: CMGoogle.IAMRole,\n                },\n              ],\n              nextStep: 'cost-gcp-access',\n              name: 'cost-gcp-iam',\n              substepOf: {\n                name: 'geaa',\n                title: <FormattedMessage id=\"cost.arn.enableAccountAccess\" defaultMessage=\"Enable account access\" />,\n              },\n            },\n            {\n              title: <FormattedMessage id=\"cost.gcp.accessTitle\" defaultMessage=\"Assign access\" />,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-google',\n                  Content: CMGoogle.AssignAccess,\n                },\n              ],\n              name: 'cost-gcp-access',\n              nextStep: 'cost-gcp-dataset',\n              substepOf: 'geaa',\n            },\n            {\n              title: <FormattedMessage id=\"cost.gcp.datasetTitle\" defaultMessage=\"Create dataset\" />,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-google',\n                  Content: CMGoogle.Dataset,\n                },\n                {\n                  name: 'application.extra.dataset',\n                },\n              ],\n              name: 'cost-gcp-dataset',\n              nextStep: 'cost-gcp-billing-export',\n            },\n            {\n              title: <FormattedMessage id=\"cost.gcp.billingExportTitle\" defaultMessage=\"Billing export\" />,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-google',\n                  Content: CMGoogle.BillingExport,\n                },\n              ],\n              name: 'cost-gcp-billing-export',\n            },\n          ],\n        },\n      },\n    },\n  },\n  'oracle-cloud-infrastructure': {\n    authentication: {\n      ocid: {\n        generic: {\n          skipEndpoint: true,\n        },\n        [COST_MANAGEMENT_APP_NAME]: {\n          skipSelection: true,\n          additionalSteps: [\n            {\n              title: <FormattedMessage id=\"wizard.globalCompartmentId\" defaultMessage=\"Global compartment-id\" />,\n              showTitle: false,\n              fields: [\n                {\n                  name: 'authentication.authtype',\n                  component: 'text-field',\n                  hideField: true,\n                  initialValue: 'ocid',\n                  initializeOnMount: true,\n                },\n                {\n                  name: 'authentication.username',\n                  component: 'text-field',\n                  hideField: true,\n                  initialValue: 'ocid.uuid',\n                  initializeOnMount: true,\n                },\n                {\n                  component: 'description',\n                  name: 'description-summary',\n                  Content: CMOci.CompartmentId,\n                  fields: [\n                    {\n                      name: 'application.extra.compartment_id',\n                      label: 'Global compartment-id (tenant-id)',\n                      validate: [\n                        {\n                          type: 'required',\n                        },\n                      ],\n                      component: 'text-field',\n                      placeholder: 'compartment-id',\n                      isRequired: true,\n                    },\n                  ],\n                },\n              ],\n              nextStep: 'oci-cm-policy-compartment',\n            },\n            {\n              title: <FormattedMessage id=\"wizard.policyCompartment\" defaultMessage=\"New policy and compartment\" />,\n              showTitle: false,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-summary',\n                  Content: CMOci.PolicyCompartment,\n                  fields: [\n                    {\n                      name: 'application.extra.policy_compartment',\n                      label: 'New compartment-id',\n                      validate: [\n                        {\n                          type: 'required',\n                        },\n                      ],\n                      component: 'text-field',\n                      placeholder: 'New compartment-id',\n                      isRequired: true,\n                    },\n                  ],\n                },\n              ],\n              name: 'oci-cm-policy-compartment',\n              nextStep: 'oci-cm-create-bucket',\n            },\n            {\n              title: <FormattedMessage id=\"wizard.createBucket\" defaultMessage=\"Create bucket\" />,\n              showTitle: false,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-summary',\n                  Content: CMOci.CreateBucket,\n                  fields: [\n                    {\n                      name: 'application.extra.bucket',\n                      label: 'New data bucket name',\n                      validate: [\n                        {\n                          type: 'required',\n                        },\n                      ],\n                      component: 'text-field',\n                      placeholder: 'cost-management',\n                      isRequired: true,\n                    },\n                    {\n                      name: 'application.extra.bucket_namespace',\n                      label: 'New data bucket namespace',\n                      validate: [\n                        {\n                          type: 'required',\n                        },\n                      ],\n                      component: 'text-field',\n                      placeholder: 'yyhddfgeeu',\n                      isRequired: true,\n                    },\n                    {\n                      name: 'application.extra.bucket_region',\n                      label: 'New bucket region',\n                      validate: [\n                        {\n                          type: 'required',\n                        },\n                      ],\n                      component: 'text-field',\n                      placeholder: 'uk-london-1',\n                      isRequired: true,\n                    },\n                  ],\n                },\n              ],\n              name: 'oci-cm-create-bucket',\n              nextStep: 'oci-cm-populate-bucket',\n            },\n            {\n              title: <FormattedMessage id=\"wizard.reviewDetails\" defaultMessage=\"Populate bucket\" />,\n              showTitle: false,\n              fields: [\n                {\n                  component: 'description',\n                  name: 'description-summary',\n                  Content: CMOci.PopulateBucket,\n                },\n              ],\n              name: 'oci-cm-populate-bucket',\n            },\n          ],\n          customSteps: true,\n        },\n      },\n    },\n  },\n};\n\nexport default hardcodedSchemas;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nimport {\n  ClipboardCopy,\n  ClipboardCopyButton,\n  InputGroup,\n  Text,\n  TextArea,\n  TextContent,\n  TextVariants,\n  Title,\n  clipboardCopyFunc,\n} from '@patternfly/react-core';\n\nexport const EnterpriseId = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">\n        {intl.formatMessage({\n          id: 'cost.ibm.enterpriseIdStepTitle',\n          defaultMessage: \"Add the account's enterprise ID\",\n        })}\n      </Title>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.ibm.enterpriseIdDescription',\n          defaultMessage:\n            'Login to the IBM Cloud Shell and run the following command. Paste the output string into the form field below.',\n        })}\n      </Text>\n      <ClipboardCopy>ibmcloud enterprise show --output JSON | jq -r .id</ClipboardCopy>\n    </TextContent>\n  );\n};\n\nexport const AccountId = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Title headingLevel=\"h1\">\n        {intl.formatMessage({\n          id: 'cost.ibm.accountIdStepTitle',\n          defaultMessage: 'Add the account ID',\n        })}\n      </Title>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.ibm.accountIdDescription',\n          defaultMessage:\n            'In the IBM Cloud Shell, run the following command. Paste the output string into the form fields below.',\n        })}\n      </Text>\n      <ClipboardCopy>ibmcloud account show --output JSON | jq -r .account_id</ClipboardCopy>\n    </TextContent>\n  );\n};\n\nexport const ServiceId = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.ibm.serviceIdDescription',\n          defaultMessage:\n            'Create a service ID, which Cost Management will use to get billing and usage information from your account. In the IBM Cloud Shell, run the following command. Paste the output string into the form field below.',\n        })}\n      </Text>\n      <ClipboardCopy variant=\"expansion\">\n        {'ibmcloud iam service-id-create \"Cost Management\" -d \"Service ID for cloud.redhat.com Cost Management\" | jq -r .id'}\n      </ClipboardCopy>\n    </TextContent>\n  );\n};\n\nexport const ConfigureAccess = () => {\n  const intl = useIntl();\n\n  const formOptions = useFormApi();\n\n  const values = formOptions.getState().values;\n  const serviceId = values.cost.service_id;\n\n  const value = `ibmcloud iam service-policy-create \"${serviceId}\" --service-name billing  --roles Viewer\nibmcloud iam service-policy-create \"${serviceId}\" --account-management --roles Viewer\nibmcloud iam service-policy-create \"${serviceId}\" --service-name enterprise --roles \"Usage Report Viewer\"\nibmcloud iam service-policy-create \"${serviceId}\" --service-name globalcatalog  --roles Viewer`;\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.ibm.accessDescription',\n          defaultMessage:\n            'Assign policies to the service ID you just created so that Cost Management will have access to account management, billing and usage service APIs.  In the IBM Cloud Shell, run the following command:',\n        })}\n      </Text>\n      <InputGroup>\n        <TextArea\n          rows={6}\n          value={value}\n          name=\"service-id-commands\"\n          id=\"service-id-commands\"\n          aria-label={intl.formatMessage({ id: 'ibm.cost.textarea', defaultMessage: 'Commands to create policies.' })}\n          spellCheck=\"false\"\n          autoCorrect=\"off\"\n        />\n        <ClipboardCopyButton\n          onClick={(e) => clipboardCopyFunc(e, value)}\n          id=\"copy-service-id-commands\"\n          aria-label={intl.formatMessage({ id: 'ibm.cost.copy', defaultMessage: 'Copy to clipboard' })}\n        >\n          {intl.formatMessage({ id: 'ibm.cost.copy', defaultMessage: 'Copy to clipboard' })}\n        </ClipboardCopyButton>\n      </InputGroup>\n    </TextContent>\n  );\n};\n\nexport const ApiKey = () => {\n  const intl = useIntl();\n\n  const formOptions = useFormApi();\n\n  const values = formOptions.getState().values;\n  const serviceId = values.cost.service_id;\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'cost.ibm.apiKeyDescription',\n          defaultMessage: 'In the IBM Cloud Shell, run the following command. Paste the output string into the form field below.',\n        })}\n      </Text>\n      <ClipboardCopy variant=\"expansion\">\n        {`ibmcloud iam service-api-key-create \"Cost Management API Key\" \"${serviceId}\" -d \"Cost Management Service ID API Key\" --output JSON | jq -r .apikey`}\n      </ClipboardCopy>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nexport const EndpointDesc = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'openshift.endpoint.urlAndCA',\n          defaultMessage: 'Provide the OpenShift Container Platform URL and SSL certificate.',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Popover, Text, TextContent } from '@patternfly/react-core';\n\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\n\nexport const DescriptionSummary = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text>\n        {intl.formatMessage({\n          id: 'wizard.createAccesKeyPart1',\n          defaultMessage: 'Create an access key in your AWS user account and enter the details below.',\n        })}\n      </Text>\n      <Text>\n        {intl.formatMessage({\n          id: 'wizard.createAccesKeyPart2',\n          defaultMessage:\n            'For sufficient access and security, Red Hat recommends using the Power user identity and access management (IAM) policy for your AWS user account. ',\n        })}\n        <Popover\n          aria-label=\"Help text\"\n          position=\"bottom\"\n          bodyContent={\n            <React.Fragment>\n              <Text>\n                {intl.formatMessage({\n                  id: 'wizard.createAccesKeyHelpText',\n                  defaultMessage:\n                    'The Power user policy allows the user full access to API functionality and AWS services for user administration. Create an access key in the Security Credentials area of your AWS user account. When adding your AWS account as a source, the access key ID and secret access key act as your user ID and password.',\n                })}\n              </Text>\n            </React.Fragment>\n          }\n        >\n          <QuestionCircleIcon />\n        </Popover>\n      </Text>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport hardcodedSchemas from './hardcodedSchemas';\nimport get from 'lodash/get';\nimport emptyAuthType from './emptyAuthType';\nimport { COST_MANAGEMENT_APP_NAME, HCS_NAME } from '../../utilities/constants';\n\nexport const shouldAppendEmptyType = (type, appTypes) =>\n  appTypes.some(\n    ({ supported_source_types, supported_authentication_types }) =>\n      supported_source_types.includes(type.name) &&\n      (!supported_authentication_types[type.name] || !supported_authentication_types[type.name].length === 0)\n  );\n\nexport const acronymMapper = (value) =>\n  ({\n    'Amazon Web Services': 'AWS',\n  }[value] || value);\n\nexport const hardcodedSchema = (typeName, authName, appName) =>\n  get(hardcodedSchemas, [typeName, 'authentication', authName, appName], undefined);\n\nexport const getAdditionalSteps = (typeName, authName, appName = 'generic', enableLighthouse, hcsEnrolled) => {\n  // rewrite Cost management to HCS for appropriate steps\n  const applicationName = typeName === 'amazon' && hcsEnrolled && appName === COST_MANAGEMENT_APP_NAME ? HCS_NAME : appName;\n  return get(\n    hardcodedSchemas,\n    [\n      typeName,\n      'authentication',\n      authName === 'lighthouse_subscription_id' && !enableLighthouse ? 'lighthouse_subscription_id_legacy' : authName,\n      applicationName,\n      'additionalSteps',\n    ],\n    []\n  );\n};\n\nexport const shouldSkipSelection = (typeName, authName, appName = 'generic') =>\n  get(hardcodedSchemas, [typeName, 'authentication', authName, appName, 'skipSelection'], false);\n\nexport const shouldSkipEndpoint = (typeName, authName, appName = 'generic') =>\n  get(hardcodedSchemas, [typeName, 'authentication', authName, appName, 'skipEndpoint'], false);\n\nexport const hasCustomSteps = (typeName, authName, appName = 'generic') =>\n  get(hardcodedSchemas, [typeName, 'authentication', authName, appName, 'customSteps'], false);\n\nexport const getAdditionalStepKeys = (typeName, authName, appName = 'generic') =>\n  get(hardcodedSchemas, [typeName, 'authentication', authName, appName, 'includeStepKeyFields'], []);\n\nexport const getOnlyHiddenFields = (typeName, authName, appName = 'generic') =>\n  get(hardcodedSchemas, [typeName, 'authentication', authName, appName, 'onlyHiddenFields'], false);\n\nexport const getAdditionalStepFields = (fields, stepKey) =>\n  fields.filter((field) => field.stepKey === stepKey).map(({ stepKey: _stepKey, ...field }) => field);\n\nexport const shouldUseAppAuth = (typeName, authName, appName = 'generic') =>\n  get(hardcodedSchemas, [typeName, 'authentication', authName, appName, 'useApplicationAuth'], false);\n\nexport const getNoStepsFields = (fields, additionalStepKeys = []) =>\n  fields.filter((field) => !field.stepKey || additionalStepKeys.includes(field.stepKey));\n\nexport const injectAuthFieldsInfo = (fields, type, auth, applicationName, hcsEnrolled) =>\n  fields.map((field) => {\n    // rewrite Cost management to HCS for appropriate steps\n    const appName =\n      hcsEnrolled && type === 'amazon' && auth === 'arn' && applicationName === COST_MANAGEMENT_APP_NAME\n        ? HCS_NAME\n        : applicationName;\n\n    const specificFields = get(hardcodedSchemas, [type, 'authentication', auth, appName]);\n    const hardcodedField = specificFields\n      ? get(specificFields, field.name)\n      : get(hardcodedSchemas, [type, 'authentication', auth, 'generic', field.name]);\n\n    const resultedField = hardcodedField ? { ...field, ...hardcodedField } : field;\n\n    if (resultedField.name === 'authentication.password') {\n      resultedField.component = 'authentication';\n    }\n\n    return resultedField;\n  });\n\nexport const injectEndpointFieldsInfo = (fields, type) =>\n  fields.map((field) => {\n    const hardcodedField = get(hardcodedSchemas, [type, 'endpoint', field.name]);\n\n    return hardcodedField ? { ...field, ...hardcodedField } : field;\n  });\n\nexport const getAdditionalAuthFields = (type, auth, applicationName = 'generic') =>\n  get(hardcodedSchemas, [type, 'authentication', auth, applicationName, 'additionalFields'], []);\n\nexport const getAdditionalEndpointFields = (type) => get(hardcodedSchemas, [type, 'endpoint', 'additionalFields'], []);\n\nexport const createEndpointStep = (endpoint, typeName) => ({\n  ...endpoint,\n  fields: [...getAdditionalEndpointFields(typeName), ...injectEndpointFieldsInfo(endpoint.fields, typeName)],\n  name: `${typeName}-endpoint`,\n  nextStep: 'summary',\n});\n\nexport const createAdditionalSteps = (\n  additionalSteps,\n  name,\n  authName,\n  hasEndpointStep,\n  fields,\n  appName = 'generic',\n  hcsEnrolled\n) =>\n  additionalSteps.map((step) => {\n    const stepKey = step.name || `${name}-${authName}-${appName}-additional-step`;\n\n    const skipEndpoint = shouldSkipEndpoint(name, authName, appName);\n    const customSteps = hasCustomSteps(name, authName, appName);\n\n    return {\n      name: stepKey,\n      nextStep: hasEndpointStep && !skipEndpoint && !customSteps ? `${name}-endpoint` : 'summary',\n      ...step,\n      fields: [\n        ...injectAuthFieldsInfo(step.fields, name, authName, appName),\n        ...injectAuthFieldsInfo(getAdditionalStepFields(fields, stepKey), name, authName, appName, hcsEnrolled),\n      ],\n    };\n  });\n\nexport const createAuthTypeSelection = (\n  type,\n  appType = { name: 'generic', id: 'generic' },\n  endpointFields,\n  disableAuthType,\n  hasEndpointStep,\n  enableLighthouse,\n  hcsEnrolled\n) => {\n  const isGeneric = appType.name === 'generic';\n\n  const auths = type.schema.authentication;\n  const supportedAuthTypes = isGeneric\n    ? auths.map(({ type }) => type)\n    : appType.supported_authentication_types[type.name] || [emptyAuthType.type];\n\n  const hasMultipleAuthTypes = supportedAuthTypes.length > 1;\n\n  const stepMapper = {};\n\n  let fields = [...endpointFields];\n\n  if (hasMultipleAuthTypes) {\n    fields = [];\n    auths\n      .filter(({ type }) => supportedAuthTypes.includes(type))\n      .forEach((auth) => {\n        const hasHardcodedSchema = hardcodedSchema(type.name, auth.type, appType.name);\n        const hardcodedAppName = hasHardcodedSchema ? appType.name : 'generic';\n\n        const skipEndpoint = shouldSkipEndpoint(type.name, auth.type, hardcodedAppName);\n        const customSteps = hasCustomSteps(type.name, auth.type, hardcodedAppName);\n        const onlyHiddenFields = getOnlyHiddenFields(type.name, auth.type, hardcodedAppName);\n        const additionalIncludesStepKeys = getAdditionalStepKeys(type.name, auth.type, hardcodedAppName);\n        const authFields = onlyHiddenFields ? auth.fields.filter(({ hideField }) => hideField) : auth.fields;\n\n        let nextStep;\n\n        if (getAdditionalSteps(type.name, auth.type, hardcodedAppName, enableLighthouse).length > 0) {\n          nextStep = `${type.name}-${auth.type}-${hardcodedAppName}-additional-step`;\n        } else if (endpointFields.length === 0 && !skipEndpoint && !customSteps && hasEndpointStep) {\n          nextStep = `${type.name}-endpoint`;\n        } else {\n          nextStep = 'summary';\n        }\n\n        fields.push({\n          component: 'auth-select',\n          name: 'auth_select',\n          label: auth.name,\n          authName: auth.type,\n          validate: [\n            {\n              type: validatorTypes.REQUIRED,\n            },\n          ],\n          supportedAuthTypes,\n          disableAuthType,\n        });\n        fields.push({\n          component: componentTypes.SUB_FORM,\n          name: `${auth.type}-subform`,\n          className: 'pf-u-pl-md',\n          fields: [\n            ...(!shouldUseAppAuth(type.name, auth.type, hardcodedAppName) ? endpointFields : []),\n            ...getAdditionalAuthFields(type.name, auth.type, hardcodedAppName),\n            ...injectAuthFieldsInfo(\n              getNoStepsFields(authFields, additionalIncludesStepKeys),\n              type.name,\n              auth.type,\n              hardcodedAppName\n            ),\n          ],\n          condition: {\n            when: 'auth_select',\n            is: auth.type,\n          },\n          hideField: onlyHiddenFields,\n        });\n        stepMapper[auth.type] = nextStep;\n      });\n\n    return {\n      name: `${type.name}-${appType.id}`,\n      title: <FormattedMessage id=\"wizard.credentials\" defaultMessage=\"Credentials\" />,\n      fields,\n      nextStep: {\n        when: 'auth_select',\n        stepMapper,\n      },\n    };\n  } else {\n    const auth = isGeneric\n      ? auths[0]\n      : [emptyAuthType, ...auths].find(({ type: authType }) => supportedAuthTypes.includes(authType));\n\n    const hasHardcodedSchema = hardcodedSchema(type.name, auth.type, appType.name);\n    const hardcodedAppName = hasHardcodedSchema ? appType.name : 'generic';\n\n    const additionalStepName = `${type.name}-${auth.type}-${hardcodedAppName}-additional-step`;\n\n    const skipEndpoint = shouldSkipEndpoint(type.name, auth.type, hardcodedAppName);\n    const customSteps = hasCustomSteps(type.name, auth.type, hardcodedAppName);\n    const hasCustomStep = shouldSkipSelection(type.name, auth.type, hardcodedAppName);\n    const additionalIncludesStepKeys = getAdditionalStepKeys(type.name, auth.type, hardcodedAppName);\n\n    if (shouldUseAppAuth(type.name, auth.type, hardcodedAppName)) {\n      fields = [];\n    }\n\n    let nextStep;\n\n    if (getAdditionalSteps(type.name, auth.type, hardcodedAppName, enableLighthouse).length > 0) {\n      nextStep = additionalStepName;\n    } else if (endpointFields.length === 0 && !skipEndpoint && hasEndpointStep) {\n      nextStep = `${type.name}-endpoint`;\n    } else {\n      nextStep = 'summary';\n    }\n\n    let stepProps = {};\n\n    if (hasCustomStep) {\n      const firstAdditonalStep = getAdditionalSteps(type.name, auth.type, hardcodedAppName, enableLighthouse, hcsEnrolled).find(\n        ({ name }) => !name\n      );\n      const additionalFields = getAdditionalStepFields(auth.fields, additionalStepName);\n\n      if (firstAdditonalStep.nextStep) {\n        nextStep = firstAdditonalStep.nextStep;\n      } else if (endpointFields.length === 0 && !skipEndpoint && !customSteps && hasEndpointStep) {\n        nextStep = `${type.name}-endpoint`;\n      } else {\n        nextStep = 'summary';\n      }\n\n      stepProps = {\n        ...firstAdditonalStep,\n        fields: [\n          ...fields,\n          ...injectAuthFieldsInfo([...firstAdditonalStep.fields, ...additionalFields], type.name, auth.type, hardcodedAppName),\n        ],\n      };\n    }\n\n    return {\n      name: `${type.name}-${appType.id}`,\n      title: <FormattedMessage id=\"wizard.credentials\" defaultMessage=\"Credentials\" />,\n      fields: [\n        ...fields,\n        ...getAdditionalAuthFields(type.name, auth.type, hardcodedAppName),\n        ...injectAuthFieldsInfo(\n          getNoStepsFields(auth.fields, additionalIncludesStepKeys),\n          type.name,\n          auth.type,\n          hardcodedAppName\n        ),\n      ],\n      nextStep,\n      ...stepProps,\n    };\n  }\n};\n\nexport const schemaBuilder = (sourceTypes, appTypes, disableAuthType, enableLighthouse, hcsEnrolled) => {\n  const schema = [];\n\n  sourceTypes.forEach((type) => {\n    const appendEndpoint = type.schema.endpoint?.hidden ? type.schema.endpoint.fields : [];\n    const hasEndpointStep = type.schema.endpoint && appendEndpoint.length === 0;\n\n    schema.push(\n      createAuthTypeSelection(type, undefined, appendEndpoint, disableAuthType, hasEndpointStep, enableLighthouse, hcsEnrolled)\n    );\n\n    appTypes.forEach((appType) => {\n      if (appType.supported_source_types.includes(type.name)) {\n        schema.push(\n          createAuthTypeSelection(type, appType, appendEndpoint, disableAuthType, hasEndpointStep, enableLighthouse, hcsEnrolled)\n        );\n      }\n    });\n\n    const auhtentications = type.schema.authentication;\n\n    if (shouldAppendEmptyType(type, appTypes)) {\n      auhtentications.push(emptyAuthType);\n    }\n\n    auhtentications.forEach((auth) => {\n      const additionalSteps = getAdditionalSteps(type.name, auth.type, undefined, enableLighthouse, hcsEnrolled);\n\n      if (additionalSteps.length > 0) {\n        schema.push(\n          ...createAdditionalSteps(additionalSteps, type.name, auth.type, hasEndpointStep, auth.fields, undefined, hcsEnrolled)\n        );\n      }\n\n      appTypes.forEach((appType) => {\n        const appAdditionalSteps = getAdditionalSteps(type.name, auth.type, appType.name, enableLighthouse, hcsEnrolled);\n\n        if (appAdditionalSteps.length > 0) {\n          schema.push(\n            ...createAdditionalSteps(\n              appAdditionalSteps,\n              type.name,\n              auth.type,\n              hasEndpointStep,\n              auth.fields,\n              appType.name,\n              hcsEnrolled\n            )\n          );\n        }\n      });\n    });\n\n    if (hasEndpointStep) {\n      schema.push(createEndpointStep(type.schema.endpoint, type.name));\n    }\n  });\n\n  return schema;\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { CLOUD_VENDOR } from '../../utilities/constants';\n\nexport const wizardDescription = (activeCategory) =>\n  activeCategory === CLOUD_VENDOR ? (\n    <FormattedMessage\n      id=\"wizard.wizardDescriptionCloud\"\n      defaultMessage=\"Register your provider to manage your Red Hat products in the cloud.\"\n    />\n  ) : (\n    <FormattedMessage\n      id=\"wizard.wizardDescriptionRedhat\"\n      defaultMessage=\"Configure a data source to connect to your Red Hat applications.\"\n    />\n  );\nexport const wizardTitle = (activeCategory) =>\n  activeCategory === CLOUD_VENDOR ? (\n    <FormattedMessage id=\"wizard.wizardTitleCloud\" defaultMessage=\"Add a cloud source\" />\n  ) : (\n    <FormattedMessage id=\"wizard.wizardTitleRedhat\" defaultMessage=\"Add Red Hat source\" />\n  );\nexport const HCCM_DOCS_PREFIX = 'https://access.redhat.com/documentation/en-us/cost_management_service/2022';\n\nexport const NO_APPLICATION_VALUE = 'no-application';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\n\nconst ErroredStep = ({ onClose, returnButtonTitle, message, title, customText, primaryAction, secondaryActions, Component }) => (\n  <Bullseye>\n    <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n      <EmptyStateIcon icon={ExclamationCircleIcon} color=\"var(--pf-global--danger-color--100)\" className=\"pf-u-mb-0\" />\n      <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n        {title}\n      </Title>\n      <EmptyStateBody className=\"src-c-wizard--step-text\">{message || customText}</EmptyStateBody>\n      <Component variant=\"primary\" onClick={primaryAction || onClose}>\n        {returnButtonTitle}\n      </Component>\n      {secondaryActions && <EmptyStateSecondaryActions className=\"pf-u-mt-sm\">{secondaryActions}</EmptyStateSecondaryActions>}\n    </EmptyState>\n  </Bullseye>\n);\n\nErroredStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  returnButtonTitle: PropTypes.node,\n  message: PropTypes.node,\n  title: PropTypes.node,\n  customText: PropTypes.node,\n  primaryAction: PropTypes.func,\n  secondaryActions: PropTypes.node,\n  Component: PropTypes.elementType,\n};\n\nErroredStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.unsuccConfiguration\" defaultMessage=\"Something went wrong\" />,\n  // eslint-disable-next-line max-len\n  customText: (\n    <FormattedMessage\n      id=\"wizard.errorText\"\n      defaultMessage=\"There was a problem while trying to add your source. Please try again. If the error persists, open a support case.\"\n    />\n  ),\n  Component: Button,\n};\n\nexport default ErroredStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nconst LoadingStep = ({ onClose, customText, cancelTitle, description }) => (\n  <Bullseye>\n    <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n      <EmptyStateIcon icon={Spinner} className=\"pf-u-mb-0\" />\n      <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n        {customText}\n      </Title>\n      {description && <EmptyStateBody className=\"src-c-wizard--step-text\">{description}</EmptyStateBody>}\n      {onClose && (\n        <EmptyStateSecondaryActions className=\"pf-u-mt-xl\">\n          <Button variant=\"link\" onClick={onClose}>\n            {cancelTitle}\n          </Button>\n        </EmptyStateSecondaryActions>\n      )}\n    </EmptyState>\n  </Bullseye>\n);\n\nLoadingStep.propTypes = {\n  onClose: PropTypes.func,\n  customText: PropTypes.node,\n  cancelTitle: PropTypes.node,\n  description: PropTypes.node,\n};\n\nLoadingStep.defaultProps = {\n  customText: <FormattedMessage id=\"wizard.loadingText\" defaultMessage=\"Loading, please wait.\" />,\n  cancelTitle: <FormattedMessage id=\"wizard.cancelText\" defaultMessage=\"Cancel\" />,\n};\n\nexport default LoadingStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Button, Popover } from '@patternfly/react-core';\n\nconst ValuePopover = ({ label, value }) => {\n  const intl = useIntl();\n\n  return (\n    <Popover headerContent={label} bodyContent={value} position=\"top\" maxWidth=\"80%\">\n      <Button variant=\"link\" isInline className=\"src-c-wizard__summary-buttons\">\n        {intl.formatMessage({\n          id: 'wizard.showMore',\n          defaultMessage: 'Show more',\n        })}\n      </Button>\n    </Popover>\n  );\n};\n\nValuePopover.propTypes = {\n  label: PropTypes.node,\n  value: PropTypes.node,\n};\n\nexport default ValuePopover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n  Alert,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Label,\n} from '@patternfly/react-core';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nimport ValuePopover from './ValuePopover';\nimport hardcodedSchemas from '../../components/addSourceWizard/hardcodedSchemas';\nimport { ACCOUNT_AUTHORIZATION } from '../constants';\nimport { CLOUD_METER_APP_NAME, COST_MANAGEMENT_APP_ID, COST_MANAGEMENT_APP_NAME, HCS_APP_NAME } from '../../utilities/constants';\nimport { NO_APPLICATION_VALUE } from '../../components/addSourceWizard/stringConstants';\nimport {\n  getAdditionalSteps,\n  injectAuthFieldsInfo,\n  injectEndpointFieldsInfo,\n  shouldSkipEndpoint,\n} from '../../components/addSourceWizard/schemaBuilder';\n\nconst SummaryAlert = ({ appName, sourceType, hcsEnrolled }) => {\n  const intl = useIntl();\n\n  if (appName === COST_MANAGEMENT_APP_NAME && sourceType !== 'google' && !hcsEnrolled) {\n    return (\n      <Alert\n        variant=\"info\"\n        isInline\n        title={intl.formatMessage({ id: 'cost.rbacWarningTitle', defaultMessage: 'Manage permissions in User Access' })}\n      >\n        {intl.formatMessage({\n          id: 'cost.rbacWarningDescription',\n          defaultMessage:\n            'Make sure to manage permissions for this source in custom roles that contain permissions for Cost Management.',\n        })}\n      </Alert>\n    );\n  }\n\n  if (appName === CLOUD_METER_APP_NAME && ['google'].includes(sourceType)) {\n    return (\n      <Alert\n        variant=\"info\"\n        isInline\n        title={intl.formatMessage({\n          id: 'azure.rhelWarningTitle',\n          defaultMessage: 'This source will not be monitored in Sources',\n        })}\n      >\n        {intl.formatMessage({\n          id: 'azure.rhelWarningDescription',\n          defaultMessage: 'This source will be represented in the Sources list, but will not reflect true status or resources.',\n        })}\n      </Alert>\n    );\n  }\n\n  return null;\n};\n\nSummaryAlert.propTypes = {\n  appName: PropTypes.string,\n  sourceType: PropTypes.string,\n  hcsEnrolled: PropTypes.bool,\n};\n\nexport const createItem = (formField, values, stepKeys) => {\n  let value = get(values, formField.name);\n\n  if (formField.stepKey && !stepKeys.includes(formField.stepKey)) {\n    return undefined;\n  }\n\n  if (formField.condition && get(values, formField.condition.when) !== formField.condition.is) {\n    return undefined;\n  }\n\n  // do not show hidden fields\n  if (formField.hideField) {\n    return undefined;\n  }\n\n  // Hide password\n  if (value && formField.type === 'password') {\n    value = '●●●●●●●●●●●●';\n  }\n\n  // Boolean value convert to Yes / No\n  if (typeof value === 'boolean') {\n    value = value ? (\n      <Label color=\"green\">\n        <FormattedMessage id=\"wizard.enabled\" defaultMessage=\"Enabled\" />\n      </Label>\n    ) : (\n      <Label color=\"gray\">\n        <FormattedMessage id=\"wizard.disabled\" defaultMessage=\"Disabled\" />\n      </Label>\n    );\n  }\n\n  if (!value && formField.name === 'authentication.password' && get(values, 'authentication.id')) {\n    value = '●●●●●●●●●●●●';\n  }\n\n  return { label: formField['aria-label'] || formField.label, value: value || '-' };\n};\n\nexport const getAllFieldsValues = (fields, values, stepKeys) =>\n  fields.map((field) => createItem(field, values, stepKeys)).filter(Boolean);\n\nexport const getStepKeys = (typeName, authName, appName = 'generic', appId) =>\n  [\n    ...get(hardcodedSchemas, [typeName, 'authentication', authName, appName, 'includeStepKeyFields'], []),\n    ...get(hardcodedSchemas, [typeName, 'authentication', authName, appName, 'additionalSteps'], []).map(({ name }) => name),\n    `${typeName}-${authName}-${appName}-additional-step`,\n    `${typeName}-${authName}-additional-step`,\n    appId ? `${typeName}-${appId}` : undefined,\n  ].filter(Boolean);\n\nconst DesctiptionListItem = ({ term, description, ...props }) => (\n  <DescriptionListGroup {...props}>\n    <DescriptionListTerm>{term}</DescriptionListTerm>\n    <DescriptionListDescription>{description}</DescriptionListDescription>\n  </DescriptionListGroup>\n);\n\nDesctiptionListItem.propTypes = {\n  term: PropTypes.node,\n  description: PropTypes.node,\n};\n\nconst SourceWizardSummary = ({ sourceTypes, applicationTypes, showApp, showAuthType, hcsEnrolled }) => {\n  const formOptions = useFormApi();\n  const intl = useIntl();\n  const enableLighthouse = useFlag('sources.wizard.lighthouse');\n\n  const values = formOptions.getState().values;\n  const type = sourceTypes.find((type) => type.name === values.source_type || type.id === values.source.source_type_id);\n\n  const hasAuthentication =\n    values.authentication && values.authentication.authtype ? values.authentication.authtype : values.auth_select;\n\n  let authType;\n  let authTypeFields = [];\n\n  if (hasAuthentication) {\n    authType = type.schema.authentication.find(({ type }) => type === hasAuthentication);\n    authTypeFields = authType && authType.fields ? authType.fields : [];\n  }\n\n  let applicatioNames;\n\n  if (values.source.app_creation_workflow === ACCOUNT_AUTHORIZATION) {\n    applicatioNames = values.applications.map(\n      (app) =>\n        app === COST_MANAGEMENT_APP_ID && hcsEnrolled\n          ? HCS_APP_NAME\n          : applicationTypes.find((type) => type.id === app)?.display_name // overwrite Cost management for AWS with HCS for account auth.\n    );\n  }\n\n  const application = values.application\n    ? applicationTypes.find((type) => type.id === values.application.application_type_id)\n    : undefined;\n\n  const {\n    display_name = intl.formatMessage({ id: 'wizard.notSelected', defaultMessage: 'Not selected' }),\n    name,\n    id,\n  } = application ? application : {};\n\n  const skipEndpoint = shouldSkipEndpoint(type.name, hasAuthentication, name);\n\n  let endpointFields = type.schema.endpoint?.fields || [];\n\n  if (skipEndpoint) {\n    endpointFields = [];\n    authTypeFields = authTypeFields.filter(({ name }) => !name.includes('authentication.'));\n  }\n\n  const availableStepKeys = getStepKeys(type.name, hasAuthentication, name, id);\n\n  const authSteps = getAdditionalSteps(type.name, hasAuthentication, name, enableLighthouse, hcsEnrolled);\n  const hasCustomSteps = get(hardcodedSchemas, [type.name, 'authentication', hasAuthentication, name, 'customSteps'], false);\n\n  if (authSteps.length > 0) {\n    authTypeFields = authSteps\n      .map((step) => [...step.fields, ...authTypeFields.filter(({ stepKey }) => stepKey && step.name === stepKey)])\n      .flatMap((x) => x)\n      .filter(\n        ({ name }) =>\n          name.startsWith('application.extra') ||\n          authTypeFields.find((field) => field.name === name) ||\n          (hasCustomSteps && endpointFields.find((field) => field.name === name))\n      );\n  }\n\n  if (hasCustomSteps) {\n    endpointFields = [];\n  }\n\n  authTypeFields = injectAuthFieldsInfo(authTypeFields, type.name, hasAuthentication, name || 'generic', hcsEnrolled);\n  endpointFields = injectEndpointFieldsInfo(endpointFields, type.name);\n\n  const fields = [...authTypeFields, ...endpointFields];\n\n  const valuesInfo = getAllFieldsValues(fields, values, availableStepKeys);\n\n  const valuesList = valuesInfo.map(({ label, value }) => (\n    <DesctiptionListItem\n      key={`${label}--${value}`}\n      term={label}\n      description={value.toString().length > 150 ? <ValuePopover label={label} value={value} /> : value}\n    />\n  ));\n  return (\n    <React.Fragment>\n      <DescriptionList isHorizontal className=\"src-c-wizard__summary-description-list\">\n        <DesctiptionListItem\n          term={intl.formatMessage({\n            id: 'wizard.name',\n            defaultMessage: 'Name',\n          })}\n          description={values.source.name}\n        />\n        <DesctiptionListItem\n          term={intl.formatMessage({\n            id: 'wizard.sourceType',\n            defaultMessage: 'Source type',\n          })}\n          description={type.product_name}\n        />\n        {showApp && values.source.app_creation_workflow && (\n          <DesctiptionListItem\n            term={intl.formatMessage({\n              id: 'wizard.configurationMode',\n              defaultMessage: 'Configuration mode',\n            })}\n            description={\n              values.source.app_creation_workflow === ACCOUNT_AUTHORIZATION\n                ? intl.formatMessage({\n                    id: 'wizard.accountAuth',\n                    defaultMessage: 'Account authorization',\n                  })\n                : intl.formatMessage({\n                    id: 'wizard.manualConfig',\n                    defaultMessage: 'Manual configuration',\n                  })\n            }\n          />\n        )}\n        {showApp && values.source.app_creation_workflow === ACCOUNT_AUTHORIZATION && (\n          <DesctiptionListItem\n            term={intl.formatMessage({\n              id: 'wizard.applications',\n              defaultMessage: 'Applications',\n            })}\n            description={\n              applicatioNames.length\n                ? applicatioNames.map((app) => <div key={app}>{app}</div>)\n                : intl.formatMessage({ id: 'none', defaultMessage: 'None' })\n            }\n          />\n        )}\n        {showApp && values.source.app_creation_workflow !== ACCOUNT_AUTHORIZATION && (\n          <DesctiptionListItem\n            term={intl.formatMessage({\n              id: 'wizard.application',\n              defaultMessage: 'Application',\n            })}\n            description={\n              // overwrite Cost management for AWS with HCS\n              values.application?.application_type_id === COST_MANAGEMENT_APP_ID && values.source_type === 'amazon' && hcsEnrolled\n                ? HCS_APP_NAME\n                : display_name\n            }\n          />\n        )}\n        {showApp && values.source_type === 'oracle-cloud-infrastructure' && values.application?.extra?.bucket && (\n          <DesctiptionListItem\n            term={intl.formatMessage({\n              id: 'wizard.bucket',\n              defaultMessage: 'Bucket',\n            })}\n            description={values.application?.extra?.bucket}\n          />\n        )}\n        {showApp && values.application?.extra?.bucket_namespace && (\n          <DesctiptionListItem\n            term={intl.formatMessage({\n              id: 'wizard.bucket',\n              defaultMessage: 'Bucket namespace',\n            })}\n            description={values.application?.extra?.bucket_namespace}\n          />\n        )}\n        {showApp && values.application?.extra?.bucket_region && (\n          <DesctiptionListItem\n            term={intl.formatMessage({\n              id: 'wizard.bucket',\n              defaultMessage: 'Bucket region',\n            })}\n            description={values.application?.extra?.bucket_region}\n          />\n        )}\n        {!skipEndpoint &&\n          authType &&\n          showAuthType &&\n          values.source.app_creation_workflow !== ACCOUNT_AUTHORIZATION &&\n          (!values.application?.application_type_id || values.application?.application_type_id === NO_APPLICATION_VALUE) && (\n            <DesctiptionListItem\n              term={intl.formatMessage({\n                id: 'wizard.authenticationType',\n                defaultMessage: 'Authentication type',\n              })}\n              description={authType.name}\n            />\n          )}\n        {valuesList}\n      </DescriptionList>\n      <SummaryAlert appName={name} sourceType={type.name} hcsEnrolled={hcsEnrolled} />\n    </React.Fragment>\n  );\n};\n\nSourceWizardSummary.propTypes = {\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    })\n  ).isRequired,\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  showApp: PropTypes.bool,\n  showAuthType: PropTypes.bool,\n  hcsEnrolled: PropTypes.bool,\n};\n\nSourceWizardSummary.defaultProps = {\n  showApp: true,\n  showAuthType: true,\n};\n\nexport default SourceWizardSummary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\n\nDescription.propTypes = {\n  Content: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,\n};\n\nexport default Description;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FormGroup, Grid, GridItem, Tile } from '@patternfly/react-core';\n\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst handleKeyPress = (event, value, onClick) => {\n  const spaceBar = 32;\n  if (event.charCode === spaceBar) {\n    event.preventDefault();\n    onClick(value);\n  }\n};\n\nconst CardSelect = (originalProps) => {\n  const { isRequired, label, helperText, hideLabel, meta, input, options, mutator, DefaultIcon, iconMapper, ...props } =\n    useFieldApi(originalProps);\n  const formOptions = useFormApi();\n  const [icons] = useState(() => {\n    const components = {};\n\n    options.forEach(({ value }) => (components[value] = iconMapper(value, DefaultIcon)));\n\n    return components;\n  });\n\n  const isMulti = props.isMulti || props.multi;\n  const isDisabled = props.isDisabled || props.isReadOnly;\n  const inputValue = input.value || [];\n\n  const handleMulti = (value) =>\n    input.onChange(\n      inputValue.includes(value) ? inputValue.filter((valueSelect) => valueSelect !== value) : [...inputValue, value]\n    );\n\n  const handleSingle = (value) => input.onChange(inputValue === value ? undefined : value);\n\n  const handleClick = (value) => (isMulti ? handleMulti(value) : handleSingle(value));\n\n  const onClick = (value) => {\n    if (isDisabled) {\n      return undefined;\n    }\n\n    handleClick(value);\n    input.onBlur();\n  };\n\n  const prepareCards = () =>\n    options\n      .map((option) => mutator(option, formOptions))\n      .map(({ value, label, isDisabled: itemIsDisabled }) => {\n        const disabled = itemIsDisabled || isDisabled;\n\n        if (!value) {\n          return undefined;\n        }\n\n        const Component = icons[value];\n\n        return (\n          <GridItem sm={6} md={4} key={value}>\n            <Tile\n              className={`src-c-wizard__tile${disabled ? ' disabled' : ''}`}\n              onClick={() => onClick(value)}\n              tabIndex={disabled ? -1 : 0}\n              onKeyPress={(e) => handleKeyPress(e, value, onClick)}\n              isDisabled={disabled}\n              title={label}\n              isStacked\n              isSelected={inputValue.includes(value)}\n              {...(Component && { icon: <Component /> })}\n            />\n          </GridItem>\n        );\n      });\n\n  const { error, touched } = meta;\n  const showError = touched && error;\n\n  return (\n    <FormGroup\n      isRequired={isRequired}\n      label={!hideLabel && label}\n      fieldId={input.name}\n      helperText={helperText}\n      helperTextInvalid={error}\n      validated={showError ? 'error' : 'default'}\n    >\n      <Grid hasGutter className=\"pf-u-mb-md\">\n        {prepareCards()}\n      </Grid>\n    </FormGroup>\n  );\n};\n\nCardSelect.propTypes = {\n  multi: PropTypes.bool,\n  isMulti: PropTypes.bool,\n  label: PropTypes.node,\n  isRequired: PropTypes.bool,\n  helperText: PropTypes.node,\n  description: PropTypes.node,\n  hideLabel: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  mutator: PropTypes.func,\n  options: PropTypes.array,\n  DefaultIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func, PropTypes.element]),\n  iconMapper: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n};\n\nCardSelect.defaultProps = {\n  options: [],\n  iconMapper: (_value, DefaultIcon) => DefaultIcon,\n  mutator: (x) => x,\n};\n\nexport default CardSelect;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nconst AuthRadio = (props) => {\n  const { label, input, authName, supportedAuthTypes, disableAuthType } = useFieldApi(props);\n\n  const isSelected = input.value === authName;\n\n  if (input.value && supportedAuthTypes && !supportedAuthTypes.includes(input.value)) {\n    input.onChange(undefined);\n  }\n\n  return (\n    <Radio\n      value={authName}\n      isChecked={isSelected}\n      name={input.name}\n      onChange={() => input.onChange(authName)}\n      label={label}\n      id={`${input.name}-${authName}`}\n      isDisabled={disableAuthType}\n    />\n  );\n};\n\nAuthRadio.propTypes = {\n  label: PropTypes.string,\n  authName: PropTypes.string.isRequired,\n  disableAuthType: PropTypes.bool,\n  supportedAuthTypes: PropTypes.arrayOf(PropTypes.string),\n};\n\nAuthRadio.defaultProps = {\n  disableAuthType: false,\n};\n\nexport default AuthRadio;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport Radio from '@data-driven-forms/pf4-component-mapper/radio';\nimport { NO_APPLICATION_VALUE } from '../../components/addSourceWizard/stringConstants';\n\nconst EnhancedRadio = ({ options, mutator, ...props }) => {\n  const formOptions = useFormApi();\n\n  const values = formOptions.getState().values;\n\n  const selectedType = values.source_type;\n  const selectedApp = get(values, props.name);\n\n  let newOptions = options.map((option) => mutator(option, formOptions)).filter(Boolean);\n\n  if (selectedType === 'oracle-cloud-infrastructure') {\n    newOptions = newOptions.filter((option) => option.value && option.value !== NO_APPLICATION_VALUE);\n  }\n\n  useEffect(() => {\n    if (\n      selectedType &&\n      (!selectedApp || !newOptions.map(({ value }) => value).includes(selectedApp)) &&\n      newOptions.filter((option) => option.value && option.value !== NO_APPLICATION_VALUE).length === 1\n    ) {\n      formOptions.change(props.name, newOptions[0].value);\n    } else if (!newOptions.map(({ value }) => value).includes(selectedApp)) {\n      formOptions.change(props.name, NO_APPLICATION_VALUE);\n    }\n\n    if (\n      selectedType === 'oracle-cloud-infrastructure' &&\n      newOptions.filter((option) => option.value && option.value !== NO_APPLICATION_VALUE)\n    ) {\n      formOptions.change(props.name, newOptions[0].value);\n    }\n  }, [selectedType]);\n\n  return <Radio {...props} options={newOptions} FormGroupProps={{ className: 'src-c-wizard__radio' }} />;\n};\n\nEnhancedRadio.propTypes = {\n  mutator: PropTypes.func.isRequired,\n  options: PropTypes.array,\n  name: PropTypes.string,\n};\n\nexport default EnhancedRadio;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Checkbox from '@data-driven-forms/pf4-component-mapper/checkbox';\n\nconst CheckboxWithIcon = ({ Icon, ...props }) => {\n  const ref = useRef();\n\n  return (\n    <div className=\"src-c-checkbox-with-icon\">\n      <Checkbox {...props} type=\"checkbox\" />\n      <span ref={ref}>\n        <Icon appendTo={ref.current} />\n      </span>\n    </div>\n  );\n};\n\nCheckboxWithIcon.propTypes = {\n  Icon: PropTypes.elementType.isRequired,\n};\n\nexport default CheckboxWithIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport pf4ComponentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\n\nimport Authentication from '../components/Authentication';\n\nimport SourceWizardSummary from '../components/FormComponents/SourceWizardSummary';\nimport Description from '../components/FormComponents/Description';\nimport CardSelect from '../components/FormComponents/CardSelect';\nimport AuthSelect from '../components/FormComponents/AuthSelect';\nimport EnhancedRadio from '../components/FormComponents/EnhancedRadio';\nimport SwitchGroup from '../components/FormComponents/SwitchGroup';\nimport CheckboxWithIcon from '../components/FormComponents/CheckboxWithIcon';\n\nexport const mapperExtension = {\n  'auth-select': AuthSelect,\n  description: Description,\n  'card-select': CardSelect,\n  summary: SourceWizardSummary,\n  'enhanced-radio': EnhancedRadio,\n  'switch-group': SwitchGroup,\n  authentication: Authentication,\n  'checkbox-with-icon': CheckboxWithIcon,\n};\n\nconst SourcesFormRenderer = ({ componentMapper, ...props }) => (\n  <FormRenderer\n    FormTemplate={FormTemplate}\n    componentMapper={{\n      ...pf4ComponentMapper,\n      ...mapperExtension,\n      ...componentMapper,\n    }}\n    {...props}\n  />\n);\n\nSourcesFormRenderer.propTypes = {\n  componentMapper: PropTypes.object,\n};\n\nexport default SourcesFormRenderer;\n","import React, { useEffect } from 'react';\n\nimport { FormGroup, Stack, StackItem, Switch } from '@patternfly/react-core';\n\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SwitchGroup = (props) => {\n  const { label, input, options, applicationTypes } = useFieldApi(props);\n  const { getState } = useFormApi();\n\n  const selectedType = getState().values.source_type;\n  const supportedApps = applicationTypes\n    .filter(({ supported_source_types }) => supported_source_types.includes(selectedType))\n    .map(({ id }) => id);\n  const filteredOptions = options.filter(({ value }) => supportedApps.includes(value));\n\n  const handleChange = (checked, value) =>\n    checked ? input.onChange([...input.value, value]) : input.onChange(input.value.filter((x) => x !== value));\n\n  useEffect(() => {\n    if (!input.value) {\n      input.onChange(filteredOptions.map(({ value }) => value).filter(Boolean));\n    }\n  }, []);\n\n  return (\n    <FormGroup label={label} fieldId={input.name}>\n      <Stack hasGutter>\n        {filteredOptions.map((option) => (\n          <StackItem key={option.value}>\n            <Switch\n              label={option.label}\n              onChange={(checked) => handleChange(checked, option.value)}\n              isChecked={input.value.includes(option.value)}\n              id={option.value}\n            />\n            {option.description && (\n              <div className=\"pf-c-switch pf-u-mt-sm\">\n                <span className=\"pf-c-switch__toggle src-m-wizard-hide-me\" />\n                <div className=\"pf-c-switch__label src-c-wizard--switch-description\">{option.description}</div>\n              </div>\n            )}\n          </StackItem>\n        ))}\n      </Stack>\n    </FormGroup>\n  );\n};\n\nexport default SwitchGroup;\n","import React, { useEffect, useRef, useState } from 'react';\nimport get from 'lodash/get';\n\nimport { FormGroup, TextInput } from '@patternfly/react-core';\n\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nimport validated from '../utilities/resolveProps/validated';\n\nconst Authentication = (rest) => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n\n  const [authenticationId] = rest?.name?.match(/\\d+/) || [];\n  const isEditing = authenticationId || values.authentication?.id;\n\n  // If there is any value, the field is modified (password is always empty on start)\n  let isModified = get(values, rest.name);\n\n  const [edited, setEdited] = useState(!isEditing || isModified);\n  const firstClick = useRef(true);\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    if (mounted.current) {\n      // reset on restart\n      if (!firstClick.current && formOptions.getState().pristine) {\n        setEdited(false);\n        firstClick.current = true;\n      }\n\n      if (edited) {\n        firstClick.current = false;\n      }\n    }\n  });\n\n  useEffect(() => {\n    mounted.current = true;\n  }, []);\n\n  const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n  const componentProps = {\n    ...rest,\n    ...(isEditing\n      ? {\n          validate: doNotRequirePassword,\n          resolveProps: validated,\n        }\n      : {}),\n  };\n\n  if (rest.isDisabled) {\n    return (\n      <FormGroup helperText={componentProps.helperText} label={componentProps.label} isRequired>\n        <TextInput aria-label=\"Filled password\" value=\"•••••••••••••\" isDisabled />\n      </FormGroup>\n    );\n  }\n\n  if (!edited && isEditing) {\n    return (\n      <FormGroup helperText={componentProps.helperText} label={componentProps.label} onFocus={() => setEdited(true)} isRequired>\n        <TextInput aria-label=\"Filled password\" value=\"•••••••••••••\" />\n      </FormGroup>\n    );\n  }\n\n  return <TextField {...componentProps} autoFocus={true} />;\n};\n\nexport default Authentication;\n","import { ACCOUNT_AUTHORIZATION } from '../components/constants';\n\nconst isSuperKey = (source) => source?.app_creation_workflow === ACCOUNT_AUTHORIZATION;\n\nexport default isSuperKey;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { FormHelperText, Spinner } from '@patternfly/react-core';\n\nimport FormSpy from '@data-driven-forms/react-form-renderer/form-spy';\n\nexport const ValidatingSpinner = ({ validating }) => {\n  const intl = useIntl();\n\n  return (\n    <FormHelperText isHidden={!validating}>\n      <Spinner size=\"md\" className=\"pf-u-mr-md\" />\n      {intl.formatMessage({ id: 'wizard.validating', defaultMessage: 'Validating' })}\n    </FormHelperText>\n  );\n};\n\nValidatingSpinner.propTypes = {\n  validating: PropTypes.bool.isRequired,\n};\n\nconst validated = (_, { meta }) => {\n  if (meta.validating) {\n    return {\n      // FormSpy is a fallback solution\n      // FF sometimes does not set validating to 'false' on the field\n      // So we need to also check the FormSpy.validating\n      helperText: <FormSpy>{({ validating }) => <ValidatingSpinner validating={validating} />}</FormSpy>,\n    };\n  }\n\n  if (meta.valid) {\n    return {\n      validated: 'success',\n      FormGroupProps: {\n        validated: 'success',\n      },\n    };\n  }\n\n  return {};\n};\n\nexport default validated;\n"],"names":["checkSourceStatus","id","getSourcesApi","checkAvailabilitySource","delay","interval","prms","Promise","resolve","setTimeout","bind","checkAppAvailability","timeout","entity","updatedTime","res","rej","start","Date","now","checkSource","then","data","availability_status","availability_status_error","last_checked_at","updated_at","error","type","name","fields","intl","useIntl","formatMessage","defaultMessage","Popover","maxWidth","bodyContent","TextContent","Text","component","TextVariants","cmd","key","className","CREATE_S3_BUCKET","HCCM_DOCS_PREFIX","ENABLE_AWS_ACCOUNT","CONFIG_AWS_TAGS","UsageDescription","showHCS","link","href","rel","target","TextList","TextListVariants","TextListItem","propTypes","PropTypes","IAMRoleDescription","ClipboardCopy","isReadOnly","IAMPolicyDescription","formOptions","useFormApi","values","getState","s3Bucket","application","extra","bucket","aliasesEnabled","aws","aliases","enabled","orgUnitsEnabled","org_units","TextListItemVariants","isCode","variant","ClipboardCopyVariant","JSON","stringify","Version","Statement","Sid","Effect","Action","Resource","bold","TagsDescription","HCS_APP_NAME","ArnDescription","IncludeAliasesLabel","appendTo","position","Button","ButtonVariant","Element","isRequired","IncludeOrgUnitsLabel","ROLE_NAME","ROLE_COMMAND_STRING","ATTACH_COMMAND_STRING","getSubWatchConfig","axiosInstance","b","chunks","length","Math","floor","random","API_LINK","INSTALL_PREREQUISITE","CREATE_AZURE_STORAGE","AZURE_CREDS_URL","RECURRING_TASK_URL","InternalReaderRoleDescription","authentication","scope","subscription_id","username","CostExportSelect","handleSelect","React","isOpen","setOpen","selected","setSelected","Select","SelectVariant","onToggle","onSelect","event","selection","isPlaceholder","selections","SelectOption","value","CostExportDescription","selectionText","Subscription","PROJECT_LINK","CompartmentId","renderForm","Title","headingLevel","map","field","PolicyCompartment","compartment_id","CreateBucket","policy_compartment","PopulateBucket","AllFieldAreRequired","arnMessagePattern","arnMessageLength","arnField","placeholder","validate","validatorTypes","pattern","message","threshold","provArnField","hcsArnField","getArn","authUsername","useApplicationAuth","skipSelection","additionalSteps","title","nextStep","Content","componentTypes","label","hideField","initialValue","initializeOnMount","Icon","AwsArn","substepOf","subsWatchArnField","ansibleTowerURL","helperText","FormHelperText","isHidden","ibm","api_token_account_id","generic","skipEndpoint","COST_MANAGEMENT_APP_NAME","showTitle","serviceId","cost","service_id","InputGroup","TextArea","rows","spellCheck","autoCorrect","ClipboardCopyButton","onClick","e","clipboardCopyFunc","openshift","token","additionalFields","operator","endpoint","url","azure","username_password_tenant_id","lighthouse_subscription_id_legacy","CLOUD_METER_APP_NAME","customSteps","emptyAuthType","lighthouse_subscription_id","useState","setLink","setError","useEffect","getLighthouseLink","payload","console","isLoading","isDisabled","change","isBlock","tenant_id_client_id_client_secret","setSelection","TowerCatalog","resource_group","subscription","amazon","access_key_secret_key","onlyHiddenFields","arn","includeStepKeyFields","HCS_NAME","config","setConfig","conf","aws_policies","traditional_inspection","aws_account_id","space","PROVISIONING_APP_NAME","awsCliCommand","provAppTypeId","setAppTypeId","provAwsAccount","setAwsAccount","fetchError","setFetchError","getProvAppType","_e","getProvMetadata","accID","Alert","replace","command","satellite","receptor_node","CATALOG_APP","username_password","condition","is","when","google","Hint","HintTitle","HintBody","googleAccount","setGoogleAccount","errorMessage","getGoogleAccount","projectId","ocid","CMOci","hardcodedSchema","typeName","authName","appName","get","hardcodedSchemas","undefined","getAdditionalSteps","enableLighthouse","hcsEnrolled","applicationName","shouldSkipSelection","shouldSkipEndpoint","hasCustomSteps","getAdditionalStepKeys","getOnlyHiddenFields","getAdditionalStepFields","stepKey","filter","shouldUseAppAuth","getNoStepsFields","additionalStepKeys","includes","injectAuthFieldsInfo","auth","specificFields","hardcodedField","resultedField","injectEndpointFieldsInfo","getAdditionalAuthFields","createEndpointStep","createAdditionalSteps","hasEndpointStep","step","createAuthTypeSelection","appType","endpointFields","disableAuthType","isGeneric","auths","schema","supportedAuthTypes","supported_authentication_types","hasMultipleAuthTypes","stepMapper","forEach","hardcodedAppName","additionalIncludesStepKeys","authFields","push","find","authType","hasHardcodedSchema","additionalStepName","hasCustomStep","stepProps","firstAdditonalStep","schemaBuilder","sourceTypes","appTypes","appendEndpoint","hidden","supported_source_types","auhtentications","some","shouldAppendEmptyType","appAdditionalSteps","wizardDescription","activeCategory","CLOUD_VENDOR","wizardTitle","NO_APPLICATION_VALUE","ErroredStep","onClose","returnButtonTitle","customText","primaryAction","secondaryActions","Component","Bullseye","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","ExclamationCircleIcon","color","size","EmptyStateBody","EmptyStateSecondaryActions","defaultProps","LoadingStep","cancelTitle","description","Spinner","ValuePopover","headerContent","isInline","SummaryAlert","sourceType","DesctiptionListItem","term","props","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","SourceWizardSummary","applicatioNames","applicationTypes","showApp","showAuthType","useFlag","source_type","source","source_type_id","hasAuthentication","authtype","auth_select","authTypeFields","app_creation_workflow","ACCOUNT_AUTHORIZATION","applications","app","COST_MANAGEMENT_APP_ID","display_name","application_type_id","availableStepKeys","appId","Boolean","getStepKeys","authSteps","flatMap","x","startsWith","valuesList","stepKeys","formField","Label","createItem","getAllFieldsValues","toString","DescriptionList","isHorizontal","product_name","bucket_namespace","bucket_region","Description","rest","CardSelect","originalProps","useFieldApi","hideLabel","meta","input","options","mutator","DefaultIcon","iconMapper","components","icons","isMulti","multi","inputValue","onChange","valueSelect","handleMulti","handleSingle","handleClick","onBlur","showError","touched","FormGroup","fieldId","helperTextInvalid","validated","Grid","hasGutter","option","disabled","GridItem","sm","md","Tile","tabIndex","onKeyPress","charCode","preventDefault","handleKeyPress","isStacked","isSelected","_value","AuthRadio","Radio","isChecked","EnhancedRadio","selectedType","selectedApp","newOptions","FormGroupProps","CheckboxWithIcon","ref","useRef","current","mapperExtension","AuthSelect","summary","supportedApps","filteredOptions","Stack","StackItem","Switch","checked","handleChange","match","isEditing","isModified","edited","setEdited","firstClick","mounted","pristine","doNotRequirePassword","componentProps","resolveProps","TextInput","onFocus","autoFocus","SourcesFormRenderer","componentMapper","FormTemplate","pf4ComponentMapper","ValidatingSpinner","validating","_","valid"],"sourceRoot":""}