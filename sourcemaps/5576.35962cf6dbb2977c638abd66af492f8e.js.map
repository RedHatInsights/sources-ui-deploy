{"version":3,"file":"js/5576.862ded113752d97fba83.js","mappings":"wSAiBA,MA0DA,EA1D0B,KACxB,MAAMA,GAAS,SACTC,GAAO,UACPC,GAAW,UACXC,GAAW,SAEXC,EAAiB,IAAMD,GAAS,QAAe,KAAOE,cAAcC,KAAMN,EAAOO,KAEvF,OACE,kBAAC,EAAAC,MAAK,CACJC,MAAOR,EAAKS,cAAc,CAAEH,GAAI,sBAAuBI,eAAgB,kBACvEC,YAAaX,EAAKS,cAAc,CAAEH,GAAI,4BAA6BI,eAAgB,sCACnFE,QAAST,EACTU,QAAM,EACNC,QAAQ,SACRC,UAAU,WAEV,kBAAC,IAAmB,CAClBC,aAAeC,GACb,kBAAC,KAAY,IACPA,EACJC,cAAe,CAAC,WAAY,aAAc,WAC1CC,YAAanB,EAAKS,cAAc,CAAEH,GAAI,eAAgBI,eAAgB,WAG1EU,SAAU,EAAGC,WACXlB,IAEOF,GACL,QACEF,EAAOO,GACPe,EACArB,EAAKS,cAAc,CAAEH,GAAI,sBAAuBI,eAAgB,iCAItEY,SAAUnB,EACVoB,OAAQ,CACNC,OAAQ,CACN,CACEH,KAAM,OACNI,MAAOzB,EAAKS,cAAc,CACxBH,GAAI,eACJI,eAAgB,SAElBgB,UAAW,IAAeC,WAC1BC,SAAU,CAAEC,IAAU,QAAwBA,EAAO9B,EAAOO,GAAIN,GAAO,CAAE8B,KAAM,IAAeC,WAC9FC,YAAY,EACZC,aAAc,IACdC,aAAcnC,EAAOsB,UAMhC,C,6DCrEI,MAAMc,EAAiB,KAC5B,MAAMjC,GAAW,IAAAkC,eAEjB,MAAO,CAACC,EAAIC,IACHpC,GAAS,OAAgBmC,EAAI,KAAeC,EACpD,C","sources":["webpack:///./src/components/SourceDetail/SourceRenameModal.js","webpack:///./src/hooks/useAppNavigate.js"],"sourcesContent":["import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { Modal } from '@patternfly/react-core';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\n\nimport { useSource } from '../../hooks/useSource';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport { replaceRouteId, routes } from '../../Routing';\nimport { renameSource } from '../../redux/sources/actions';\nimport { asyncValidatorDebounced } from '../../components/addSourceWizard/SourceAddSchema';\nimport validated from '../../utilities/resolveProps/validated';\nimport { useAppNavigate } from '../../hooks/useAppNavigate';\n\nconst SourceRenameModal = () => {\n  const source = useSource();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const navigate = useAppNavigate();\n\n  const returnToSource = () => navigate(replaceRouteId(routes.sourcesDetail.path, source.id));\n\n  return (\n    <Modal\n      title={intl.formatMessage({ id: 'sources.renameTitle', defaultMessage: 'Rename source' })}\n      description={intl.formatMessage({ id: 'sources.renameDescription', defaultMessage: 'Enter a new name for your source.' })}\n      onClose={returnToSource}\n      isOpen\n      variant=\"medium\"\n      className=\"sources\"\n    >\n      <SourcesFormRenderer\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            disableSubmit={['pristine', 'validating', 'invalid']}\n            submitLabel={intl.formatMessage({ id: 'sources.save', defaultMessage: 'Save' })}\n          />\n        )}\n        onSubmit={({ name }) => {\n          returnToSource();\n\n          return dispatch(\n            renameSource(\n              source.id,\n              name,\n              intl.formatMessage({ id: 'sources.renameError', defaultMessage: 'Renaming was unsuccessful' }),\n            ),\n          );\n        }}\n        onCancel={returnToSource}\n        schema={{\n          fields: [\n            {\n              name: 'name',\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              component: componentTypes.TEXT_FIELD,\n              validate: [(value) => asyncValidatorDebounced(value, source.id, intl), { type: validatorTypes.REQUIRED }],\n              isRequired: true,\n              resolveProps: validated,\n              initialValue: source.name,\n            },\n          ],\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport default SourceRenameModal;\n","import { useNavigate } from 'react-router-dom';\nimport { linkBasename, mergeToBasename } from '../utilities/utils';\n\nexport const useAppNavigate = () => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n"],"names":["source","intl","dispatch","navigate","returnToSource","sourcesDetail","path","id","Modal","title","formatMessage","defaultMessage","description","onClose","isOpen","variant","className","FormTemplate","props","disableSubmit","submitLabel","onSubmit","name","onCancel","schema","fields","label","component","TEXT_FIELD","validate","value","type","REQUIRED","isRequired","resolveProps","initialValue","useAppNavigate","useNavigate","to","options"],"sourceRoot":""}