{"version":3,"sources":["webpack:///./src/components/RedirectNoWriteAccess/RedirectNoWriteAccess.js","webpack:///./src/components/RedirectNoPaused/RedirectNoPaused.js","webpack:///./src/components/CustomRoute/CustomRoute.js","webpack:///./src/components/RedirectNoId/RedirectNoId.js","webpack:///./src/hooks/useHasWritePermissions.js","webpack:///./src/hooks/useIsLoaded.js","webpack:///./src/hooks/useSource.js","webpack:///./src/utilities/filterApps.js"],"names":["intl","useIntl","writePermissions","useHasWritePermissions","dispatch","useDispatch","useEffect","title","formatMessage","id","defaultMessage","description","addMessage","variant","Redirect","to","routes","source","useSource","paused_at","replaceRouteId","CustomRouteInternal","route","children","redirectNoId","noPaused","writeAccess","RedirectNoId","propTypes","PropTypes","path","isRequired","CustomRoute","componentProps","Component","props","Route","useParams","loaded","useIsLoaded","useSelector","sources","shallowEqual","appTypesLoaded","sourceTypesLoaded","useState","applicationIsLoaded","setIsApplicationLoaded","doLoadSource","then","addHiddenSource","user","orgAdmin","isOrgAdmin","entities","find","filterVendorAppTypes","sourceTypes","activeVendor","supported_source_types","type","CLOUD_VENDOR","name","vendor","REDHAT_VENDOR","TOPOLOGY_INV_NAME"],"mappings":"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","file":"js/662.720a7420dd6717c14bdc.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage } from '../../redux/sources/actions';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { routes } from '../../Routes';\n\nconst RedirectNoWriteAccess = () => {\n  const intl = useIntl();\n\n  const writePermissions = useHasWritePermissions();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (writePermissions === false) {\n      const title = intl.formatMessage({\n        id: 'sources.insufficietnPerms',\n        defaultMessage: 'Insufficient permissions',\n      });\n      const description = intl.formatMessage({\n        id: 'sources.notAdminButton',\n        defaultMessage: 'To perform this action, you must be granted write permissions from your Organization Administrator.',\n      });\n\n      dispatch(addMessage({ title, variant: 'danger', description }));\n    }\n  }, [writePermissions]);\n\n  if (writePermissions === false) {\n    return <Redirect to={routes.sources.path} />;\n  }\n\n  return null;\n};\n\nexport default RedirectNoWriteAccess;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage } from '../../redux/sources/actions';\nimport { replaceRouteId, routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\n\nconst RedirectNoPaused = () => {\n  const intl = useIntl();\n  const source = useSource();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (source.paused_at) {\n      dispatch(\n        addMessage({\n          title: intl.formatMessage({\n            id: 'sources.sourcePausedRedirect',\n            defaultMessage: 'Source is paused',\n          }),\n          variant: 'danger',\n          description: intl.formatMessage({\n            id: 'sources.sourcePausedRedirectDescription',\n            defaultMessage: 'You cannot perform this action on a paused source.',\n          }),\n        })\n      );\n    }\n  }, [source.paused_at]);\n\n  if (source.paused_at) {\n    return <Redirect to={replaceRouteId(routes.sourcesDetail.path, source.id)} />;\n  }\n\n  return null;\n};\n\nexport default RedirectNoPaused;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { useSource } from '../../hooks/useSource';\nimport RedirectNoWriteAccess from '../RedirectNoWriteAccess/RedirectNoWriteAccess';\nimport RedirectNoId from '../RedirectNoId/RedirectNoId';\nimport RedirectNoPaused from '../RedirectNoPaused/RedirectNoPaused';\n\nconst CustomRouteInternal = ({ route, children }) => {\n  const source = route.redirectNoId && useSource();\n\n  if (!source && route.redirectNoId) {\n    return <RedirectNoId />;\n  }\n\n  return (\n    <React.Fragment>\n      {route.noPaused && <RedirectNoPaused />}\n      {route.writeAccess && <RedirectNoWriteAccess />}\n      {children}\n    </React.Fragment>\n  );\n};\n\nCustomRouteInternal.propTypes = {\n  route: PropTypes.shape({\n    path: PropTypes.string.isRequired,\n    redirectNoId: PropTypes.bool,\n    writeAccess: PropTypes.bool,\n    noPaused: PropTypes.bool,\n  }).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst CustomRoute = ({ route, componentProps, Component, ...props }) => (\n  <Route {...props} path={route.path}>\n    <CustomRouteInternal route={route}>\n      <Component {...componentProps} />\n    </CustomRouteInternal>\n  </Route>\n);\n\nCustomRoute.propTypes = {\n  route: PropTypes.shape({\n    path: PropTypes.string.isRequired,\n    redirectNoId: PropTypes.bool,\n    writeAccess: PropTypes.bool,\n    noPaused: PropTypes.bool,\n  }).isRequired,\n  componentProps: PropTypes.any,\n  Component: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n};\n\nexport default CustomRoute;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useParams, Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage, addHiddenSource } from '../../redux/sources/actions';\nimport { doLoadSource } from '../../api/entities';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\n\nconst RedirectNoId = () => {\n  const { id } = useParams();\n  const intl = useIntl();\n  const source = useSource();\n\n  const loaded = useIsLoaded();\n\n  const { appTypesLoaded, sourceTypesLoaded } = useSelector(({ sources }) => sources, shallowEqual);\n  const dispatch = useDispatch();\n\n  const [applicationIsLoaded, setIsApplicationLoaded] = useState(false);\n\n  useEffect(() => {\n    if (loaded && appTypesLoaded && sourceTypesLoaded) {\n      doLoadSource(id)\n        .then(({ sources: [source] }) => {\n          dispatch(addHiddenSource(source));\n          return source;\n        })\n        .then((source) => {\n          if (!source) {\n            dispatch(\n              addMessage({\n                title: intl.formatMessage({\n                  id: 'sources.sourceNotFoundTitle',\n                  defaultMessage: 'Requested source was not found',\n                }),\n                variant: 'danger',\n                description: intl.formatMessage(\n                  {\n                    id: 'sources.sourceNotFoundTitleDescription',\n                    defaultMessage: 'Source with { id } was not found. Try it again later.',\n                  },\n                  { id }\n                ),\n              })\n            );\n          }\n\n          setIsApplicationLoaded(true);\n        });\n    }\n  }, [loaded, appTypesLoaded, sourceTypesLoaded]);\n\n  if (applicationIsLoaded && !source) {\n    return <Redirect to={routes.sources.path} />;\n  }\n\n  return null;\n};\n\nexport default RedirectNoId;\n","import { useSelector } from 'react-redux';\n\nexport const useHasWritePermissions = () => {\n  const { orgAdmin, writePermissions } = useSelector(({ user }) => ({\n    orgAdmin: user?.isOrgAdmin,\n    writePermissions: user?.writePermissions,\n  }));\n\n  if (typeof orgAdmin !== 'boolean' && typeof writePermissions !== 'boolean') {\n    return undefined;\n  }\n\n  return !!orgAdmin || !!writePermissions;\n};\n","import { useSelector } from 'react-redux';\n\nexport const useIsLoaded = () => {\n  const isLoaded = useSelector(({ sources }) => sources.loaded);\n\n  return isLoaded <= 0;\n};\n","import { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nexport const useSource = () => {\n  const { id } = useParams();\n  const source = useSelector(({ sources }) => sources.entities.find((source) => source.id === id));\n\n  return source;\n};\n","import { CLOUD_VENDOR, REDHAT_VENDOR, TOPOLOGY_INV_NAME } from './constants';\n\nconst filterApps = (type) => type.name !== TOPOLOGY_INV_NAME;\n\nexport const filterVendorAppTypes =\n  (sourceTypes, activeVendor) =>\n  ({ supported_source_types }) =>\n    supported_source_types.find((type) =>\n      activeVendor === CLOUD_VENDOR\n        ? (sourceTypes.find(({ name }) => type === name)?.vendor || REDHAT_VENDOR) !== REDHAT_VENDOR\n        : sourceTypes.find(({ name }) => type === name)?.vendor === REDHAT_VENDOR\n    );\n\nexport default filterApps;\n"],"sourceRoot":""}