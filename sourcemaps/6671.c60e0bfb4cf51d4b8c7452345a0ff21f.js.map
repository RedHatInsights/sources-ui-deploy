{"version":3,"file":"js/6671.1644510501282.9f8ad30bf007f70312ba.js","mappings":"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","sources":["webpack:///./src/api/wizardHelpers.js","webpack:///./src/components/addSourceWizard/superKey/SuperKeyCredentials.js","webpack:///./src/components/addSourceWizard/superKey/configurationStep.js","webpack:///./src/components/addSourceWizard/descriptions/SubWatchDescription.js","webpack:///./src/components/addSourceWizard/compileAllApplicationComboOptions.js","webpack:///./src/components/addSourceWizard/superKey/applicationsStep.js","webpack:///./src/components/addSourceWizard/SourceAddSchema.js","webpack:///./src/utilities/debouncePromise.js","webpack:///./src/components/addSourceWizard/superKey/generateSuperKeyFields.js"],"sourcesContent":["import { getSourcesApi } from './entities';\n\nexport const doLoadSourceTypes = () =>\n  getSourcesApi()\n    .listSourceTypes()\n    .then((data) => ({ sourceTypes: data.data }));\n\nexport const doLoadApplicationTypes = () =>\n  getSourcesApi()\n    .doLoadAppTypes()\n    .then((data) => ({ applicationTypes: data.data }));\n\nexport const findSource = (name) =>\n  getSourcesApi().postGraphQL({\n    query: `{ sources(filter: {name: \"${name}\"})\n        { id, name }\n    }`,\n  });\n","import PropTypes from 'prop-types';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport generateSuperKeyFields from './generateSuperKeyFields';\n\nconst SuperKeyCredentials = ({ sourceTypes }) => {\n  const { renderForm, getState } = useFormApi();\n\n  const values = getState().values;\n\n  return renderForm(generateSuperKeyFields(sourceTypes, values.source_type));\n};\n\nSuperKeyCredentials.propTypes = {\n  sourceTypes: PropTypes.array,\n};\n\nexport default SuperKeyCredentials;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { Label } from '@patternfly/react-core';\n\nimport SuperKeyCredentials from './SuperKeyCredentials';\nimport { bold } from '../../../utilities/intlShared';\n\nconst configurationStep = (intl, sourceTypes) => ({\n  name: 'configuration_step',\n  title: intl.formatMessage({\n    id: 'wizard.configurationStep',\n    defaultMessage: 'Select configuration',\n  }),\n  nextStep: ({ values }) => {\n    if (!values.source?.app_creation_workflow) {\n      return;\n    }\n\n    return values.source?.app_creation_workflow === 'account_authorization' ? 'select_applications' : 'application_step';\n  },\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'conf-desc',\n      label: intl.formatMessage(\n        {\n          id: 'wizard.accountAuthDescription',\n          defaultMessage:\n            'Configure your source manually or let us manage all necessary credentials by selecting <b>account authorization</b> configuration.',\n        },\n        {\n          b: bold,\n        }\n      ),\n    },\n    {\n      component: componentTypes.RADIO,\n      name: 'source.app_creation_workflow',\n      label: intl.formatMessage({\n        id: 'wizard.configurationMode',\n        defaultMessage: 'Select a configuration mode',\n      }),\n      isRequired: true,\n      resolveProps: (_p, _f, formOptions) => ({\n        options: [\n          {\n            label: (\n              <span className=\"src-c-wizard__rhel-mag-label\">\n                {intl.formatMessage({\n                  id: 'wizard.accountAuth',\n                  defaultMessage: 'Account authorization',\n                })}\n                <Label className=\"pf-u-ml-sm\" color=\"purple\">\n                  {intl.formatMessage({ id: 'wizard.confMode.reccomended', defaultMessage: 'Recommended' })}\n                </Label>\n              </span>\n            ),\n            description: intl.formatMessage(\n              {\n                id: 'wizard.accountAuth.desc',\n                defaultMessage:\n                  'A new automated source configuration method. Provide your {type} account credentials and let Red Hat configure and manage your source for you.',\n              },\n              {\n                type:\n                  { amazon: 'AWS', azure: 'Azure' }[formOptions.getState().values.source_type] ||\n                  formOptions.getState().values.source_type,\n              }\n            ),\n            value: 'account_authorization',\n          },\n        ],\n      }),\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n    {\n      component: componentTypes.SUB_FORM,\n      name: 'sub-form',\n      fields: [\n        {\n          component: 'description',\n          name: 'super-key-credentials',\n          Content: SuperKeyCredentials,\n          sourceTypes,\n        },\n      ],\n      condition: { when: 'source.app_creation_workflow', is: 'account_authorization' },\n      className: 'pf-u-ml-md',\n    },\n    {\n      component: componentTypes.RADIO,\n      name: 'source.app_creation_workflow',\n      options: [\n        {\n          label: intl.formatMessage({\n            id: 'wizard.manualAuth',\n            defaultMessage: 'Manual configuration',\n          }),\n          description: intl.formatMessage({\n            id: 'wizard.manualAuth.desc',\n            defaultMessage:\n              'Configure and manage your source manually if you do not wish to provide account authorization credentials. You will set up sources the same way you do today.',\n          }),\n          value: 'manual_configuration',\n        },\n      ],\n    },\n  ],\n});\n\nexport default configurationStep;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Text, Stack, StackItem, Flex, FlexItem } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst Point = ({ title, description, isEnabled, ...props }) => (\n  <StackItem {...props}>\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>\n        <CheckCircleIcon fill={isEnabled ? '#3E8635' : '#6A6E73'} />\n      </FlexItem>\n      <FlexItem>\n        <Text className=\"pf-u-mb-xs src-c-wizard__rhel-desc-title\">{title}</Text>\n        <Text>{description}</Text>\n      </FlexItem>\n    </Flex>\n  </StackItem>\n);\n\nPoint.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  isEnabled: PropTypes.bool,\n};\n\nconst SubWatchDescription = ({ id }) => {\n  const intl = useIntl();\n  const { getState } = useFormApi();\n\n  const values = getState().values;\n\n  const isEnabled =\n    (values.source.app_creation_workflow === 'account_authorization' && values.applications?.includes(id)) ||\n    (values.source.app_creation_workflow !== 'account_authorization' && values.application?.application_type_id === id);\n\n  if (values.source_type === 'azure') {\n    return (\n      <Stack>\n        <Point\n          title={intl.formatMessage({\n            id: 'rhelbundle.goldImages.title',\n            defaultMessage: 'Red Hat gold images',\n          })}\n          description={intl.formatMessage({\n            id: 'rhelbundle.goldImages.azure.description',\n            defaultMessage: 'Unlock cloud images in Microsoft Azure and bring your own subscription instead of paying hourly.',\n          })}\n          className=\"pf-u-mb-sm\"\n          isEnabled={isEnabled}\n        />\n        <Point\n          title={intl.formatMessage({\n            id: 'rhelbundle.autoregistration.title',\n            defaultMessage: 'Autoregistration',\n          })}\n          description={intl.formatMessage({\n            id: 'rhelbundle.goldImages.description',\n            defaultMessage: 'Cloud instances automatically connect to console.redhat.com when provisioned.',\n          })}\n          isEnabled={isEnabled}\n        />\n      </Stack>\n    );\n  }\n\n  if (values.source_type === 'google') {\n    return (\n      <Stack>\n        <Point\n          title={intl.formatMessage({\n            id: 'rhelbundle.goldImages.title',\n            defaultMessage: 'Red Hat gold images',\n          })}\n          description={intl.formatMessage({\n            id: 'rhelbundle.goldImages.google.description',\n            defaultMessage: 'Unlock cloud images in Google Cloud and bring your own subscription instead of paying hourly.',\n          })}\n          className=\"pf-u-mb-sm\"\n          isEnabled={isEnabled}\n        />\n        <Point\n          title={intl.formatMessage({\n            id: 'rhelbundle.autoregistration.title',\n            defaultMessage: 'Autoregistration',\n          })}\n          description={intl.formatMessage({\n            id: 'rhelbundle.goldImages.description',\n            defaultMessage: 'Cloud instances automatically connect to console.redhat.com when provisioned.',\n          })}\n          isEnabled={isEnabled}\n        />\n      </Stack>\n    );\n  }\n\n  return (\n    <Stack>\n      <Point\n        title={intl.formatMessage({\n          id: 'rhelbundle.goldImages.title',\n          defaultMessage: 'Red Hat gold images',\n        })}\n        description={intl.formatMessage({\n          id: 'rhelbundle.goldImages.description',\n          defaultMessage: 'Unlock cloud images in AWS and bring your own subscription instead of paying hourly.',\n        })}\n        className=\"pf-u-mb-sm\"\n        isEnabled={isEnabled}\n      />\n      <Point\n        title={intl.formatMessage({\n          id: 'rhelbundle.subwatch.title',\n          defaultMessage: 'High precision subscription watch data',\n        })}\n        description={intl.formatMessage({\n          id: 'rhelbundle.subwatch.description',\n          defaultMessage: 'View precise public cloud usage data in subscription watch.',\n        })}\n        className=\"pf-u-mb-sm\"\n        isEnabled={isEnabled}\n      />\n      <Point\n        title={intl.formatMessage({\n          id: 'rhelbundle.autoregistration.title',\n          defaultMessage: 'Autoregistration',\n        })}\n        description={intl.formatMessage({\n          id: 'rhelbundle.goldImages.description',\n          defaultMessage: 'Cloud instances automatically connect to console.redhat.com when provisioned.',\n        })}\n        isEnabled={isEnabled}\n      />\n    </Stack>\n  );\n};\n\nSubWatchDescription.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default SubWatchDescription;\n","import React from 'react';\n\nimport { NO_APPLICATION_VALUE } from './stringConstants';\n\nimport { Label } from '@patternfly/react-core';\nimport SubWatchDescription from './descriptions/SubWatchDescription';\nimport { CLOUD_METER_APP_NAME, COST_MANAGEMENT_APP_NAME, REDHAT_VENDOR } from '../../utilities/constants';\n\nexport const descriptionMapper = (type, intl) =>\n  ({\n    [COST_MANAGEMENT_APP_NAME]: intl.formatMessage({\n      id: 'cost.app.description',\n      defaultMessage: 'Analyze, forecast, and optimize your Red Hat OpenShift cluster costs in hybrid cloud environments.',\n    }),\n    [CLOUD_METER_APP_NAME]: <SubWatchDescription id={type.id} />,\n  }[type.name]);\n\nexport const labelMapper = (type, intl) =>\n  ({\n    [CLOUD_METER_APP_NAME]: (\n      <span className=\"src-c-wizard__rhel-mag-label\">\n        RHEL management{' '}\n        <Label className=\"pf-u-ml-sm\" color=\"purple\">\n          {intl.formatMessage({ id: 'sub.bundle', defaultMessage: 'Bundle' })}\n        </Label>\n      </span>\n    ),\n  }[type.name]);\n\nexport const compileAllApplicationComboOptions = (applicationTypes, intl, activeVendor) => [\n  ...applicationTypes\n    .sort((a, b) => a.display_name.localeCompare(b.display_name))\n    .map((t) => ({\n      value: t.id,\n      label: labelMapper(t, intl) || t.display_name,\n      description: descriptionMapper(t, intl),\n    })),\n  ...(activeVendor !== REDHAT_VENDOR\n    ? [\n        {\n          label: intl.formatMessage({\n            id: 'wizard.noApplication',\n            defaultMessage: 'No application',\n          }),\n          value: NO_APPLICATION_VALUE,\n        },\n      ]\n    : []),\n];\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { compileAllApplicationComboOptions } from '../compileAllApplicationComboOptions';\n\nconst applicationsStep = (applicationTypes, intl) => ({\n  name: 'select_applications',\n  title: intl.formatMessage({\n    id: 'applications.select',\n    defaultMessage: 'Select applications',\n  }),\n  nextStep: 'summary',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'conf-desc',\n      label: intl.formatMessage({\n        id: 'applications.description',\n        defaultMessage:\n          // eslint-disable-next-line max-len\n          'Configuring your cloud sources provides additional capabilities included with your subscription. You can turn these features on or off at any time after source creation.',\n      }),\n    },\n    {\n      component: 'switch-group',\n      name: 'applications',\n      label: intl.formatMessage({\n        id: 'applications.availableApplications',\n        defaultMessage: 'Available applications',\n      }),\n      options: compileAllApplicationComboOptions(applicationTypes, intl),\n      applicationTypes,\n    },\n  ],\n});\n\nexport default applicationsStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nimport { Text, TextVariants, TextContent } from '@patternfly/react-core';\n\nimport debouncePromise from '../../utilities/debouncePromise';\nimport { findSource } from '../../api/wizardHelpers';\nimport { schemaBuilder } from './schemaBuilder';\nimport { NO_APPLICATION_VALUE, wizardDescription, wizardTitle } from './stringConstants';\nimport configurationStep from './superKey/configurationStep';\nimport { compileAllApplicationComboOptions } from './compileAllApplicationComboOptions';\nimport applicationsStep from './superKey/applicationsStep';\nimport { REDHAT_VENDOR } from '../../utilities/constants';\nimport validated from '../../utilities/resolveProps/validated';\nimport handleError from '../../api/handleError';\nimport { bold } from '../../utilities/intlShared';\n\nexport const asyncValidator = async (value, sourceId = undefined, intl) => {\n  if (!value) {\n    return undefined;\n  }\n\n  let response;\n  try {\n    response = await findSource(value);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(handleError(error));\n    return undefined;\n  }\n\n  if (response.data.sources.find(({ id }) => id !== sourceId)) {\n    throw intl.formatMessage({ defaultMessage: 'That name is taken. Try another.', id: 'wizard.nameTaken' });\n  }\n\n  return undefined;\n};\n\nlet firstValidation = true;\nexport const setFirstValidated = (bool) => (firstValidation = bool);\nexport const getFirstValidated = () => firstValidation;\n\nexport const asyncValidatorDebounced = debouncePromise(asyncValidator);\n\nexport const asyncValidatorDebouncedWrapper = (intl) => {\n  if (getFirstValidated()) {\n    setFirstValidated(false);\n    return (value, id) => (value ? asyncValidator(value, id, intl) : undefined);\n  }\n\n  return asyncValidatorDebounced;\n};\n\nexport const compileAllSourcesComboOptions = (sourceTypes) => [\n  ...sourceTypes\n    .map((type) => ({\n      ...type,\n      product_name: type.vendor === 'Red Hat' ? type.product_name.replace('Red Hat ', '') : type.product_name,\n    }))\n    .sort((a, b) => a.product_name.localeCompare(b.product_name))\n    .map((t) => ({\n      value: t.name,\n      label: t.product_name,\n    })),\n];\n\nexport const appMutatorRedHat = (appTypes) => (option, formOptions) => {\n  const selectedSourceType = formOptions.getState().values.source_type;\n  const appType = appTypes.find((app) => app.id === option.value);\n  const isEnabled = selectedSourceType && appType ? appType.supported_source_types.includes(selectedSourceType) : true;\n\n  if (!isEnabled) {\n    return;\n  }\n\n  return option;\n};\n\nconst shortIcons = {\n  amazon: '/apps/frontend-assets/partners-icons/aws.svg',\n  'ansible-tower': '/apps/frontend-assets/red-hat-logos/stacked.svg',\n  azure: '/apps/frontend-assets/partners-icons/microsoft-azure-short.svg',\n  openshift: '/apps/frontend-assets/red-hat-logos/stacked.svg',\n  satellite: '/apps/frontend-assets/red-hat-logos/stacked.svg',\n  google: '/apps/frontend-assets/partners-icons/google-cloud-short.svg',\n};\n\nexport const iconMapper = (sourceTypes) => (name) => {\n  const sourceType = sourceTypes.find((type) => type.name === name);\n\n  if (!sourceType || (!sourceType.icon_url && !shortIcons[name])) {\n    return null;\n  }\n\n  const Icon = () => (\n    <img\n      src={shortIcons[name] || sourceType.icon_url}\n      alt={sourceType.product_name}\n      className={`src-c-wizard__icon ${sourceType.vendor === 'Red Hat' ? 'redhat-icon' : 'pf-u-mb-sm'}`}\n    />\n  );\n\n  return Icon;\n};\n\nexport const nextStep =\n  (selectedType) =>\n  ({ values: { application, source_type } }) => {\n    if (selectedType) {\n      return 'application_step';\n    }\n\n    const appId = application && application.application_type_id !== NO_APPLICATION_VALUE && application.application_type_id;\n    const resultedStep = appId ? `${source_type}-${appId}` : source_type;\n\n    return resultedStep;\n  };\n\nexport const hasSuperKeyType = (sourceType) => sourceType?.schema.authentication.find(({ is_superkey }) => is_superkey);\n\nexport const nextStepCloud =\n  (sourceTypes) =>\n  ({ values }) => {\n    const sourceType = sourceTypes.find(({ name }) => name === values.source_type);\n\n    return hasSuperKeyType(sourceType) ? 'configuration_step' : 'application_step';\n  };\n\nconst sourceTypeSelect = ({ intl, sourceTypes, applicationTypes }) => ({\n  component: 'card-select',\n  name: 'source_type',\n  isRequired: true,\n  label: intl.formatMessage({\n    id: 'wizard.selectYourSourceType',\n    defaultMessage: 'A. Select your source type',\n  }),\n  iconMapper: iconMapper(sourceTypes),\n  validate: [\n    {\n      type: validatorTypes.REQUIRED,\n    },\n  ],\n  options: compileAllSourcesComboOptions(sourceTypes, applicationTypes),\n});\n\nconst redhatTypes = ({ intl, sourceTypes, applicationTypes, disableAppSelection }) => [\n  sourceTypeSelect({ intl, sourceTypes, applicationTypes }),\n  {\n    component: 'enhanced-radio',\n    name: 'application.application_type_id',\n    label: intl.formatMessage({\n      id: 'wizard.selectApplication',\n      defaultMessage: 'B. Application',\n    }),\n    options: compileAllApplicationComboOptions(applicationTypes, intl, REDHAT_VENDOR),\n    mutator: appMutatorRedHat(applicationTypes),\n    isDisabled: disableAppSelection,\n    isRequired: true,\n    validate: [{ type: validatorTypes.REQUIRED }],\n    condition: { when: 'source_type', isNotEmpty: true },\n  },\n];\n\nexport const applicationStep = (applicationTypes, intl, activeVendor) => ({\n  name: 'application_step',\n  title: intl.formatMessage({\n    id: 'wizard.selectApplication',\n    defaultMessage: 'Select application',\n  }),\n  nextStep: nextStep(),\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'app-description',\n      label: intl.formatMessage({\n        id: 'wizard.applicationDescription',\n        defaultMessage:\n          'Select an application to connect to your source. You can connect additional applications after source creation.',\n      }),\n    },\n    {\n      component: 'enhanced-radio',\n      name: 'application.application_type_id',\n      options: compileAllApplicationComboOptions(applicationTypes, intl, activeVendor),\n      mutator: appMutatorRedHat(applicationTypes),\n      menuIsPortal: true,\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'source_type',\n      hideField: true,\n    },\n  ],\n});\n\nexport const typesStep = (sourceTypes, applicationTypes, disableAppSelection, intl) => ({\n  title: intl.formatMessage({\n    id: 'wizard.chooseAppAndType',\n    defaultMessage: 'Source type and application',\n  }),\n  name: 'types_step',\n  nextStep: 'name_step',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'plain-text',\n      label: intl.formatMessage({\n        id: 'wizard.selectRedHatType',\n        defaultMessage:\n          'To import data for an application, you need to connect to a data source. Start by selecting your source type and application.',\n      }),\n    },\n    ...redhatTypes({ intl, sourceTypes, applicationTypes, disableAppSelection }),\n  ],\n});\n\nexport const cloudTypesStep = (sourceTypes, applicationTypes, intl) => ({\n  title: intl.formatMessage({\n    id: 'wizard.chooseAppAndType',\n    defaultMessage: 'Select source type',\n  }),\n  name: 'types_step',\n  nextStep: 'name_step',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'plain-text',\n      label: intl.formatMessage({\n        id: 'wizard.selectCloudType',\n        defaultMessage:\n          'To import data for an application, you need to connect to a data source. Start by selecting your source type.',\n      }),\n    },\n    {\n      ...sourceTypeSelect({ intl, sourceTypes, applicationTypes }),\n      label: intl.formatMessage({\n        id: 'wizard.selectCloudProvider',\n        defaultMessage: 'Select a cloud provider',\n      }),\n    },\n  ],\n});\n\nexport const NameDescription = ({ sourceTypes }) => {\n  const intl = useIntl();\n  const { getState } = useFormApi();\n\n  const typeName = sourceTypes.find(({ name }) => name === getState().values.source_type)?.product_name;\n\n  return (\n    <TextContent key=\"step1\">\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'wizard.nameDescription',\n            defaultMessage: 'Enter a name for your {typeName} source.',\n          },\n          { typeName }\n        )}\n      </Text>\n    </TextContent>\n  );\n};\n\nNameDescription.propTypes = {\n  sourceTypes: PropTypes.array,\n};\n\nconst nameStep = (intl, selectedType, sourceTypes, activeVendor) => ({\n  title: intl.formatMessage({\n    id: 'wizard.nameSource',\n    defaultMessage: 'Name source',\n  }),\n  name: 'name_step',\n  nextStep: activeVendor === REDHAT_VENDOR ? nextStep(selectedType) : nextStepCloud(sourceTypes),\n  fields: [\n    {\n      component: 'description',\n      name: 'description-summary',\n      Content: NameDescription,\n      sourceTypes,\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'source.name',\n      type: 'text',\n      label: intl.formatMessage({\n        id: 'wizard.name',\n        defaultMessage: 'Name',\n      }),\n      placeholder: 'Source_1',\n      isRequired: true,\n      validate: [(value) => asyncValidatorDebouncedWrapper(intl)(value, undefined, intl), { type: validatorTypes.REQUIRED }],\n      resolveProps: validated,\n    },\n  ],\n});\n\nexport const SummaryDescription = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'wizard.summaryDescription',\n            defaultMessage:\n              'Review the information below and click <b>Add</b> to add your source. To edit details in previous steps, click <b>Back</b>.',\n          },\n          {\n            b: bold,\n          }\n        )}\n      </Text>\n    </TextContent>\n  );\n};\n\nconst summaryStep = (sourceTypes, applicationTypes, intl) => ({\n  fields: [\n    {\n      component: 'description',\n      name: 'description-summary',\n      Content: SummaryDescription,\n    },\n    {\n      name: 'summary',\n      component: 'summary',\n      sourceTypes,\n      applicationTypes,\n    },\n    {\n      name: 'source_type',\n      component: componentTypes.TEXT_FIELD,\n      hideField: true,\n    },\n  ],\n  name: 'summary',\n  title: intl.formatMessage({\n    id: 'wizard.reviewDetails',\n    defaultMessage: 'Review details',\n  }),\n});\n\nexport default (\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  container,\n  intl,\n  selectedType,\n  initialWizardState,\n  activeVendor\n) => {\n  setFirstValidated(true);\n\n  return {\n    fields: [\n      {\n        component: componentTypes.WIZARD,\n        name: 'wizard',\n        className: 'sources',\n        title: wizardTitle(activeVendor),\n        inModal: true,\n        description: wizardDescription(activeVendor),\n        buttonLabels: {\n          submit: intl.formatMessage({\n            id: 'sources.add',\n            defaultMessage: 'Add',\n          }),\n          back: intl.formatMessage({\n            id: 'wizard.back',\n            defaultMessage: 'Back',\n          }),\n          cancel: intl.formatMessage({\n            id: 'wizard.cancel',\n            defaultMessage: 'Cancel',\n          }),\n          next: intl.formatMessage({\n            id: 'wizard.next',\n            defaultMessage: 'Next',\n          }),\n        },\n        container,\n        showTitles: true,\n        initialState: initialWizardState,\n        closeButtonAriaLabel: intl.formatMessage({\n          id: 'wizard.close',\n          defaultMessage: 'Close wizard',\n        }),\n        crossroads: ['application.application_type_id', 'source_type', 'auth_select', 'source.app_creation_workflow'],\n        fields: [\n          ...(!selectedType\n            ? activeVendor === REDHAT_VENDOR\n              ? [typesStep(sourceTypes, applicationTypes, disableAppSelection, intl)]\n              : [cloudTypesStep(sourceTypes, applicationTypes, intl)]\n            : []),\n          nameStep(intl, selectedType, sourceTypes, activeVendor),\n          configurationStep(intl, sourceTypes),\n          applicationsStep(applicationTypes, intl),\n          applicationStep(applicationTypes, intl, activeVendor),\n          ...schemaBuilder(sourceTypes, applicationTypes),\n          summaryStep(sourceTypes, applicationTypes, intl),\n        ],\n      },\n    ],\n  };\n};\n","import awesomeDebouncePromise from 'awesome-debounce-promise';\n\nconst debouncePromise = (asyncFunction, debounceTime = 250, options = { onlyResolvesLast: false }) =>\n  awesomeDebouncePromise(asyncFunction, debounceTime, options);\n\nexport default debouncePromise;\n","import { getAdditionalAuthFields, getAdditionalStepKeys, getNoStepsFields, injectAuthFieldsInfo } from '../schemaBuilder';\n\nconst generateSuperKeyFields = (sourceTypes, source_type) => {\n  const authype = sourceTypes\n    .find(({ name }) => name === source_type)\n    ?.schema.authentication.find(({ is_superkey, type }) => is_superkey || type === 'access_key_secret_key');\n\n  const additionalIncludesStepKeys = getAdditionalStepKeys(source_type, authype.type);\n\n  const fields = [\n    ...getAdditionalAuthFields(source_type, authype.type),\n    ...injectAuthFieldsInfo(getNoStepsFields(authype.fields, additionalIncludesStepKeys), source_type, authype.type),\n  ];\n\n  return fields;\n};\n\nexport default generateSuperKeyFields;\n"],"names":["doLoadSourceTypes","getSourcesApi","listSourceTypes","then","data","sourceTypes","doLoadApplicationTypes","doLoadAppTypes","applicationTypes","findSource","name","postGraphQL","query","SuperKeyCredentials","useFormApi","renderForm","values","getState","generateSuperKeyFields","source_type","propTypes","PropTypes","intl","title","formatMessage","id","defaultMessage","nextStep","source","app_creation_workflow","fields","component","componentTypes","label","b","bold","isRequired","resolveProps","_p","_f","formOptions","options","className","Label","color","description","type","amazon","azure","value","validate","validatorTypes","Content","condition","when","is","Point","isEnabled","props","StackItem","Flex","FlexItem","spacer","default","fill","Text","SubWatchDescription","useIntl","applications","includes","application","application_type_id","Stack","descriptionMapper","COST_MANAGEMENT_APP_NAME","CLOUD_METER_APP_NAME","labelMapper","compileAllApplicationComboOptions","activeVendor","sort","a","display_name","localeCompare","map","t","REDHAT_VENDOR","NO_APPLICATION_VALUE","asyncValidator","sourceId","undefined","response","console","error","handleError","sources","find","firstValidation","setFirstValidated","bool","asyncValidatorDebounced","asyncFunction","debounceTime","onlyResolvesLast","awesomeDebouncePromise","debouncePromise","compileAllSourcesComboOptions","product_name","vendor","replace","appMutatorRedHat","appTypes","option","selectedSourceType","appType","app","supported_source_types","shortIcons","openshift","satellite","google","iconMapper","sourceType","icon_url","src","alt","selectedType","appId","nextStepCloud","schema","authentication","is_superkey","sourceTypeSelect","redhatTypes","disableAppSelection","mutator","isDisabled","isNotEmpty","applicationStep","menuIsPortal","hideField","typesStep","cloudTypesStep","NameDescription","typeName","TextContent","key","TextVariants","nameStep","placeholder","asyncValidatorDebouncedWrapper","validated","SummaryDescription","summaryStep","container","initialWizardState","wizardTitle","inModal","wizardDescription","buttonLabels","submit","back","cancel","next","showTitles","initialState","closeButtonAriaLabel","crossroads","configurationStep","applicationsStep","schemaBuilder","authype","additionalIncludesStepKeys","getAdditionalStepKeys","getAdditionalAuthFields","injectAuthFieldsInfo","getNoStepsFields"],"sourceRoot":""}