{"version":3,"sources":["webpack:///./src/api/handleError.js"],"names":["handleError","error","errorMessage","sourceId","undefined","get","JSON","stringify","getSourcesApi","deleteSource","then","errorDelete","errorDeleteDetail"],"mappings":"qKAGaA,EAAc,SAACC,GAAgC,IACtDC,EAD6BC,EAAyB,4DAAdC,EAe5C,OAZKH,IACHC,EAAe,mBAGZA,GAAiC,iBAAVD,IAC1BC,EAAeD,GAGZC,IACHA,EAAeG,IAAIJ,EAAO,mBAAoBK,KAAKC,UAAUN,EAAO,KAAM,KAGvEE,GAIEK,UACJC,aAAaN,GACbO,MAAK,kBAAMR,KAFP,OAGE,SAACS,GACN,IAAMC,EAAoBP,IAAIM,EAAa,mBAAoBL,KAAKC,UAAUI,EAAa,KAAM,IAEjG,gBAAUT,EAAV,8DAA4EU,MATvEV,GAaX","file":"js/6845.624a8fb9016a7ac5cebb.js","sourcesContent":["import { getSourcesApi } from './entities';\nimport get from 'lodash/get';\n\nexport const handleError = (error, sourceId = undefined) => {\n  let errorMessage;\n\n  if (!error) {\n    errorMessage = 'Undefined error';\n  }\n\n  if (!errorMessage && typeof error === 'string') {\n    errorMessage = error;\n  }\n\n  if (!errorMessage) {\n    errorMessage = get(error, 'errors[0].detail', JSON.stringify(error, null, 2));\n  }\n\n  if (!sourceId) {\n    return errorMessage;\n  }\n\n  return getSourcesApi()\n    .deleteSource(sourceId)\n    .then(() => errorMessage)\n    .catch((errorDelete) => {\n      const errorDeleteDetail = get(errorDelete, 'errors[0].detail', JSON.stringify(errorDelete, null, 2));\n\n      return `${errorMessage}. The source was not removed, try remove it later: ${errorDeleteDetail}`;\n    });\n};\n\nexport default handleError;\n"],"sourceRoot":""}