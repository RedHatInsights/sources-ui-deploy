{"version":3,"file":"js/713.eb2c60d207aab933660b.js","mappings":"iTA2EA,QA1D0B,WACxB,IAAMA,GAASC,EAAAA,EAAAA,KACTC,GAAOC,EAAAA,EAAAA,KACPC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAEXC,EAAiB,kBAAMF,GAASG,EAAAA,EAAAA,IAAeC,EAAAA,GAAOC,cAAcC,KAAMZ,EAAOa,IAAhE,EAEvB,OACE,kBAAC,EAAAC,MAAD,CACEC,MAAOb,EAAKc,cAAc,CAAEH,GAAI,sBAAuBI,eAAgB,kBACvEC,YAAahB,EAAKc,cAAc,CAAEH,GAAI,4BAA6BI,eAAgB,sCACnFE,QAASX,EACTY,QAAM,EACNC,QAAQ,SACRC,UAAU,WAEV,kBAAC,IAAD,CACEC,aAAc,SAACC,GAAD,OACZ,kBAAC,MAAD,UACMA,EADN,CAEEC,cAAe,CAAC,WAAY,aAAc,WAC1CC,YAAaxB,EAAKc,cAAc,CAAEH,GAAI,eAAgBI,eAAgB,WAJ5D,EAOdU,SAAU,YAAc,IAAXC,EAAW,EAAXA,KAGX,OAFApB,IAEOJ,GACLyB,EAAAA,EAAAA,IACE7B,EAAOa,GACPe,EACA1B,EAAKc,cAAc,CAAEH,GAAI,sBAAuBI,eAAgB,+BAGrE,EACDa,SAAUtB,EACVuB,OAAQ,CACNC,OAAQ,CACN,CACEJ,KAAM,OACNK,MAAO/B,EAAKc,cAAc,CACxBH,GAAI,eACJI,eAAgB,SAElBiB,UAAWC,EAAAA,EAAeC,WAC1BC,SAAU,CAAC,SAACC,GAAD,OAAWC,EAAAA,EAAAA,IAAwBD,EAAOtC,EAAOa,GAAIX,EAArD,EAA4D,CAAEsC,KAAMC,EAAAA,EAAeC,WAC9FC,YAAY,EACZC,aAAcC,EAAAA,EACdC,aAAc9C,EAAO4B,UAOlC,C,6DCtEYrB,EAAiB,WAC5B,IAAMD,GAAWyC,EAAAA,EAAAA,eAEjB,OAAO,SAACC,EAAIC,GACV,OAAO3C,GAAS4C,EAAAA,EAAAA,GAAgBF,EAAIG,EAAAA,GAAeF,EACpD,CACF,C","sources":["webpack:///./src/components/SourceDetail/SourceRenameModal.js","webpack:///./src/hooks/useAppNavigate.js"],"sourcesContent":["import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { Modal } from '@patternfly/react-core';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\n\nimport { useSource } from '../../hooks/useSource';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport { replaceRouteId, routes } from '../../Routing';\nimport { renameSource } from '../../redux/sources/actions';\nimport { asyncValidatorDebounced } from '../../components/addSourceWizard/SourceAddSchema';\nimport validated from '../../utilities/resolveProps/validated';\nimport { useAppNavigate } from '../../hooks/useAppNavigate';\n\nconst SourceRenameModal = () => {\n  const source = useSource();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const navigate = useAppNavigate();\n\n  const returnToSource = () => navigate(replaceRouteId(routes.sourcesDetail.path, source.id));\n\n  return (\n    <Modal\n      title={intl.formatMessage({ id: 'sources.renameTitle', defaultMessage: 'Rename source' })}\n      description={intl.formatMessage({ id: 'sources.renameDescription', defaultMessage: 'Enter a new name for your source.' })}\n      onClose={returnToSource}\n      isOpen\n      variant=\"medium\"\n      className=\"sources\"\n    >\n      <SourcesFormRenderer\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            disableSubmit={['pristine', 'validating', 'invalid']}\n            submitLabel={intl.formatMessage({ id: 'sources.save', defaultMessage: 'Save' })}\n          />\n        )}\n        onSubmit={({ name }) => {\n          returnToSource();\n\n          return dispatch(\n            renameSource(\n              source.id,\n              name,\n              intl.formatMessage({ id: 'sources.renameError', defaultMessage: 'Renaming was unsuccessful' })\n            )\n          );\n        }}\n        onCancel={returnToSource}\n        schema={{\n          fields: [\n            {\n              name: 'name',\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              component: componentTypes.TEXT_FIELD,\n              validate: [(value) => asyncValidatorDebounced(value, source.id, intl), { type: validatorTypes.REQUIRED }],\n              isRequired: true,\n              resolveProps: validated,\n              initialValue: source.name,\n            },\n          ],\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport default SourceRenameModal;\n","import { useNavigate } from 'react-router-dom';\nimport { linkBasename, mergeToBasename } from '../utilities/utils';\n\nexport const useAppNavigate = () => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n"],"names":["source","useSource","intl","useIntl","dispatch","useDispatch","navigate","useAppNavigate","returnToSource","replaceRouteId","routes","sourcesDetail","path","id","Modal","title","formatMessage","defaultMessage","description","onClose","isOpen","variant","className","FormTemplate","props","disableSubmit","submitLabel","onSubmit","name","renameSource","onCancel","schema","fields","label","component","componentTypes","TEXT_FIELD","validate","value","asyncValidatorDebounced","type","validatorTypes","REQUIRED","isRequired","resolveProps","validated","initialValue","useNavigate","to","options","mergeToBasename","linkBasename"],"sourceRoot":""}