{"version":3,"file":"js/7652.70c981f4ca836477bd74.js","mappings":"0IAMWA,EAMAC,E,6EALX,SAAWD,GACPA,EAAqC,WAAI,aACzCA,EAAmC,SAAI,WACvCA,EAA+B,KAAI,MACtC,CAJD,CAIGA,IAA6BA,EAA2B,CAAC,IAE5D,SAAWC,GACPA,EAAiC,QAAI,UACrCA,EAA+B,MAAI,OACtC,CAHD,CAGGA,IAA4BA,EAA0B,CAAC,IAC1D,MAAMC,UAAqB,YACvB,WAAAC,CAAYC,GACRC,MAAMD,GACNE,KAAKC,SAAW,cAChBD,KAAKE,cAAiBC,IAClB,MAAMC,EAASD,EAAME,cACrBD,EAAOE,MAAMC,YAAY,SAAU,WACnC,MAAMC,EAAWC,OAAOC,iBAAiBP,GAEnCQ,EAASC,SAASJ,EAASK,iBAAiB,qBAC9CD,SAASJ,EAASK,iBAAiB,gBACnCV,EAAMW,aACNF,SAASJ,EAASK,iBAAiB,mBACnCD,SAASJ,EAASK,iBAAiB,wBACvCT,EAAOE,MAAMC,YAAY,SAAU,GAAGI,MAAW,EAErDX,KAAKe,aAAgBC,IAEjB,MAAMb,EAAQa,EAAMC,cAChBjB,KAAKF,MAAMoB,YAAc,MACzBlB,KAAKE,cAAcC,GAEnBH,KAAKF,MAAMqB,UACXnB,KAAKF,MAAMqB,SAASH,EAAOb,EAAMiB,MACrC,EAECtB,EAAMuB,IAAOvB,EAAM,eAEpBwB,QAAQC,MAAM,yEAEtB,CACA,iBAAAC,GACI,MAAMvB,EAAWD,KAAKF,MAAM2B,UAAYzB,KAAKC,SAC7C,GAAID,KAAKF,MAAMoB,YAAc,KAAW,CACpC,MAAMf,EAAQF,EAASyB,QACvB1B,KAAKE,cAAcC,EACvB,CACJ,CACA,MAAAwB,GACI,MAAMC,EAAK5B,KAAKF,OAAO,UAAE+B,EAAS,MAAET,EAAK,UAAEU,EAAS,WAAEC,EAAU,WAAEC,EAAU,gBAAEC,EAAe,kBAAEC,EAAiB,SAAET,EAAQ,SAAEU,EAAQ,WAEpIjB,EAAU,SAAEC,EAAQ,OAEpBiB,EAAM,QAAEC,GAAYT,EAAI9B,GAAQ,IAAAwC,QAAOV,EAAI,CAAC,YAAa,QAAS,YAAa,aAAc,aAAc,kBAAmB,oBAAqB,WAAY,WAAY,aAAc,WAAY,SAAU,YACzMW,EAAc,UAAS,QAAWL,KAClCM,EAAgB,CAAC,UAAW,QAAS,WAAWC,SAASX,GAC/D,OAAQ,gBAAoB,OAAQ,CAAED,WAAW,OAAI,IAAOa,YAAaT,GAAmB,IAAOU,UAAUC,SAA8B,UAApBX,GAA+B,IAAOU,UAAUE,MAAOX,GAAqB,IAAOS,UAAUJ,GAAcP,GAAc,IAAOW,UAAUR,SAAUK,GAAiB,IAAOG,UAAUb,GAAYD,IACrT,gBAAoB,WAAYiB,OAAOC,OAAO,CAAE5B,SAAUnB,KAAKe,aAAcsB,QAASA,EAASD,OAAQA,GAA8C,iBAA5BpC,KAAKF,MAAMkD,cAA6B,CAAE5B,SAAU,CAAE,eAAgBU,IAAc,KAAiBP,MAAO0B,SAAUlB,EAAYI,SAAUH,GAAcG,EAAUe,WAAYjB,EAAiBkB,IAAK1B,GAAYzB,KAAKC,UAAYH,IAC5V0C,GAAkB,gBAAoB,OAAQ,CAAEX,WAAW,OAAI,IAAOuB,uBAClE,gBAAoB,IAAiB,CAAEC,OAAQvB,KAC3D,EAEJlC,EAAa0D,YAAc,WAC3B1D,EAAa2D,aAAe,CACxB9B,SAAU,cACVI,UAAW,GACXE,YAAY,EACZC,YAAY,EACZF,UAAW,UACXI,kBAAmB,OACnB,aAAc,MAEX,MAAMsB,EAAW,cAAiB,CAAC1D,EAAOqD,IAAS,gBAAoBvD,EAAckD,OAAOC,OAAO,CAAC,EAAGjD,EAAO,CAAE2B,SAAU0B,OACjIK,EAASF,YAAc,U","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/TextArea/TextArea.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\nimport { FormControlIcon } from '../FormControl/FormControlIcon';\nexport var TextAreResizeOrientation;\n(function (TextAreResizeOrientation) {\n    TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n    TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n    TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\nexport var TextAreaReadOnlyVariant;\n(function (TextAreaReadOnlyVariant) {\n    TextAreaReadOnlyVariant[\"default\"] = \"default\";\n    TextAreaReadOnlyVariant[\"plain\"] = \"plain\";\n})(TextAreaReadOnlyVariant || (TextAreaReadOnlyVariant = {}));\nclass TextAreaBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputRef = React.createRef();\n        this.setAutoHeight = (field) => {\n            const parent = field.parentElement;\n            parent.style.setProperty('height', 'inherit');\n            const computed = window.getComputedStyle(field);\n            // Calculate the height\n            const height = parseInt(computed.getPropertyValue('border-top-width')) +\n                parseInt(computed.getPropertyValue('padding-top')) +\n                field.scrollHeight +\n                parseInt(computed.getPropertyValue('padding-bottom')) +\n                parseInt(computed.getPropertyValue('border-bottom-width'));\n            parent.style.setProperty('height', `${height}px`);\n        };\n        this.handleChange = (event) => {\n            // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n            const field = event.currentTarget;\n            if (this.props.autoResize && canUseDOM) {\n                this.setAutoHeight(field);\n            }\n            if (this.props.onChange) {\n                this.props.onChange(event, field.value);\n            }\n        };\n        if (!props.id && !props['aria-label']) {\n            // eslint-disable-next-line no-console\n            console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n        }\n    }\n    componentDidMount() {\n        const inputRef = this.props.innerRef || this.inputRef;\n        if (this.props.autoResize && canUseDOM) {\n            const field = inputRef.current;\n            this.setAutoHeight(field);\n        }\n    }\n    render() {\n        const _a = this.props, { className, value, validated, isRequired, isDisabled, readOnlyVariant, resizeOrientation, innerRef, disabled, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        autoResize, onChange, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        onBlur, onFocus } = _a, props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"readOnlyVariant\", \"resizeOrientation\", \"innerRef\", \"disabled\", \"autoResize\", \"onChange\", \"onBlur\", \"onFocus\"]);\n        const orientation = `resize${capitalize(resizeOrientation)}`;\n        const hasStatusIcon = ['success', 'error', 'warning'].includes(validated);\n        return (React.createElement(\"span\", { className: css(styles.formControl, readOnlyVariant && styles.modifiers.readonly, readOnlyVariant === 'plain' && styles.modifiers.plain, resizeOrientation && styles.modifiers[orientation], isDisabled && styles.modifiers.disabled, hasStatusIcon && styles.modifiers[validated], className) },\n            React.createElement(\"textarea\", Object.assign({ onChange: this.handleChange, onFocus: onFocus, onBlur: onBlur }, (typeof this.props.defaultValue !== 'string' && { value }), { \"aria-invalid\": validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled || disabled, readOnly: !!readOnlyVariant, ref: innerRef || this.inputRef }, props)),\n            hasStatusIcon && (React.createElement(\"span\", { className: css(styles.formControlUtilities) },\n                React.createElement(FormControlIcon, { status: validated })))));\n    }\n}\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n    innerRef: React.createRef(),\n    className: '',\n    isRequired: false,\n    isDisabled: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null\n};\nexport const TextArea = React.forwardRef((props, ref) => (React.createElement(TextAreaBase, Object.assign({}, props, { innerRef: ref }))));\nTextArea.displayName = 'TextArea';\n//# sourceMappingURL=TextArea.js.map"],"names":["TextAreResizeOrientation","TextAreaReadOnlyVariant","TextAreaBase","constructor","props","super","this","inputRef","setAutoHeight","field","parent","parentElement","style","setProperty","computed","window","getComputedStyle","height","parseInt","getPropertyValue","scrollHeight","handleChange","event","currentTarget","autoResize","onChange","value","id","console","error","componentDidMount","innerRef","current","render","_a","className","validated","isRequired","isDisabled","readOnlyVariant","resizeOrientation","disabled","onBlur","onFocus","__rest","orientation","hasStatusIcon","includes","formControl","modifiers","readonly","plain","Object","assign","defaultValue","required","readOnly","ref","formControlUtilities","status","displayName","defaultProps","TextArea"],"sourceRoot":""}