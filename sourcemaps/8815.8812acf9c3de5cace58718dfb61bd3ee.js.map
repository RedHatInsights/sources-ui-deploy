{"version":3,"file":"js/8815.1652991231288.e1101976d686f1fc6bbd.js","mappings":"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","sources":["webpack:///./src/Routes.js","webpack:///./src/frontend-components-copies/interceptors.js","webpack:///./src/api/constants.js","webpack:///./src/api/entities.js","webpack:///./src/components/SourcesTable/loaders.js","webpack:///./src/utilities/constants.js","webpack:///./src/views/formatters.js","webpack:///./src/utilities/isSourceAzureRHEL.js","webpack:///./src/views/sourcesViewDefinition.js"],"sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { AppPlaceholder } from './components/SourcesTable/loaders';\n\nconst SourcesPage = lazy(() => import(/* webpackChunkName: \"sourcesPage\" */ './pages/Sources'));\nconst SourceDetail = lazy(() => import(/* webpackChunkName: \"sourceDetail\" */ './pages/Detail'));\n\nexport const routes = {\n  sources: {\n    path: '/sources',\n  },\n  sourcesNew: {\n    path: '/sources/new',\n    writeAccess: true,\n  },\n  sourcesRemove: {\n    path: '/sources/remove/:id',\n    redirectNoId: true,\n    writeAccess: true,\n  },\n  sourcesDetail: {\n    path: '/sources/detail/:id',\n    redirectNoId: true,\n  },\n  sourcesDetailRename: {\n    path: '/sources/detail/:id/rename',\n    redirectNoId: true,\n    writeAccess: true,\n    noPaused: true,\n  },\n  sourcesDetailRemove: {\n    path: '/sources/detail/:id/remove',\n    redirectNoId: true,\n    writeAccess: true,\n  },\n  sourcesDetailAddApp: {\n    path: '/sources/detail/:id/add_app/:app_type_id',\n    redirectNoId: true,\n    writeAccess: true,\n    noPaused: true,\n  },\n  sourcesDetailRemoveApp: {\n    path: '/sources/detail/:id/remove_app/:app_id',\n    redirectNoId: true,\n    writeAccess: true,\n    noPaused: true,\n  },\n  sourcesDetailEditCredentials: {\n    path: '/sources/detail/:id/edit_credentials',\n    redirectNoId: true,\n    writeAccess: true,\n  },\n};\n\nexport const replaceRouteId = (path, id) => path.replace(':id', id);\n\nconst Routes = () => (\n  <Suspense fallback={<AppPlaceholder />}>\n    <Switch>\n      <Route path={routes.sourcesDetail.path} component={SourceDetail} />\n      <Route component={SourcesPage} />\n    </Switch>\n  </Suspense>\n);\n\nexport default Routes;\n","import axios from 'axios';\nimport { configureScope, captureException } from '@sentry/minimal';\n\nexport async function authInterceptor(config) {\n  await window.insights.chrome.auth.getUser();\n  return config;\n}\n\nexport function responseDataInterceptor(response) {\n  if (response.data) {\n    return response.data;\n  }\n\n  return response;\n}\n\nexport function interceptor401(error) {\n  if (error.response && error.response.status === 401) {\n    window.insights.chrome.auth.logout();\n    return false;\n  }\n\n  throw error;\n}\n\nexport function interceptor500(error) {\n  if (error.response && error.response.status >= 500 && error.response.status < 600) {\n    configureScope((scope) => {\n      scope.setTag('request_id', error.response.req_id);\n    });\n  }\n\n  throw error;\n}\n\nexport function errorInterceptor(err) {\n  if (!axios.isCancel(err)) {\n    try {\n      const errObject = { ...err };\n      if (errObject.response && errObject.response.data) {\n        throw errObject.response.data;\n      }\n\n      throw err;\n    } catch (customError) {\n      const sentryId = captureException(customError);\n      customError.sentryId = sentryId;\n      throw customError;\n    }\n  }\n}\n","export const SOURCES_API_BASE_V3 = `${process.env.BASE_PATH || '/api'}/sources/v3.1`;\n","import axios from 'axios';\n\nimport * as interceptors from '../frontend-components-copies/interceptors';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\nimport { AVAILABLE, PARTIALLY_UNAVAILABLE, UNAVAILABLE } from '../views/formatters';\n\nimport { SOURCES_API_BASE_V3 } from './constants';\n\nexport const graphQlErrorInterceptor = (response) => {\n  if (response.errors && response.errors.length > 0) {\n    return Promise.reject({ detail: response.errors[0].message });\n  }\n\n  return response;\n};\n\nexport const interceptor403 = (error) => {\n  if (error.errors && error.errors[0].status === 403) {\n    return Promise.reject({\n      detail: error.errors[0].detail,\n      title: 'Forbidden access',\n    });\n  }\n\n  throw error;\n};\n\nconst axiosInstanceInsights = axios.create();\naxiosInstanceInsights.interceptors.request.use(interceptors.authInterceptor);\naxiosInstanceInsights.interceptors.response.use(interceptors.responseDataInterceptor);\naxiosInstanceInsights.interceptors.response.use(null, interceptors.interceptor401);\naxiosInstanceInsights.interceptors.response.use(null, interceptors.interceptor500);\naxiosInstanceInsights.interceptors.response.use(null, interceptors.errorInterceptor);\naxiosInstanceInsights.interceptors.response.use(graphQlErrorInterceptor);\naxiosInstanceInsights.interceptors.response.use(null, interceptor403);\n\nexport { axiosInstanceInsights as axiosInstance };\n\nexport const getSourcesApi = () => ({\n  checkAvailabilitySource: (id) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/sources/${id}/check_availability`),\n  updateSource: (id, data) => axiosInstanceInsights.patch(`${SOURCES_API_BASE_V3}/sources/${id}`, data),\n  updateEndpoint: (id, data) => axiosInstanceInsights.patch(`${SOURCES_API_BASE_V3}/endpoints/${id}`, data),\n  createEndpoint: (data) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/endpoints`, data),\n  updateAuthentication: (id, data) => axiosInstanceInsights.patch(`${SOURCES_API_BASE_V3}/authentications/${id}`, data),\n  createAuthentication: (data) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/authentications`, data),\n  showSource: (id) => axiosInstanceInsights.get(`${SOURCES_API_BASE_V3}/sources/${id}`),\n  listSourceEndpoints: (id) => axiosInstanceInsights.get(`${SOURCES_API_BASE_V3}/sources/${id}/endpoints`),\n  listSourceApplications: (id) => axiosInstanceInsights.get(`${SOURCES_API_BASE_V3}/sources/${id}/applications`),\n  listEndpointAuthentications: (id) => axiosInstanceInsights.get(`${SOURCES_API_BASE_V3}/endpoints/${id}/authentications`),\n  deleteSource: (id) => axiosInstanceInsights.delete(`${SOURCES_API_BASE_V3}/sources/${id}`),\n  createApplication: (data) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/applications`, data),\n  postGraphQL: (data) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/graphql`, data),\n  listSourceTypes: () => axiosInstanceInsights.get(`${SOURCES_API_BASE_V3}/source_types`),\n  doLoadAppTypes: () => axiosInstanceInsights.get(`${SOURCES_API_BASE_V3}/application_types`),\n  deleteApplication: (id) => axiosInstanceInsights.delete(`${SOURCES_API_BASE_V3}/applications/${id}`),\n  createAuthApp: (data) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/application_authentications`, data),\n  deleteAuthentication: (id) => axiosInstanceInsights.delete(`${SOURCES_API_BASE_V3}/authentications/${id}`),\n  showAuthentication: (id) => axiosInstanceInsights.get(`${SOURCES_API_BASE_V3}/authentications/${id}`),\n  updateApplication: (id, data) => axiosInstanceInsights.patch(`${SOURCES_API_BASE_V3}/applications/${id}`, data),\n  showApplication: (id) => axiosInstanceInsights.get(`${SOURCES_API_BASE_V3}/applications/${id}`),\n  listSourceAuthentications: (id) => axiosInstanceInsights.get(`${SOURCES_API_BASE_V3}/sources/${id}/authentications`),\n  createSource: (data) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/sources`, data),\n  getEndpoint: (id) => axiosInstanceInsights.get(`${SOURCES_API_BASE_V3}/endpoints/${id}`),\n  getGoogleAccount: () => axiosInstanceInsights.get(`${SOURCES_API_BASE_V3}/app_meta_data?filter[name]=gcp_service_account`),\n  bulkCreate: (data) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/bulk_create`, data),\n  pauseApplication: (id) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/applications/${id}/pause`),\n  unpauseApplication: (id) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/applications/${id}/unpause`),\n  pauseSource: (id) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/sources/${id}/pause`),\n  unpauseSource: (id) => axiosInstanceInsights.post(`${SOURCES_API_BASE_V3}/sources/${id}/unpause`),\n});\n\nexport const doLoadAppTypes = () => getSourcesApi().doLoadAppTypes();\n\nexport const doRemoveSource = (sourceId) =>\n  getSourcesApi()\n    .deleteSource(sourceId)\n    .catch((error) => {\n      throw { error: { detail: error.errors[0].detail } };\n    });\n\nexport const pagination = (pageSize, pageNumber) => `limit:${pageSize}, offset:${(pageNumber - 1) * pageSize}`;\n\nexport const sorting = (sortBy, sortDirection) => {\n  if (!sortBy) {\n    return '';\n  }\n\n  if (sortBy === 'source_type_id') {\n    return `sort_by: { name: \"source_type.product_name\", direction: ${sortDirection} }`;\n  }\n\n  if (sortBy === 'applications') {\n    return `sort_by: { name: \"applications\", direction: ${sortDirection} }`;\n  }\n\n  return `sort_by: { name: \"${sortBy}\", direction: ${sortDirection} }`;\n};\n\nexport const filtering = (filterValue = {}, category) => {\n  let filterQueries = [];\n\n  if (filterValue.name) {\n    filterQueries.push(`{ name: \"name\", operation: \"contains_i\", value: \"${filterValue.name}\" }`);\n  }\n\n  if (filterValue.source_type_id?.length > 0) {\n    filterQueries.push(\n      `{ name: \"source_type_id\", operation: \"eq\", value: [${filterValue.source_type_id.map((x) => `\"${x}\"`).join(', ')}] }`\n    );\n  }\n\n  if (filterValue.applications?.length > 0) {\n    filterQueries.push(\n      `{ name: \"applications.application_type_id\", operation: \"eq\", value: [${filterValue.applications\n        .map((x) => `\"${x}\"`)\n        .join(', ')}] }`\n    );\n  }\n\n  if (category === CLOUD_VENDOR) {\n    filterQueries.push(`{ name: \"source_type.category\", operation: \"eq\", value: \"Cloud\" }`);\n  }\n\n  if (category === REDHAT_VENDOR) {\n    filterQueries.push(`{ name: \"source_type.category\", operation: \"eq\", value: \"Red Hat\" }`);\n  }\n\n  const status = filterValue.availability_status?.[0];\n  if (status) {\n    if (status === AVAILABLE) {\n      filterQueries.push(`{ name: \"availability_status\", operation: \"eq\", value: \"${AVAILABLE}\" }`);\n    } else if (status === UNAVAILABLE) {\n      filterQueries.push(\n        `{ name: \"availability_status\", operation: \"eq\", value: [\"${PARTIALLY_UNAVAILABLE}\", \"${UNAVAILABLE}\"] }`\n      );\n    }\n  }\n\n  if (filterQueries.length > 0) {\n    return `filter: [ ${filterQueries.join(', ')} ]`;\n  }\n\n  return '';\n};\n\nexport const graphQlAttributes = `\n    id,\n    created_at,\n    source_type_id,\n    name,\n    imported,\n    availability_status,\n    source_ref,\n    last_checked_at,\n    updated_at,\n    last_available_at,\n    app_creation_workflow,\n    paused_at,\n    authentications { authtype, username, availability_status_error, availability_status }\n    applications { application_type_id, id, availability_status_error, availability_status, paused_at, authentications { id, resource_type } },\n    endpoints { id, scheme, host, port, path, receptor_node, role, certificate_authority, verify_ssl, availability_status_error, availability_status, authentications { authtype, availability_status, availability_status_error } }\n`;\n\nexport const doLoadEntities = ({ pageSize, pageNumber, sortBy, sortDirection, filterValue, activeCategory }) => {\n  const filter = filtering(filterValue, activeCategory);\n\n  const filterSection = [pagination(pageSize, pageNumber), sorting(sortBy, sortDirection), filter].join(',');\n\n  return getSourcesApi()\n    .postGraphQL({\n      query: `{ sources(${filterSection})\n      { ${graphQlAttributes} },\n     meta{count}\n    }`,\n    })\n    .then(({ data }) => data);\n};\n\nexport const doCreateApplication = (data) => getSourcesApi().createApplication(data);\n\nexport const doDeleteApplication = (appId, errorMessage) =>\n  getSourcesApi()\n    .deleteApplication(appId)\n    .catch(({ errors: [{ detail }] }) => {\n      throw { error: { title: errorMessage, detail } };\n    });\n\nexport const restFilterGenerator = (filterValue = {}, category) => {\n  let filterQueries = [];\n\n  if (filterValue.name) {\n    filterQueries.push(`filter[name][contains_i]=${filterValue.name}`);\n  }\n\n  if (filterValue.source_type_id?.length > 0) {\n    filterValue.source_type_id.map((id) => filterQueries.push(`filter[source_type_id][]=${id}`));\n  }\n\n  if (filterValue.applications?.length > 0) {\n    filterValue.applications.map((id) => filterQueries.push(`filter[applications][application_type_id][eq][]=${id}`));\n  }\n\n  if (category === CLOUD_VENDOR) {\n    filterQueries.push(`filter[source_type][category]=Cloud`);\n  }\n\n  if (category === REDHAT_VENDOR) {\n    filterQueries.push('filter[source_type][category]=Red Hat');\n  }\n\n  const status = filterValue.availability_status?.[0];\n  if (status) {\n    if (status === AVAILABLE) {\n      filterQueries.push(`filter[availability_status]=${AVAILABLE}`);\n    } else if (status === UNAVAILABLE) {\n      filterQueries.push(`filter[availability_status][]=${PARTIALLY_UNAVAILABLE}`);\n      filterQueries.push(`filter[availability_status][]=${UNAVAILABLE}`);\n    }\n  }\n\n  if (filterQueries.length > 0) {\n    return filterQueries.join('&');\n  }\n\n  return '';\n};\n\nexport const doLoadSource = (id) =>\n  getSourcesApi()\n    .postGraphQL({\n      query: `{ sources(filter: { name: \"id\", operation: \"eq\", value: \"${id}\" })\n            { ${graphQlAttributes} }\n        }`,\n    })\n    .then(({ data }) => data);\n\nexport const doLoadApplicationsForEdit = (id) =>\n  getSourcesApi()\n    .postGraphQL({\n      query: `{ sources(filter: { name: \"id\", operation: \"eq\", value: \"${id}\" })\n          { applications {\n              application_type_id,\n              id,\n              availability_status_error,\n              availability_status,\n              paused_at,\n              extra,\n              authentications {\n                  id\n              }\n          } }\n      }`,\n    })\n    .then(({ data }) => data);\n\nexport const doDeleteAuthentication = (id) => getSourcesApi().deleteAuthentication(id);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { RowWrapper } from '@patternfly/react-table';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\n\nimport { Spinner, Bullseye, Grid, GridItem, Card, CardBody } from '@patternfly/react-core';\n\nimport { COLUMN_COUNT } from '../../views/sourcesViewDefinition';\n\nimport './loaders.scss';\nimport { useIntl } from 'react-intl';\n\nexport const Loader = ({ width = '100%', height = '100%', className = '' }) => (\n  <span className={`src-c-loader ${className}`} style={{ width, height }} role=\"progressbar\" />\n);\n\nLoader.propTypes = {\n  className: PropTypes.string,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport const AppPlaceholder = () => {\n  const intl = useIntl();\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle\n          title={intl.formatMessage({\n            id: 'sources.sources',\n            defaultMessage: 'Sources',\n          })}\n        />\n      </PageHeader>\n      <Section type=\"content\">\n        <div className=\"src-c-fake_content pf-u-p-lg\">\n          <Loader />\n        </div>\n      </Section>\n    </React.Fragment>\n  );\n};\n\nexport const PaginationLoader = () => <Loader className=\"top-pagination\" height={30} width={200} />;\n\nexport const PlaceHolderTable = () => (\n  <Bullseye className=\"src-c-bullseye__placeholder-loader\" data-testid=\"placeholder-table\">\n    <Spinner size=\"xl\" />\n  </Bullseye>\n);\n\nexport const RowWrapperLoader = ({ row: { isDeleting, ...row }, ...initialProps }) =>\n  isDeleting ? (\n    <tr>\n      <td colSpan={COLUMN_COUNT} className=\"pf-u-p-md\" data-testid=\"removing-row\">\n        <Loader height={100} />\n      </td>\n    </tr>\n  ) : (\n    <RowWrapper {...initialProps} row={row} className=\"src-c-row-vertical-centered\" data-testid=\"row\" />\n  );\n\nRowWrapperLoader.propTypes = {\n  row: PropTypes.object.isRequired,\n};\n\nexport const CardLoader = (props) => (\n  <Card className=\"pf-u-m-md\">\n    <CardBody>\n      <Loader {...props} />\n    </CardBody>\n  </Card>\n);\n\nexport const DetailLoader = () => (\n  <div className=\"src-c-detail-page\">\n    <PageHeader>\n      <Loader height={96} />\n    </PageHeader>\n    <Grid>\n      <GridItem md=\"6\">\n        <CardLoader height={218} />\n      </GridItem>\n      <GridItem md=\"6\">\n        <CardLoader height={218} />\n      </GridItem>\n      <GridItem md=\"12\">\n        <CardLoader height={324} />\n      </GridItem>\n    </Grid>\n  </div>\n);\n","export const SATELLITE_NAME = 'satellite';\nexport const ANSIBLE_TOWER_NAME = 'ansible-tower';\nexport const AZURE_NAME = 'azure';\nexport const GOOGLE_NAME = 'google';\nexport const REDHAT_VENDOR = 'Red Hat';\nexport const CLOUD_VENDOR = 'Cloud';\nexport const TOPOLOGY_INV_NAME = '/insights/platform/topological-inventory';\nexport const COST_MANAGEMENT_APP_NAME = '/insights/platform/cost-management';\nexport const CLOUD_METER_APP_NAME = '/insights/platform/cloud-meter';\nexport const CATALOG_APP = '/insights/platform/catalog';\nexport const OPENSHIFT_NAME = 'openshift';\n\nexport const getActiveCategory = () => new URLSearchParams(window.location.search).get('activeCategory');\n\nexport const timeoutedApps = (appTypes) => [\n  appTypes.find(({ name }) => name === CLOUD_METER_APP_NAME)?.id,\n  appTypes.find(({ name }) => name === COST_MANAGEMENT_APP_NAME)?.id,\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Text, TextVariants, TextContent, Badge, Popover, Tooltip, Label, LabelGroup, Button } from '@patternfly/react-core';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\nimport PauseIcon from '@patternfly/react-icons/dist/esm/icons/pause-icon';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Link } from 'react-router-dom';\nimport { replaceRouteId, routes } from '../Routes';\nimport isSourceAzureRHEL from '../utilities/isSourceAzureRHEL';\n\nexport const defaultPort = (scheme) =>\n  ({\n    http: '80',\n    https: '443',\n  }[scheme]);\n\nexport const importsTexts = (value) =>\n  ({\n    cfme: (\n      <FormattedMessage\n        id=\"sources.cloudformImportTooltip\"\n        defaultMessage=\"This source can be managed from your connected CloudForms application.\"\n      />\n    ),\n  }[value.toLowerCase()]);\n\nexport const schemaToPort = (schema, port) => (port && String(port) !== defaultPort(schema) ? `:${port}` : '');\n\nexport const endpointToUrl = (endpoint) => {\n  const onlyTrueEndpointValues = Object.keys(endpoint).reduce((acc, curr) => ({ ...acc, [curr]: endpoint[curr] || '' }), {});\n\n  const { scheme = '', host = '', path = '', port = '' } = onlyTrueEndpointValues;\n\n  const url = `${scheme}://${host}${schemaToPort(scheme, port)}${path}`;\n\n  if (url === '://') {\n    return;\n  }\n\n  return url;\n};\n\nexport const sourceIsOpenShift = (source, sourceTypes) => {\n  const type = sourceTypes.find((type) => type.id === source.source_type_id);\n  return type && type.name === 'openshift';\n};\n\nexport const formatURL = (source) => source.endpoints && source.endpoints[0] && endpointToUrl(source.endpoints[0]);\n\nexport const sourceTypeFormatter = (sourceType, _item, { sourceTypes }) => {\n  const type = sourceTypes.find((type) => type.id === sourceType);\n  return (type && type.product_name) || sourceType || '';\n};\n\nexport const dateFormatter = (str) => (\n  <span className=\"src-c-help-cursor\">\n    <DateFormat type=\"relative\" date={str} />\n  </span>\n);\n\nexport const nameFormatter = (name, source, { sourceTypes }) => (\n  <TextContent>\n    <Link to={replaceRouteId(routes.sourcesDetail.path, source.id)}>{name}</Link>\n    <br key={`${source.id}-br`} />\n    <Text key={source.id} component={TextVariants.small}>\n      {sourceIsOpenShift(source, sourceTypes) && formatURL(source)}\n    </Text>\n  </TextContent>\n);\n\nexport const importedFormatter = (value) => {\n  if (!value) {\n    return null;\n  }\n\n  const text = importsTexts(value);\n\n  if (text) {\n    return (\n      <Tooltip content={text}>\n        <Badge isRead className=\"src-m-help-cursor\">\n          <FormattedMessage id=\"sources.imported\" defaultMessage=\"imported\" />\n        </Badge>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Badge isRead>\n      <FormattedMessage id=\"sources.imported\" defaultMessage=\"imported\" />\n    </Badge>\n  );\n};\n\nexport const AVAILABLE = 'available';\nexport const UNAVAILABLE = 'unavailable';\nexport const UNKNOWN = 'unknown';\nexport const PARTIALLY_UNAVAILABLE = 'partially_available';\nexport const IN_PROGRESS = 'in_progress';\nexport const PAUSED = 'paused_at';\nexport const RHELAZURE = 'rhel_azure';\n\nexport const getStatusColor = (status) =>\n  ({\n    [UNAVAILABLE]: 'red',\n    [AVAILABLE]: 'green',\n    [PARTIALLY_UNAVAILABLE]: 'orange',\n    [PAUSED]: 'cyan',\n  }[status] || 'grey');\n\nexport const getStatusText = (status) =>\n  ({\n    [UNAVAILABLE]: <FormattedMessage id=\"sources.unavailable\" defaultMessage=\"Unavailable\" />,\n    [AVAILABLE]: <FormattedMessage id=\"sources.available\" defaultMessage=\"Available\" />,\n    [PARTIALLY_UNAVAILABLE]: <FormattedMessage id=\"sources.partiallyAvailable\" defaultMessage=\"Partially available\" />,\n    [IN_PROGRESS]: <FormattedMessage id=\"sources.inProgress\" defaultMessage=\"In progress\" />,\n    [PAUSED]: <FormattedMessage id=\"sources.paused\" defaultMessage=\"Paused\" />,\n  }[status] || <FormattedMessage id=\"sources.unknown\" defaultMessage=\"Unknown\" />);\n\nexport const UnknownError = () => <FormattedMessage id=\"sources.unknownError\" defaultMessage=\"unavailable\" />;\n\nexport const formatAvailibilityErrors = (appTypes, errors) => (\n  <React.Fragment>\n    {errors.source && (\n      <React.Fragment>\n        <FormattedMessage\n          id=\"sources.sourceError\"\n          defaultMessage=\"Source's status: { error }\"\n          values={{ error: errors.source }}\n        />\n        <br />\n      </React.Fragment>\n    )}\n    {errors.endpoint && (\n      <React.Fragment>\n        <FormattedMessage\n          id=\"sources.endpointError\"\n          defaultMessage=\"Endpoint error: { error }\"\n          values={{ error: errors.endpoint }}\n        />\n        <br />\n      </React.Fragment>\n    )}\n    {errors.authentications && (\n      <FormattedMessage\n        id=\"sources.authErrors\"\n        defaultMessage=\"Authentication {count, plural, one {status} other {statuses}} : { errors }\"\n        values={{\n          count: errors.authentications.length,\n          errors: errors.authentications.map(({ error, type }) => (\n            <React.Fragment key={type}>\n              <FormattedMessage id=\"sources.errorAuthTemplate\" defaultMessage=\"{ type }: { error }\" values={{ error, type }} />\n              <br />\n            </React.Fragment>\n          )),\n        }}\n      />\n    )}\n    {errors.applications && (\n      <FormattedMessage\n        id=\"sources.appErrors\"\n        defaultMessage=\"Application {count, plural, one {status} other {statutes}}: { errors }\"\n        values={{\n          count: errors.applications.length,\n          errors: errors.applications.map(({ error, id }) => (\n            <React.Fragment key={id}>\n              <FormattedMessage\n                id=\"sources.errorAppTemplate\"\n                defaultMessage=\"{ app }: { error }\"\n                values={{\n                  error,\n                  app: appTypes.find((app) => app.id === id)?.display_name || id,\n                }}\n              />\n              <br />\n            </React.Fragment>\n          )),\n        }}\n      />\n    )}\n  </React.Fragment>\n);\n\nexport const getStatusTooltipText = (status, appTypes, errors = {}) =>\n  ({\n    [UNAVAILABLE]: (\n      <React.Fragment>\n        <FormattedMessage\n          id=\"sources.appStatusPartiallyOK\"\n          defaultMessage=\"We found {count, plural, one {this error} other {these errors}}.\"\n          values={{ count: Object.keys(errors).length }}\n        />\n        <hr />\n        {formatAvailibilityErrors(appTypes, errors)}\n      </React.Fragment>\n    ),\n    [AVAILABLE]: <FormattedMessage id=\"sources.appStatusOK\" defaultMessage=\"Everything works fine.\" />,\n    [PARTIALLY_UNAVAILABLE]: (\n      <React.Fragment>\n        <FormattedMessage\n          id=\"sources.appStatusPartiallyOK\"\n          defaultMessage=\"We found {count, plural, one {this error} other {these errors}}.\"\n          values={{ count: Object.keys(errors).length }}\n        />\n        <hr />\n        {formatAvailibilityErrors(appTypes, errors)}\n      </React.Fragment>\n    ),\n    [IN_PROGRESS]: (\n      <FormattedMessage\n        id=\"sources.inProgressStatus\"\n        defaultMessage=\"We are still working to validate credentials. Check back for status updates.\"\n      />\n    ),\n    [PAUSED]: (\n      <FormattedMessage\n        id=\"sources.pausedStatus\"\n        defaultMessage=\"Data collection is temporarily disabled. Resume source to reestablish connection.\"\n      />\n    ),\n    [RHELAZURE]: (\n      <FormattedMessage\n        id=\"sources.rhelAzureStatus\"\n        defaultMessage=\"This source cannot currently be monitored in Sources, and does not reflect true status or resources.\"\n      />\n    ),\n  }[status] || <FormattedMessage id=\"sources.appStatusUnknown\" defaultMessage=\"Status has not been verified.\" />);\n\nexport const getAllErrors = ({\n  availability_status,\n  availability_status_error,\n  applications = [],\n  endpoints: [endpoint] = [],\n}) => {\n  if (availability_status === IN_PROGRESS) {\n    return { errors: {}, status: IN_PROGRESS };\n  }\n\n  let errors = {};\n  let statusesCount = 0;\n  let errorsCount = 0;\n\n  if (availability_status === UNAVAILABLE) {\n    errors = {\n      ...errors,\n      source: availability_status_error || <UnknownError />,\n    };\n    statusesCount++;\n    errorsCount++;\n  } else if (availability_status === AVAILABLE) {\n    statusesCount++;\n  }\n\n  applications.map((app) => {\n    if (app.availability_status === UNAVAILABLE) {\n      errors = {\n        ...errors,\n        applications: [\n          ...(errors.applications ? errors.applications : []),\n          {\n            id: app.application_type_id,\n            error: app.availability_status_error || <UnknownError />,\n          },\n        ],\n      };\n      statusesCount++;\n      errorsCount++;\n    } else if (app.availability_status === AVAILABLE) {\n      statusesCount++;\n    }\n  });\n\n  if (endpoint?.availability_status === UNAVAILABLE) {\n    errors = {\n      ...errors,\n      endpoint: endpoint.availability_status_error || <UnknownError />,\n    };\n    statusesCount++;\n    errorsCount++;\n  } else if (endpoint?.availability_status === AVAILABLE) {\n    statusesCount++;\n  }\n\n  if (endpoint?.authentications) {\n    endpoint.authentications.map((auth) => {\n      if (auth.availability_status === UNAVAILABLE) {\n        errors = {\n          ...errors,\n          authentications: [\n            ...(errors.authentications ? errors.authentications : []),\n            {\n              type: auth.authtype,\n              error: auth.availability_status_error || <UnknownError />,\n            },\n          ],\n        };\n        statusesCount++;\n        errorsCount++;\n      } else if (auth.availability_status === AVAILABLE) {\n        statusesCount++;\n      }\n    });\n  }\n\n  return {\n    errors,\n    status:\n      errorsCount === 0\n        ? statusesCount === 0\n          ? UNKNOWN\n          : AVAILABLE\n        : errorsCount === statusesCount\n        ? UNAVAILABLE\n        : PARTIALLY_UNAVAILABLE,\n  };\n};\n\nexport const availabilityFormatter = (_status, source, { appTypes, sourceTypes }) => {\n  const meta = getAllErrors(source);\n  const status = source.paused_at ? PAUSED : isSourceAzureRHEL({ source, sourceTypes, appTypes }) ? RHELAZURE : meta.status;\n\n  return (\n    <span>\n      <Popover\n        showClose={false}\n        aria-label={`${status} popover`}\n        bodyContent={getStatusTooltipText(status, appTypes, meta.errors)}\n      >\n        <Label\n          className=\"src-m-clickable\"\n          color={getStatusColor(status)}\n          {...(source.availability_status === IN_PROGRESS && { icon: <WrenchIcon /> })}\n          {...(source.paused_at && { icon: <PauseIcon /> })}\n        >\n          {getStatusText(status)}\n        </Label>\n      </Popover>\n    </span>\n  );\n};\n\nexport const getStatusTooltipTextApp = (status, error, intl) =>\n  ({\n    [AVAILABLE]: intl.formatMessage({\n      id: 'sources.appStatusOK',\n      defaultMessage: 'Everything works fine.',\n    }),\n    [UNAVAILABLE]: error || intl.formatMessage({ id: 'sources.unknownError', defaultMessage: 'Unknown error' }),\n    [IN_PROGRESS]: (\n      <FormattedMessage\n        id=\"sources.inProgressStatus\"\n        defaultMessage=\"We are still working to validate credentials. Check back for status updates.\"\n      />\n    ),\n  }[status] ||\n  intl.formatMessage({\n    id: 'sources.appStatusUnknown',\n    defaultMessage: 'Status has not been verified.',\n  }));\n\nexport const ApplicationLabel = ({ app, showStatusText, ...props }) => {\n  const intl = useIntl();\n\n  const statusText = getStatusTooltipTextApp(app.availability_status, app.availability_status_error, intl);\n\n  return (\n    <Popover\n      showClose={false}\n      key={app.display_name}\n      aria-label={`${app.display_name} popover`}\n      bodyContent={\n        app.paused_at\n          ? `${statusText} ${intl.formatMessage({\n              id: 'appplication.paused.additionalText',\n              defaultMessage: 'Resume this application to continue data collection.',\n            })}`\n          : statusText\n      }\n      {...(app.paused_at && {\n        headerContent: intl.formatMessage({\n          id: 'application.paused.header',\n          defaultMessage: 'Application paused',\n        }),\n      })}\n    >\n      <Label\n        className=\"src-m-clickable\"\n        color={getStatusColor(app.availability_status)}\n        {...(app.availability_status === IN_PROGRESS && { icon: <WrenchIcon /> })}\n        {...(app.paused_at && { icon: <PauseIcon /> })}\n        {...props}\n      >\n        {showStatusText ? getStatusText(app.availability_status) : app.display_name}\n      </Label>\n    </Popover>\n  );\n};\n\nApplicationLabel.propTypes = {\n  app: PropTypes.shape({\n    display_name: PropTypes.string,\n    availability_status: PropTypes.string,\n    availability_status_error: PropTypes.string,\n    paused_at: PropTypes.string,\n  }),\n  showStatusText: PropTypes.bool,\n};\n\nconst EnhancedLabelGroup = ({ applications, ...props }) => {\n  const intl = useIntl();\n\n  return (\n    <LabelGroup\n      {...props}\n      numLabels={2}\n      collapsedText={intl.formatMessage(\n        { id: 'applications.showMore', defaultMessage: '{remaining} more' },\n        { remaining: '${remaining}' }\n      )}\n    >\n      {applications.map((app, index) => (\n        <ApplicationLabel app={app} key={app.id || index} />\n      ))}\n    </LabelGroup>\n  );\n};\n\nEnhancedLabelGroup.propTypes = {\n  applications: PropTypes.arrayOf(\n    PropTypes.shape({\n      display_name: PropTypes.string,\n      availability_status: PropTypes.string,\n      availability_status_error: PropTypes.string,\n      paused_at: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport const getAppStatus = (app, source, appTypes) => {\n  const application = appTypes.find((type) => type.id === app.application_type_id);\n\n  if (application) {\n    let availability_status = app.availability_status;\n    let availability_status_error = app.availability_status_error;\n\n    if (app.authentications?.[0]?.resource_type === 'Endpoint') {\n      availability_status = source.endpoints?.[0]?.availability_status;\n      availability_status_error = source.endpoints?.[0]?.availability_status_error;\n    }\n\n    return {\n      display_name: application.display_name,\n      paused_at: app.paused_at,\n      availability_status,\n      availability_status_error,\n    };\n  }\n};\n\nexport const applicationFormatter = (apps, item, { appTypes }) => {\n  const applications = apps\n    .map((app) => getAppStatus(app, item, appTypes))\n    .filter(Boolean)\n    .sort((a, b) => a.display_name.localeCompare(b.display_name));\n\n  if (applications.length === 0) {\n    return '--';\n  }\n\n  return <EnhancedLabelGroup numLabels={2} collapsedText applications={applications} />;\n};\n\nexport const configurationModeFormatter = (mode, item, { intl, sourceType }) => {\n  if (mode === 'account_authorization') {\n    const superKeyType = sourceType?.schema.authentication.find(({ is_superkey }) => is_superkey);\n    const superKeyAuth = item?.authentications?.find(({ authtype }) => authtype && authtype === superKeyType.type);\n\n    return (\n      <React.Fragment>\n        {intl.formatMessage({\n          id: 'configurationMode.trust',\n          defaultMessage: 'Account authorization',\n        })}\n        {superKeyAuth?.availability_status === UNAVAILABLE && (\n          <Tooltip\n            position=\"top\"\n            content={\n              superKeyAuth.availability_status_error ||\n              intl.formatMessage({\n                id: 'configurationMode.trustmode.defaultError',\n                defaultMessage: 'Edit credentials required.',\n              })\n            }\n          >\n            <span className=\"pf-u-ml-sm\">\n              <ExclamationCircleIcon fill=\"#C9190B\" />\n            </span>\n          </Tooltip>\n        )}\n        <div className=\"pf-u-mt-sm\">\n          <Link to={replaceRouteId(routes.sourcesDetailEditCredentials.path, item.id)}>\n            <Button variant=\"link\" id=\"edit-super-credentials\" isInline>\n              {item.paused_at\n                ? intl.formatMessage({\n                    id: 'sources.viewCredentials',\n                    defaultMessage: 'View credentials',\n                  })\n                : intl.formatMessage({\n                    id: 'sources.editCredentials',\n                    defaultMessage: 'Edit credentials',\n                  })}\n            </Button>\n          </Link>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  return intl.formatMessage({\n    id: 'configurationMode.manual',\n    defaultMessage: 'Manual configuration',\n  });\n};\n","import { AZURE_NAME, CLOUD_METER_APP_NAME, GOOGLE_NAME } from './constants';\n\nconst isSourceAzureRHEL = ({ source, sourceTypes, appTypes }) => {\n  const azureType = sourceTypes?.find(({ name }) => name === AZURE_NAME);\n  const GOOGLE_TYPE = sourceTypes?.find(({ name }) => name === GOOGLE_NAME);\n  const rhelApp = appTypes?.find(({ name }) => name === CLOUD_METER_APP_NAME);\n\n  return (\n    azureType &&\n    rhelApp &&\n    (source.source_type_id === azureType?.id || source.source_type_id === GOOGLE_TYPE?.id) &&\n    source.applications?.length === 1 &&\n    source.applications[0].application_type_id === rhelApp?.id\n  );\n};\n\nexport default isSourceAzureRHEL;\n","import {\n  applicationFormatter,\n  availabilityFormatter,\n  dateFormatter,\n  importedFormatter,\n  nameFormatter,\n  sourceTypeFormatter,\n} from './formatters';\n\nexport const sourcesColumns = (intl, notSortable = false) => [\n  {\n    title: intl.formatMessage({\n      id: 'sources.name',\n      defaultMessage: 'Name',\n    }),\n    value: 'name',\n    formatter: nameFormatter,\n    sortable: !notSortable,\n  },\n  {\n    title: intl.formatMessage({\n      id: 'sources.type',\n      defaultMessage: 'Type',\n    }),\n    value: 'source_type_id',\n    formatter: sourceTypeFormatter,\n    sortable: !notSortable,\n  },\n  {\n    title: intl.formatMessage({\n      id: 'sources.connectedApplications',\n      defaultMessage: 'Connected applications',\n    }),\n    value: 'applications',\n    formatter: applicationFormatter,\n  },\n  {\n    title: intl.formatMessage({\n      id: 'sources.addedDate',\n      defaultMessage: 'Date added',\n    }),\n    value: 'created_at',\n    formatter: dateFormatter,\n    sortable: !notSortable,\n  },\n  {\n    hidden: true,\n    value: 'imported',\n    formatter: importedFormatter,\n  },\n  {\n    title: intl.formatMessage({\n      id: 'sources.status',\n      defaultMessage: 'Status',\n    }),\n    value: 'availability_status',\n    formatter: availabilityFormatter,\n  },\n];\n\nconst KEBAB_COLUMN = 1;\nconst COUNT_OF_COLUMNS = sourcesColumns({ formatMessage: () => '' }).length;\n\nexport const COLUMN_COUNT = COUNT_OF_COLUMNS + KEBAB_COLUMN;\n"],"names":["SourcesPage","lazy","SourceDetail","routes","sources","path","sourcesNew","writeAccess","sourcesRemove","redirectNoId","sourcesDetail","sourcesDetailRename","noPaused","sourcesDetailRemove","sourcesDetailAddApp","sourcesDetailRemoveApp","sourcesDetailEditCredentials","replaceRouteId","id","replace","Suspense","fallback","Switch","Route","component","config","window","insights","chrome","auth","getUser","SOURCES_API_BASE_V3","process","env","BASE_PATH","axiosInstanceInsights","axios","interceptors","request","use","response","data","error","status","logout","configureScope","scope","setTag","req_id","err","errObject","customError","sentryId","captureException","errors","length","Promise","reject","detail","message","title","getSourcesApi","checkAvailabilitySource","post","updateSource","patch","updateEndpoint","createEndpoint","updateAuthentication","createAuthentication","showSource","get","listSourceEndpoints","listSourceApplications","listEndpointAuthentications","deleteSource","createApplication","postGraphQL","listSourceTypes","doLoadAppTypes","deleteApplication","createAuthApp","deleteAuthentication","showAuthentication","updateApplication","showApplication","listSourceAuthentications","createSource","getEndpoint","getGoogleAccount","bulkCreate","pauseApplication","unpauseApplication","pauseSource","unpauseSource","doRemoveSource","sourceId","pagination","pageSize","pageNumber","sorting","sortBy","sortDirection","graphQlAttributes","doLoadEntities","filter","filterValue","category","filterQueries","name","push","source_type_id","map","x","join","applications","CLOUD_VENDOR","REDHAT_VENDOR","availability_status","AVAILABLE","UNAVAILABLE","PARTIALLY_UNAVAILABLE","filtering","activeCategory","filterSection","query","then","doCreateApplication","doDeleteApplication","appId","errorMessage","restFilterGenerator","doLoadSource","doLoadApplicationsForEdit","Loader","width","height","className","style","role","propTypes","PropTypes","AppPlaceholder","intl","useIntl","formatMessage","defaultMessage","type","PaginationLoader","PlaceHolderTable","Bullseye","Spinner","size","RowWrapperLoader","row","isDeleting","initialProps","colSpan","COLUMN_COUNT","RowWrapper","CardLoader","props","Card","CardBody","DetailLoader","Grid","GridItem","md","SATELLITE_NAME","ANSIBLE_TOWER_NAME","AZURE_NAME","GOOGLE_NAME","TOPOLOGY_INV_NAME","COST_MANAGEMENT_APP_NAME","CLOUD_METER_APP_NAME","CATALOG_APP","timeoutedApps","appTypes","find","defaultPort","scheme","http","https","endpointToUrl","endpoint","onlyTrueEndpointValues","Object","keys","reduce","acc","curr","host","port","url","schema","String","schemaToPort","sourceTypeFormatter","sourceType","_item","sourceTypes","product_name","dateFormatter","str","DateFormat","date","nameFormatter","source","TextContent","Link","to","key","Text","TextVariants","sourceIsOpenShift","endpoints","formatURL","importedFormatter","value","text","cfme","toLowerCase","importsTexts","Tooltip","content","Badge","isRead","IN_PROGRESS","PAUSED","RHELAZURE","getStatusColor","getStatusText","UnknownError","formatAvailibilityErrors","values","authentications","count","app","display_name","getStatusTooltipText","availabilityFormatter","_status","meta","availability_status_error","statusesCount","errorsCount","application_type_id","authtype","getAllErrors","paused_at","azureType","GOOGLE_TYPE","rhelApp","isSourceAzureRHEL","Popover","showClose","bodyContent","Label","color","icon","ApplicationLabel","showStatusText","statusText","getStatusTooltipTextApp","headerContent","EnhancedLabelGroup","LabelGroup","numLabels","collapsedText","remaining","index","isRequired","applicationFormatter","apps","item","application","resource_type","getAppStatus","Boolean","sort","a","b","localeCompare","configurationModeFormatter","mode","superKeyType","authentication","is_superkey","superKeyAuth","position","fill","Button","variant","isInline","sourcesColumns","notSortable","formatter","sortable","hidden"],"sourceRoot":""}