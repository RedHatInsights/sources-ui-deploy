{"version":3,"file":"js/9339.7738b3f19e9ebcbd4eae.js","mappings":"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","sources":["webpack:///./src/api/checkSourceStatus.js","webpack:///./src/api/delay.js","webpack:///./src/api/getApplicationStatus.js","webpack:///./src/components/CloseModal.js","webpack:///./src/components/steps/AmazonFinishedStep.js","webpack:///./src/components/steps/ErroredStep.js","webpack:///./src/components/steps/FinishedStep.js","webpack:///./src/components/steps/LoadingStep.js","webpack:///./src/components/steps/TimeoutStep.js","webpack:///./src/utilities/computeSourceError.js","webpack:///./src/utilities/computeSourceStatus.js","webpack:///./src/utilities/computeSourcesUrl.js","webpack:///./src/utilities/filterApps.js"],"sourcesContent":["import { getSourcesApi } from './entities';\n\nexport const checkSourceStatus = (id) =>\n  getSourcesApi()\n    .checkAvailabilitySource(id)\n    .catch(() => {});\n\nexport default checkSourceStatus;\n","export const delay = (interval, prms) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve.bind(null, prms), interval);\n  });\n};\n","import { getSourcesApi } from './entities';\nimport { delay } from './delay';\n\nexport const checkAppAvailability = (id, timeout = 10000, interval = 1000, entity = 'showApplication', updatedTime) =>\n  new Promise((res, rej) => {\n    const start = Date.now();\n\n    const checkSource = () =>\n      // eslint-disable-next-line prettier/prettier\n      getSourcesApi()[entity](id)\n        .then((data) => {\n          const isTimeOuted = Date.now() - start >= timeout;\n\n          if (isTimeOuted) {\n            if (updatedTime) {\n              return {\n                ...data,\n                availability_status: null,\n                availability_status_error: null,\n              };\n            }\n\n            return data;\n          }\n\n          if (data.availability_status === 'available' || data.availability_status === 'unavailable') {\n            if (updatedTime && new Date(data.last_checked_at || data.updated_at) > updatedTime) {\n              return data;\n            }\n\n            if (!updatedTime) {\n              return data;\n            }\n          }\n\n          return delay(interval).then(() => checkSource());\n        });\n\n    return checkSource()\n      .then((data) => res(data))\n      .catch((error) => rej(error));\n  });\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { Button, Modal, Title } from '@patternfly/react-core';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\n\nconst CloseModal = ({ onExit, onStay, title, exitTitle, stayTitle, description }) => {\n  const intl = useIntl();\n\n  const isMounted = useRef(false);\n\n  return (\n    <Modal\n      onEscapePress={(e) => {\n        isMounted.current ? onStay(e) : undefined;\n        isMounted.current = true;\n      }}\n      className=\"sources\"\n      variant=\"small\"\n      title={title}\n      aria-label={intl.formatMessage({ id: 'wizard.closeAriaLabel', defaultMessage: 'Close add source wizard' })}\n      header={\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          <ExclamationTriangleIcon size=\"sm\" className=\"src-c-warning-icon\" aria-label=\"Exclamation icon\" />\n          {title}\n        </Title>\n      }\n      isOpen\n      onClose={onStay}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" id=\"on-exit-button\" onClick={onExit}>\n          {exitTitle}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" id=\"on-stay-button\" onClick={onStay}>\n          {stayTitle}\n        </Button>,\n      ]}\n    >\n      {description}\n    </Modal>\n  );\n};\n\nCloseModal.propTypes = {\n  onExit: PropTypes.func.isRequired,\n  onStay: PropTypes.func.isRequired,\n  title: PropTypes.node,\n  exitTitle: PropTypes.node,\n  stayTitle: PropTypes.node,\n  description: PropTypes.node,\n};\n\nCloseModal.defaultProps = {\n  title: <FormattedMessage id=\"wizard.closeTitle\" defaultMessage=\"Exit source creation?\" />,\n  exitTitle: <FormattedMessage id=\"wizard.exitText\" defaultMessage=\"Exit\" />,\n  stayTitle: <FormattedMessage id=\"wizard.stayText\" defaultMessage=\"Stay\" />,\n  description: <FormattedMessage id=\"wizard.closeWarning\" defaultMessage=\"All inputs will be discarded.\" />,\n};\n\nexport default CloseModal;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Alert,\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Grid,\n  GridItem,\n  Text,\n  Title,\n} from '@patternfly/react-core';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst AwsLink = ({ href, children }) => (\n  <React.Fragment>\n    <CheckCircleIcon className=\"pf-u-mr-sm\" fill=\"var(--pf-global--success-color--100)\" />\n    <Text component=\"a\" href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      {children}\n    </Text>\n  </React.Fragment>\n);\n\nAwsLink.propTypes = {\n  href: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst GOLDIMAGES_HREF = 'https://access.redhat.com/management/cloud';\nconst LEARNMORE_HREF = 'https://access.redhat.com/public-cloud/aws';\n\nconst AmazonFinishedStep = ({ onClose }) => {\n  const intl = useIntl();\n  const { isBeta } = useChrome();\n  const PREFIX = isBeta() ? 'preview/' : '';\n\n  const SUBWATCH_HREF = `/${PREFIX}subscriptions`;\n  const INSIGHTS_HREF = `/${PREFIX}insights`;\n  const COST_HREF = `/${PREFIX}cost-management`;\n\n  return (\n    <Fragment>\n      <Alert\n        variant=\"info\"\n        isInline\n        title={intl.formatMessage({ id: 'aws.alertTitle', defaultMessage: 'Allow 24 hours for full activation' })}\n      >\n        {intl.formatMessage({\n          id: 'aws.alertDescription',\n          defaultMessage: 'Manage connections for this source at any time in Settings > Sources.',\n        })}\n      </Alert>\n      <Bullseye>\n        <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-md\">\n          <EmptyStateIcon icon={CheckCircleIcon} color=\"var(--pf-global--success-color--100)\" className=\"pf-u-mb-0\" />\n          <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n            {intl.formatMessage({ id: 'aws.successTitle', defaultMessage: 'Amazon Web Services connection established' })}\n          </Title>\n          <EmptyStateBody>\n            {intl.formatMessage({\n              id: 'aws.successDescription',\n              defaultMessage: 'Discover the benefits of your connection or exit to manage your new source.',\n            })}\n            <Grid hasGutter className=\"src-c-aws-grid pf-u-mt-md\">\n              <GridItem md=\"6\">\n                <AwsLink href={GOLDIMAGES_HREF}>\n                  {intl.formatMessage({ id: 'aws.goldImages', defaultMessage: 'View enabled AWS gold images' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={SUBWATCH_HREF}>\n                  {intl.formatMessage({ id: 'aws.subwtachUsage', defaultMessage: 'Subscription Watch usage' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={INSIGHTS_HREF}>\n                  {intl.formatMessage({ id: 'aws.insights', defaultMessage: 'Get started with Red Hat Insights' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={COST_HREF}>\n                  {intl.formatMessage({ id: 'aws.costLink', defaultMessage: 'Cost Management reporting' })}\n                </AwsLink>\n              </GridItem>\n            </Grid>\n          </EmptyStateBody>\n          <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n            {intl.formatMessage({ id: 'exit', defaultMessage: 'Exit' })}\n          </Button>\n          <EmptyStateActions>\n            <Text component=\"a\" href={LEARNMORE_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n              {intl.formatMessage({ id: 'aws.learnMore', defaultMessage: 'Learn more about this Cloud' })}\n            </Text>\n          </EmptyStateActions>\n        </EmptyState>\n      </Bullseye>\n    </Fragment>\n  );\n};\n\nAmazonFinishedStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default AmazonFinishedStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\n\nconst ErroredStep = ({ onClose, returnButtonTitle, message, title, customText, primaryAction, secondaryActions, Component }) => (\n  <Bullseye>\n    <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n      <EmptyStateIcon icon={ExclamationCircleIcon} color=\"var(--pf-global--danger-color--100)\" className=\"pf-u-mb-0\" />\n      <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n        {title}\n      </Title>\n      <EmptyStateBody className=\"src-c-wizard--step-text\">{message || customText}</EmptyStateBody>\n      <Component variant=\"primary\" onClick={primaryAction || onClose}>\n        {returnButtonTitle}\n      </Component>\n      {secondaryActions && <EmptyStateActions className=\"pf-u-mt-sm\">{secondaryActions}</EmptyStateActions>}\n    </EmptyState>\n  </Bullseye>\n);\n\nErroredStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  returnButtonTitle: PropTypes.node,\n  message: PropTypes.node,\n  title: PropTypes.node,\n  customText: PropTypes.node,\n  primaryAction: PropTypes.func,\n  secondaryActions: PropTypes.node,\n  Component: PropTypes.elementType,\n};\n\nErroredStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.unsuccConfiguration\" defaultMessage=\"Something went wrong\" />,\n  // eslint-disable-next-line max-len\n  customText: (\n    <FormattedMessage\n      id=\"wizard.errorText\"\n      defaultMessage=\"There was a problem while trying to add your source. Please try again. If the error persists, open a support case.\"\n    />\n  ),\n  Component: Button,\n};\n\nexport default ErroredStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { ClipboardCopy } from '@patternfly/react-core';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Form,\n  FormGroup,\n  Title,\n} from '@patternfly/react-core';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport computeSourcesUrl from '../../utilities/computeSourcesUrl';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst FinishedStep = ({\n  onClose,\n  successfulMessage,\n  hideSourcesButton,\n  returnButtonTitle,\n  title,\n  linkText,\n  secondaryActions,\n  uuid,\n}) => {\n  const { isBeta } = useChrome();\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n        <EmptyStateIcon icon={CheckCircleIcon} color=\"var(--pf-global--success-color--100)\" className=\"pf-u-mb-0\" />\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n          {title}\n        </Title>\n        <EmptyStateBody className=\"src-c-wizard--step-text\">{successfulMessage}</EmptyStateBody>\n        {uuid && (\n          <Form className=\"src-c-uuid\">\n            <FormGroup label={<FormattedMessage id=\"wizard.sourcesUid\" defaultMessage=\"Source UUID\" />} fieldId=\"source-uuid\">\n              <ClipboardCopy id=\"source-uuid\" isReadOnly hoverTip=\"Source UUID\" clickTip=\"Copied\" className=\"pf-u-mt-md\">\n                {uuid}\n              </ClipboardCopy>\n            </FormGroup>\n          </Form>\n        )}\n        <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n          {returnButtonTitle}\n        </Button>\n        {!hideSourcesButton && (\n          <EmptyStateActions>\n            <Button variant=\"link\" component=\"a\" target=\"_blank\" rel=\"noopener noreferrer\" href={computeSourcesUrl(isBeta())}>\n              {linkText}\n            </Button>\n          </EmptyStateActions>\n        )}\n        {secondaryActions && <EmptyStateActions>{secondaryActions}</EmptyStateActions>}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  successfulMessage: PropTypes.node.isRequired,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node.isRequired,\n  title: PropTypes.node,\n  linkText: PropTypes.node,\n  secondaryActions: PropTypes.node,\n  uuid: PropTypes.string,\n};\n\nFinishedStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.succConfiguration\" defaultMessage=\"Configuration successful\" />,\n  linkText: <FormattedMessage id=\"wizard.toSources\" defaultMessage=\"Take me to sources\" />,\n};\n\nexport default FinishedStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nconst LoadingStep = ({ onClose, customText, cancelTitle, description }) => (\n  <Bullseye>\n    <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n      <EmptyStateIcon icon={Spinner} className=\"pf-u-mb-0\" />\n      <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n        {customText}\n      </Title>\n      {description && <EmptyStateBody className=\"src-c-wizard--step-text\">{description}</EmptyStateBody>}\n      {onClose && (\n        <EmptyStateActions className=\"pf-u-mt-xl\">\n          <Button variant=\"link\" onClick={onClose}>\n            {cancelTitle}\n          </Button>\n        </EmptyStateActions>\n      )}\n    </EmptyState>\n  </Bullseye>\n);\n\nLoadingStep.propTypes = {\n  onClose: PropTypes.func,\n  customText: PropTypes.node,\n  cancelTitle: PropTypes.node,\n  description: PropTypes.node,\n};\n\nLoadingStep.defaultProps = {\n  customText: <FormattedMessage id=\"wizard.loadingText\" defaultMessage=\"Loading, please wait.\" />,\n  cancelTitle: <FormattedMessage id=\"wizard.cancelText\" defaultMessage=\"Cancel\" />,\n};\n\nexport default LoadingStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { ClipboardCopy } from '@patternfly/react-core';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\n\nconst TimeoutStep = ({ onClose, returnButtonTitle, title, secondaryActions, uuid }) => {\n  const intl = useIntl();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n        <EmptyStateIcon icon={WrenchIcon} color=\"var(--pf-global--Color--200)\" className=\"pf-u-mb-0\" />\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n          {title}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage(\n            {\n              id: 'wizard.uncompleteConfigurationDescription',\n              defaultMessage:\n                'We are still working to confirm credentials and app settings.{newLine}To track progress, check the Status column in the Sources table.',\n            },\n            { newLine: <br key=\"br\" /> }\n          )}\n          {uuid ?? (\n            <ClipboardCopy isReadOnly hoverTip=\"Source UUID\" clickTip=\"Copied\" className=\"pf-u-mt-md\">\n              {uuid}\n            </ClipboardCopy>\n          )}\n        </EmptyStateBody>\n        <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n          {returnButtonTitle}\n        </Button>\n        {secondaryActions && <EmptyStateActions>{secondaryActions}</EmptyStateActions>}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nTimeoutStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  returnButtonTitle: PropTypes.node.isRequired,\n  title: PropTypes.node,\n  secondaryActions: PropTypes.node,\n  uuid: PropTypes.string,\n};\n\nTimeoutStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.uncompleteConfigurationTitle\" defaultMessage=\"Configuration in progress\" />,\n};\n\nexport default TimeoutStep;\n","const computeSourceError = (source, intl) =>\n  source.applications?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  source.endpoint?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  source.authentications?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  intl.formatMessage({ id: 'wizard.unknownError', defaultMessage: 'Unknown error' });\n\nexport default computeSourceError;\n","export const computeSourceStatus = (source) => {\n  const appStatuses =\n    source.applications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const endpointStatuses =\n    source.endpoint?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const authenticationsStatuses =\n    source.authentications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n\n  const statuses = [...appStatuses, ...endpointStatuses, ...authenticationsStatuses];\n\n  if (statuses.includes('unavailable')) {\n    return 'unavailable';\n  }\n\n  if (statuses.length > 0 && statuses.every((status) => status === 'available')) {\n    return 'available';\n  }\n\n  if (statuses.includes('timeout')) {\n    return 'timeout';\n  }\n\n  return 'finished';\n};\n\nexport default computeSourceStatus;\n","const computeSourcesUrl = (isBeta = false) => (isBeta ? `/preview/settings/integrations` : `/settings/integrations`);\n\nexport default computeSourcesUrl;\n","import { TOPOLOGY_INV_NAME } from './constants';\n\nconst filterApps = (type) => type.name !== TOPOLOGY_INV_NAME;\n\nexport const filterVendorAppTypes =\n  (sourceTypes, category) =>\n  ({ supported_source_types }) =>\n    supported_source_types.find((type) => sourceTypes.find(({ name }) => type === name)?.category === category);\n\nexport default filterApps;\n"],"names":["checkSourceStatus","id","checkAvailabilitySource","catch","checkAppAvailability","timeout","interval","entity","updatedTime","Promise","res","rej","start","Date","now","checkSource","then","data","availability_status","availability_status_error","last_checked_at","updated_at","prms","resolve","setTimeout","bind","delay","error","CloseModal","onExit","onStay","title","exitTitle","stayTitle","description","intl","isMounted","useRef","Modal","onEscapePress","e","current","className","variant","formatMessage","defaultMessage","header","Title","headingLevel","size","isOpen","onClose","actions","Button","key","onClick","propTypes","isRequired","defaultProps","AwsLink","href","children","fill","Text","component","target","rel","AmazonFinishedStep","isBeta","PREFIX","SUBWATCH_HREF","INSIGHTS_HREF","COST_HREF","Fragment","Alert","isInline","Bullseye","EmptyState","EmptyStateVariant","full","EmptyStateIcon","icon","color","EmptyStateBody","Grid","hasGutter","GridItem","md","EmptyStateActions","ErroredStep","returnButtonTitle","message","customText","primaryAction","secondaryActions","Component","FinishedStep","successfulMessage","hideSourcesButton","linkText","uuid","Form","FormGroup","label","fieldId","ClipboardCopy","isReadOnly","hoverTip","clickTip","LoadingStep","cancelTitle","Spinner","TimeoutStep","newLine","source","applications","filter","Boolean","find","endpoint","authentications","statuses","map","includes","length","every","status","filterVendorAppTypes","sourceTypes","category","supported_source_types","type","name"],"sourceRoot":""}