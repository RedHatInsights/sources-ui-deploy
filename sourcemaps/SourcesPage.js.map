{"version":3,"sources":["webpack:///./node_modules/lodash/zipObject.js","webpack:///./node_modules/lodash/_baseZipObject.js","webpack:///./src/components/SourceExpandedView.js","webpack:///./src/components/SourcesSimpleView.js","webpack:///./src/components/SourcesFilter.js","webpack:///./src/components/SourcesEmptyState.js","webpack:///./src/SmartComponents/ProviderPage/providerForm.js","webpack:///./src/components/SourceEditModal.js","webpack:///./src/components/SourceRemoveModal.js","webpack:///./src/pages/SourcesPage.js"],"names":["assignValue","__webpack_require__","baseZipObject","module","exports","props","values","assignFunc","index","length","valsLength","result","value","undefined","SourceExpandedView","react_default","a","createElement","Grid","GridItem","sm","md","lg","xl","propTypes","source","PropTypes","shape","id","oneOfType","string","number","isRequired","name","RowLoader","react_content_loader_es","extends_default","height","width","x","y","rx","ry","SourcesSimpleView","_this","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","defineProperty_default","assertThisInitialized_default","_event","key","checked","selectEntity","direction","sortEntities","filteredColumns","setState","sortBy","i","isOpen","expandEntity","sourceIndexToId","entities","title","onClick","_ev","history","push","concat","sourceType","sourceTypeMap","get","item","map","col","formatter","_this$props","loaded","sourceTypes","rowData","flatten","objectSpread_default","expanded","cells","itemToCells","parent","Fragment","components_SourceExpandedView","Map","t","Table","gridBreakPoint","aria-label","onCollapse","onSort","state","rows","headers","actions","renderActions","Header","Body","className","SourcesSimpleView_RowLoader","filter","columns","c","transforms","sortable","React","Component","arrayOf","loadEntities","func","removeSource","any","numberOfEntities","bool","defaultProps","connect","_ref","_ref$providers","providers","dispatch","bindActionCreators","withRouter","SourcesFilter","insights_frontend_components","options","items","onOptionSelect","onFilterSelect","onButtonClick","onFilter","SourcesEmptyState","Card","CardBody","Bullseye","EmptyState","EmptyStateIcon","icon","CubesIcon","Title","headingLevel","size","EmptyStateBody","Link","to","paths","sourcesNew","Button","style","marginTop","variant","compileSourcesComboOptions","label","product_name","fieldsToStep","fields","stepName","nextStep","stepKey","temporaryHardcodedSourceSchemas","openshift","component","componentTypes","TEXT_FIELD","type","initialValue","CHECKBOX","condition","when","is","amazon","sourceTypeSchema","schema","firstStepNew","stepMapper","names","zipObject","compileStepMapper","SELECT_COMPONENT","validate","validatorTypes","REQUIRED","firstStepEdit","isDisabled","readOnly","summaryStep","sourceTypeSteps","initialValues","source_name","source_type","url","endpoint","scheme","host","port","path","endpointToUrl","verify_ssl","certificate_authority","token","role","user_name","password","SourceEditModal","editorNew","location","pathname","useEffect","loadSourceForEdit","parseInt","match","params","form","schemaType","showFormControls","WIZARD","sourceNewForm","find","source_type_id","typeName","sourceEditForm","console","log","Modal","onClose","goBack","isLarge","SourcesFormRenderer","uiSchema","onSubmit","_formState","createSource","updateSource","then","replace","catch","_error","object","SourceRemoveModal","onCancel","isSmall","hideTitle","TextContent","Text","TextVariants","h1","_ref2","sourceDetailsFromState","SourcesPage","loadSourceTypes","filterValue","filterProviders","_component","column","setProviderFilterColumn","onPage","pageAndSize","itemsPerPage","count","CardHeader","components_SourcesFilter","sourcesViewDefinition","searchable","components_SourcesSimpleView","CardFooter","page","onSetPage","onPerPageSelect","numberOfItems","displayEmptyState","editorEdit","sourcesEdit","Route","exact","sourcesRemove","components_SourceEditModal","components_SourcesEmptyState","renderMainContent"],"mappings":"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","file":"js/SourcesPage.js","sourcesContent":["var assignValue = require('./_assignValue'),\n    baseZipObject = require('./_baseZipObject');\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nmodule.exports = zipObject;\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nmodule.exports = baseZipObject;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\n\nconst SourceExpandedView = () => (\n    <Grid>\n        <GridItem sm={6} md={4} lg={4} xl={4}>\n            <dl>\n                <dt>Access Key ID (User ID)</dt><dd>TO BE ADDED</dd>\n            </dl>\n        </GridItem>\n    </Grid>\n);\n\nSourceExpandedView.propTypes = {\n    source: PropTypes.shape({\n        id: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number\n        ]).isRequired,\n        name: PropTypes.string.isRequired\n    }).isRequired\n};\n\nexport default SourceExpandedView;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, sortable } from '@patternfly/react-table';\n\nimport flatten from 'lodash/flatten';\nimport filter from 'lodash/filter';\nimport ContentLoader from 'react-content-loader';\n\nimport SourceExpandedView from './SourceExpandedView';\nimport { loadEntities, selectEntity, expandEntity, removeSource, sortEntities } from '../redux/actions/providers';\n\nconst RowLoader = props => (\n    <ContentLoader\n        height={20}\n        width={480}\n        {...props}\n    >\n        <rect x=\"30\" y=\"0\" rx=\"3\" ry=\"3\" width=\"250\" height=\"7\" />\n        <rect x=\"300\" y=\"0\" rx=\"3\" ry=\"3\" width=\"70\" height=\"7\" />\n        <rect x=\"385\" y=\"0\" rx=\"3\" ry=\"3\" width=\"95\" height=\"7\" />\n        <rect x=\"50\" y=\"12\" rx=\"3\" ry=\"3\" width=\"80\" height=\"7\" />\n        <rect x=\"150\" y=\"12\" rx=\"3\" ry=\"3\" width=\"200\" height=\"7\" />\n        <rect x=\"360\" y=\"12\" rx=\"3\" ry=\"3\" width=\"120\" height=\"7\" />\n        <rect x=\"0\" y=\"0\" rx=\"0\" ry=\"0\" width=\"20\" height=\"20\" />\n    </ContentLoader>\n);\n\nclass SourcesSimpleView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.filteredColumns = filter(this.props.columns, c => c.title);\n\n        this.headers = this.filteredColumns.map(col => ({\n            title: col.title,\n            transforms: [sortable]\n        }));\n\n        this.state = {\n            sortBy: {}\n        };\n    }\n\n    onItemSelect = (_event, key, checked) => this.props.selectEntity(key, checked);\n\n    onSort = (_event, key, direction) => {\n        this.props.sortEntities(this.filteredColumns[key].value, direction);\n        this.setState({\n            sortBy: {\n                index: key,\n                direction\n            }\n        });\n    };\n\n    onCollapse = (_event, i, isOpen) => this.props.expandEntity(this.sourceIndexToId(i), isOpen);\n\n    sourceIndexToId = (i) => this.props.entities[i / 2].id;\n\n    renderActions = () => (\n        [\n            {\n                title: 'Remove Source',\n                onClick: (_ev, i) => this.props.history.push(`/remove/${this.sourceIndexToId(i)}`)\n            },\n            {\n                title: 'Edit Source',\n                onClick: (_ev, i) => this.props.history.push(`/edit/${this.sourceIndexToId(i)}`)\n            }\n        ]\n    );\n\n    sourceTypeFormatter = sourceType => (this.sourceTypeMap.get(sourceType) || sourceType || '');\n\n    itemToCells = item => {\n        return this.filteredColumns.map(\n            col => (col.formatter ?\n                this[col.formatter](item[col.value]) :\n                item[col.value] || ''));\n    };\n\n    render = () => {\n        const { entities, loaded, sourceTypes } = this.props;\n        const rowData = flatten(entities.map((item, index) => (\n            [\n                { // regular item\n                    ...item,\n                    isOpen: !!item.expanded,\n                    cells: this.itemToCells(item)\n                },\n                { // expanded content\n                    id: item.id + '_detail',\n                    parent: index * 2,\n                    cells: [\n                        item.expanded ?\n                            <React.Fragment key={`${item.id}_detail`}>\n                                <SourceExpandedView source={item}/>\n                            </React.Fragment> :\n                            'collapsed content'\n                    ]\n                }\n            ]\n        )));\n\n        this.sourceTypeMap = new Map(sourceTypes.map(t => [t.id, t.name]));\n\n        if (loaded) {\n            return (\n                <Table\n                    gridBreakPoint='grid-lg'\n                    aria-label=\"List of Sources\"\n                    onCollapse={this.onCollapse}\n                    onSort={this.onSort}\n                    sortBy={this.state.sortBy}\n                    rows={rowData}\n                    cells={this.headers}\n                    actions={this.renderActions()}\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n            );\n        }\n\n        return (\n            <table className=\"sources-placeholder-table pf-m-compact ins-entity-table\">\n                <tbody>\n                    <tr><td><RowLoader /></td></tr>\n                    <tr><td><RowLoader /></td></tr>\n                </tbody>\n            </table>\n        );\n    };\n};\n\nSourcesSimpleView.propTypes = {\n    columns: PropTypes.arrayOf(PropTypes.shape({\n        value: PropTypes.string,\n        title: PropTypes.string\n    })).isRequired,\n\n    loadEntities: PropTypes.func.isRequired,\n    selectEntity: PropTypes.func.isRequired,\n    expandEntity: PropTypes.func.isRequired,\n    removeSource: PropTypes.func.isRequired,\n    sortEntities: PropTypes.func.isRequired,\n\n    entities: PropTypes.arrayOf(PropTypes.any),\n    numberOfEntities: PropTypes.number.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    sourceTypes: PropTypes.arrayOf(PropTypes.any),\n\n    history: PropTypes.any.isRequired\n};\n\nSourcesSimpleView.defaultProps = {\n    entities: [],\n    numberOfEntities: 0,\n    loaded: false,\n    sourceTypes: []\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    loadEntities, selectEntity, expandEntity, sortEntities, removeSource }, dispatch);\n\nconst mapStateToProps = ({ providers: { entities, loaded, numberOfEntities, sourceTypes } }) =>\n    ({ entities, loaded, numberOfEntities, sourceTypes });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SourcesSimpleView));\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { SimpleTableFilter } from '@red-hat-insights/insights-frontend-components';\n\nclass SourcesFilter extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render = () =>\n        <SimpleTableFilter\n            options={{\n                title: 'Filter By',\n                items: this.props.columns\n            }}\n            onOptionSelect={this.props.onFilterSelect}\n            onButtonClick={this.props.onFilter}\n        />\n}\n\nSourcesFilter.propTypes = {\n    columns: PropTypes.arrayOf(PropTypes.shape({\n        value: PropTypes.string,\n        title: PropTypes.string\n    })).isRequired,\n    onFilter: PropTypes.func.isRequired,\n    onFilterSelect: PropTypes.func.isRequired\n};\n\nexport default SourcesFilter;\n","import React from 'react';\nimport {\n    Bullseye,\n    Card,\n    CardBody,\n    Title,\n    Button,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateBody\n} from '@patternfly/react-core';\n\nimport { CubesIcon } from '@patternfly/react-icons'; // FIXME: different icon\nimport { Link } from 'react-router-dom';\nimport { paths } from '../Routes';\n\nconst SourcesEmptyState = () => (\n    <Card>\n        <CardBody>\n            <Bullseye>\n                <EmptyState>\n                    <EmptyStateIcon icon={CubesIcon} />\n                    <Title headingLevel=\"h5\" size=\"lg\">No Sources</Title>\n                    <EmptyStateBody>\n                        No Sources have been defined. To start define a Source.\n                    </EmptyStateBody>\n                    <Link to={paths.sourcesNew}>\n                        <Button style={{ marginTop: 'var(--pf-c-empty-state--c-button--MarginTop)' }}\n                            variant=\"primary\">Add a Source</Button>\n                    </Link>\n                </EmptyState>\n            </Bullseye>\n        </CardBody>\n    </Card>\n);\n\nexport default SourcesEmptyState;\n","import { componentTypes, validatorTypes } from '@data-driven-forms/react-form-renderer';\nimport zipObject from 'lodash/zipObject';\nimport find from 'lodash/find';\n\nconst compileSourcesComboOptions = (sourceTypes) => (\n    [{ label: 'Please Choose' }].concat(\n        sourceTypes.map(t => ({\n            value: t.name,\n            label: t.product_name\n        }))\n    )\n);\n\nconst fieldsToStep = (fields, stepName, nextStep) => ({\n    ...fields, // expected to include title and fields\n    name: stepName,\n    stepKey: stepName,\n    nextStep\n});\n\nconst temporaryHardcodedSourceSchemas = {\n    openshift: {\n        title: 'Configure OpenShift',\n        fields: [{\n            component: componentTypes.TEXT_FIELD,\n            name: 'role',\n            type: 'hidden',\n            initialValue: 'kubernetes' // value of 'role' for the endpoint\n        }, {\n            component: componentTypes.TEXT_FIELD,\n            name: 'url',\n            label: 'URL'\n        }, {\n            component: componentTypes.CHECKBOX,\n            name: 'verify_ssl',\n            label: 'Verify SSL'\n        }, {\n            component: componentTypes.TEXT_FIELD,\n            name: 'certificate_authority',\n            label: 'Certificate Authority',\n            condition: {\n                when: 'verify_ssl',\n                is: true\n            }\n        }, {\n            component: componentTypes.TEXT_FIELD,\n            name: 'token',\n            label: 'Token',\n            type: 'password'\n        }]\n    },\n    amazon: {\n        title: 'Configure AWS',\n        fields: [{\n            component: componentTypes.TEXT_FIELD,\n            name: 'role',\n            type: 'hidden',\n            initialValue: 'aws' // value of 'role' for the endpoint\n        }, {\n            component: componentTypes.TEXT_FIELD,\n            name: 'user_name',\n            label: 'Access Key'\n        }, {\n            component: componentTypes.TEXT_FIELD,\n            name: 'password',\n            label: 'Secret Key',\n            type: 'password'\n        }]\n    }\n};\n\n/* Switch between using hard-coded provider schemas and schemas from the api/source_types */\nconst sourceTypeSchemaWithFallback = t => (t.schema || temporaryHardcodedSourceSchemas[t.name]);\nconst sourceTypeSchemaHardcoded = t => temporaryHardcodedSourceSchemas[t.name];\nconst sourceTypeSchemaServer = t => t.schema;\n\nconst schemaMode = 0; // defaults to 0\nconst sourceTypeSchema = {\n    0: sourceTypeSchemaWithFallback,\n    1: sourceTypeSchemaHardcoded,\n    2: sourceTypeSchemaServer\n}[schemaMode];\n\n/* return hash of form: { amazon: 'amazon', google: 'google', openshift: 'openshift' } */\nconst compileStepMapper = (sourceTypes) => {\n    const names = sourceTypes.map(t => t.name);\n    return zipObject(names, names);\n};\n\nconst firstStepNew = (sourceTypes) => ({\n    title: 'Get started with adding source',\n    name: 'step_1',\n    stepKey: 'step_1',\n    nextStep: {\n        when: 'source_type',\n        stepMapper: compileStepMapper(sourceTypes)\n    },\n    fields: [{\n        component: componentTypes.TEXT_FIELD,\n        name: 'source_name',\n        type: 'text',\n        label: 'Name'\n    }, {\n        component: componentTypes.SELECT_COMPONENT,\n        name: 'source_type',\n        label: 'Source type',\n        isRequired: true,\n        options: compileSourcesComboOptions(sourceTypes),\n        validate: [{\n            type: validatorTypes.REQUIRED\n        }]\n    }]\n});\n\nconst firstStepEdit = (sourceTypes, type) => ({\n    title: 'Edit a source',\n    name: 'step_1',\n    stepKey: 'step_1',\n    nextStep: type,\n    fields: [{\n        component: componentTypes.TEXT_FIELD,\n        name: 'source_name',\n        type: 'text',\n        label: 'Name'\n    }, {\n        component: componentTypes.SELECT_COMPONENT,\n        name: 'source_type',\n        label: 'Source type',\n        isRequired: true,\n        isDisabled: true,\n        readOnly: true, // make it grey ;-)\n        options: compileSourcesComboOptions(sourceTypes),\n        validate: [{\n            type: validatorTypes.REQUIRED\n        }]\n    }]\n});\n\nconst summaryStep = () => ({\n    fields: [{\n        name: 'summary',\n        component: 'summary'\n    }],\n    stepKey: 'summary',\n    name: 'summary'\n});\n\nconst sourceTypeSteps = sourceTypes =>\n    sourceTypes.map(t => fieldsToStep(sourceTypeSchema(t), t.name, 'summary'));\n\nconst endpointToUrl = endpoint => (\n    `${endpoint.scheme}://${endpoint.host}:${endpoint.port}${endpoint.path || ''}`\n);\n\nconst initialValues = source => ({\n    source_name: source.name,\n    source_type: source.source_type,\n    url: endpointToUrl(source.endpoint),\n    verify_ssl: source.endpoint.verify_ssl,\n    certificate_authority: source.endpoint.certificate_authority,\n    token: 'FIXME',\n    role: source.endpoint.role,\n    // AWS?\n    user_name: 'FIXME',\n    password: 'FIXME' // same as token\n});\n\nexport function sourceEditForm(sourceTypes, source) {\n    /* editing form:\n     * 1st page: editable name + non-editable source type\n     * 2nd page: provider specific\n     * 3rd page: summary */\n\n    const sourceType = find(sourceTypes, { id: source.source_type_id });\n    const typeName = sourceType.name;\n\n    return {\n        initialValues: initialValues({ source_type: sourceType.name, ...source }),\n        schemaType: 'default',\n        showFormControls: false,\n        schema: {\n            fields: [{\n                component: componentTypes.WIZARD,\n                name: 'wizard',\n                fields: [firstStepEdit(sourceTypes, typeName)].concat(\n                    sourceType &&\n                        fieldsToStep(sourceTypeSchema(sourceType), typeName, 'summary'),\n                    summaryStep()\n                )\n            }]\n        }\n    };\n}\n\nexport function sourceNewForm(sourceTypes) {\n    /* For now we assume that each source has a schema with exactly 1 step.\n     *\n     * We prepend a page with source type choice and name.\n     * And we append a page with a summary\n     * */\n    return {\n        initialValues: {\n            verify_ssl: true // for OpenShift\n        },\n        schemaType: 'default',\n        showFormControls: false,\n        schema: {\n            fields: [{\n                component: componentTypes.WIZARD,\n                name: 'wizard',\n                fields: [firstStepNew(sourceTypes)].concat(\n                    sourceTypeSteps(sourceTypes),\n                    summaryStep()\n                )\n            }]\n        }\n    };\n}\n","import React, { useEffect } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Modal } from '@patternfly/react-core';\n\nimport { sourceEditForm, sourceNewForm } from '../SmartComponents/ProviderPage/providerForm';\nimport SourcesFormRenderer from '../Utilities/SourcesFormRenderer';\nimport { createSource, loadEntities, loadSourceForEdit, updateSource } from '../redux/actions/providers';\nimport { paths } from '../Routes';\n\nconst SourceEditModal = props => {\n\n    const editorNew = props.location.pathname === paths.sourcesNew;\n\n    useEffect(() => {\n        if (!editorNew) {\n            props.loadSourceForEdit(parseInt(props.match.params.id, 10));\n        }\n    }, []);\n\n    const submitProvider = (values, _formState) => {\n        const promise = editorNew ?\n            props.createSource(values, props.sourceTypes) :\n            props.updateSource(props.source, values);\n\n        promise.then(() => {\n            props.history.replace('/');\n            props.loadEntities();\n        }).catch(_error => {\n            props.history.replace('/');\n        });\n    };\n\n    if (!props.sourceTypes || (!editorNew && !props.source)) {\n        return <div>Loading...</div>;\n    }\n\n    const form = editorNew ?\n        sourceNewForm(props.sourceTypes) :\n        sourceEditForm(props.sourceTypes, props.source);\n    console.log('Form schema: ', form);\n\n    return (\n        <Modal\n            title={editorNew ? 'Add a New Source' : 'Edit Source'}\n            isOpen\n            onClose={props.history.goBack}\n            isLarge>\n\n            <SourcesFormRenderer\n                initialValues={form.initialValues}\n                schemaType={form.schemaType}\n                schema={form.schema}\n                uiSchema={form.uiSchema}\n                showFormControls={form.showFormControls}\n                onSubmit={submitProvider}\n            />\n        </Modal>\n    );\n};\n\nSourceEditModal.propTypes = {\n    createSource: PropTypes.func.isRequired,\n    loadSourceForEdit: PropTypes.func.isRequired,\n    loadEntities: PropTypes.func.isRequired,\n    updateSource: PropTypes.func.isRequired,\n\n    sourceTypes: PropTypes.arrayOf(PropTypes.any), // list of all SourceTypes\n    source: PropTypes.object, // a Source for editing\n\n    location: PropTypes.any.isRequired,\n    match: PropTypes.object.isRequired,\n    history: PropTypes.any.isRequired\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n    { createSource, loadEntities, loadSourceForEdit, updateSource }, dispatch);\n\nconst mapStateToProps = ({ providers: { source, sourceTypes } }) => (\n    { source, sourceTypes }\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SourceEditModal));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Modal, Button, Bullseye, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { loadEntities, removeSource } from '../redux/actions/providers';\n\nconst SourceRemoveModal = ({\n    history: { push },\n    removeSource,\n    loadEntities,\n    source\n}) => {\n    const onSubmit = () => removeSource(source.id)\n    .then(() => { loadEntities(); push('/'); });\n\n    const onCancel = () => push('/');\n\n    if (!source) {\n        return null;\n    }\n\n    return (\n        <Modal\n            title=\" \"\n            isOpen\n            isSmall\n            hideTitle\n            onClose={ onCancel }\n            actions={ [\n                <Button key=\"cancel\" variant=\"secondary\" type=\"button\" onClick={ onCancel }>\n                    Cancel\n                </Button>,\n                <Button key=\"submit\" variant=\"primary\" type=\"button\" onClick={ onSubmit }>\n                    Confirm\n                </Button>\n            ] }\n        >\n            <Bullseye>\n                <TextContent>\n                    <Text component={ TextVariants.h1 }>\n                        Removing Source:  { source.name }\n                    </Text>\n                </TextContent>\n            </Bullseye>\n        </Modal>\n    );\n};\n\nSourceRemoveModal.propTypes = {\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired\n    }).isRequired,\n    removeSource: PropTypes.func.isRequired,\n    loadEntities: PropTypes.func.isRequired,\n    source: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired\n    })\n};\n\nconst sourceDetailsFromState = (state, id) => {\n    return state.providers.entities.find(source => source.id  === id);\n};\n\nconst mapStateToProps = (state, { match: { params: { id } } }) => ({ source: sourceDetailsFromState(state, id) });\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n    loadEntities,\n    removeSource\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SourceRemoveModal));\n","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link, withRouter, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle, Pagination, Section } from '@red-hat-insights/insights-frontend-components';\nimport {\n    filterProviders,\n    loadEntities,\n    loadSourceTypes,\n    setProviderFilterColumn\n} from '../redux/actions/providers';\nimport { Button } from '@patternfly/react-core';\nimport { Card, CardBody, CardFooter, CardHeader } from '@patternfly/react-core';\nimport filter from 'lodash/filter';\n\nimport SourcesSimpleView from '../components/SourcesSimpleView';\nimport SourcesFilter from '../components/SourcesFilter';\nimport SourcesEmptyState from '../components/SourcesEmptyState';\nimport SourceEditModal from '../components/SourceEditModal';\nimport SourceRemoveModal from '../components/SourceRemoveModal';\nimport { sourcesViewDefinition } from '../views/sourcesViewDefinition';\nimport { pageAndSize } from '../redux/actions/providers';\nimport { paths } from '../Routes';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nclass SourcesPage extends Component {\n    static propTypes = {\n        filterProviders: PropTypes.func.isRequired,\n        setProviderFilterColumn: PropTypes.func.isRequired,\n        loadEntities: PropTypes.func.isRequired,\n        loadSourceTypes: PropTypes.func.isRequired,\n        pageAndSize: PropTypes.func.isRequired,\n\n        filterValue: PropTypes.string,\n        loaded: PropTypes.bool.isRequired,\n        numberOfEntities: PropTypes.number.isRequired, // total number of Sources\n\n        location: PropTypes.any.isRequired,\n        match: PropTypes.object.isRequired,\n        history: PropTypes.any.isRequired\n    };\n\n    componentDidMount = () => {\n        this.props.loadSourceTypes();\n        this.props.loadEntities();\n    }\n\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            itemsPerPage: 10,\n            onPage: 1\n        };\n    }\n\n    onFilter = (filterValue) => {\n        console.log('onFilter', filterValue);\n        this.props.filterProviders(filterValue);\n    }\n\n    onFilterSelect = (_component, column) => {\n        console.log('onFilter', column);\n        this.props.setProviderFilterColumn(column.value);\n    }\n\n    onSetPage = (number) => {\n        this.setState({\n            onPage: number\n        });\n        this.props.pageAndSize(number, this.state.itemsPerPage);\n    }\n\n    onPerPageSelect = (count) => {\n        this.setState({\n            onPage: 1,\n            itemsPerPage: count\n        });\n        this.props.pageAndSize(1, count);\n    }\n\n    renderMainContent = () => (\n        <Card>\n            <CardHeader>\n                <SourcesFilter\n                    columns={filter(sourcesViewDefinition.columns, c => c.searchable)}\n                    onFilter={this.onFilter}\n                    onFilterSelect={this.onFilterSelect}/>\n            </CardHeader>\n            <CardBody>\n                <SourcesSimpleView columns={sourcesViewDefinition.columns}/>\n            </CardBody>\n            <CardFooter>\n                <Pagination\n                    itemsPerPage={this.state.itemsPerPage}\n                    page={this.state.onPage}\n                    direction='up'\n                    onSetPage={this.onSetPage}\n                    onPerPageSelect={this.onPerPageSelect}\n                    numberOfItems={this.props.numberOfEntities || 0}\n                />\n            </CardFooter>\n        </Card>\n    );\n\n    render = () => {\n        const { numberOfEntities } = this.props;\n        const displayEmptyState = this.props.loaded &&      // already loaded\n            !this.props.filterValue &&                      // no filter active\n            (!numberOfEntities || numberOfEntities === 0);  // no records do display\n\n        const editorNew = this.props.location.pathname === paths.sourcesNew;\n        const editorEdit = this.props.match.path === paths.sourcesEdit;\n\n        return (\n            <React.Fragment>\n                <Route exact path={paths.sourcesRemove} component={ SourceRemoveModal } />\n                { editorNew || editorEdit ? <SourceEditModal /> : '' }\n                <PageHeader>\n                    <PageHeaderTitle title='Sources'/>\n                    <Link to={paths.sourcesNew}>\n                        <Button className='pull-right' variant='secondary'> Add a New Source </Button>\n                    </Link>\n                </PageHeader>\n                <Section type='content'>\n                    {displayEmptyState ? <SourcesEmptyState /> : this.renderMainContent()}\n                </Section>\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n    { filterProviders, loadEntities, loadSourceTypes, pageAndSize, setProviderFilterColumn }, dispatch);\n\nconst mapStateToProps = ({ providers: { filterValue, loaded, numberOfEntities } }) => (\n    { filterValue, loaded, numberOfEntities }\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SourcesPage));\n"],"sourceRoot":""}