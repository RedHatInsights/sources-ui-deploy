{"version":3,"sources":["webpack:///./src/components/AddApplication/removeAppSubmit.js","webpack:///./src/components/Authentication.js","webpack:///./src/components/AddApplication/RemoveAppModal.js","webpack:///./src/components/AddApplication/ApplicationSelect.js","webpack:///./src/utilities/SourcesFormRenderer.js","webpack:///./src/api/doUpdateSource.js","webpack:///./src/api/patchCmValues.js","webpack:///./src/components/AddApplication/AuthTypeCleaner.js","webpack:///./src/components/AddApplication/AddApplicationDescription.js","webpack:///./src/components/AddApplication/schema/authenticationSelectionStep.js","webpack:///./src/components/AddApplication/schema/generateFirstAuthStep.js","webpack:///./src/components/AddApplication/AuthTypeSetter.js","webpack:///./src/components/AddApplication/schema/selectAuthenticationStep.js","webpack:///./src/components/AddApplication/AddApplicationSchema.js","webpack:///./src/components/AddApplication/WizardBody.js","webpack:///./src/api/doAttachApp.js","webpack:///./src/components/AddApplication/reducer.js","webpack:///./src/components/AddApplication/AddApplication.js"],"names":["removeAppSubmit","app","intl","onCancel","dispatch","source","titleSuccess","formatMessage","id","defaultMessage","name","display_name","titleError","removeApplication","Authentication","rest","formOptions","useFormApi","values","getState","match","isEditing","authentication","isModified","get","useState","edited","setEdited","firstClick","useRef","mounted","useEffect","current","pristine","doNotRequirePassword","validate","filter","type","validatorTypes","REQUIRED","componentProps","resolveProps","validated","FormGroup","helperText","label","onFocus","isRequired","TextInput","aria-label","value","autoFocus","RemoveAppModal","container","useIntl","appTypes","useSelector","sources","useSource","useDispatch","hidden","dependentApps","dependent_applications","map","appName","appType","find","sourceAppsNames","includes","x","Modal","className","isOpen","onClose","variant","header","Title","headingLevel","size","actions","key","onClick","TextContent","Text","component","TextVariants","p","length","apps","propTypes","PropTypes","shape","string","arrayOf","func","instanceOf","Element","RemoveRadio","option","setApplicationToRemove","Button","htmlFor","application_type_id","ApplicationSelect","props","useFieldApi","options","input","onChange","removingApp","applications","isCurrentlyRemoving","isDeleting","appIds","reduce","acc","Radio","isChecked","isDisabled","SourcesFormRenderer","FormTemplate","componentMapper","mapperExtension","componentTypes","SWITCH","validatorMapper","PATTERN","MIN_LENGTH","URL","urlOrHost","formData","url","scheme","host","port","path","u","protocol","replace","hostname","defaultPort","pathname","error","parseUrl","endpoint","doUpdateSource","data","promises","push","getSourcesApi","updateSource","endPointPort","parseInt","endpointData","isNaN","undefined","updateEndpoint","endpoints","authentications","Object","keys","forEach","idWithoutPrefix","updateAuthentication","billing_source","credentials","cmDataOut","axiosInstance","patch","COST_MANAGEMENT_API_BASE","Promise","all","AuthTypeCleaner","selectedAppId","initialValue","setInitialValue","batch","change","AddApplicationDescription","sourceTypes","sourceType","source_type_id","applicationsPart","Fragment","h4","product_name","authenticationSelectionStep","authenticationValues","title","fields","RADIO","supported_authentication_types","schema","authtype","nextStep","application","auth","generateFirstAuthStep","endpointFields","schemaBuilder","additionalStepName","skipEndpoint","customSteps","additionalIncludesStepKeys","stepProps","firstAdditonalStep","additionalFields","AuthTypeSetter","selectedAuthentication","startsWith","innerSetter","object","SelectAuthenticationDescription","applicationTypeName","authenticationTypeName","generateAuthSelectionOptions","applicationTypes","supportedAuthTypeName","supportedAuthType","includeUsername","username","includeAppName","selectAuthenticationStep","Content","hideField","ifAppSupported","supported_source_types","isAppAvailable","supportedAuthTypes","SUB_FORM","condition","and","when","is","appId","ApplicationSummary","hasAlreadySupportedAuthType","authValues","sourceTypeName","hasMultipleAuthenticationTypes","hasAvailableApps","authenticationFields","imported","appendEndpoint","hasEndpointStep","appAdditionalSteps","authType","applicationSelection","selectionSteps","WIZARD","inModal","showTitles","crossroads","description","buttonLabels","submit","cancel","back","WizardBodyAttach","step","goToSources","Wizard","steps","isFinishedStep","node","removeEmpty","obj","isEmpty","doAttachApp","formApi","authenticationInitialValues","initialValues","a","formState","allFormValues","selectedAuthId","authInitialValues","valuesWithoutAuth","newAddedValues","addedDiff","updatedValues","updatedDiff","newAddedAuthValues","updatedAuthValues","filteredValues","merge","cloneDeep","sourceId","endpointId","resolve","hasModifiedEndpoint","hasModifiedUrl","createEndpointData","default","source_id","createEndpoint","doCreateApplication","endpointDataOut","applicationDataOut","authenticationDataOut","authenticationData","resource_id","resource_type","createAuthentication","authenticationId","promisesSecondRound","authAppData","application_id","authentication_id","createAuthApp","patchSource","timeout","timeoutedApps","checkAppAvailability","console","deleteApplication","handleError","initialState","state","authenticationsValues","sourceAppsLength","isCancelling","reducer","selectedApp","saveSelectedApp","onSubmit","setState","then","checkSourceStatus","loadEntities","FormTemplateWrapper","showFormControls","AddApplication","history","useHistory","loaded","useIsLoaded","shallowEqual","sourceTypesLoaded","appTypesLoaded","useReducer","document","createElement","removeAppAction","listEndpointAuthentications","endpointToUrl","routes","WizardBody","customText","cancelTitle","onSubmitWrapper","onReset","shownStep","onRetry","returnButtonTitle","primaryAction","secondaryActions","target","href","rel","availability_status","hideSourcesButton","successfulMessage","message","availability_status_error","Component","to","replaceRouteId","sourcesEdit","filteredAppTypes","filterApps","createSchema","onSubmitFinal","onStay","onExit","subscription","debug","clearedValue"],"mappings":"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","file":"js/addApp.fee299fbf99d1b010471.js","sourcesContent":["import { removeApplication } from '../../redux/sources/actions';\n\nconst removeAppSubmit = (app, intl, onCancel, dispatch, source) => {\n    const titleSuccess = intl.formatMessage({\n        id: 'sources.removeAppWarning',\n        defaultMessage: `{ name } was removed from this source.`\n    },\n    {\n        name: app.display_name\n    });\n    const titleError = intl.formatMessage({\n        id: 'sources.removeAppError',\n        defaultMessage: `Removing of { name } application from this source was unsuccessful.`\n    }, {\n        name: app.display_name\n    });\n    onCancel && onCancel();\n    return dispatch(removeApplication(app.id, source.id, titleSuccess, titleError));\n};\n\nexport default removeAppSubmit;\n","import React, { useState, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\n\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\n\nimport TextField from '@data-driven-forms/pf4-component-mapper/dist/cjs/text-field';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validated from '@redhat-cloud-services/frontend-components-sources/cjs/validated';\n\nconst Authentication = (rest) => {\n    const formOptions = useFormApi();\n    const values = formOptions.getState().values;\n\n    const [authenticationId] = rest?.name?.match(/\\d+/) || [];\n    const isEditing = authenticationId || values.authentication?.id;\n\n    // If there is any value, the field is modified (password is always empty on start)\n    let isModified = get(values, rest.name);\n\n    const [edited, setEdited] = useState(!isEditing || isModified);\n    const firstClick = useRef(true);\n    const mounted = useRef(false);\n\n    useEffect(() => {\n        if (mounted.current) {\n            // reset on restart\n            if (\n                !firstClick.current && formOptions.getState().pristine\n            ) {\n                setEdited(false);\n                firstClick.current = true;\n            }\n\n            if (edited) {\n                firstClick.current = false;\n            }\n        }\n    });\n\n    useEffect(() => {\n        mounted.current = true;\n    }, []);\n\n    const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n    const componentProps = {\n        ...rest,\n        ...(isEditing ? {\n            validate: doNotRequirePassword,\n            resolveProps: validated,\n        } : {})\n    };\n\n    if (!edited && isEditing) {\n        return (<FormGroup\n            helperText={componentProps.helperText}\n            label={componentProps.label}\n            onFocus={() => setEdited(true)}\n            isRequired\n        >\n            <TextInput aria-label=\"pre-filled-authentication\" value=\"•••••••••••••\" />\n        </FormGroup>);\n    }\n\n    return (\n        <TextField { ...componentProps } autoFocus={true}/>\n    );\n};\n\nexport default Authentication;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { useSource } from '../../hooks/useSource';\n\nimport removeAppSubmit from './removeAppSubmit';\n\nconst RemoveAppModal = ({ app, onCancel, container }) => {\n    const intl = useIntl();\n\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const onSubmit = () => removeAppSubmit(app, intl, onCancel, dispatch, source);\n\n    useEffect(() => {\n        if (container) {\n            container.hidden = true;\n        }\n    }, []);\n\n    const dependentApps = app.dependent_applications.map(appName => {\n        const appType = appTypes.find(({ name }) => name === appName);\n\n        return app.sourceAppsNames.includes(appType?.display_name) && appType?.display_name;\n    }).filter(x => x);\n\n    return (\n        <Modal\n            className=\"ins-c-sources__dialog--warning\"\n            isOpen={true}\n            onClose={onCancel}\n            variant=\"small\"\n            aria-label={\n                intl.formatMessage({\n                    id: 'sources.deleteAppTitle',\n                    defaultMessage: 'Remove application?',\n                })\n            }\n            header={\n                <Title headingLevel=\"h1\" size=\"2xl\">\n                    <ExclamationTriangleIcon size=\"sm\" className=\"ins-m-alert ins-c-source__delete-icon pf-u-mr-sm\" />\n                    {intl.formatMessage({\n                        id: 'sources.deleteAppTitle',\n                        defaultMessage: 'Remove application?',\n                    })}\n                </Title>\n            }\n            actions={[\n                <Button\n                    id=\"deleteSubmit\" key=\"submit\" variant=\"danger\" type=\"button\" onClick={ onSubmit }\n                >\n                    { intl.formatMessage({\n                        id: 'sources.remove',\n                        defaultMessage: 'Remove'\n                    }) }\n                </Button>,\n                <Button id=\"deleteCancel\" key=\"cancel\" variant=\"link\" type=\"button\" onClick={ onCancel }>\n                    { intl.formatMessage({\n                        id: 'sources.cancel',\n                        defaultMessage: 'Cancel'\n                    }) }\n                </Button>\n            ]}\n        >\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    { intl.formatMessage({\n                        id: 'sources.deleteAppWarning',\n                        defaultMessage: '{ appName } will be disconnected from this source.'\n                    }, { appName: <b key=\"b\">{app.display_name}</b> }) }\n                </Text>\n                {dependentApps.length > 0 && <Text component={TextVariants.p}>\n                    { intl.formatMessage({\n                        id: 'sources.deleteAppDetails',\n                        defaultMessage: 'This change will affect these applications: { apps }.'\n                    }, { apps: dependentApps }) }\n                </Text>}\n            </TextContent>\n        </Modal>\n    );\n};\n\nRemoveAppModal.propTypes = {\n    app: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        display_name: PropTypes.string.isRequired,\n        dependent_applications: PropTypes.arrayOf(PropTypes.string),\n        sourceAppsNames: PropTypes.arrayOf(PropTypes.string)\n    }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    container: PropTypes.instanceOf(Element)\n};\n\nexport default RemoveAppModal;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Radio } from '@patternfly/react-core/dist/js/components/Radio/Radio';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport TrashIcon from '@patternfly/react-icons/dist/js/icons/trash-icon';\n\nimport useFieldApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-field-api';\n\nimport { useSource } from '../../hooks/useSource';\n\nimport RemoveAppModal from './RemoveAppModal';\n\nconst RemoveRadio = ({ option, setApplicationToRemove, sourceAppsNames, app, appType }) => {\n    const intl = useIntl();\n\n    const onClick = () => setApplicationToRemove({\n        id: app?.id,\n        display_name: appType?.display_name,\n        dependent_applications: appType?.dependent_applications,\n        sourceAppsNames\n    });\n\n    return (<div className=\"pf-c-radio pf-u-mb-md\">\n        <Button\n            id={`remove-app-${option.value}`}\n            variant=\"plain\"\n            aria-label={intl.formatMessage({\n                id: 'source.removeAppAria',\n                defaultMessage: 'Remove application {app} from this source'\n            }, { app: option.label })}\n            className=\"pf-u-p-0\"\n            onClick={onClick}\n        >\n            <TrashIcon variant=\"small\" />\n        </Button>\n        <label className=\"pf-c-radio__label\" htmlFor={`remove-app-${option.value}`}>\n            {option.label}\n        </label>\n    </div>);\n};\n\nRemoveRadio.propTypes = {\n    option: PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        value: PropTypes.string.isRequired\n    }),\n    setApplicationToRemove: PropTypes.func.isRequired,\n    sourceAppsNames: PropTypes.arrayOf(PropTypes.string),\n    appType: PropTypes.shape({\n        display_name: PropTypes.string.isRequired,\n        dependent_applications: PropTypes.arrayOf(PropTypes.string)\n    }),\n    app: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        application_type_id: PropTypes.string.isRequired\n    })\n};\n\nconst ApplicationSelect = (props) => {\n    const { options, input: { onChange, value, name }, container } = useFieldApi(props);\n\n    const [removingApp, setApplicationToRemove] = useState({});\n\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const sourceAppsNames = source.applications\n    .map(({ application_type_id }) => appTypes.find(({ id }) => id === application_type_id)?.display_name);\n\n    const appType = (value) => appTypes?.find(appType =>\n        appType.id === value\n    );\n    const app = (value) => source.applications.find(app => app.application_type_id === value);\n\n    const isCurrentlyRemoving = (value) => app(value)?.isDeleting;\n\n    const appIds = source.applications.filter(({ isDeleting }) => !isDeleting)\n    .reduce((acc, app) => [...acc, app.application_type_id], []);\n\n    return (\n        <div>\n            {removingApp.id && <RemoveAppModal\n                app={removingApp}\n                onCancel={() => {\n                    if (container) {\n                        container.hidden = false;\n                    }\n\n                    return setApplicationToRemove({});\n                }}\n                container={container}\n            />}\n            {options.map((option) => (!appIds.includes(option.value) ? (<Radio\n                className=\"pf-u-mb-md\"\n                key={option.value}\n                onChange={() => onChange(option.value)}\n                label={option.label}\n                id={`${name}-${option.value}`}\n                name={name}\n                isChecked={value === option.value }\n                isDisabled={isCurrentlyRemoving(option.value)}\n            />) : (<RemoveRadio\n                key={option.value}\n                option={option}\n                setApplicationToRemove={setApplicationToRemove}\n                sourceAppsNames={sourceAppsNames}\n                app={app(option.value)}\n                appType={appType(option.value)}\n            />)))}\n        </div>\n    );\n};\n\nexport default ApplicationSelect;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer/dist/cjs/form-renderer';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validatorMapper from '@data-driven-forms/react-form-renderer/dist/cjs/validator-mapper';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/cjs/component-mapper';\n\nimport { mapperExtension } from '@redhat-cloud-services/frontend-components-sources/cjs/sourceFormRenderer';\n\nimport Authentication from '../components/Authentication';\n\nimport ApplicationSelect from '../components/AddApplication/ApplicationSelect';\n\nconst SourcesFormRenderer = props => (\n    <FormRenderer\n        FormTemplate={FormTemplate}\n        componentMapper={{\n            ...componentMapper,\n            ...mapperExtension,\n            authentication: Authentication,\n            'switch-field': componentMapper[componentTypes.SWITCH],\n            'application-select': ApplicationSelect\n        }}\n        validatorMapper={{\n            'required-validator': validatorMapper[validatorTypes.REQUIRED],\n            'pattern-validator': validatorMapper[validatorTypes.PATTERN],\n            'min-length-validator': validatorMapper[validatorTypes.MIN_LENGTH],\n            'url-validator': validatorMapper[validatorTypes.URL]\n        }}\n        {...props}\n    />\n);\n\nexport default SourcesFormRenderer;\n","import { defaultPort } from '../components/SourcesTable/formatters';\nimport { getSourcesApi } from './entities';\nimport { patchCmValues } from './patchCmValues';\n\nexport const parseUrl = url => {\n    if (url === null) {\n        return {\n            scheme: null,\n            host: null,\n            port: null,\n            path: null\n        };\n    }\n\n    if (!url) {\n        return ({});\n    }\n\n    try {\n        const u = new URL(url);\n        const scheme =  u.protocol.replace(/:$/, '');\n\n        return {\n            scheme,\n            host: u.hostname,\n            port: u.port === '' ? defaultPort(scheme) : u.port,\n            path: u.pathname\n        };\n    } catch (error) {\n        return ({});\n    }\n};\n\nexport const urlOrHost = formData =>\n    formData.url || formData.url === null ? parseUrl(formData.url) : formData.endpoint ? formData.endpoint : formData;\n\nexport const doUpdateSource = (source, formData) => {\n    const promises = [];\n\n    if (formData.source) {\n        promises.push(getSourcesApi().updateSource(source.source.id, formData.source));\n    }\n\n    if (formData.endpoint || formData.url || formData.url === null) {\n        const { scheme, host, port, path } = urlOrHost(formData);\n        const endPointPort = port === null ? null : parseInt(port, 10);\n\n        const endpointData = {\n            scheme,\n            host,\n            path,\n            port: endPointPort === null ? null : isNaN(endPointPort) ? undefined : endPointPort,\n            ...formData.endpoint\n        };\n\n        promises.push(getSourcesApi().updateEndpoint(source.endpoints[0].id, endpointData));\n    }\n\n    if (formData.authentications) {\n        Object.keys(formData.authentications).forEach((key) => {\n            const idWithoutPrefix = key.replace('a', '');\n\n            promises.push(getSourcesApi().updateAuthentication(idWithoutPrefix, formData.authentications[key]));\n        });\n    }\n\n    if (formData.billing_source || formData.credentials) {\n        let cmDataOut = {};\n\n        if (formData.credentials) {\n            cmDataOut = {\n                authentication: {\n                    credentials: formData.credentials\n                }\n            };\n        }\n\n        if (formData.billing_source) {\n            cmDataOut = {\n                ...cmDataOut,\n                billing_source: formData.billing_source\n            };\n        }\n\n        promises.push(patchCmValues(source.source.id, cmDataOut));\n    }\n\n    return Promise.all(promises);\n};\n","import { axiosInstance } from './entities';\nimport { COST_MANAGEMENT_API_BASE } from './constants';\n\nexport const patchCmValues = (id, data) => axiosInstance.patch(`${COST_MANAGEMENT_API_BASE}/sources/${id}/`, data);\n","import { useState, useEffect } from 'react';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const AuthTypeCleaner = () => {\n    const formOptions = useFormApi();\n\n    const selectedAppId = get(formOptions.getState().values, 'application.application_type_id', '');\n\n    const [initialValue, setInitialValue] = useState(selectedAppId);\n\n    useEffect(() => {\n        if (initialValue !== selectedAppId) {\n            formOptions.batch(() => {\n                formOptions.change('authentication', undefined);\n                formOptions.change('selectedAuthentication', undefined);\n            });\n            setInitialValue(undefined);\n        }\n    }, [selectedAppId]);\n\n    return null;\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { useSource } from '../../hooks/useSource';\n\nconst AddApplicationDescription = () => {\n    const intl = useIntl();\n\n    const sourceTypes = useSelector(({ sources }) => sources.sourceTypes);\n    const source = useSource();\n\n    const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n    const apps = source.applications.filter((app) => !app.isDeleting);\n\n    const appIds = source.applications.filter(({ isDeleting }) => !isDeleting)\n    .reduce((acc, app) => [...acc, app.application_type_id], []);\n\n    const applicationsPart = apps.filter(({ id }) => !appIds.includes(id)).length > 0 ? (<React.Fragment>\n        <Text component={TextVariants.h4} id=\"add-application-header\">\n            { intl.formatMessage({\n                id: 'sources.apps',\n                defaultMessage: 'Applications'\n            }) }\n        </Text>\n        <Text component={TextVariants.p} id=\"add-application-description\">\n            {intl.formatMessage({\n                id: 'sources.addAppMultipleAppDesc',\n                defaultMessage: 'Select a radio button to add an application. Click trash icon to remove an application.'\n            })}\n        </Text>\n    </React.Fragment>) : (<React.Fragment>\n        <Text component={TextVariants.h4} id=\"add-application-header\">\n            { intl.formatMessage({\n                id: 'sources.addApp',\n                defaultMessage: 'Add an application'\n            }) }\n        </Text>\n        <Text component={TextVariants.p} id=\"add-application-description\">\n            {intl.formatMessage({\n                id: 'sources.addAppNoAppsDesc',\n                // eslint-disable-next-line max-len\n                defaultMessage: 'There are currently no applications connected to this source. Select from available applications below.'\n            })}\n        </Text>\n    </React.Fragment>);\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h4}>\n                    { intl.formatMessage({\n                        id: 'sources.type',\n                        defaultMessage: 'Source type'\n                    }) }\n                </Text>\n                <Text component={TextVariants.p} id=\"add-application-desc-type\">\n                    { sourceType ? sourceType.product_name : intl.formatMessage({\n                        id: 'sources.typeNotFound',\n                        defaultMessage: 'Type not found'\n                    })}\n                </Text>\n                {applicationsPart}\n            </TextContent>\n        </React.Fragment>\n    );\n};\n\nexport default AddApplicationDescription;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nconst authenticationSelectionStep = (sourceType, appType, intl, authenticationValues) => {\n    const nextStep = ({ values: { application, authtype } }) => {\n        if (authtype) {\n            const hasSupportedAuthType = authenticationValues.find((auth) => auth.authtype === authtype);\n\n            if (hasSupportedAuthType) {\n                return 'selectAuthentication';\n            }\n\n            return `${sourceType.name}-${application && application.application_type_id}-${authtype}`;\n        }\n    };\n\n    return ({\n        name: `selectAuthType-${appType.id}`,\n        title: intl.formatMessage({\n            id: 'sources.selectAuthenticationTitle',\n            defaultMessage: 'Select authentication type'\n        }),\n        fields: [{\n            component: componentTypes.RADIO,\n            name: 'authtype',\n            options: appType.supported_authentication_types[sourceType.name].map(type => ({\n                value: type,\n                label: sourceType.schema.authentication.find((authtype) => authtype.type === type)?.name || 'Unknown type'\n            })),\n            isRequired: true,\n            validate: [{ type: validatorTypes.REQUIRED }]\n        }],\n        nextStep\n    });\n};\n\nexport default authenticationSelectionStep;\n","import * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\n\nconst generateFirstAuthStep = (type, appType, endpointFields, authtype, intl) => {\n    let fields = [...endpointFields];\n\n    if (schemaBuilder.shouldUseAppAuth(type.name, authtype, appType.name)) {\n        fields = [];\n    }\n\n    const auth = type.schema.authentication.find(({ type }) => type === authtype);\n\n    const additionalStepName = `${type.name}-${authtype}-${appType.name}-additional-step`;\n\n    const skipEndpoint = schemaBuilder.shouldSkipEndpoint(type.name, authtype, appType.name);\n    const customSteps = schemaBuilder.hasCustomSteps(type.name, authtype, appType.name);\n\n    let nextStep;\n\n    if (schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).length > 0) {\n        nextStep = additionalStepName;\n    } else if (endpointFields.length === 0 && !skipEndpoint) {\n        nextStep = `${type.name}-endpoint`;\n    } else {\n        nextStep = 'summary';\n    }\n\n    const additionalIncludesStepKeys = schemaBuilder.getAdditionalStepKeys(type.name, authtype, appType.name);\n    const hasCustomStep = schemaBuilder.shouldSkipSelection(type.name, authtype, appType.name);\n\n    let stepProps = {};\n\n    if (hasCustomStep) {\n        const firstAdditonalStep = schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).find(({ name }) => !name);\n        const additionalFields = schemaBuilder.getAdditionalStepFields(auth.fields, additionalStepName);\n\n        if (firstAdditonalStep.nextStep) {\n            nextStep = firstAdditonalStep.nextStep;\n        } else if (endpointFields.length === 0 && !skipEndpoint && !customSteps) {\n            nextStep = `${type.name}-endpoint`;\n        } else {\n            nextStep = 'summary';\n        }\n\n        stepProps = {\n            ...firstAdditonalStep,\n            fields: [\n                ...fields,\n                ...schemaBuilder.injectAuthFieldsInfo(\n                    [...firstAdditonalStep.fields, ...additionalFields],\n                    type.name,\n                    authtype,\n                    appType.name\n                )\n            ]\n        };\n    }\n\n    return ({\n        name: `${type.name}-${appType.id}-${authtype}`,\n        title: intl.formatMessage({\n            id: 'sources.configureCredentials',\n            defaultMessage: 'Configure credentials'\n        }),\n        fields: [\n            ...fields,\n            ...schemaBuilder.getAdditionalAuthFields(type.name, authtype, appType.name),\n            ...schemaBuilder.injectAuthFieldsInfo(\n                schemaBuilder.getNoStepsFields(auth.fields, additionalIncludesStepKeys),\n                type.name,\n                authtype,\n                appType.name\n            )\n        ],\n        nextStep,\n        ...stepProps\n    });\n};\n\nexport default generateFirstAuthStep;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const innerSetter = ({\n    formOptions,\n    authenticationValues,\n    selectedAuthentication\n}) => {\n    if (!selectedAuthentication.startsWith('new-')) {\n        const authentication = authenticationValues.find(({ id }) => id === selectedAuthentication);\n\n        formOptions.change('authentication', authentication);\n    } else {\n        const authtype = selectedAuthentication.replace('new-', '');\n\n        formOptions.change('authentication', { authtype });\n    }\n};\n\nexport const AuthTypeSetter = ({ authenticationValues }) => {\n    const formOptions = useFormApi();\n\n    const selectedAuthentication = formOptions.getState().values.selectedAuthentication;\n\n    const [initialValue, setInitialValue] = useState(selectedAuthentication);\n\n    useEffect(() => {\n        if (initialValue !== selectedAuthentication) {\n            innerSetter({ formOptions, authenticationValues, selectedAuthentication });\n            setInitialValue(undefined);\n        }\n    }, [selectedAuthentication]);\n\n    return null;\n};\n\nAuthTypeSetter.propTypes = {\n    authenticationValues: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { AuthTypeSetter } from '../AuthTypeSetter';\n\nexport const SelectAuthenticationDescription = ({ applicationTypeName, authenticationTypeName }) => {\n    const intl = useIntl();\n\n    return (\n        <TextContent>\n            <Text component={ TextVariants.p }>\n                { intl.formatMessage({\n                    id: 'sources.selectAuthenticationDescription',\n                    // eslint-disable-next-line max-len\n                    defaultMessage: 'Selected application { applicationTypeName } supports { authenticationTypeName } authentication type. You can use already defined authentication values or define new.'\n                }, { applicationTypeName, authenticationTypeName }) }\n            </Text>\n        </TextContent>\n    );};\n\nSelectAuthenticationDescription.propTypes = {\n    applicationTypeName: PropTypes.string,\n    authenticationTypeName: PropTypes.string\n};\n\nexport const generateAuthSelectionOptions = ({\n    source, authenticationValues, applicationTypes, supportedAuthTypeName, supportedAuthType\n}) => authenticationValues.filter(({ authtype }) => authtype === supportedAuthType).map((values) => {\n    const app = source.applications.find(({ authentications }) => authentications.find(({ id }) => id === values.id));\n\n    const appType = app && app.application_type_id ? applicationTypes.find(({ id }) => id === app.application_type_id) : '';\n\n    const includeUsername = values.username ? `-${values.username}` : '';\n    const includeAppName = appType ? `-${appType.display_name}` : `-unused-${values.id}`;\n    const label = `${supportedAuthTypeName}${includeUsername}${includeAppName}`;\n\n    return {\n        label,\n        value: values.id,\n    };\n});\n\nconst selectAuthenticationStep = ({\n    intl, source, authenticationValues, sourceType, applicationTypes\n}) => {\n    const nextStep = ({ values: { application, authtype, authentication } }) => {\n        const app = application ? application : {};\n        const appId = app.application_type_id ? app.application_type_id : '';\n\n        return `${sourceType.name}-${appId}-${authtype || authentication?.authtype}`;\n    };\n\n    const fields = [{\n        component: 'description',\n        name: 'authtypesetter',\n        Content: AuthTypeSetter,\n        authenticationValues,\n        hideField: true,\n    }];\n\n    applicationTypes.forEach((app) => {\n        const ifAppSupported = app.supported_source_types.includes(sourceType.name);\n        const isAppAvailable = !source.applications?.find(({ application_type_id }) => application_type_id === app.id);\n\n        if (ifAppSupported && isAppAvailable) {\n            const supportedAuthTypes = get(app, `supported_authentication_types[${sourceType.name}]`, []);\n\n            supportedAuthTypes.forEach((supportedAuthType) => {\n                const hasAvailableAuthentications = authenticationValues.find(({ authtype }) => authtype === supportedAuthType);\n\n                if (hasAvailableAuthentications) {\n                    const supportedAuthTypeName =\n                get(sourceType, `schema.authentication`, {}).find(({ type }) => type === supportedAuthType).name;\n\n                    fields.push({\n                        component: componentTypes.SUB_FORM,\n                        name: `${app.name}-subform`,\n                        condition: {\n                            and: [{\n                                when: 'application.application_type_id',\n                                is: app.id\n                            },\n                            ...(supportedAuthTypes.length > 1\n                                ? [{\n                                    when: 'authtype',\n                                    is: supportedAuthType\n                                }]\n                                : []\n                            )]\n                        },\n                        fields: [\n                            {\n                                name: `${app.name}-select-authentication-summary`,\n                                component: 'description',\n                                Content: SelectAuthenticationDescription,\n                                applicationTypeName: app.display_name,\n                                authenticationTypeName: supportedAuthTypeName,\n                            },\n                            {\n                                component: componentTypes.RADIO,\n                                name: 'selectedAuthentication',\n                                label: intl.formatMessage({\n                                    id: 'sources.selectAuthenticationTitle',\n                                    defaultMessage: 'Select authentication'\n                                }),\n                                isRequired: true,\n                                validate: [{ type: validatorTypes.REQUIRED }],\n                                options: [\n                                    {\n                                        label: intl.formatMessage({\n                                            id: 'sources.selectAuthenticationradioLabel',\n                                            defaultMessage: 'Define new { supportedAuthTypeName }'\n                                        }, { supportedAuthTypeName }),\n                                        value: `new-${supportedAuthType}`\n                                    },\n                                    ...generateAuthSelectionOptions({\n                                        authenticationValues,\n                                        source,\n                                        applicationTypes,\n                                        supportedAuthTypeName,\n                                        supportedAuthType\n                                    })\n                                ]\n                            },\n                        ]\n                    });\n                }\n            });\n        }\n    });\n\n    return ({\n        name: 'selectAuthentication',\n        title: intl.formatMessage({\n            id: 'sources.selectAuthenticationTitle',\n            defaultMessage: 'Select authentication'\n        }),\n        fields,\n        nextStep\n    });\n};\n\nexport default selectAuthenticationStep;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { useIntl } from 'react-intl';\nimport * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\nimport get from 'lodash/get';\n\nimport { AuthTypeCleaner } from './AuthTypeCleaner';\nimport AddApplicationDescription from './AddApplicationDescription';\nimport authenticationSelectionStep from './schema/authenticationSelectionStep';\nimport generateFirstAuthStep from './schema/generateFirstAuthStep';\nimport selectAuthenticationStep from './schema/selectAuthenticationStep';\n\nexport const ApplicationSummary = () => {\n    const intl = useIntl();\n\n    return (<TextContent>\n        <Text component={ TextVariants.p }>\n            { intl.formatMessage({\n                id: 'sources.reviewAddAppSummary',\n                defaultMessage: 'Review the information below and click Add to add the application to your source. Use the Back button to make changes.'\n            }) }\n        </Text>\n    </TextContent>);\n};\n\nexport const hasAlreadySupportedAuthType = (authValues = [], appType, sourceTypeName) => (\n    authValues.find(({ authtype }) => authtype === get(appType, `supported_authentication_types.${sourceTypeName}[0]`))\n);\n\nexport const hasMultipleAuthenticationTypes = (app, sourceType) => (\n    app.supported_source_types.includes(sourceType.name) && app.supported_authentication_types[sourceType.name]?.length > 1\n);\n\nconst fields = (\n    applications = [], intl, sourceTypes, applicationTypes, authenticationValues, source, container\n) => {\n    const hasAvailableApps = applications.length > 0;\n\n    let nextStep = hasAvailableApps ? 'summary' : undefined;\n    let authenticationFields = [];\n    const sourceType = sourceTypes.find(({ id }) => id === source.source_type_id);\n\n    if (!source.imported && hasAvailableApps) {\n        const appendEndpoint = sourceType.schema.endpoint.hidden ? sourceType.schema.endpoint.fields : [];\n        const hasEndpointStep = appendEndpoint.length === 0;\n\n        applicationTypes.forEach(appType => {\n            if (appType.supported_source_types.includes(sourceType.name)) {\n                appType.supported_authentication_types[sourceType.name].forEach((authtype) => {\n                    authenticationFields.push(\n                        generateFirstAuthStep(\n                            sourceType,\n                            appType,\n                            appendEndpoint,\n                            authtype,\n                            intl\n                        )\n                    );\n                });\n            }\n        });\n\n        sourceType.schema.authentication.forEach(auth => {\n            applicationTypes.forEach(appType => {\n                if (appType.supported_source_types.includes(sourceType.name)) {\n                    const appAdditionalSteps = schemaBuilder.getAdditionalSteps(sourceType.name, auth.type, appType.name);\n\n                    if (appAdditionalSteps.length > 0) {\n                        authenticationFields.push(\n                            ...schemaBuilder.createAdditionalSteps(\n                                appAdditionalSteps,\n                                sourceType.name,\n                                auth.type,\n                                hasEndpointStep,\n                                auth.fields,\n                                appType.name,\n                            )\n                        );\n                    }\n                }\n            });\n        });\n\n        if (hasEndpointStep) {\n            authenticationFields.push(schemaBuilder.createEndpointStep(sourceType.schema.endpoint, sourceType.name));\n        }\n\n        nextStep = ({ values: { application } }) => {\n            if (application) {\n                const appType = applicationTypes.find(({ id }) => id === application.application_type_id);\n\n                const hasMultipleAuthTypes = appType?.supported_authentication_types[sourceType.name]?.length > 1;\n\n                if (hasMultipleAuthTypes) {\n                    return `selectAuthType-${application.application_type_id}`;\n                }\n\n                if (\n                    hasAlreadySupportedAuthType(\n                        authenticationValues,\n                        applicationTypes.find(({ id }) => id === application.application_type_id),\n                        sourceType.name\n                    )\n                ) {\n                    return 'selectAuthentication';\n                }\n\n                const authType = appType?.supported_authentication_types[sourceType.name][0];\n\n                return `${sourceType.name}-${application && application.application_type_id}-${authType}`;\n            }\n        };\n    }\n\n    const applicationSelection = {\n        component: 'application-select',\n        name: 'application.application_type_id',\n        options: applications,\n        container,\n        validate: [{\n            type: validatorTypes.REQUIRED\n        }]\n    };\n\n    const selectionSteps = applicationTypes\n    .filter(app => hasMultipleAuthenticationTypes(app, sourceType))\n    .map(app => authenticationSelectionStep(sourceType, app, intl, authenticationValues));\n\n    if (!source.imported && hasAvailableApps) {\n        selectionSteps.push(\n            selectAuthenticationStep({ intl, source, authenticationValues, sourceType, applicationTypes })\n        );\n    }\n\n    return ({\n        fields: [\n            {\n                component: componentTypes.WIZARD,\n                name: 'wizard',\n                title: intl.formatMessage({\n                    id: 'sources.manageApps',\n                    defaultMessage: 'Manage applications'\n                }),\n                inModal: true,\n                container,\n                showTitles: true,\n                crossroads: ['application.application_type_id', 'selectedAuthentication', 'authtype'],\n                description: intl.formatMessage({\n                    id: 'sources.addAppDescription',\n                    defaultMessage: 'Add or remove applications from {name}.'\n                }, { name: source.name }),\n                buttonLabels: {\n                    submit: intl.formatMessage({\n                        id: 'sources.add',\n                        defaultMessage: 'Add'\n                    }),\n                    cancel: intl.formatMessage({\n                        id: 'sources.cancel',\n                        defaultMessage: 'Cancel'\n                    }),\n                    back: intl.formatMessage({\n                        id: 'sources.back',\n                        defaultMessage: 'Back'\n                    })\n                },\n                fields: [\n                    {\n                        nextStep,\n                        title: intl.formatMessage({\n                            id: 'sources.selectApp',\n                            defaultMessage: 'Add / remove applications'\n                        }),\n                        name: 'selectAppStep',\n                        fields: [\n                            {\n                                component: 'description',\n                                name: 'description',\n                                Content: AddApplicationDescription,\n                                container\n                            },\n                            applicationSelection,\n                            {\n                                component: 'description',\n                                name: 'authtypesetter',\n                                Content: AuthTypeCleaner,\n                                hideField: true\n                            }\n                        ]\n                    }, {\n                        title: intl.formatMessage({\n                            id: 'sources.reviewDetails',\n                            defaultMessage: 'Review details'\n                        }),\n                        name: 'summary',\n                        fields: [{\n                            component: 'description',\n                            name: 'description-summary',\n                            Content: ApplicationSummary\n                        }, {\n                            component: 'summary',\n                            name: 'summary',\n                            sourceTypes,\n                            applicationTypes\n                        }]\n                    },\n                    ...selectionSteps,\n                    ...authenticationFields\n                ]\n            }\n        ]\n    });\n};\n\nexport default fields;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Wizard } from '@patternfly/react-core/dist/js/components/Wizard/Wizard';\n\nconst WizardBodyAttach = ({ step, goToSources, name }) => {\n    const intl = useIntl();\n\n    return (\n        <Wizard\n            isOpen={ true }\n            onClose={goToSources}\n            title={intl.formatMessage({\n                id: 'sources.manageApps',\n                defaultMessage: 'Manage applications'\n            })}\n            description={\n                intl.formatMessage({\n                    id: 'sources.addAppDescription',\n                    defaultMessage: 'Add or remove applications from {name}.'\n                }, { name })\n            }\n            steps={ [{\n                name: 'Finish',\n                component: step,\n                isFinishedStep: true\n            }] }\n        />\n    );\n};\n\nWizardBodyAttach.propTypes = {\n    step: PropTypes.node.isRequired,\n    goToSources: PropTypes.func.isRequired,\n    name: PropTypes.string\n};\n\nexport default WizardBodyAttach;\n","import { addedDiff, updatedDiff } from 'deep-object-diff';\nimport { patchSource } from '@redhat-cloud-services/frontend-components-sources/cjs/costManagementAuthentication';\nimport { handleError } from '@redhat-cloud-services/frontend-components-sources/cjs/handleError';\nimport { checkAppAvailability } from '@redhat-cloud-services/frontend-components-sources/cjs/getApplicationStatus';\nimport { timeoutedApps } from '@redhat-cloud-services/frontend-components-sources/cjs/constants';\n\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { getSourcesApi, doCreateApplication } from './entities';\nimport { urlOrHost } from './doUpdateSource';\n\n// modification of https://stackoverflow.com/a/38340374\nexport const removeEmpty = (obj) => {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] && typeof obj[key] === 'object') {\n            if (isEmpty(obj[key])) {\n                delete obj[key];\n            } else {\n                removeEmpty(obj[key]);\n            }\n        } else if (typeof obj[key] === 'undefined') {\n            delete obj[key];\n        }\n    });\n    return obj;\n};\n\nexport const doAttachApp = async (\n    values, formApi, authenticationInitialValues, initialValues, appTypes = []\n) => {\n    let appId;\n\n    const formState = formApi.getState();\n\n    const allFormValues = formState.values;\n\n    const selectedAuthId = allFormValues.authentication?.id;\n\n    const authInitialValues = selectedAuthId && authenticationInitialValues.find(({ id }) => id === selectedAuthId);\n\n    const { authentication, ...valuesWithoutAuth } = values;\n\n    const newAddedValues = addedDiff(initialValues, valuesWithoutAuth);\n    const updatedValues = updatedDiff(initialValues, valuesWithoutAuth);\n    const newAddedAuthValues = addedDiff(authInitialValues, authentication);\n    const updatedAuthValues = updatedDiff(authInitialValues, authentication);\n\n    const filteredValues = removeEmpty({\n        ...merge(cloneDeep(newAddedValues), updatedValues),\n        authentication: {\n            ...merge(cloneDeep(newAddedAuthValues), updatedAuthValues)\n        }\n    });\n\n    try {\n        if (!allFormValues?.source?.id) {\n            throw 'Missing source id';\n        }\n\n        const sourceId = allFormValues.source.id;\n        let endpointId = allFormValues?.endpoint?.id;\n\n        const promises = [];\n\n        if (filteredValues.source && !isEmpty(filteredValues.source)) {\n            promises.push(getSourcesApi().updateSource(sourceId, filteredValues.source));\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        const hasModifiedEndpoint = filteredValues.endpoint && !isEmpty(filteredValues.endpoint);\n        const hasModifiedUrl = filteredValues.url && !isEmpty(filteredValues.url);\n\n        if (hasModifiedEndpoint || hasModifiedUrl) {\n            const { scheme, host, port, path } = urlOrHost(filteredValues);\n\n            const endPointPort = parseInt(port, 10);\n\n            const endpointData = removeEmpty({\n                ...filteredValues.endpoint,\n                scheme,\n                host,\n                port: isNaN(endPointPort) ? undefined : endPointPort,\n                path\n            });\n\n            if (endpointId) {\n                promises.push(getSourcesApi().updateEndpoint(endpointId, endpointData));\n            } else {\n                const createEndpointData = {\n                    ...endpointData,\n                    default: true,\n                    source_id: sourceId\n                };\n\n                promises.push(getSourcesApi().createEndpoint(createEndpointData));\n            }\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        if (filteredValues.application?.application_type_id) {\n            promises.push(doCreateApplication(sourceId, filteredValues.application.application_type_id));\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        // eslint-disable-next-line no-unused-vars\n        const [_sourceDataOut, endpointDataOut, applicationDataOut] = await Promise.all(promises);\n\n        let authenticationDataOut;\n\n        if (filteredValues.authentication && !isEmpty(filteredValues.authentication)) {\n            if (selectedAuthId) {\n                authenticationDataOut = await getSourcesApi().updateAuthentication(selectedAuthId, filteredValues.authentication);\n            } else {\n                const authenticationData = {\n                    ...filteredValues.authentication,\n                    resource_id: endpointDataOut?.id || applicationDataOut?.id,\n                    resource_type: endpointDataOut?.id ? 'Endpoint' : 'Application'\n                };\n\n                authenticationDataOut = await getSourcesApi().createAuthentication(authenticationData);\n            }\n        }\n\n        appId = applicationDataOut?.id;\n\n        const authenticationId = selectedAuthId || authenticationDataOut?.id;\n\n        const promisesSecondRound = [];\n\n        if (applicationDataOut?.id && authenticationId) {\n            const authAppData = {\n                application_id: applicationDataOut.id,\n                authentication_id: authenticationId\n            };\n\n            promisesSecondRound.push(getSourcesApi().createAuthApp(authAppData));\n        }\n\n        const isAttachingCostManagement = filteredValues.credentials || filteredValues.billing_source;\n        if (isAttachingCostManagement) {\n            const { credentials, billing_source } = filteredValues;\n            let data = {};\n            data = credentials ? { authentication: { credentials } } : {};\n            data = billing_source ? { ...data, billing_source } : data;\n            promisesSecondRound.push(patchSource({ id: sourceId, ...data }));\n        }\n\n        await Promise.all(promisesSecondRound);\n\n        if (applicationDataOut) {\n            const timeout = timeoutedApps(appTypes).includes(applicationDataOut.application_type_id) ? 10000 : 0;\n            return await checkAppAvailability(applicationDataOut.id, timeout);\n        }\n\n        return {};\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n        if (appId) {\n            await getSourcesApi().deleteApplication(appId);\n        }\n\n        const errorMessage = await handleError(error);\n        throw errorMessage;\n    }\n};\n","export const initialState = {\n    state: 'loading',\n    error: '',\n    values: {},\n    authenticationsValues: [],\n    sourceAppsLength: 0,\n    initialValues: {},\n    isCancelling: false,\n};\n\nconst reducer = (state, { type, length, authenticationsValues, initialValues, error, values, data, formApi }) => {\n    switch (type) {\n        case 'setSourceAppslength':\n            return {\n                ...state,\n                sourceAppsLength: length\n            };\n        case 'loadAuthentications':\n            return {\n                ...state,\n                authenticationsValues,\n                initialValues,\n                values: {},\n                state: state.state === 'loading' ? 'wizard' : state.state\n            };\n        case 'loadWithoutAuthentications':\n            return {\n                ...state,\n                initialValues,\n                values: {},\n                state: state.state === 'loading' ? 'wizard' : state.state\n            };\n        case 'reset':\n            return {\n                ...state,\n                state: 'wizard'\n            };\n        case 'submit':\n            return {\n                ...state,\n                values,\n                formApi,\n                state: 'submitting',\n            };\n        case 'finish':\n            return {\n                ...state,\n                state: 'finished',\n                data\n            };\n        case 'error':\n            return {\n                ...state,\n                state: 'errored',\n                error,\n            };\n        case 'toggleCancelling':\n            return {\n                ...state,\n                isCancelling: !state.isCancelling,\n                ...(values && { values })\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React, { useReducer, useEffect, useRef } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport filterApps from '@redhat-cloud-services/frontend-components-sources/cjs/filterApps';\nimport CloseModal from '@redhat-cloud-services/frontend-components-sources/cjs/CloseModal';\nimport LoadingStep from '@redhat-cloud-services/frontend-components-sources/cjs/LoadingStep';\nimport ErroredStep from '@redhat-cloud-services/frontend-components-sources/cjs/ErroredStep';\nimport FinishedStep from '@redhat-cloud-services/frontend-components-sources/cjs/FinishedStep';\nimport TimeoutStep from '@redhat-cloud-services/frontend-components-sources/cjs/TimeoutStep';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\n\nimport { loadEntities } from '../../redux/sources/actions';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport createSchema from './AddApplicationSchema';\nimport WizardBody from './WizardBody';\n\nimport { getSourcesApi } from '../../api/entities';\n\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { endpointToUrl } from '../SourcesTable/formatters';\nimport { routes, replaceRouteId } from '../../Routes';\n\nimport { doAttachApp } from '../../api/doAttachApp';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nimport reducer, { initialState } from './reducer';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text';\n\nimport removeAppSubmit from './removeAppSubmit';\n\nlet selectedApp = undefined; // this has to be not-state value, because it shouldn't re-render the component when changes\nconst saveSelectedApp = ({ values: { application } }) => selectedApp = application;\n\nexport const onSubmit = (values, formApi, authenticationInitialValues, dispatch, setState, initialValues, appTypes) => {\n    setState({ type: 'submit', values, formApi });\n\n    return doAttachApp(values, formApi, authenticationInitialValues, initialValues, appTypes)\n    .then(async (data) => {\n        checkSourceStatus(initialValues.source.id);\n        await dispatch(loadEntities());\n        selectedApp = undefined;\n        return setState({ type: 'finish', data });\n    })\n    .catch(error => setState({\n        type: 'error',\n        error,\n    }));\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst AddApplication = () => {\n    const intl = useIntl();\n    const history = useHistory();\n\n    const loaded = useIsLoaded();\n\n    const {\n        appTypes,\n        sourceTypesLoaded,\n        appTypesLoaded,\n        sourceTypes,\n    } = useSelector(({ sources }) => sources, shallowEqual);\n\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const [state, setState] = useReducer(reducer, initialState);\n\n    const container = useRef(document.createElement('div'));\n\n    const removeApp = () => {\n        setState({ type: 'reset' });\n\n        return removeAppSubmit(\n            { id: state.data?.id, display_name: appTypes.find(({ id }) => id === state.data?.application_type_id)?.display_name },\n            intl,\n            undefined,\n            dispatch,\n            source\n        );\n    };\n\n    useEffect(() => {\n        selectedApp = undefined;\n    }, []);\n\n    useEffect(() => {\n        if (source) {\n            // When app is only removed, there is no need to reload values\n            const removeAppAction = state.sourceAppsLength >= source.applications.length && state.sourceAppsLength > 0;\n\n            setState({ type: 'setSourceAppslength', length: source.applications.length });\n\n            if (!removeAppAction) {\n                if (source.endpoints && source.endpoints[0]) {\n                    getSourcesApi()\n                    .listEndpointAuthentications(source.endpoints[0].id)\n                    .then(({ data }) => setState({\n                        type: 'loadAuthentications',\n                        authenticationsValues: data,\n                        initialValues: {\n                            source,\n                            endpoint: source.endpoints[0],\n                            url: endpointToUrl(source.endpoints[0]),\n                            application: selectedApp,\n                        },\n                        values: {}\n                    }));\n                } else {\n                    setState({\n                        type: 'loadWithoutAuthentications',\n                        initialValues: { source, application: selectedApp },\n                        values: {}\n                    });\n                }\n            }\n        }\n    }, [source]);\n\n    const goToSources = () => history.push(routes.sources.path);\n\n    if ((!appTypesLoaded || !sourceTypesLoaded || !loaded || state.state === 'loading') && state.state !== 'submitting') {\n        return  (\n            <WizardBody\n                goToSources={goToSources}\n                step={<LoadingStep\n                    customText={intl.formatMessage({\n                        id: 'sources.loading',\n                        defaultMessage: 'Loading, please wait.'\n                    })}\n                    cancelTitle={intl.formatMessage({\n                        id: 'sources.close',\n                        defaultMessage: 'Close'\n                    })}\n                    onClose={goToSources}\n                />}\n            />\n        );\n    }\n\n    const onSubmitWrapper = (values, formApi) => onSubmit(\n        values,\n        formApi,\n        state.authenticationsValues,\n        dispatch,\n        setState,\n        state.initialValues,\n        appTypes\n    );\n\n    if (state.state === 'submitting') {\n        return  (\n            <WizardBody\n                name={source.name}\n                goToSources={goToSources}\n                step={<LoadingStep\n                    cancelTitle={intl.formatMessage({\n                        id: 'sources.close',\n                        defaultMessage: 'Close'\n                    })}\n                    onClose={goToSources}\n                    customText={intl.formatMessage({\n                        id: 'wizard.loadingText defaultMessage=Validating source credentials',\n                        defaultMessage: 'Validating source credentials'\n                    })}\n                />}\n            />\n        );\n    }\n\n    const onReset = () => setState({ type: 'reset' });\n\n    if (state.state !== 'wizard') {\n        let shownStep;\n\n        if (state.state !== 'finished') {\n            shownStep = (<ErroredStep\n                onRetry={onReset}\n                onClose={goToSources}\n                returnButtonTitle={intl.formatMessage({\n                    id: 'sources.retry',\n                    defaultMessage: 'Retry'\n                })}\n                primaryAction={() => onSubmitWrapper(state.values, state.formApi)}\n                secondaryActions={\n                    <Text\n                        component='a'\n                        target=\"_blank\"\n                        href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {intl.formatMessage({ id: 'wizard.openTicket', defaultMessage: 'Open a support case' })}\n                    </Text>\n                }\n            />);\n        } else {\n            switch (state.data.availability_status) {\n                case 'available':\n                    shownStep = (<FinishedStep\n                        title={intl.formatMessage({\n                            id: 'sources.configurationSuccessful',\n                            defaultMessage: 'Configuration successful'\n                        })}\n                        hideSourcesButton={true}\n                        onReset={onReset}\n                        onClose={goToSources}\n                        secondaryActions={\n                            <Button variant=\"link\" onClick={onReset}>\n                                { intl.formatMessage({\n                                    id: 'sources.continueManageApp',\n                                    defaultMessage: 'Continue managing applications'\n                                }) }\n                            </Button>\n                        }\n                        returnButtonTitle={\n                            intl.formatMessage({\n                                id: 'sources.backToSources',\n                                defaultMessage: 'Back to Sources'\n                            })\n                        }\n                        successfulMessage={\n                            intl.formatMessage({\n                                id: 'sources.successAddApp',\n                                defaultMessage: 'Your application was successfully added.'\n                            })\n                        }\n                    />);\n                    break;\n                case 'unavailable':\n                    shownStep = (<ErroredStep\n                        onRetry={onReset}\n                        onClose={goToSources}\n                        message={\n                            state.data.availability_status_error\n                            || intl.formatMessage({ id: 'wizard.unknownError', defaultMessage: 'Unknown error' })\n                        }\n                        title={intl.formatMessage({\n                            id: 'sources.configurationSuccessful',\n                            defaultMessage: 'Configuration unsuccessful'\n                        })}\n                        secondaryActions={<Button variant=\"link\" onClick={ removeApp }>\n                            {intl.formatMessage({ id: 'wizard.removeApp', defaultMessage: 'Remove application' })}\n                        </Button>}\n                        Component={() => (\n                            <Link to={replaceRouteId(routes.sourcesEdit.path, source.id)}>\n                                <Button variant='primary' className=\"pf-u-mt-xl\">\n                                    { intl.formatMessage({ id: 'wizard.editSource', defaultMessage: 'Edit source' })}\n                                </Button>\n                            </Link>\n                        )}\n                    />);\n                    break;\n                default:\n                    shownStep = (<TimeoutStep\n                        returnButtonTitle={\n                            intl.formatMessage({\n                                id: 'sources.backToSources',\n                                defaultMessage: 'Back to Sources'\n                            })\n                        }\n                        onClose={ goToSources }\n                        secondaryActions={<Button variant=\"link\" onClick={onReset}>\n                            { intl.formatMessage({\n                                id: 'sources.continueManageApp',\n                                defaultMessage: 'Continue managing applications'\n                            }) }\n                        </Button>}\n                    />);\n            }\n        }\n\n        return (\n            <WizardBody name={source.name} goToSources={goToSources} step={shownStep} />\n        );\n    }\n\n    const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n    const sourceTypeName = sourceType && sourceType.name;\n    const filteredAppTypes = appTypes.filter((type) =>\n        type.supported_source_types.includes(sourceTypeName)\n    )\n    .filter(filterApps)\n    .map((type) => ({\n        value: type.id,\n        label: type.display_name\n    }));\n\n    const schema = createSchema(\n        filteredAppTypes,\n        intl,\n        sourceTypes,\n        appTypes,\n        state.authenticationsValues,\n        source,\n        container.current\n    );\n\n    const hasAvailableApps = filteredAppTypes.length > 0;\n    const onSubmitFinal = hasAvailableApps ? onSubmitWrapper : goToSources;\n\n    const onStay = () => {\n        container.current.hidden = false;\n        setState({ type: 'toggleCancelling' });\n    };\n\n    const cancelBeforeExit = (values) => {\n        if (values?.application) {\n            container.current.hidden = true;\n            setState({ type: 'toggleCancelling', values }); }\n        else {\n            goToSources();\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <CloseModal\n                title={\n                    intl.formatMessage({\n                        id: 'sources.manageAppsCloseModalTitle', defaultMessage: 'Exit application adding?'\n                    })\n                }\n                isOpen={state.isCancelling}\n                onStay={onStay}\n                onExit={goToSources}\n            />\n            <SourcesFormRenderer\n                schema={schema}\n                showFormControls={false}\n                onSubmit={onSubmitFinal}\n                onCancel={cancelBeforeExit}\n                initialValues={state.initialValues}\n                subscription={{ values: true }}\n                debug={saveSelectedApp}\n                clearedValue={null}\n                FormTemplate={FormTemplateWrapper}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default AddApplication;\n"],"sourceRoot":""}