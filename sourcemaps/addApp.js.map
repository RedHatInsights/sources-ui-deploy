{"version":3,"sources":["webpack:///./src/components/SourceEditForm/sourceEditContext.js","webpack:///./src/components/EditField/EditField.js","webpack:///./src/components/EditField/EditFieldWrapper.js","webpack:///./src/utilities/SourcesFormRenderer.js","webpack:///./src/components/AddApplication/AuthTypeCleaner.js","webpack:///./src/components/AddApplication/removeAppSubmit.js","webpack:///./src/components/AddApplication/RemoveAppModal.js","webpack:///./src/components/ApplicationsList/ApplicationList.js","webpack:///./src/components/AddApplication/AddApplicationDescription.js","webpack:///./src/components/AddApplication/schema/authenticationSelectionStep.js","webpack:///./src/components/AddApplication/schema/generateFirstAuthStep.js","webpack:///./src/components/AddApplication/AuthTypeSetter.js","webpack:///./src/components/AddApplication/schema/selectAuthenticationStep.js","webpack:///./src/components/AddApplication/AddApplicationSchema.js","webpack:///./src/components/AddApplication/WizardBody.js","webpack:///./src/api/doAttachApp.js","webpack:///./src/components/AddApplication/reducer.js","webpack:///./src/components/AddApplication/AddApplication.js"],"names":["sourceEditContext","createContext","EDIT_FIELD_NAME","EditField","isRequired","label","helperText","hideLabel","name","type","isEditable","useFormApi","getFieldState","getState","setState","useContext","value","get","initialValues","error","touched","showError","emptyText","includes","fieldId","validated","helperTextInvalid","tabIndex","onKeyPress","e","charCode","preventDefault","onClick","className","propTypes","PropTypes","node","bool","string","NOT_CHANGING_COMPONENTS","componentTypes","CHECKBOX","SWITCH","EditFieldWrapper","originalComponent","props","Component","clearProps","componentMapper","RendererContext","editing","SourcesFormRenderer","FormTemplate","mapperExtension","validatorMapper","validatorTypes","REQUIRED","PATTERN","MIN_LENGTH","URL","AuthTypeCleaner","formOptions","selectedAppId","values","useState","initialValue","setInitialValue","useEffect","batch","change","undefined","removeAppSubmit","app","intl","onCancel","dispatch","source","titleSuccess","formatMessage","id","defaultMessage","display_name","titleError","removeApplication","RemoveAppModal","container","useIntl","appTypes","useSelector","sources","useSource","useDispatch","hidden","dependentApps","dependent_applications","map","appName","appType","find","sourceAppsNames","filter","x","Modal","isOpen","onClose","variant","aria-label","header","Title","headingLevel","size","actions","Button","key","TextContent","Text","component","TextVariants","p","length","apps","shape","arrayOf","func","instanceOf","Element","ApplicationList","setApplicationToRemove","applications","application_type_id","isDeleting","sort","a","b","localeCompare","GridItem","md","sm","style","marginBottom","ButtonVariant","link","isInline","AddApplicationDescription","removingApp","sourceTypes","sourceType","source_type_id","Fragment","Grid","hasGutter","h4","product_name","authenticationSelectionStep","authenticationValues","title","fields","RADIO","options","supported_authentication_types","schema","authentication","authtype","validate","nextStep","application","auth","generateFirstAuthStep","endpointFields","additionalStepName","skipEndpoint","schemaBuilder","customSteps","additionalIncludesStepKeys","stepProps","firstAdditonalStep","additionalFields","AuthTypeSetter","selectedAuthentication","startsWith","replace","innerSetter","object","SelectAuthenticationDescription","applicationTypeName","authenticationTypeName","generateAuthSelectionOptions","applicationTypes","supportedAuthTypeName","supportedAuthType","authentications","includeUsername","username","includeAppName","selectAuthenticationStep","Content","hideField","forEach","ifAppSupported","supported_source_types","isAppAvailable","supportedAuthTypes","push","SUB_FORM","condition","and","when","is","appId","NoAvailableApplicationDescription","ApplicationSummary","hasAlreadySupportedAuthType","authValues","sourceTypeName","hasMultipleAuthenticationTypes","hasAvailableApps","authenticationFields","imported","appendEndpoint","endpoint","hasEndpointStep","appAdditionalSteps","authType","applicationSelection","DefaultIcon","selectionSteps","WIZARD","inModal","showTitles","crossroads","description","buttonLabels","submit","cancel","back","WizardBodyAttach","step","goToSources","Wizard","steps","isFinishedStep","removeEmpty","obj","Object","keys","isEmpty","doAttachApp","formApi","authenticationInitialValues","formState","allFormValues","selectedAuthId","authInitialValues","valuesWithoutAuth","newAddedValues","addedDiff","updatedValues","updatedDiff","newAddedAuthValues","updatedAuthValues","filteredValues","merge","cloneDeep","sourceId","endpointId","promises","getSourcesApi","updateSource","Promise","resolve","hasModifiedEndpoint","hasModifiedUrl","url","urlOrHost","scheme","host","port","path","endPointPort","parseInt","endpointData","isNaN","updateEndpoint","createEndpointData","default","source_id","createEndpoint","updateAuthentication","authenticationData","resource_id","resource_type","createAuthentication","doCreateApplication","all","authenticationDataOut","applicationDataOut","authenticationId","promisesSecondRound","authAppData","application_id","authentication_id","createAuthApp","credentials","billing_source","data","patchSource","timeout","timeoutedApps","checkAppAvailability","console","deleteApplication","handleError","initialState","state","authenticationsValues","sourceAppsLength","isCancelling","reducer","selectedApp","saveSelectedApp","onSubmit","then","checkSourceStatus","loadEntities","FormTemplateWrapper","showFormControls","AddApplication","history","useHistory","loaded","useIsLoaded","shallowEqual","sourceTypesLoaded","appTypesLoaded","useReducer","useRef","document","createElement","removeAppAction","endpoints","listEndpointAuthentications","endpointToUrl","routes","WizardBody","customText","cancelTitle","onSubmitWrapper","onReset","shownStep","onRetry","returnButtonTitle","primaryAction","secondaryActions","target","href","rel","availability_status","hideSourcesButton","successfulMessage","message","availability_status_error","to","replaceRouteId","sourcesEdit","appIds","reduce","acc","filteredAppTypes","filterApps","availableAppTypes","hasDeletingApp","isDisabled","createSchema","current","onSubmitFinal","onStay","onExit","subscription","debug","clearedValue"],"mappings":"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","file":"js/addApp.601450cba487df926388.js","sourcesContent":["import { createContext } from 'react';\n\nconst sourceEditContext = createContext();\n\nexport default sourceEditContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nimport PencilAltIcon from '@patternfly/react-icons/dist/js/icons/pencil-alt-icon';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\n\nimport sourceEditContext from '../SourceEditForm/sourceEditContext';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const EDIT_FIELD_NAME = 'edit-field';\n\nconst EditField = ({ isRequired, label, helperText, hideLabel, name, type, isEditable }) => {\n    const { getFieldState, getState } = useFormApi();\n\n    const { setState } = useContext(sourceEditContext);\n\n    const { error, touched, value } = getFieldState(name) || { value: get(getState().initialValues, name) };\n    const showError = touched && error;\n\n    const isPassword = type === 'password' || name.includes('password');\n    const emptyText = isPassword ? 'Click to edit' : 'Click to add';\n\n    return (\n        <FormGroup\n            isRequired={ isRequired }\n            label={ !hideLabel && label }\n            fieldId={ name }\n            validated={ showError ? 'error' : 'default' }\n            helperText={ helperText }\n            helperTextInvalid={ error }\n            tabIndex={0}\n            onKeyPress={(e) => {\n                if (e.charCode === 32 && isEditable) {\n                    e.preventDefault();\n                    setState({ type: 'setEdit', name });\n                }\n            }}\n            {...(isEditable && { onClick: () => setState({ type: 'setEdit', name }) })}\n        >\n            <div className={`pf-c-form__horizontal-group ins-c-sources__edit-field-group ${isEditable ? 'clickable' : ''}`}>\n                <TextContent className={`ins-c-sources__edit-field-group-text-content ${isEditable ? 'clickable' : ''}`}>\n                    <span className=\"ins-c-sources__edit-field-value pf-u-mr-sm\">\n                        {value ? value : isEditable ? emptyText : ''}\n                    </span>\n                    {isEditable && <PencilAltIcon />}\n                </TextContent>\n            </div>\n        </FormGroup>\n    );\n};\n\nEditField.propTypes = {\n    label: PropTypes.node,\n    isRequired: PropTypes.bool,\n    helperText: PropTypes.node,\n    hideLabel: PropTypes.bool,\n    isEditable: PropTypes.bool,\n    type: PropTypes.string,\n    name: PropTypes.string\n};\n\nexport default EditField;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport RendererContext from '@data-driven-forms/react-form-renderer/dist/cjs/renderer-context';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport sourceEditContext from '../SourceEditForm/sourceEditContext';\nimport EditField from './EditField';\n\nexport const NOT_CHANGING_COMPONENTS = [componentTypes.CHECKBOX, componentTypes.SWITCH];\n\nconst EditFieldWrapper = ({ originalComponent, isEditable = true, ...props }) => {\n    let Component = EditField;\n    let clearProps = {};\n\n    const { componentMapper } = useContext(RendererContext);\n    const { editing } = useContext(sourceEditContext);\n\n    if (editing[props.name] || NOT_CHANGING_COMPONENTS.includes(originalComponent)) {\n        Component = componentMapper[originalComponent];\n    } else if (isEditable) {\n        clearProps = { isEditable: true };\n    }\n\n    return <Component {...props} {...clearProps}/>;\n};\n\nEditFieldWrapper.propTypes = {\n    originalComponent: PropTypes.string,\n    name: PropTypes.string,\n    isEditable: PropTypes.bool\n};\n\nexport default EditFieldWrapper;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer/dist/cjs/form-renderer';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validatorMapper from '@data-driven-forms/react-form-renderer/dist/cjs/validator-mapper';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/cjs/component-mapper';\n\nimport { mapperExtension } from '@redhat-cloud-services/frontend-components-sources/cjs/sourceFormRenderer';\n\nimport EditFieldWrapper from '../components/EditField/EditFieldWrapper';\n\nconst SourcesFormRenderer = props => (\n    <FormRenderer\n        FormTemplate={FormTemplate}\n        componentMapper={{\n            ...componentMapper,\n            ...mapperExtension,\n            'edit-field': EditFieldWrapper,\n            'switch-field': componentMapper[componentTypes.SWITCH]\n        }}\n        validatorMapper={{\n            'required-validator': validatorMapper[validatorTypes.REQUIRED],\n            'pattern-validator': validatorMapper[validatorTypes.PATTERN],\n            'min-length-validator': validatorMapper[validatorTypes.MIN_LENGTH],\n            'url-validator': validatorMapper[validatorTypes.URL]\n        }}\n        {...props}\n    />\n);\n\nexport default SourcesFormRenderer;\n","import { useState, useEffect } from 'react';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const AuthTypeCleaner = () => {\n    const formOptions = useFormApi();\n\n    const selectedAppId = get(formOptions.getState().values, 'application.application_type_id', '');\n\n    const [initialValue, setInitialValue] = useState(selectedAppId);\n\n    useEffect(() => {\n        if (initialValue !== selectedAppId) {\n            formOptions.batch(() => {\n                formOptions.change('authentication', undefined);\n                formOptions.change('selectedAuthentication', undefined);\n            });\n            setInitialValue(undefined);\n        }\n    }, [selectedAppId]);\n\n    return null;\n};\n","import { removeApplication } from '../../redux/sources/actions';\n\nconst removeAppSubmit = (app, intl, onCancel, dispatch, source) => {\n    const titleSuccess = intl.formatMessage({\n        id: 'sources.removeAppWarning',\n        defaultMessage: `{ name } was removed from this source.`\n    },\n    {\n        name: app.display_name\n    });\n    const titleError = intl.formatMessage({\n        id: 'sources.removeAppError',\n        defaultMessage: `Removing of { name } application from this source was unsuccessful.`\n    }, {\n        name: app.display_name\n    });\n    onCancel && onCancel();\n    return dispatch(removeApplication(app.id, source.id, titleSuccess, titleError));\n};\n\nexport default removeAppSubmit;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { useSource } from '../../hooks/useSource';\n\nimport removeAppSubmit from './removeAppSubmit';\n\nconst RemoveAppModal = ({ app, onCancel, container }) => {\n    const intl = useIntl();\n\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const onSubmit = () => removeAppSubmit(app, intl, onCancel, dispatch, source);\n\n    useEffect(() => {\n        if (container) {\n            container.hidden = true;\n        }\n    }, []);\n\n    const dependentApps = app.dependent_applications.map(appName => {\n        const appType = appTypes.find(({ name }) => name === appName);\n\n        return appType ? app.sourceAppsNames.includes(appType.display_name) ? appType.display_name : undefined : undefined;\n    }).filter(x => x);\n\n    return (\n        <Modal\n            className=\"ins-c-sources__dialog--warning\"\n            isOpen={true}\n            onClose={onCancel}\n            variant=\"small\"\n            aria-label={\n                intl.formatMessage({\n                    id: 'sources.deleteAppTitle',\n                    defaultMessage: 'Remove application?',\n                })\n            }\n            header={\n                <Title headingLevel=\"h1\" size=\"2xl\">\n                    <ExclamationTriangleIcon size=\"sm\" className=\"ins-m-alert ins-c-source__delete-icon pf-u-mr-sm\" />\n                    {intl.formatMessage({\n                        id: 'sources.deleteAppTitle',\n                        defaultMessage: 'Remove application?',\n                    })}\n                </Title>\n            }\n            actions={[\n                <Button\n                    id=\"deleteSubmit\" key=\"submit\" variant=\"danger\" type=\"button\" onClick={ onSubmit }\n                >\n                    { intl.formatMessage({\n                        id: 'sources.remove',\n                        defaultMessage: 'Remove application'\n                    }) }\n                </Button>,\n                <Button id=\"deleteCancel\" key=\"cancel\" variant=\"link\" type=\"button\" onClick={ onCancel }>\n                    { intl.formatMessage({\n                        id: 'sources.cancel',\n                        defaultMessage: 'Cancel'\n                    }) }\n                </Button>\n            ]}\n        >\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    { intl.formatMessage({\n                        id: 'sources.deleteAppWarning',\n                        defaultMessage: 'Are you sure to remove { appName } from this source?'\n                    }, { appName: <b key=\"b\">{app.display_name}</b> }) }\n                </Text>\n                {dependentApps.length > 0 && <Text component={TextVariants.p}>\n                    { intl.formatMessage({\n                        id: 'sources.deleteAppDetails',\n                        defaultMessage: 'This change will affect these applications: { apps }.'\n                    }, { apps: dependentApps }) }\n                </Text>}\n            </TextContent>\n        </Modal>\n    );\n};\n\nRemoveAppModal.propTypes = {\n    app: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        display_name: PropTypes.string.isRequired,\n        dependent_applications: PropTypes.arrayOf(PropTypes.string),\n        sourceAppsNames: PropTypes.arrayOf(PropTypes.string)\n    }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    container: PropTypes.instanceOf(Element)\n};\n\nexport default RemoveAppModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button, ButtonVariant } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\n\nimport { useSource } from '../../hooks/useSource';\n\nconst ApplicationList = ({ setApplicationToRemove }) => {\n    const intl = useIntl();\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const sourceAppsNames = source.applications\n    .map(({ application_type_id }) => {\n        const appType = appTypes.find(({ id }) => id === application_type_id);\n        return appType ? appType.display_name : undefined;\n    });\n\n    return source.applications\n    .filter((app) => !app.isDeleting)\n    .map((app) => {\n        const type = appTypes.find((appType) => appType.id === app.application_type_id);\n\n        if (type) {\n            return {\n                display_name: type.display_name,\n                id: app.id,\n                dependent_applications: type.dependent_applications\n            };\n        }\n    })\n    .sort((a, b) => a.display_name.localeCompare(b.display_name))\n    .map(({ display_name, id, dependent_applications }) => (\n        <TextContent key={id}>\n            <Grid>\n                <GridItem md={4} sm={6}>\n                    <Text component={TextVariants.p} style={{ marginBottom: 0 }}>\n                        { display_name }\n                    </Text>\n                </GridItem>\n                <GridItem md={8} sm={6} className=\"ins-c-sources__remove-app\">\n                    <Button\n                        variant={ButtonVariant.link}\n                        isInline\n                        onClick={() => setApplicationToRemove({ id, display_name, dependent_applications, sourceAppsNames })}\n                    >\n                        { intl.formatMessage({\n                            id: 'sources.remove',\n                            defaultMessage: 'Remove'\n                        }) }\n                    </Button>\n                </GridItem>\n            </Grid>\n        </TextContent>\n    ));\n};\n\nApplicationList.propTypes = {\n    setApplicationToRemove: PropTypes.func.isRequired,\n};\n\nexport default ApplicationList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/index';\n\nimport RemoveAppModal from './RemoveAppModal';\nimport ApplicationList from '../ApplicationsList/ApplicationList';\nimport { useSource } from '../../hooks/useSource';\n\nconst AddApplicationDescription = ({ container }) => {\n    const [removingApp, setApplicationToRemove] = useState({});\n    const intl = useIntl();\n\n    const sourceTypes = useSelector(({ sources }) => sources.sourceTypes);\n    const source = useSource();\n\n    const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n    const apps = source.applications.filter((app) => !app.isDeleting);\n\n    return (\n        <React.Fragment>\n            {removingApp.id && <RemoveAppModal\n                app={removingApp}\n                onCancel={() => {\n                    if (container) {\n                        container.hidden = false;\n                    }\n\n                    return setApplicationToRemove({});\n                }}\n                container={container}\n            />}\n            <TextContent>\n                <Grid hasGutter>\n                    <GridItem md={2}>\n                        <Text component={TextVariants.h4}>\n                            { intl.formatMessage({\n                                id: 'sources.sourceName',\n                                defaultMessage: 'Source name'\n                            }) }\n                        </Text>\n                        <Text component={TextVariants.p} id=\"add-application-desc-name\">\n                            {source.name}\n                        </Text>\n                    </GridItem>\n                    <GridItem md={2}>\n                        <Text component={TextVariants.h4}>\n                            { intl.formatMessage({\n                                id: 'sources.type',\n                                defaultMessage: 'Type'\n                            }) }\n                        </Text>\n                        <Text component={TextVariants.p} id=\"add-application-desc-type\">\n                            { sourceType ? sourceType.product_name : intl.formatMessage({\n                                id: 'sources.typeNotFound',\n                                defaultMessage: 'Type not found'\n                            })}\n                        </Text>\n                    </GridItem>\n                    <GridItem md={8}>\n                        <Text component={TextVariants.h4}>\n                            { intl.formatMessage({\n                                id: 'sources.apps',\n                                defaultMessage: 'Applications'\n                            }) }\n                        </Text>\n                        {apps.length > 0 ? <ApplicationList setApplicationToRemove={setApplicationToRemove}/>\n                            : (\n                                <Text component={TextVariants.p} id=\"add-application-desc-no-app\">\n                                    {intl.formatMessage({\n                                        id: 'sources.noApps',\n                                        defaultMessage: 'No applications'\n                                    })}\n                                </Text>\n                            )\n                        }\n                    </GridItem>\n                </Grid>\n            </TextContent>\n        </React.Fragment>\n    );\n};\n\nAddApplicationDescription.propTypes = {\n    container: PropTypes.instanceOf(Element)\n};\n\nexport default AddApplicationDescription;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nconst authenticationSelectionStep = (sourceType, appType, intl, authenticationValues) => {\n    const nextStep = ({ values: { application, authtype } }) => {\n        if (authtype) {\n            const hasSupportedAuthType = authenticationValues.find((auth) => auth.authtype === authtype);\n\n            if (hasSupportedAuthType) {\n                return 'selectAuthentication';\n            }\n\n            return `${sourceType.name}-${application && application.application_type_id}-${authtype}`;\n        }\n    };\n\n    return ({\n        name: `selectAuthType-${appType.id}`,\n        title: intl.formatMessage({\n            id: 'sources.selectAuthenticationTitle',\n            defaultMessage: 'Select authentication type'\n        }),\n        fields: [{\n            component: componentTypes.RADIO,\n            name: 'authtype',\n            options: appType.supported_authentication_types[sourceType.name].map(type => ({\n                value: type,\n                label: sourceType.schema.authentication.find((authtype) => authtype.type === type)?.name || 'Unknown type'\n            })),\n            isRequired: true,\n            validate: [{ type: validatorTypes.REQUIRED }]\n        }],\n        nextStep\n    });\n};\n\nexport default authenticationSelectionStep;\n","import * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\n\nconst generateFirstAuthStep = (type, appType, endpointFields, authtype, intl) => {\n    const fields = [...endpointFields];\n\n    const auth = type.schema.authentication.find(({ type }) => type === authtype);\n\n    const additionalStepName = `${type.name}-${authtype}-${appType.name}-additional-step`;\n\n    const skipEndpoint = schemaBuilder.shouldSkipEndpoint(type.name, authtype, appType.name);\n    const customSteps = schemaBuilder.hasCustomSteps(type.name, authtype, appType.name);\n\n    let nextStep;\n\n    if (schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).length > 0) {\n        nextStep = additionalStepName;\n    } else if (endpointFields.length === 0 && !skipEndpoint) {\n        nextStep = `${type.name}-endpoint`;\n    } else {\n        nextStep = 'summary';\n    }\n\n    const additionalIncludesStepKeys = schemaBuilder.getAdditionalStepKeys(type.name, authtype, appType.name);\n    const hasCustomStep = schemaBuilder.shouldSkipSelection(type.name, authtype, appType.name);\n\n    let stepProps = {};\n\n    if (hasCustomStep) {\n        const firstAdditonalStep = schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).find(({ name }) => !name);\n        const additionalFields = schemaBuilder.getAdditionalStepFields(auth.fields, additionalStepName);\n\n        if (firstAdditonalStep.nextStep) {\n            nextStep = firstAdditonalStep.nextStep;\n        } else if (endpointFields.length === 0 && !skipEndpoint && !customSteps) {\n            nextStep = `${type.name}-endpoint`;\n        } else {\n            nextStep = 'summary';\n        }\n\n        stepProps = {\n            ...firstAdditonalStep,\n            fields: [\n                ...fields,\n                ...schemaBuilder.injectAuthFieldsInfo(\n                    [...firstAdditonalStep.fields, ...additionalFields],\n                    type.name,\n                    authtype,\n                    appType.name\n                )\n            ]\n        };\n    }\n\n    return ({\n        name: `${type.name}-${appType.id}-${authtype}`,\n        title: intl.formatMessage({\n            id: 'sources.configureCredentials',\n            defaultMessage: 'Configure credentials'\n        }),\n        fields: [\n            ...fields,\n            ...schemaBuilder.getAdditionalAuthFields(type.name, authtype, appType.name),\n            ...schemaBuilder.injectAuthFieldsInfo(\n                schemaBuilder.getNoStepsFields(auth.fields, additionalIncludesStepKeys),\n                type.name,\n                authtype,\n                appType.name\n            )\n        ],\n        nextStep,\n        ...stepProps\n    });\n};\n\nexport default generateFirstAuthStep;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const innerSetter = ({\n    formOptions,\n    authenticationValues,\n    selectedAuthentication\n}) => {\n    if (!selectedAuthentication.startsWith('new-')) {\n        const authentication = authenticationValues.find(({ id }) => id === selectedAuthentication);\n\n        formOptions.change('authentication', authentication);\n    } else {\n        const authtype = selectedAuthentication.replace('new-', '');\n\n        formOptions.change('authentication', { authtype });\n    }\n};\n\nexport const AuthTypeSetter = ({ authenticationValues }) => {\n    const formOptions = useFormApi();\n\n    const selectedAuthentication = formOptions.getState().values.selectedAuthentication;\n\n    const [initialValue, setInitialValue] = useState(selectedAuthentication);\n\n    useEffect(() => {\n        if (initialValue !== selectedAuthentication) {\n            innerSetter({ formOptions, authenticationValues, selectedAuthentication });\n            setInitialValue(undefined);\n        }\n    }, [selectedAuthentication]);\n\n    return null;\n};\n\nAuthTypeSetter.propTypes = {\n    authenticationValues: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { AuthTypeSetter } from '../AuthTypeSetter';\n\nexport const SelectAuthenticationDescription = ({ applicationTypeName, authenticationTypeName }) => {\n    const intl = useIntl();\n\n    return (\n        <TextContent>\n            <Text component={ TextVariants.p }>\n                { intl.formatMessage({\n                    id: 'sources.selectAuthenticationDescription',\n                    // eslint-disable-next-line max-len\n                    defaultMessage: 'Selected application { applicationTypeName } supports { authenticationTypeName } authentication type. You can use already defined authentication values or define new.'\n                }, { applicationTypeName, authenticationTypeName }) }\n            </Text>\n        </TextContent>\n    );};\n\nSelectAuthenticationDescription.propTypes = {\n    applicationTypeName: PropTypes.string,\n    authenticationTypeName: PropTypes.string\n};\n\nexport const generateAuthSelectionOptions = ({\n    source, authenticationValues, applicationTypes, supportedAuthTypeName, supportedAuthType\n}) => authenticationValues.filter(({ authtype }) => authtype === supportedAuthType).map((values) => {\n    const app = source.applications.find(({ authentications }) => authentications.find(({ id }) => id === values.id));\n\n    const appType = app && app.application_type_id ? applicationTypes.find(({ id }) => id === app.application_type_id) : '';\n\n    const includeUsername = values.username ? `-${values.username}` : '';\n    const includeAppName = appType ? `-${appType.display_name}` : `-unused-${values.id}`;\n    const label = `${supportedAuthTypeName}${includeUsername}${includeAppName}`;\n\n    return {\n        label,\n        value: values.id,\n    };\n});\n\nconst selectAuthenticationStep = ({\n    intl, source, authenticationValues, sourceType, applicationTypes\n}) => {\n    const nextStep = ({ values: { application, authtype, authentication } }) => {\n        const app = application ? application : {};\n        const appId = app.application_type_id ? app.application_type_id : '';\n\n        return `${sourceType.name}-${appId}-${authtype || authentication?.authtype}`;\n    };\n\n    const fields = [{\n        component: 'description',\n        name: 'authtypesetter',\n        Content: AuthTypeSetter,\n        authenticationValues,\n        hideField: true,\n    }];\n\n    applicationTypes.forEach((app) => {\n        const ifAppSupported = app.supported_source_types.includes(sourceType.name);\n        const isAppAvailable = !source.applications?.find(({ application_type_id }) => application_type_id === app.id);\n\n        if (ifAppSupported && isAppAvailable) {\n            const supportedAuthTypes = get(app, `supported_authentication_types[${sourceType.name}]`, []);\n\n            supportedAuthTypes.forEach((supportedAuthType) => {\n                const hasAvailableAuthentications = authenticationValues.find(({ authtype }) => authtype === supportedAuthType);\n\n                if (hasAvailableAuthentications) {\n                    const supportedAuthTypeName =\n                get(sourceType, `schema.authentication`, {}).find(({ type }) => type === supportedAuthType).name;\n\n                    fields.push({\n                        component: componentTypes.SUB_FORM,\n                        name: `${app.name}-subform`,\n                        condition: {\n                            and: [{\n                                when: 'application.application_type_id',\n                                is: app.id\n                            },\n                            ...(supportedAuthTypes.length > 1\n                                ? [{\n                                    when: 'authtype',\n                                    is: supportedAuthType\n                                }]\n                                : []\n                            )]\n                        },\n                        fields: [\n                            {\n                                name: `${app.name}-select-authentication-summary`,\n                                component: 'description',\n                                Content: SelectAuthenticationDescription,\n                                applicationTypeName: app.display_name,\n                                authenticationTypeName: supportedAuthTypeName,\n                            },\n                            {\n                                component: componentTypes.RADIO,\n                                name: 'selectedAuthentication',\n                                label: intl.formatMessage({\n                                    id: 'sources.selectAuthenticationTitle',\n                                    defaultMessage: 'Select authentication'\n                                }),\n                                isRequired: true,\n                                validate: [{ type: validatorTypes.REQUIRED }],\n                                options: [\n                                    {\n                                        label: intl.formatMessage({\n                                            id: 'sources.selectAuthenticationradioLabel',\n                                            defaultMessage: 'Define new { supportedAuthTypeName }'\n                                        }, { supportedAuthTypeName }),\n                                        value: `new-${supportedAuthType}`\n                                    },\n                                    ...generateAuthSelectionOptions({\n                                        authenticationValues,\n                                        source,\n                                        applicationTypes,\n                                        supportedAuthTypeName,\n                                        supportedAuthType\n                                    })\n                                ]\n                            },\n                        ]\n                    });\n                }\n            });\n        }\n    });\n\n    return ({\n        name: 'selectAuthentication',\n        title: intl.formatMessage({\n            id: 'sources.selectAuthenticationTitle',\n            defaultMessage: 'Select authentication'\n        }),\n        fields,\n        nextStep\n    });\n};\n\nexport default selectAuthenticationStep;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { useIntl } from 'react-intl';\nimport * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\nimport get from 'lodash/get';\n\nimport { AuthTypeCleaner } from './AuthTypeCleaner';\nimport AddApplicationDescription from './AddApplicationDescription';\nimport authenticationSelectionStep from './schema/authenticationSelectionStep';\nimport generateFirstAuthStep from './schema/generateFirstAuthStep';\nimport selectAuthenticationStep from './schema/selectAuthenticationStep';\n\nexport const NoAvailableApplicationDescription = () => {\n    const intl = useIntl();\n\n    return (<TextContent>\n        <Text component={ TextVariants.p }>\n            { intl.formatMessage({\n                id: 'sources.allApplicationsAssigned',\n                defaultMessage: 'All available applications have already been added to this source or there is no available application for this source.'\n            }) }\n        </Text>\n    </TextContent>)\n    ;};\n\nexport const ApplicationSummary = () => {\n    const intl = useIntl();\n\n    return (<TextContent>\n        <Text component={ TextVariants.p }>\n            { intl.formatMessage({\n                id: 'sources.reviewAddAppSummary',\n                defaultMessage: 'Review the information below and click Add to add the application to your source. Use the Back button to make changes.'\n            }) }\n        </Text>\n    </TextContent>);\n};\n\nexport const hasAlreadySupportedAuthType = (authValues = [], appType, sourceTypeName) => (\n    authValues.find(({ authtype }) => authtype === get(appType, `supported_authentication_types.${sourceTypeName}[0]`))\n);\n\nexport const hasMultipleAuthenticationTypes = (app, sourceType) => (\n    app.supported_source_types.includes(sourceType.name) && app.supported_authentication_types[sourceType.name]?.length > 1\n);\n\nconst fields = (\n    applications = [], intl, sourceTypes, applicationTypes, authenticationValues, source, container\n) => {\n    const hasAvailableApps = applications.length > 0;\n\n    let nextStep = hasAvailableApps ? 'summary' : undefined;\n    let authenticationFields = [];\n    const sourceType = sourceTypes.find(({ id }) => id === source.source_type_id);\n\n    if (!source.imported && hasAvailableApps) {\n        const appendEndpoint = sourceType.schema.endpoint.hidden ? sourceType.schema.endpoint.fields : [];\n        const hasEndpointStep = appendEndpoint.length === 0;\n\n        applicationTypes.forEach(appType => {\n            if (appType.supported_source_types.includes(sourceType.name)) {\n                appType.supported_authentication_types[sourceType.name].forEach((authtype) => {\n                    authenticationFields.push(\n                        generateFirstAuthStep(\n                            sourceType,\n                            appType,\n                            appendEndpoint,\n                            authtype,\n                            intl\n                        )\n                    );\n                });\n            }\n        });\n\n        sourceType.schema.authentication.forEach(auth => {\n            applicationTypes.forEach(appType => {\n                if (appType.supported_source_types.includes(sourceType.name)) {\n                    const appAdditionalSteps = schemaBuilder.getAdditionalSteps(sourceType.name, auth.type, appType.name);\n\n                    if (appAdditionalSteps.length > 0) {\n                        authenticationFields.push(\n                            ...schemaBuilder.createAdditionalSteps(\n                                appAdditionalSteps,\n                                sourceType.name,\n                                auth.type,\n                                hasEndpointStep,\n                                auth.fields,\n                                appType.name,\n                            )\n                        );\n                    }\n                }\n            });\n        });\n\n        if (hasEndpointStep) {\n            authenticationFields.push(schemaBuilder.createEndpointStep(sourceType.schema.endpoint, sourceType.name));\n        }\n\n        nextStep = ({ values: { application } }) => {\n            if (application) {\n                const appType = applicationTypes.find(({ id }) => id === application.application_type_id);\n\n                const hasMultipleAuthTypes = appType?.supported_authentication_types[sourceType.name]?.length > 1;\n\n                if (hasMultipleAuthTypes) {\n                    return `selectAuthType-${application.application_type_id}`;\n                }\n\n                if (\n                    hasAlreadySupportedAuthType(\n                        authenticationValues,\n                        applicationTypes.find(({ id }) => id === application.application_type_id),\n                        sourceType.name\n                    )\n                ) {\n                    return 'selectAuthentication';\n                }\n\n                const authType = appType?.supported_authentication_types[sourceType.name][0];\n\n                return `${sourceType.name}-${application && application.application_type_id}-${authType}`;\n            }\n        };\n    }\n\n    const applicationSelection = hasAvailableApps ? {\n        component: 'card-select',\n        name: 'application.application_type_id',\n        options: applications,\n        label: intl.formatMessage({\n            id: 'sources.chooseAppToAdd',\n            defaultMessage: 'Choose an application to add'\n        }),\n        DefaultIcon: null,\n        isRequired: true,\n        validate: [{\n            type: validatorTypes.REQUIRED\n        }]\n    } : {\n        component: 'description',\n        name: 'description-no-options',\n        validate: [{\n            type: validatorTypes.REQUIRED\n        }],\n        Content: NoAvailableApplicationDescription\n    };\n\n    const selectionSteps = applicationTypes\n    .filter(app => hasMultipleAuthenticationTypes(app, sourceType))\n    .map(app => authenticationSelectionStep(sourceType, app, intl, authenticationValues));\n\n    if (!source.imported && hasAvailableApps) {\n        selectionSteps.push(\n            selectAuthenticationStep({ intl, source, authenticationValues, sourceType, applicationTypes })\n        );\n    }\n\n    return ({\n        fields: [\n            {\n                component: componentTypes.WIZARD,\n                name: 'wizard',\n                title: intl.formatMessage({\n                    id: 'sources.manageApps',\n                    defaultMessage: 'Manage applications'\n                }),\n                inModal: true,\n                container,\n                showTitles: true,\n                crossroads: ['application.application_type_id', 'selectedAuthentication', 'authtype'],\n                description: intl.formatMessage({\n                    id: 'sources.addAppDescription',\n                    defaultMessage: 'You are managing applications of this source.'\n                }),\n                buttonLabels: {\n                    submit: hasAvailableApps ? intl.formatMessage({\n                        id: 'sources.add',\n                        defaultMessage: 'Add'\n                    }) : intl.formatMessage({\n                        id: 'sources.close',\n                        defaultMessage: 'Close'\n                    }),\n                    cancel: intl.formatMessage({\n                        id: 'sources.cancel',\n                        defaultMessage: 'Cancel'\n                    }),\n                    back: intl.formatMessage({\n                        id: 'sources.back',\n                        defaultMessage: 'Back'\n                    })\n                },\n                fields: [\n                    {\n                        nextStep,\n                        title: intl.formatMessage({\n                            id: 'sources.selectApp',\n                            defaultMessage: 'Select application'\n                        }),\n                        name: 'selectAppStep',\n                        fields: [\n                            {\n                                component: 'description',\n                                name: 'description',\n                                Content: AddApplicationDescription,\n                                container\n                            },\n                            applicationSelection,\n                            {\n                                component: 'description',\n                                name: 'authtypesetter',\n                                Content: AuthTypeCleaner,\n                                hideField: true\n                            }\n                        ]\n                    }, {\n                        title: intl.formatMessage({\n                            id: 'sources.reviewDetails',\n                            defaultMessage: 'Review details'\n                        }),\n                        name: 'summary',\n                        fields: [{\n                            component: 'description',\n                            name: 'description-summary',\n                            Content: ApplicationSummary\n                        }, {\n                            component: 'summary',\n                            name: 'summary',\n                            sourceTypes,\n                            applicationTypes\n                        }]\n                    },\n                    ...selectionSteps,\n                    ...authenticationFields\n                ]\n            }\n        ]\n    });\n};\n\nexport default fields;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Wizard } from '@patternfly/react-core/dist/js/components/Wizard/Wizard';\n\nconst WizardBodyAttach = ({ step, goToSources }) => {\n    const intl = useIntl();\n\n    return (\n        <Wizard\n            isOpen={ true }\n            onClose={goToSources}\n            title={intl.formatMessage({\n                id: 'sources.manageApps',\n                defaultMessage: 'Manage applications'\n            })}\n            description={\n                intl.formatMessage({\n                    id: 'sources.addAppDescription',\n                    defaultMessage: 'You are managing applications of this source.'\n                })\n            }\n            steps={ [{\n                name: 'Finish',\n                component: step,\n                isFinishedStep: true\n            }] }\n        />\n    );\n};\n\nWizardBodyAttach.propTypes = {\n    step: PropTypes.node.isRequired,\n    goToSources: PropTypes.func.isRequired\n};\n\nexport default WizardBodyAttach;\n","import { addedDiff, updatedDiff } from 'deep-object-diff';\nimport { patchSource } from '@redhat-cloud-services/frontend-components-sources/cjs/costManagementAuthentication';\nimport { handleError } from '@redhat-cloud-services/frontend-components-sources/cjs/handleError';\nimport { checkAppAvailability } from '@redhat-cloud-services/frontend-components-sources/cjs/getApplicationStatus';\nimport { timeoutedApps } from '@redhat-cloud-services/frontend-components-sources/cjs/constants';\n\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { getSourcesApi, doCreateApplication } from './entities';\nimport { urlOrHost } from './doUpdateSource';\n\n// modification of https://stackoverflow.com/a/38340374\nexport const removeEmpty = (obj) => {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] && typeof obj[key] === 'object') {\n            if (isEmpty(obj[key])) {\n                delete obj[key];\n            } else {\n                removeEmpty(obj[key]);\n            }\n        } else if (typeof obj[key] === 'undefined') {\n            delete obj[key];\n        }\n    });\n    return obj;\n};\n\nexport const doAttachApp = async (\n    values, formApi, authenticationInitialValues, initialValues, appTypes = []\n) => {\n    let appId;\n\n    const formState = formApi.getState();\n\n    const allFormValues = formState.values;\n\n    const selectedAuthId = allFormValues.authentication ? allFormValues.authentication.id : undefined;\n\n    const authInitialValues = selectedAuthId\n        ? authenticationInitialValues.find(({ id }) => id === selectedAuthId)\n        : undefined;\n\n    const { authentication, ...valuesWithoutAuth } = values;\n\n    const newAddedValues = addedDiff(initialValues, valuesWithoutAuth);\n    const updatedValues = updatedDiff(initialValues, valuesWithoutAuth);\n    const newAddedAuthValues = addedDiff(authInitialValues, authentication);\n    const updatedAuthValues = updatedDiff(authInitialValues, authentication);\n\n    const filteredValues = removeEmpty({\n        ...merge(cloneDeep(newAddedValues), updatedValues),\n        authentication: {\n            ...merge(cloneDeep(newAddedAuthValues), updatedAuthValues)\n        }\n    });\n\n    try {\n        if (!allFormValues.source || !allFormValues.source.id) {\n            throw 'Missing source id';\n        }\n\n        const sourceId = allFormValues.source.id;\n        let endpointId = allFormValues.endpoint ? allFormValues.endpoint.id : undefined;\n\n        const promises = [];\n\n        if (filteredValues.source && !isEmpty(filteredValues.source)) {\n            promises.push(getSourcesApi().updateSource(sourceId, filteredValues.source));\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        const hasModifiedEndpoint = filteredValues.endpoint && !isEmpty(filteredValues.endpoint);\n        const hasModifiedUrl = filteredValues.url && !isEmpty(filteredValues.url);\n\n        if (hasModifiedEndpoint || hasModifiedUrl) {\n            const { scheme, host, port, path } = urlOrHost(filteredValues);\n\n            const endPointPort = parseInt(port, 10);\n\n            const endpointData = removeEmpty({\n                ...filteredValues.endpoint,\n                scheme,\n                host,\n                port: isNaN(endPointPort) ? undefined : endPointPort,\n                path\n            });\n\n            if (endpointId) {\n                promises.push(getSourcesApi().updateEndpoint(endpointId, endpointData));\n            } else {\n                promises.push(Promise.resolve(undefined));\n\n                const createEndpointData = {\n                    ...endpointData,\n                    default: true,\n                    source_id: sourceId\n                };\n\n                const endpoint = await getSourcesApi().createEndpoint(createEndpointData);\n                endpointId = endpoint.id;\n            }\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        if (filteredValues.authentication && !isEmpty(filteredValues.authentication)) {\n            if (selectedAuthId) {\n                promises.push(getSourcesApi().updateAuthentication(selectedAuthId, filteredValues.authentication));\n            } else if (endpointId) {\n                const authenticationData = {\n                    ...filteredValues.authentication,\n                    resource_id: endpointId,\n                    resource_type: 'Endpoint'\n                };\n\n                promises.push(getSourcesApi().createAuthentication(authenticationData));\n            }\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        if (filteredValues.application && filteredValues.application.application_type_id) {\n            promises.push(doCreateApplication(sourceId, filteredValues.application.application_type_id));\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        // eslint-disable-next-line no-unused-vars\n        const [_sourceDataOut, _endpointDataOut, authenticationDataOut, applicationDataOut] = await Promise.all(promises);\n\n        appId = applicationDataOut?.id;\n\n        const authenticationId = selectedAuthId ? selectedAuthId : authenticationDataOut ? authenticationDataOut.id : undefined;\n\n        const promisesSecondRound = [];\n\n        if (applicationDataOut && applicationDataOut.id && authenticationId) {\n            const authAppData = {\n                application_id: applicationDataOut.id,\n                authentication_id: authenticationId\n            };\n\n            promisesSecondRound.push(getSourcesApi().createAuthApp(authAppData));\n        }\n\n        const isAttachingCostManagement = filteredValues.credentials || filteredValues.billing_source;\n        if (isAttachingCostManagement) {\n            const { credentials, billing_source } = filteredValues;\n            let data = {};\n            data = credentials ? { authentication: { credentials } } : {};\n            data = billing_source ? { ...data, billing_source } : data;\n            promisesSecondRound.push(patchSource({ id: sourceId, ...data }));\n        }\n\n        await Promise.all(promisesSecondRound);\n\n        if (applicationDataOut) {\n            const timeout = timeoutedApps(appTypes).includes(applicationDataOut.application_type_id) ? 10000 : 0;\n            return await checkAppAvailability(applicationDataOut.id, timeout);\n        }\n\n        return {};\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n        if (appId) {\n            await getSourcesApi().deleteApplication(appId);\n        }\n\n        const errorMessage = await handleError(error);\n        throw errorMessage;\n    }\n};\n","export const initialState = {\n    state: 'loading',\n    error: '',\n    values: {},\n    authenticationsValues: [],\n    sourceAppsLength: 0,\n    initialValues: {},\n    isCancelling: false,\n};\n\nconst reducer = (state, { type, length, authenticationsValues, initialValues, error, values, data, formApi }) => {\n    switch (type) {\n        case 'setSourceAppslength':\n            return {\n                ...state,\n                sourceAppsLength: length\n            };\n        case 'loadAuthentications':\n            return {\n                ...state,\n                authenticationsValues,\n                initialValues,\n                values: {},\n                state: state.state === 'loading' ? 'wizard' : state.state\n            };\n        case 'loadWithoutAuthentications':\n            return {\n                ...state,\n                initialValues,\n                values: {},\n                state: state.state === 'loading' ? 'wizard' : state.state\n            };\n        case 'reset':\n            return {\n                ...state,\n                state: 'wizard'\n            };\n        case 'submit':\n            return {\n                ...state,\n                values,\n                formApi,\n                state: 'submitting',\n            };\n        case 'finish':\n            return {\n                ...state,\n                state: 'finished',\n                data\n            };\n        case 'error':\n            return {\n                ...state,\n                state: 'errored',\n                error,\n            };\n        case 'toggleCancelling':\n            return {\n                ...state,\n                isCancelling: !state.isCancelling,\n                ...(values && { values })\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React, { useReducer, useEffect, useRef } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport filterApps from '@redhat-cloud-services/frontend-components-sources/cjs/filterApps';\nimport CloseModal from '@redhat-cloud-services/frontend-components-sources/cjs/CloseModal';\nimport LoadingStep from '@redhat-cloud-services/frontend-components-sources/cjs/LoadingStep';\nimport ErroredStep from '@redhat-cloud-services/frontend-components-sources/cjs/ErroredStep';\nimport FinishedStep from '@redhat-cloud-services/frontend-components-sources/cjs/FinishedStep';\nimport TimeoutStep from '@redhat-cloud-services/frontend-components-sources/cjs/TimeoutStep';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\n\nimport { loadEntities } from '../../redux/sources/actions';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport createSchema from './AddApplicationSchema';\nimport WizardBody from './WizardBody';\n\nimport { getSourcesApi } from '../../api/entities';\n\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { endpointToUrl } from '../SourcesTable/formatters';\nimport { routes, replaceRouteId } from '../../Routes';\n\nimport { doAttachApp } from '../../api/doAttachApp';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nimport reducer, { initialState } from './reducer';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text';\n\nimport removeAppSubmit from './removeAppSubmit';\n\nlet selectedApp = undefined; // this has to be not-state value, because it shouldn't re-render the component when changes\nconst saveSelectedApp = ({ values: { application } }) => selectedApp = application;\n\nexport const onSubmit = (values, formApi, authenticationInitialValues, dispatch, setState, initialValues, appTypes) => {\n    setState({ type: 'submit', values, formApi });\n\n    return doAttachApp(values, formApi, authenticationInitialValues, initialValues, appTypes)\n    .then(async (data) => {\n        checkSourceStatus(initialValues.source.id);\n        await dispatch(loadEntities());\n        selectedApp = undefined;\n        return setState({ type: 'finish', data });\n    })\n    .catch(error => setState({\n        type: 'error',\n        error,\n    }));\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst AddApplication = () => {\n    const intl = useIntl();\n    const history = useHistory();\n\n    const loaded = useIsLoaded();\n\n    const {\n        appTypes,\n        sourceTypesLoaded,\n        appTypesLoaded,\n        sourceTypes,\n    } = useSelector(({ sources }) => sources, shallowEqual);\n\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const [state, setState] = useReducer(reducer, initialState);\n\n    const container = useRef(document.createElement('div'));\n\n    const removeApp = () => {\n        setState({ type: 'reset' });\n\n        return removeAppSubmit(\n            { id: state.data?.id, display_name: appTypes.find(({ id }) => id === state.data?.application_type_id)?.display_name },\n            intl,\n            undefined,\n            dispatch,\n            source\n        );\n    };\n\n    useEffect(() => {\n        selectedApp = undefined;\n    }, []);\n\n    useEffect(() => {\n        if (source) {\n            // When app is only removed, there is no need to reload values\n            const removeAppAction = state.sourceAppsLength >= source.applications.length && state.sourceAppsLength > 0;\n\n            setState({ type: 'setSourceAppslength', length: source.applications.length });\n\n            if (!removeAppAction) {\n                if (source.endpoints && source.endpoints[0]) {\n                    getSourcesApi()\n                    .listEndpointAuthentications(source.endpoints[0].id)\n                    .then(({ data }) => setState({\n                        type: 'loadAuthentications',\n                        authenticationsValues: data,\n                        initialValues: {\n                            source,\n                            endpoint: source.endpoints[0],\n                            url: endpointToUrl(source.endpoints[0]),\n                            application: selectedApp,\n                        },\n                        values: {}\n                    }));\n                } else {\n                    setState({\n                        type: 'loadWithoutAuthentications',\n                        initialValues: { source, application: selectedApp },\n                        values: {}\n                    });\n                }\n            }\n        }\n    }, [source]);\n\n    const goToSources = () => history.push(routes.sources.path);\n\n    if ((!appTypesLoaded || !sourceTypesLoaded || !loaded || state.state === 'loading') && state.state !== 'submitting') {\n        return  (\n            <WizardBody\n                goToSources={goToSources}\n                step={<LoadingStep\n                    customText={intl.formatMessage({\n                        id: 'sources.loading',\n                        defaultMessage: 'Loading, please wait.'\n                    })}\n                    cancelTitle={intl.formatMessage({\n                        id: 'sources.close',\n                        defaultMessage: 'Close'\n                    })}\n                    onClose={goToSources}\n                />}\n            />\n        );\n    }\n\n    const onSubmitWrapper = (values, formApi) => onSubmit(\n        values,\n        formApi,\n        state.authenticationsValues,\n        dispatch,\n        setState,\n        state.initialValues,\n        appTypes\n    );\n\n    if (state.state === 'submitting') {\n        return  (\n            <WizardBody\n                goToSources={goToSources}\n                step={<LoadingStep\n                    cancelTitle={intl.formatMessage({\n                        id: 'sources.close',\n                        defaultMessage: 'Close'\n                    })}\n                    onClose={goToSources}\n                    customText={intl.formatMessage({\n                        id: 'wizard.loadingText defaultMessage=Validating source credentials',\n                        defaultMessage: 'Validating source credentials'\n                    })}\n                />}\n            />\n        );\n    }\n\n    const onReset = () => setState({ type: 'reset' });\n\n    if (state.state !== 'wizard') {\n        let shownStep;\n\n        if (state.state !== 'finished') {\n            shownStep = (<ErroredStep\n                onRetry={onReset}\n                onClose={goToSources}\n                returnButtonTitle={intl.formatMessage({\n                    id: 'sources.retry',\n                    defaultMessage: 'Retry'\n                })}\n                primaryAction={() => onSubmitWrapper(state.values, state.formApi)}\n                secondaryActions={\n                    <Text\n                        component='a'\n                        target=\"_blank\"\n                        href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {intl.formatMessage({ id: 'wizard.openTicket', defaultMessage: 'Open a support case' })}\n                    </Text>\n                }\n            />);\n        } else {\n            switch (state.data.availability_status) {\n                case 'available':\n                    shownStep = (<FinishedStep\n                        title={intl.formatMessage({\n                            id: 'sources.configurationSuccessful',\n                            defaultMessage: 'Configuration successful'\n                        })}\n                        hideSourcesButton={true}\n                        onReset={onReset}\n                        onClose={goToSources}\n                        secondaryActions={\n                            <Button variant=\"link\" onClick={onReset}>\n                                { intl.formatMessage({\n                                    id: 'sources.continueManageApp',\n                                    defaultMessage: 'Continue managing applications'\n                                }) }\n                            </Button>\n                        }\n                        returnButtonTitle={\n                            intl.formatMessage({\n                                id: 'sources.backToSources',\n                                defaultMessage: 'Back to Sources'\n                            })\n                        }\n                        successfulMessage={\n                            intl.formatMessage({\n                                id: 'sources.successAddApp',\n                                defaultMessage: 'Your application was successfully added.'\n                            })\n                        }\n                    />);\n                    break;\n                case 'unavailable':\n                    shownStep = (<ErroredStep\n                        onRetry={onReset}\n                        onClose={goToSources}\n                        message={\n                            state.data.availability_status_error\n                            || intl.formatMessage({ id: 'wizard.unknownError', defaultMessage: 'Unknown error' })\n                        }\n                        title={intl.formatMessage({\n                            id: 'sources.configurationSuccessful',\n                            defaultMessage: 'Configuration unsuccessful'\n                        })}\n                        secondaryActions={<Button variant=\"link\" onClick={ removeApp }>\n                            {intl.formatMessage({ id: 'wizard.removeApp', defaultMessage: 'Remove application' })}\n                        </Button>}\n                        Component={() => (\n                            <Link to={replaceRouteId(routes.sourcesEdit.path, source.id)}>\n                                <Button variant='primary' className=\"pf-u-mt-xl\">\n                                    { intl.formatMessage({ id: 'wizard.editSource', defaultMessage: 'Edit source' })}\n                                </Button>\n                            </Link>\n                        )}\n                    />);\n                    break;\n                default:\n                    shownStep = (<TimeoutStep\n                        returnButtonTitle={\n                            intl.formatMessage({\n                                id: 'sources.backToSources',\n                                defaultMessage: 'Back to Sources'\n                            })\n                        }\n                        onClose={ goToSources }\n                        secondaryActions={<Button variant=\"link\" onClick={onReset}>\n                            { intl.formatMessage({\n                                id: 'sources.continueManageApp',\n                                defaultMessage: 'Continue managing applications'\n                            }) }\n                        </Button>}\n                    />);\n            }\n        }\n\n        return (\n            <WizardBody goToSources={goToSources} step={shownStep} />\n        );\n    }\n\n    const appIds = source.applications.filter(({ isDeleting }) => !isDeleting)\n    .reduce((acc, app) => [...acc, app.application_type_id], []);\n\n    const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n    const sourceTypeName = sourceType && sourceType.name;\n    const filteredAppTypes = appTypes.filter((type) =>\n        !appIds.includes(type.id) && type.supported_source_types.includes(sourceTypeName)\n    ).filter(filterApps);\n\n    const availableAppTypes = filteredAppTypes.map((type) => {\n        const hasDeletingApp = source.applications.find(app => app.application_type_id === type.id);\n        const label = `${type.display_name} ${hasDeletingApp ? `(${intl.formatMessage({\n            id: 'sources.currentlyRemoving',\n            defaultMessage: 'Currently removing'\n        })})` : ''}`;\n\n        return ({ value: type.id, label, isDisabled: hasDeletingApp ? true : false });\n    });\n\n    const schema = createSchema(\n        availableAppTypes,\n        intl,\n        sourceTypes,\n        appTypes,\n        state.authenticationsValues,\n        source,\n        container.current\n    );\n\n    const hasAvailableApps = filteredAppTypes.length > 0;\n    const onSubmitFinal = hasAvailableApps ? onSubmitWrapper : goToSources;\n\n    const onStay = () => {\n        container.current.hidden = false;\n        setState({ type: 'toggleCancelling' });\n    };\n\n    const cancelBeforeExit = (values) => {\n        if (values?.application) {\n            container.current.hidden = true;\n            setState({ type: 'toggleCancelling', values }); }\n        else {\n            goToSources();\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <CloseModal\n                title={\n                    intl.formatMessage({\n                        id: 'sources.manageAppsCloseModalTitle', defaultMessage: 'Exit application adding?'\n                    })\n                }\n                isOpen={state.isCancelling}\n                onStay={onStay}\n                onExit={goToSources}\n            />\n            <SourcesFormRenderer\n                schema={schema}\n                showFormControls={false}\n                onSubmit={onSubmitFinal}\n                onCancel={cancelBeforeExit}\n                initialValues={state.initialValues}\n                subscription={{ values: true }}\n                debug={saveSelectedApp}\n                clearedValue={null}\n                FormTemplate={FormTemplateWrapper}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default AddApplication;\n"],"sourceRoot":""}