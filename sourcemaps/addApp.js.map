{"version":3,"sources":["webpack:///./src/components/SourceEditForm/sourceEditContext.js","webpack:///./src/components/EditField/EditField.js","webpack:///./src/components/EditField/EditFieldWrapper.js","webpack:///./src/utilities/SourcesFormRenderer.js","webpack:///./src/components/AddApplication/AuthTypeCleaner.js","webpack:///./src/components/AddApplication/RemoveAppModal.js","webpack:///./src/components/ApplicationsList/ApplicationList.js","webpack:///./src/components/AddApplication/AddApplicationDescription.js","webpack:///./src/components/AddApplication/schema/authenticationSelectionStep.js","webpack:///./src/components/AddApplication/schema/generateFirstAuthStep.js","webpack:///./src/components/AddApplication/AuthTypeSetter.js","webpack:///./src/components/AddApplication/schema/selectAuthenticationStep.js","webpack:///./src/components/AddApplication/AddApplicationSchema.js","webpack:///./src/components/AddApplication/WizardBody.js","webpack:///./src/components/AddApplication/steps/createProgressTextsApp.js","webpack:///./src/api/doAttachApp.js","webpack:///./src/components/AddApplication/reducer.js","webpack:///./src/components/AddApplication/AddApplication.js"],"names":["sourceEditContext","createContext","EDIT_FIELD_NAME","EditField","isRequired","label","helperText","hideLabel","name","type","isEditable","useFormApi","getFieldState","getState","setState","useContext","value","get","initialValues","error","touched","showError","emptyText","includes","fieldId","validated","helperTextInvalid","tabIndex","onKeyPress","e","charCode","preventDefault","onClick","className","propTypes","PropTypes","node","bool","string","NOT_CHANGING_COMPONENTS","componentTypes","CHECKBOX","SWITCH","EditFieldWrapper","originalComponent","props","Component","clearProps","componentMapper","RendererContext","editing","SourcesFormRenderer","FormTemplate","mapperExtension","validatorMapper","validatorTypes","REQUIRED","PATTERN","MIN_LENGTH","URL","AuthTypeCleaner","modifiedValues","formOptions","selectedAppId","values","useState","initialValue","setInitialValue","useEffect","authentication","undefined","batch","change","object","RemoveAppModal","app","onCancel","container","intl","useIntl","appTypes","useSelector","sources","source","useSource","dispatch","useDispatch","hidden","dependentApps","dependent_applications","map","appName","appType","find","sourceAppsNames","display_name","filter","x","Modal","isOpen","onClose","variant","aria-label","formatMessage","id","defaultMessage","header","Title","headingLevel","size","actions","Button","key","titleSuccess","titleError","removeApplication","TextContent","Text","component","TextVariants","p","length","apps","shape","arrayOf","func","instanceOf","Element","ApplicationList","setApplicationToRemove","breakpoints","namePrefix","applications","application_type_id","isDeleting","sort","a","b","localeCompare","GridItem","md","style","marginBottom","remove","ButtonVariant","link","isInline","number","defaultProps","AddApplicationDescription","removingApp","sourceTypes","sourceType","source_type_id","Fragment","Grid","hasGutter","h4","product_name","authenticationSelectionStep","authenticationValues","title","fields","RADIO","options","supported_authentication_types","schema","authtype","validate","nextStep","application","auth","generateFirstAuthStep","endpointFields","additionalStepName","skipEndpoint","schemaBuilder","customSteps","additionalIncludesStepKeys","stepProps","firstAdditonalStep","additionalFields","AuthTypeSetter","selectedAuthentication","startsWith","replace","newAuthenticationValues","merge","cloneDeep","innerSetter","SelectAuthenticationDescription","applicationTypeName","authenticationTypeName","generateAuthSelectionOptions","applicationTypes","supportedAuthTypeName","supportedAuthType","authentications","includeUsername","username","includeAppName","selectAuthenticationStep","Content","hideField","forEach","ifAppSupported","supported_source_types","isAppAvailable","supportedAuthTypes","push","SUB_FORM","condition","and","when","is","appId","NoAvailableApplicationDescription","ApplicationSummary","hasAlreadySupportedAuthType","authValues","sourceTypeName","hasMultipleAuthenticationTypes","hasAvailableApps","authenticationFields","imported","appendEndpoint","endpoint","hasEndpointStep","appAdditionalSteps","authType","applicationSelection","DefaultIcon","selectionSteps","WIZARD","inModal","showTitles","crossroads","description","buttonLabels","submit","cancel","back","WizardBodyAttach","step","goToSources","Wizard","steps","isFinishedStep","createProgressTextsApp","filteredValues","allFormValues","progressText","isEmpty","removeEmpty","obj","Object","keys","doAttachApp","formApi","authenticationInitialValues","formState","selectedAuthId","authInitialValues","valuesWithoutAuth","newAddedValues","addedDiff","updatedValues","updatedDiff","newAddedAuthValues","updatedAuthValues","progressTexts","sourceId","endpointId","promises","getSourcesApi","updateSource","Promise","resolve","hasModifiedEndpoint","hasModifiedUrl","url","urlOrHost","scheme","host","port","path","endPointPort","parseInt","endpointData","isNaN","updateEndpoint","createEndpointData","default","source_id","createEndpoint","updateAuthentication","authenticationData","resource_id","resource_type","createAuthentication","doCreateApplication","all","authenticationDataOut","applicationDataOut","authenticationId","promisesSecondRound","authAppData","application_id","authentication_id","createAuthApp","credentials","billing_source","data","patchSource","handleError","initialState","state","authenticationsValues","sourceAppsLength","progressStep","isCancelling","reducer","selectedApp","saveSelectedApp","onSubmit","then","checkSourceStatus","loadEntities","FormTemplateWrapper","showFormControls","AddApplication","history","useHistory","loaded","useIsLoaded","shallowEqual","sourceTypesLoaded","appTypesLoaded","useReducer","useRef","document","createElement","removeAppAction","endpoints","listEndpointAuthentications","endpointToUrl","routes","WizardBody","customText","cancelTitle","onReset","shownStep","hideSourcesButton","secondaryActions","returnButtonTitle","successfulMessage","onRetry","message","retryText","appIds","reduce","acc","filteredAppTypes","filterApps","availableAppTypes","hasDeletingApp","isDisabled","createSchema","current","onSubmitFinal","finalValues","onStay","onExit","subscription","debug","clearedValue"],"mappings":"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","file":"js/addApp.dc18d237bcfc687d9050.js","sourcesContent":["import { createContext } from 'react';\n\nconst sourceEditContext = createContext();\n\nexport default sourceEditContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nimport PencilAltIcon from '@patternfly/react-icons/dist/js/icons/pencil-alt-icon';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\n\nimport sourceEditContext from '../SourceEditForm/sourceEditContext';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const EDIT_FIELD_NAME = 'edit-field';\n\nconst EditField = ({ isRequired, label, helperText, hideLabel, name, type, isEditable }) => {\n    const { getFieldState, getState } = useFormApi();\n\n    const { setState } = useContext(sourceEditContext);\n\n    const { error, touched, value } = getFieldState(name) || { value: get(getState().initialValues, name) };\n    const showError = touched && error;\n\n    const isPassword = type === 'password' || name.includes('password');\n    const emptyText = isPassword ? 'Click to edit' : 'Click to add';\n\n    return (\n        <FormGroup\n            isRequired={ isRequired }\n            label={ !hideLabel && label }\n            fieldId={ name }\n            validated={ showError ? 'error' : 'default' }\n            helperText={ helperText }\n            helperTextInvalid={ error }\n            tabIndex={0}\n            onKeyPress={(e) => {\n                if (e.charCode === 32 && isEditable) {\n                    e.preventDefault();\n                    setState({ type: 'setEdit', name });\n                }\n            }}\n            {...(isEditable && { onClick: () => setState({ type: 'setEdit', name }) })}\n        >\n            <div className={`pf-c-form__horizontal-group ins-c-sources__edit-field-group ${isEditable ? 'clickable' : ''}`}>\n                <TextContent className={`ins-c-sources__edit-field-group-text-content ${isEditable ? 'clickable' : ''}`}>\n                    <span className=\"ins-c-sources__edit-field-value pf-u-mr-sm\">\n                        {value ? value : isEditable ? emptyText : ''}\n                    </span>\n                    {isEditable && <PencilAltIcon />}\n                </TextContent>\n            </div>\n        </FormGroup>\n    );\n};\n\nEditField.propTypes = {\n    label: PropTypes.node,\n    isRequired: PropTypes.bool,\n    helperText: PropTypes.node,\n    hideLabel: PropTypes.bool,\n    isEditable: PropTypes.bool,\n    type: PropTypes.string,\n    name: PropTypes.string\n};\n\nexport default EditField;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport RendererContext from '@data-driven-forms/react-form-renderer/dist/cjs/renderer-context';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport sourceEditContext from '../SourceEditForm/sourceEditContext';\nimport EditField from './EditField';\n\nexport const NOT_CHANGING_COMPONENTS = [componentTypes.CHECKBOX, componentTypes.SWITCH];\n\nconst EditFieldWrapper = ({ originalComponent, isEditable = true, ...props }) => {\n    let Component = EditField;\n    let clearProps = {};\n\n    const { componentMapper } = useContext(RendererContext);\n    const { editing } = useContext(sourceEditContext);\n\n    if (editing[props.name] || NOT_CHANGING_COMPONENTS.includes(originalComponent)) {\n        Component = componentMapper[originalComponent];\n    } else if (isEditable) {\n        clearProps = { isEditable: true };\n    }\n\n    return <Component {...props} {...clearProps}/>;\n};\n\nEditFieldWrapper.propTypes = {\n    originalComponent: PropTypes.string,\n    name: PropTypes.string,\n    isEditable: PropTypes.bool\n};\n\nexport default EditFieldWrapper;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer/dist/cjs/form-renderer';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validatorMapper from '@data-driven-forms/react-form-renderer/dist/cjs/validator-mapper';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/cjs/component-mapper';\n\nimport { mapperExtension } from '@redhat-cloud-services/frontend-components-sources/cjs/sourceFormRenderer';\n\nimport EditFieldWrapper from '../components/EditField/EditFieldWrapper';\n\nconst SourcesFormRenderer = props => (\n    <FormRenderer\n        FormTemplate={FormTemplate}\n        componentMapper={{\n            ...componentMapper,\n            ...mapperExtension,\n            'edit-field': EditFieldWrapper,\n            'switch-field': componentMapper[componentTypes.SWITCH]\n        }}\n        validatorMapper={{\n            'required-validator': validatorMapper[validatorTypes.REQUIRED],\n            'pattern-validator': validatorMapper[validatorTypes.PATTERN],\n            'min-length-validator': validatorMapper[validatorTypes.MIN_LENGTH],\n            'url-validator': validatorMapper[validatorTypes.URL]\n        }}\n        {...props}\n    />\n);\n\nexport default SourcesFormRenderer;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const AuthTypeCleaner = ({ modifiedValues }) => {\n    const formOptions = useFormApi();\n\n    const selectedAppId = get(formOptions.getState().values, 'application.application_type_id', '');\n\n    const [initialValue, setInitialValue] = useState(selectedAppId);\n\n    useEffect(() => {\n        if (initialValue !== selectedAppId) {\n            const values = modifiedValues && modifiedValues.authentication ? modifiedValues.authentication : undefined;\n            formOptions.batch(() => {\n                formOptions.change('authentication', values);\n                formOptions.change('selectedAuthentication', undefined);\n            });\n            setInitialValue(undefined);\n        }\n    }, [selectedAppId]);\n\n    return null;\n};\n\nAuthTypeCleaner.propTypes = {\n    modifiedValues: PropTypes.object\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useIntl, FormattedMessage } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { removeApplication } from '../../redux/sources/actions';\nimport { useSource } from '../../hooks/useSource';\n\nconst RemoveAppModal = ({ app, onCancel, container }) => {\n    const intl = useIntl();\n\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (container) {\n            container.hidden = true;\n        }\n    }, []);\n\n    const dependentApps = app.dependent_applications.map(appName => {\n        const appType = appTypes.find(({ name }) => name === appName);\n\n        return appType ? app.sourceAppsNames.includes(appType.display_name) ? appType.display_name : undefined : undefined;\n    }).filter(x => x);\n\n    const onSubmit = () => {\n        const titleSuccess = intl.formatMessage({\n            id: 'sources.removeAppWarning',\n            defaultMessage: `{ name } was removed from this source.`\n        },\n        {\n            name: app.display_name\n        });\n        const titleError = intl.formatMessage({\n            id: 'sources.removeAppError',\n            defaultMessage: `Removing of { name } application from this source was unsuccessful.`\n        }, {\n            name: app.display_name\n        });\n        onCancel();\n        return dispatch(removeApplication(app.id, source.id, titleSuccess, titleError));\n    };\n\n    return (\n        <Modal\n            className=\"ins-c-sources__dialog--warning\"\n            isOpen={true}\n            onClose={onCancel}\n            variant=\"small\"\n            aria-label={\n                intl.formatMessage({\n                    id: 'sources.deleteAppTitle',\n                    defaultMessage: 'Remove application?',\n                })\n            }\n            header={\n                <Title headingLevel=\"h1\" size=\"2xl\">\n                    <ExclamationTriangleIcon size=\"sm\" className=\"ins-m-alert ins-c-source__delete-icon pf-u-mr-sm\" />\n                    {intl.formatMessage({\n                        id: 'sources.deleteAppTitle',\n                        defaultMessage: 'Remove application?',\n                    })}\n                </Title>\n            }\n            actions={[\n                <Button\n                    id=\"deleteSubmit\" key=\"submit\" variant=\"danger\" type=\"button\" onClick={ onSubmit }\n                >\n                    <FormattedMessage\n                        id=\"sources.remove\"\n                        defaultMessage=\"Remove application\"\n                    />\n                </Button>,\n                <Button id=\"deleteCancel\" key=\"cancel\" variant=\"link\" type=\"button\" onClick={ onCancel }>\n                    <FormattedMessage\n                        id=\"sources.cancel\"\n                        defaultMessage=\"Cancel\"\n                    />\n                </Button>\n            ]}\n        >\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    <FormattedMessage\n                        id=\"sources.deleteAppWarning\"\n                        defaultMessage={`Are you sure to remove { appName } from this source?`}\n                        values={{\n                            appName: <b>{app.display_name}</b>\n                        }}\n                    />\n                </Text>\n                {dependentApps.length > 0 && <Text component={TextVariants.p}>\n                    <FormattedMessage\n                        id=\"sources.deleteAppDetails\"\n                        defaultMessage={`This change will affect these applications: { apps }.`}\n                        values={{\n                            apps: dependentApps\n                        }}\n                    />\n                </Text>}\n            </TextContent>\n        </Modal>\n    );\n};\n\nRemoveAppModal.propTypes = {\n    app: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        display_name: PropTypes.string.isRequired,\n        dependent_applications: PropTypes.arrayOf(PropTypes.string),\n        sourceAppsNames: PropTypes.arrayOf(PropTypes.string)\n    }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    container: PropTypes.instanceOf(Element)\n};\n\nexport default RemoveAppModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button, ButtonVariant } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\n\nimport { useSource } from '../../hooks/useSource';\n\nconst ApplicationList = ({ setApplicationToRemove, breakpoints, namePrefix }) => {\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const sourceAppsNames = source.applications\n    .map(({ application_type_id }) => {\n        const appType = appTypes.find(({ id }) => id === application_type_id);\n        return appType ? appType.display_name : undefined;\n    });\n\n    return source.applications\n    .filter((app) => !app.isDeleting)\n    .map((app) => {\n        const type = appTypes.find((appType) => appType.id === app.application_type_id);\n\n        if (type) {\n            return {\n                display_name: type.display_name,\n                id: app.id,\n                dependent_applications: type.dependent_applications\n            };\n        }\n    })\n    .sort((a, b) => a.display_name.localeCompare(b.display_name))\n    .map(({ display_name, id, dependent_applications }) => (\n        <TextContent key={id}>\n            <Grid>\n                <GridItem md={breakpoints.display_name || 4}>\n                    <Text component={TextVariants.p} style={{ marginBottom: 0 }}>\n                        { namePrefix }{ display_name }\n                    </Text>\n                </GridItem>\n                <GridItem md={breakpoints.remove || 8} className=\"ins-c-sources__remove-app\">\n                    <Button\n                        variant={ButtonVariant.link}\n                        isInline\n                        onClick={() => setApplicationToRemove({ id, display_name, dependent_applications, sourceAppsNames })}\n                    >\n                        <FormattedMessage\n                            id=\"sources.remove\"\n                            defaultMessage=\"Remove\"\n                        />\n                    </Button>\n                </GridItem>\n            </Grid>\n        </TextContent>\n    ));\n};\n\nApplicationList.propTypes = {\n    setApplicationToRemove: PropTypes.func.isRequired,\n    breakpoints: PropTypes.shape({\n        display_name: PropTypes.number,\n        remove: PropTypes.number\n    }),\n    namePrefix: PropTypes.node\n};\n\nApplicationList.defaultProps = {\n    breakpoints: {}\n};\n\nexport default ApplicationList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/index';\n\nimport RemoveAppModal from './RemoveAppModal';\nimport ApplicationList from '../ApplicationsList/ApplicationList';\nimport { useSource } from '../../hooks/useSource';\n\nconst AddApplicationDescription = ({ container }) => {\n    const [removingApp, setApplicationToRemove] = useState({});\n\n    const sourceTypes = useSelector(({ sources }) => sources.sourceTypes);\n    const source = useSource();\n\n    const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n    const apps = source.applications.filter((app) => !app.isDeleting);\n\n    return (\n        <React.Fragment>\n            {removingApp.id && <RemoveAppModal\n                app={removingApp}\n                onCancel={() => {\n                    if (container) {\n                        container.hidden = false;\n                    }\n\n                    return setApplicationToRemove({});\n                }}\n                container={container}\n            />}\n            <TextContent>\n                <Grid hasGutter>\n                    <GridItem md={2}>\n                        <Text component={TextVariants.h4}>\n                            <FormattedMessage\n                                id=\"sources.sourceName\"\n                                defaultMessage=\"Source name\"\n                            />\n                        </Text>\n                    </GridItem>\n                    <GridItem md={2}>\n                        <Text component={TextVariants.h4}>\n                            <FormattedMessage\n                                id=\"sources.type\"\n                                defaultMessage=\"Type\"\n                            />\n                        </Text>\n                    </GridItem>\n                    <GridItem md={8}>\n                        <Text component={TextVariants.h4}>\n                            <FormattedMessage\n                                id=\"sources.apps\"\n                                defaultMessage=\"Applications\"\n                            />\n                        </Text>\n                    </GridItem>\n                    <GridItem md={2}>\n                        <Text component={TextVariants.p}>\n                            {source.name}\n                        </Text>\n                    </GridItem>\n                    <GridItem md={2}>\n                        <Text component={TextVariants.p}>\n                            { sourceType ? sourceType.product_name : <FormattedMessage\n                                id=\"sources.typeNotFound\"\n                                defaultMessage=\"Type not found\"\n                            />}\n                        </Text>\n                    </GridItem>\n                    <GridItem md={8}>\n                        {apps.length > 0 ? <ApplicationList setApplicationToRemove={setApplicationToRemove}/> : <FormattedMessage\n                            id=\"sources.noApps\"\n                            defaultMessage=\"No applications\"\n                        />}\n                    </GridItem>\n                </Grid>\n            </TextContent>\n        </React.Fragment>\n    );\n};\n\nAddApplicationDescription.propTypes = {\n    container: PropTypes.instanceOf(Element)\n};\n\nexport default AddApplicationDescription;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nconst authenticationSelectionStep = (sourceType, appType, intl, authenticationValues) => {\n    const nextStep = ({ values: { application, authtype } }) => {\n        if (authtype) {\n            const hasSupportedAuthType = authenticationValues.find((auth) => auth.authtype === authtype);\n\n            if (hasSupportedAuthType) {\n                return 'selectAuthentication';\n            }\n\n            return `${sourceType.name}-${application && application.application_type_id}-${authtype}`;\n        }\n    };\n\n    return ({\n        name: `selectAuthType-${appType.id}`,\n        title: intl.formatMessage({\n            id: 'sources.selectAuthenticationTitle',\n            defaultMessage: 'Select authentication type'\n        }),\n        fields: [{\n            component: componentTypes.RADIO,\n            name: 'authtype',\n            options: appType.supported_authentication_types[sourceType.name].map(type => ({\n                value: type,\n                label: sourceType.schema.authentication.find((authtype) => authtype.type === type)?.name || 'Unknown type'\n            })),\n            isRequired: true,\n            validate: [{ type: validatorTypes.REQUIRED }]\n        }],\n        nextStep\n    });\n};\n\nexport default authenticationSelectionStep;\n","import * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\n\nconst generateFirstAuthStep = (type, appType, endpointFields, authtype, intl) => {\n    const fields = [...endpointFields];\n\n    const auth = type.schema.authentication.find(({ type }) => type === authtype);\n\n    const additionalStepName = `${type.name}-${authtype}-${appType.name}-additional-step`;\n\n    const skipEndpoint = schemaBuilder.shouldSkipEndpoint(type.name, authtype, appType.name);\n    const customSteps = schemaBuilder.hasCustomSteps(type.name, authtype, appType.name);\n\n    let nextStep;\n\n    if (schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).length > 0) {\n        nextStep = additionalStepName;\n    } else if (endpointFields.length === 0 && !skipEndpoint) {\n        nextStep = `${type.name}-endpoint`;\n    } else {\n        nextStep = 'summary';\n    }\n\n    const additionalIncludesStepKeys = schemaBuilder.getAdditionalStepKeys(type.name, authtype, appType.name);\n    const hasCustomStep = schemaBuilder.shouldSkipSelection(type.name, authtype, appType.name);\n\n    let stepProps = {};\n\n    if (hasCustomStep) {\n        const firstAdditonalStep = schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).find(({ name }) => !name);\n        const additionalFields = schemaBuilder.getAdditionalStepFields(auth.fields, additionalStepName);\n\n        if (firstAdditonalStep.nextStep) {\n            nextStep = firstAdditonalStep.nextStep;\n        } else if (endpointFields.length === 0 && !skipEndpoint && !customSteps) {\n            nextStep = `${type.name}-endpoint`;\n        } else {\n            nextStep = 'summary';\n        }\n\n        stepProps = {\n            ...firstAdditonalStep,\n            fields: [\n                ...fields,\n                ...schemaBuilder.injectAuthFieldsInfo(\n                    [...firstAdditonalStep.fields, ...additionalFields],\n                    type.name,\n                    authtype,\n                    appType.name\n                )\n            ]\n        };\n    }\n\n    return ({\n        name: `${type.name}-${appType.id}-${authtype}`,\n        title: intl.formatMessage({\n            id: 'sources.configureCredentials',\n            defaultMessage: 'Configure credentials'\n        }),\n        fields: [\n            ...fields,\n            ...schemaBuilder.getAdditionalAuthFields(type.name, authtype, appType.name),\n            ...schemaBuilder.injectAuthFieldsInfo(\n                schemaBuilder.getNoStepsFields(auth.fields, additionalIncludesStepKeys),\n                type.name,\n                authtype,\n                appType.name\n            )\n        ],\n        nextStep,\n        ...stepProps\n    });\n};\n\nexport default generateFirstAuthStep;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const innerSetter = ({\n    formOptions,\n    modifiedValues,\n    authenticationValues,\n    selectedAuthentication\n}) => {\n    if (!selectedAuthentication.startsWith('new-')) {\n        const authentication = authenticationValues.find(({ id }) => id === selectedAuthentication);\n\n        if (modifiedValues && modifiedValues.authentication) {\n            const newAuthenticationValues = merge(cloneDeep(authentication), modifiedValues.authentication);\n            formOptions.change('authentication', newAuthenticationValues);\n        } else {\n            formOptions.change('authentication', authentication);\n        }\n    } else {\n        const authtype = selectedAuthentication.replace('new-', '');\n        if (modifiedValues && modifiedValues.authentication) {\n            formOptions.change('authentication', { ...modifiedValues.authentication, authtype });\n        } else {\n            formOptions.change('authentication', { authtype });\n        }\n    }\n};\n\nexport const AuthTypeSetter = ({ authenticationValues, modifiedValues }) => {\n    const formOptions = useFormApi();\n\n    const selectedAuthentication = formOptions.getState().values.selectedAuthentication;\n\n    const [initialValue, setInitialValue] = useState(selectedAuthentication);\n\n    useEffect(() => {\n        if (initialValue !== selectedAuthentication) {\n            innerSetter({ formOptions, authenticationValues, modifiedValues, selectedAuthentication });\n            setInitialValue(undefined);\n        }\n    }, [selectedAuthentication]);\n\n    return null;\n};\n\nAuthTypeSetter.propTypes = {\n    authenticationValues: PropTypes.arrayOf(PropTypes.object),\n    modifiedValues: PropTypes.object\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { FormattedMessage } from 'react-intl';\n\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { AuthTypeSetter } from '../AuthTypeSetter';\n\nexport const SelectAuthenticationDescription = ({ applicationTypeName, authenticationTypeName }) => (\n    <TextContent>\n        <Text component={ TextVariants.p }>\n            <FormattedMessage\n                id=\"sources.selectAuthenticationDescription\"\n                defaultMessage=\"Selected application { applicationTypeName } supports { authenticationTypeName } authentication\n                type. You can use already defined authentication values or define new.\"\n                values={{ applicationTypeName, authenticationTypeName }}\n            />\n        </Text>\n    </TextContent>\n);\n\nSelectAuthenticationDescription.propTypes = {\n    applicationTypeName: PropTypes.string,\n    authenticationTypeName: PropTypes.string\n};\n\nexport const generateAuthSelectionOptions = ({\n    source, authenticationValues, applicationTypes, supportedAuthTypeName, supportedAuthType\n}) => authenticationValues.filter(({ authtype }) => authtype === supportedAuthType).map((values) => {\n    const app = source.applications.find(({ authentications }) => authentications.find(({ id }) => id === values.id));\n\n    const appType = app && app.application_type_id ? applicationTypes.find(({ id }) => id === app.application_type_id) : '';\n\n    const includeUsername = values.username ? `-${values.username}` : '';\n    const includeAppName = appType ? `-${appType.display_name}` : `-unused-${values.id}`;\n    const label = `${supportedAuthTypeName}${includeUsername}${includeAppName}`;\n\n    return {\n        label,\n        value: values.id,\n    };\n});\n\nconst selectAuthenticationStep = ({\n    intl, source, authenticationValues, sourceType, applicationTypes, modifiedValues\n}) => {\n    const nextStep = ({ values: { application, authtype, authentication } }) => {\n        const app = application ? application : {};\n        const appId = app.application_type_id ? app.application_type_id : '';\n\n        return `${sourceType.name}-${appId}-${authtype || authentication?.authtype}`;\n    };\n\n    const fields = [{\n        component: 'description',\n        name: 'authtypesetter',\n        Content: AuthTypeSetter,\n        authenticationValues,\n        hideField: true,\n        modifiedValues\n    }];\n\n    applicationTypes.forEach((app) => {\n        const ifAppSupported = app.supported_source_types.includes(sourceType.name);\n        const isAppAvailable = !source.applications?.find(({ application_type_id }) => application_type_id === app.id);\n\n        if (ifAppSupported && isAppAvailable) {\n            const supportedAuthTypes = get(app, `supported_authentication_types[${sourceType.name}]`, []);\n\n            supportedAuthTypes.forEach((supportedAuthType) => {\n                const hasAvailableAuthentications = authenticationValues.find(({ authtype }) => authtype === supportedAuthType);\n\n                if (hasAvailableAuthentications) {\n                    const supportedAuthTypeName =\n                get(sourceType, `schema.authentication`, {}).find(({ type }) => type === supportedAuthType).name;\n\n                    fields.push({\n                        component: componentTypes.SUB_FORM,\n                        name: `${app.name}-subform`,\n                        condition: {\n                            and: [{\n                                when: 'application.application_type_id',\n                                is: app.id\n                            },\n                            ...(supportedAuthTypes.length > 1\n                                ? [{\n                                    when: 'authtype',\n                                    is: supportedAuthType\n                                }]\n                                : []\n                            )]\n                        },\n                        fields: [\n                            {\n                                name: `${app.name}-select-authentication-summary`,\n                                component: 'description',\n                                Content: SelectAuthenticationDescription,\n                                applicationTypeName: app.display_name,\n                                authenticationTypeName: supportedAuthTypeName,\n                            },\n                            {\n                                component: componentTypes.RADIO,\n                                name: 'selectedAuthentication',\n                                label: intl.formatMessage({\n                                    id: 'sources.selectAuthenticationTitle',\n                                    defaultMessage: 'Select authentication'\n                                }),\n                                isRequired: true,\n                                validate: [{ type: validatorTypes.REQUIRED }],\n                                options: [\n                                    {\n                                        label: intl.formatMessage({\n                                            id: 'sources.selectAuthenticationradioLabel',\n                                            defaultMessage: 'Define new { supportedAuthTypeName }'\n                                        }, { supportedAuthTypeName }),\n                                        value: `new-${supportedAuthType}`\n                                    },\n                                    ...generateAuthSelectionOptions({\n                                        authenticationValues,\n                                        source,\n                                        applicationTypes,\n                                        supportedAuthTypeName,\n                                        supportedAuthType\n                                    })\n                                ]\n                            },\n                        ]\n                    });\n                }\n            });\n        }\n    });\n\n    return ({\n        name: 'selectAuthentication',\n        title: intl.formatMessage({\n            id: 'sources.selectAuthenticationTitle',\n            defaultMessage: 'Select authentication'\n        }),\n        fields,\n        nextStep\n    });\n};\n\nexport default selectAuthenticationStep;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { FormattedMessage } from 'react-intl';\nimport * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\nimport get from 'lodash/get';\n\nimport { AuthTypeCleaner } from './AuthTypeCleaner';\nimport AddApplicationDescription from './AddApplicationDescription';\nimport authenticationSelectionStep from './schema/authenticationSelectionStep';\nimport generateFirstAuthStep from './schema/generateFirstAuthStep';\nimport selectAuthenticationStep from './schema/selectAuthenticationStep';\n\nexport const NoAvailableApplicationDescription = () => (<TextContent>\n    <Text component={ TextVariants.p }>\n        <FormattedMessage\n            id=\"sources.allApplicationsAssigned\"\n            defaultMessage=\"All available applications have already been added to this source\n        or there is no available application for this source.\"\n        />\n    </Text>\n</TextContent>);\n\nexport const ApplicationSummary = () => (<TextContent>\n    <Text component={ TextVariants.p }>\n        <FormattedMessage\n            id=\"sources.reviewAddAppSummary\"\n            defaultMessage=\"Review the information below and click Add to add the application to your source.\n            Use the Back button to make changes.\"\n        />\n    </Text>\n</TextContent>);\n\nexport const hasAlreadySupportedAuthType = (authValues = [], appType, sourceTypeName) => (\n    authValues.find(({ authtype }) => authtype === get(appType, `supported_authentication_types.${sourceTypeName}[0]`))\n);\n\nexport const hasMultipleAuthenticationTypes = (app, sourceType) => (\n    app.supported_source_types.includes(sourceType.name) && app.supported_authentication_types[sourceType.name]?.length > 1\n);\n\nconst fields = (\n    applications = [], intl, sourceTypes, applicationTypes, authenticationValues, source, modifiedValues, container\n) => {\n    const hasAvailableApps = applications.length > 0;\n\n    let nextStep = hasAvailableApps ? 'summary' : undefined;\n    let authenticationFields = [];\n    const sourceType = sourceTypes.find(({ id }) => id === source.source_type_id);\n\n    if (!source.imported && hasAvailableApps) {\n        const appendEndpoint = sourceType.schema.endpoint.hidden ? sourceType.schema.endpoint.fields : [];\n        const hasEndpointStep = appendEndpoint.length === 0;\n\n        applicationTypes.forEach(appType => {\n            if (appType.supported_source_types.includes(sourceType.name)) {\n                appType.supported_authentication_types[sourceType.name].forEach((authtype) => {\n                    authenticationFields.push(\n                        generateFirstAuthStep(\n                            sourceType,\n                            appType,\n                            appendEndpoint,\n                            authtype,\n                            intl\n                        )\n                    );\n                });\n            }\n        });\n\n        sourceType.schema.authentication.forEach(auth => {\n            applicationTypes.forEach(appType => {\n                if (appType.supported_source_types.includes(sourceType.name)) {\n                    const appAdditionalSteps = schemaBuilder.getAdditionalSteps(sourceType.name, auth.type, appType.name);\n\n                    if (appAdditionalSteps.length > 0) {\n                        authenticationFields.push(\n                            ...schemaBuilder.createAdditionalSteps(\n                                appAdditionalSteps,\n                                sourceType.name,\n                                auth.type,\n                                hasEndpointStep,\n                                auth.fields,\n                                appType.name,\n                            )\n                        );\n                    }\n                }\n            });\n        });\n\n        if (hasEndpointStep) {\n            authenticationFields.push(schemaBuilder.createEndpointStep(sourceType.schema.endpoint, sourceType.name));\n        }\n\n        nextStep = ({ values: { application } }) => {\n            if (application) {\n                const appType = applicationTypes.find(({ id }) => id === application.application_type_id);\n\n                const hasMultipleAuthTypes = appType?.supported_authentication_types[sourceType.name]?.length > 1;\n\n                if (hasMultipleAuthTypes) {\n                    return `selectAuthType-${application.application_type_id}`;\n                }\n\n                if (\n                    hasAlreadySupportedAuthType(\n                        authenticationValues,\n                        applicationTypes.find(({ id }) => id === application.application_type_id),\n                        sourceType.name\n                    )\n                ) {\n                    return 'selectAuthentication';\n                }\n\n                const authType = appType?.supported_authentication_types[sourceType.name][0];\n\n                return `${sourceType.name}-${application && application.application_type_id}-${authType}`;\n            }\n        };\n    }\n\n    const applicationSelection = hasAvailableApps ? {\n        component: 'card-select',\n        name: 'application.application_type_id',\n        options: applications,\n        label: intl.formatMessage({\n            id: 'sources.chooseAppToAdd',\n            defaultMessage: 'Choose an application to add'\n        }),\n        DefaultIcon: null,\n        isRequired: true,\n        validate: [{\n            type: validatorTypes.REQUIRED\n        }]\n    } : {\n        component: 'description',\n        name: 'description-no-options',\n        validate: [{\n            type: validatorTypes.REQUIRED\n        }],\n        Content: NoAvailableApplicationDescription\n    };\n\n    const selectionSteps = applicationTypes\n    .filter(app => hasMultipleAuthenticationTypes(app, sourceType))\n    .map(app => authenticationSelectionStep(sourceType, app, intl, authenticationValues));\n\n    if (!source.imported && hasAvailableApps) {\n        selectionSteps.push(\n            selectAuthenticationStep({ intl, source, authenticationValues, sourceType, applicationTypes, modifiedValues })\n        );\n    }\n\n    return ({\n        fields: [\n            {\n                component: componentTypes.WIZARD,\n                name: 'wizard',\n                title: intl.formatMessage({\n                    id: 'sources.manageApps',\n                    defaultMessage: 'Manage applications'\n                }),\n                inModal: true,\n                container,\n                showTitles: true,\n                crossroads: ['application.application_type_id', 'selectedAuthentication', 'authtype'],\n                description: intl.formatMessage({\n                    id: 'sources.addAppDescription',\n                    defaultMessage: 'You are managing applications of this source.'\n                }),\n                buttonLabels: {\n                    submit: hasAvailableApps ? intl.formatMessage({\n                        id: 'sources.add',\n                        defaultMessage: 'Add'\n                    }) : intl.formatMessage({\n                        id: 'sources.close',\n                        defaultMessage: 'Close'\n                    }),\n                    cancel: intl.formatMessage({\n                        id: 'sources.cancel',\n                        defaultMessage: 'Cancel'\n                    }),\n                    back: intl.formatMessage({\n                        id: 'sources.back',\n                        defaultMessage: 'Back'\n                    })\n                },\n                fields: [\n                    {\n                        nextStep,\n                        title: intl.formatMessage({\n                            id: 'sources.selectApp',\n                            defaultMessage: 'Select application'\n                        }),\n                        name: 'selectAppStep',\n                        fields: [\n                            {\n                                component: 'description',\n                                name: 'description',\n                                Content: AddApplicationDescription,\n                                container\n                            },\n                            applicationSelection,\n                            {\n                                component: 'description',\n                                name: 'authtypesetter',\n                                Content: AuthTypeCleaner,\n                                hideField: true,\n                                modifiedValues\n                            }\n                        ]\n                    }, {\n                        title: intl.formatMessage({\n                            id: 'sources.reviewDetails',\n                            defaultMessage: 'Review details'\n                        }),\n                        name: 'summary',\n                        fields: [{\n                            component: 'description',\n                            name: 'description-summary',\n                            Content: ApplicationSummary\n                        }, {\n                            component: 'summary',\n                            name: 'summary',\n                            sourceTypes,\n                            applicationTypes\n                        }]\n                    },\n                    ...selectionSteps,\n                    ...authenticationFields\n                ]\n            }\n        ]\n    });\n};\n\nexport default fields;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Wizard } from '@patternfly/react-core/dist/js/components/Wizard/Wizard';\n\nconst WizardBodyAttach = ({ step, goToSources }) => {\n    const intl = useIntl();\n\n    return (\n        <Wizard\n            isOpen={ true }\n            onClose={goToSources}\n            title={intl.formatMessage({\n                id: 'sources.manageApps',\n                defaultMessage: 'Manage applications'\n            })}\n            description={\n                intl.formatMessage({\n                    id: 'sources.addAppDescription',\n                    defaultMessage: 'You are managing applications of this source.'\n                })\n            }\n            steps={ [{\n                name: 'Finish',\n                component: step,\n                isFinishedStep: true\n            }] }\n        />\n    );\n};\n\nWizardBodyAttach.propTypes = {\n    step: PropTypes.node.isRequired,\n    goToSources: PropTypes.func.isRequired\n};\n\nexport default WizardBodyAttach;\n","import isEmpty from 'lodash/isEmpty';\nimport get from 'lodash/get';\n\nconst createProgressTextsApp = (\n    filteredValues, allFormValues, intl\n) => {\n    let progressText = [];\n    let step = 0;\n\n    if (filteredValues.endpoint && !isEmpty(filteredValues.endpoint) && !get(allFormValues, 'endpoint.id', false)) {\n        progressText.push(intl.formatMessage({\n            id: 'sources.authProgressEndpoint',\n            defaultMessage: 'Step { step }: creating endpoint'\n        }, { step: ++step }));\n    }\n\n    progressText.push(intl.formatMessage({\n        id: 'sources.authProgressValues',\n        defaultMessage: 'Step { step }: updating values and creating application'\n    }, { step: ++step }));\n\n    progressText.push(intl.formatMessage({\n        id: 'sources.authConnectingApplication',\n        defaultMessage: 'Step { step }: connecting application and authentication'\n    }, { step: ++step }));\n\n    progressText.push(intl.formatMessage({\n        id: 'sources.authReloadData',\n        defaultMessage: 'Step { step }: reloading data'\n    }, { step: ++step }));\n\n    progressText.push(intl.formatMessage({\n        id: 'sources.authCompleted',\n        defaultMessage: 'Completed'\n    }));\n\n    return progressText;\n};\n\nexport default createProgressTextsApp;\n\n","import { addedDiff, updatedDiff } from 'deep-object-diff';\nimport { patchSource } from '@redhat-cloud-services/frontend-components-sources/cjs/costManagementAuthentication';\nimport { handleError } from '@redhat-cloud-services/frontend-components-sources/cjs/handleError';\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { getSourcesApi, doCreateApplication } from './entities';\nimport { urlOrHost } from './doUpdateSource';\nimport createProgressTextsApp from '../components/AddApplication/steps/createProgressTextsApp';\n\n// modification of https://stackoverflow.com/a/38340374\nexport const removeEmpty = (obj) => {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] && typeof obj[key] === 'object') {\n            if (isEmpty(obj[key])) {\n                delete obj[key];\n            } else {\n                removeEmpty(obj[key]);\n            }\n        } else if (typeof obj[key] === 'undefined') {\n            delete obj[key];\n        }\n    });\n    return obj;\n};\n\nexport const doAttachApp = async (\n    values, formApi, authenticationInitialValues, initialValues, setState = () => {}, intl = () => {}\n) => {\n    const formState = formApi.getState();\n\n    const allFormValues = formState.values;\n\n    const selectedAuthId = allFormValues.authentication ? allFormValues.authentication.id : undefined;\n\n    const authInitialValues = selectedAuthId\n        ? authenticationInitialValues.find(({ id }) => id === selectedAuthId)\n        : undefined;\n\n    const { authentication, ...valuesWithoutAuth } = values;\n\n    const newAddedValues = addedDiff(initialValues, valuesWithoutAuth);\n    const updatedValues = updatedDiff(initialValues, valuesWithoutAuth);\n    const newAddedAuthValues = addedDiff(authInitialValues, authentication);\n    const updatedAuthValues = updatedDiff(authInitialValues, authentication);\n\n    const filteredValues = removeEmpty({\n        ...merge(cloneDeep(newAddedValues), updatedValues),\n        authentication: {\n            ...merge(cloneDeep(newAddedAuthValues), updatedAuthValues)\n        }\n    });\n\n    setState({ type: 'setProgressTexts', progressTexts: createProgressTextsApp(filteredValues, allFormValues, intl) });\n\n    try {\n        if (!allFormValues.source || !allFormValues.source.id) {\n            throw 'Missing source id';\n        }\n\n        const sourceId = allFormValues.source.id;\n        let endpointId = allFormValues.endpoint ? allFormValues.endpoint.id : undefined;\n\n        const promises = [];\n\n        if (filteredValues.source && !isEmpty(filteredValues.source)) {\n            promises.push(getSourcesApi().updateSource(sourceId, filteredValues.source));\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        const hasModifiedEndpoint = filteredValues.endpoint && !isEmpty(filteredValues.endpoint);\n        const hasModifiedUrl = filteredValues.url && !isEmpty(filteredValues.url);\n\n        if (hasModifiedEndpoint || hasModifiedUrl) {\n            const { scheme, host, port, path } = urlOrHost(filteredValues);\n\n            const endPointPort = parseInt(port, 10);\n\n            const endpointData = removeEmpty({\n                ...filteredValues.endpoint,\n                scheme,\n                host,\n                port: isNaN(endPointPort) ? undefined : endPointPort,\n                path\n            });\n\n            if (endpointId) {\n                promises.push(getSourcesApi().updateEndpoint(endpointId, endpointData));\n            } else {\n                promises.push(Promise.resolve(undefined));\n\n                const createEndpointData = {\n                    ...endpointData,\n                    default: true,\n                    source_id: sourceId\n                };\n\n                const endpoint = await getSourcesApi().createEndpoint(createEndpointData);\n                setState({ type: 'increaseProgressStep' });\n                endpointId = endpoint.id;\n            }\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        if (filteredValues.authentication && !isEmpty(filteredValues.authentication)) {\n            if (selectedAuthId) {\n                promises.push(getSourcesApi().updateAuthentication(selectedAuthId, filteredValues.authentication));\n            } else if (endpointId) {\n                const authenticationData = {\n                    ...filteredValues.authentication,\n                    resource_id: endpointId,\n                    resource_type: 'Endpoint'\n                };\n\n                promises.push(getSourcesApi().createAuthentication(authenticationData));\n            }\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        if (filteredValues.application && filteredValues.application.application_type_id) {\n            promises.push(doCreateApplication(sourceId, filteredValues.application.application_type_id));\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        // eslint-disable-next-line no-unused-vars\n        const [_sourceDataOut, _endpointDataOut, authenticationDataOut, applicationDataOut] = await Promise.all(promises);\n        setState({ type: 'increaseProgressStep' });\n\n        const authenticationId = selectedAuthId ? selectedAuthId : authenticationDataOut ? authenticationDataOut.id : undefined;\n\n        const promisesSecondRound = [];\n\n        if (applicationDataOut && applicationDataOut.id && authenticationId) {\n            const authAppData = {\n                application_id: applicationDataOut.id,\n                authentication_id: authenticationId\n            };\n\n            promisesSecondRound.push(getSourcesApi().createAuthApp(authAppData));\n        }\n\n        const isAttachingCostManagement = filteredValues.credentials || filteredValues.billing_source;\n        if (isAttachingCostManagement) {\n            const { credentials, billing_source } = filteredValues;\n            let data = {};\n            data = credentials ? { authentication: { credentials } } : {};\n            data = billing_source ? { ...data, billing_source } : data;\n            promisesSecondRound.push(patchSource({ id: sourceId, ...data }));\n        }\n\n        await Promise.all(promisesSecondRound);\n        setState({ type: 'increaseProgressStep' });\n    } catch (error) {\n        const errorMessage = await handleError(error);\n        throw errorMessage;\n    }\n};\n","export const initialState = {\n    state: 'loading',\n    error: '',\n    values: {},\n    authenticationsValues: [],\n    sourceAppsLength: 0,\n    initialValues: {},\n    progressStep: 0,\n    progressTexts: [],\n    isCancelling: false,\n};\n\nconst reducer = (state, { type, length, authenticationsValues, initialValues, error, values, progressTexts }) => {\n    switch (type) {\n        case 'setSourceAppslength':\n            return {\n                ...state,\n                sourceAppsLength: length\n            };\n        case 'loadAuthentications':\n            return {\n                ...state,\n                authenticationsValues,\n                initialValues,\n                values: {},\n                state: state.state === 'loading' ? 'wizard' : state.state\n            };\n        case 'loadWithoutAuthentications':\n            return {\n                ...state,\n                initialValues,\n                values: {},\n                state: state.state === 'loading' ? 'wizard' : state.state\n            };\n        case 'reset':\n            return {\n                ...state,\n                state: 'wizard'\n            };\n        case 'submit':\n            return {\n                ...state,\n                state: 'submitting',\n                progressStep: 0,\n                progressTexts: ['Preparing']\n            };\n        case 'finish':\n            return {\n                ...state,\n                state: 'finished',\n                progressStep: ++state.progressStep\n            };\n        case 'error':\n            return {\n                ...state,\n                state: 'errored',\n                error,\n                values\n            };\n        case 'setProgressTexts':\n            return {\n                ...state,\n                progressTexts\n            };\n        case 'increaseProgressStep':\n            return {\n                ...state,\n                progressStep: ++state.progressStep\n            };\n        case 'toggleCancelling':\n            return {\n                ...state,\n                isCancelling: !state.isCancelling,\n                ...(values && { values })\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React, { useReducer, useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport filterApps from '@redhat-cloud-services/frontend-components-sources/cjs/filterApps';\nimport CloseModal from '@redhat-cloud-services/frontend-components-sources/cjs/CloseModal';\nimport LoadingStep from '@redhat-cloud-services/frontend-components-sources/cjs/LoadingStep';\nimport ErroredStep from '@redhat-cloud-services/frontend-components-sources/cjs/ErroredStep';\nimport FinishedStep from '@redhat-cloud-services/frontend-components-sources/cjs/FinishedStep';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\n\nimport { loadEntities } from '../../redux/sources/actions';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport createSchema from './AddApplicationSchema';\nimport WizardBody from './WizardBody';\n\nimport { getSourcesApi } from '../../api/entities';\n\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { endpointToUrl } from '../SourcesTable/formatters';\nimport { routes } from '../../Routes';\n\nimport { doAttachApp } from '../../api/doAttachApp';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nimport reducer, { initialState } from './reducer';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\n\nlet selectedApp = undefined; // this has to be not-state value, because it shouldn't re-render the component when changes\nconst saveSelectedApp = ({ values: { application } }) => selectedApp = application;\n\nexport const onSubmit = (values, formApi, authenticationInitialValues, dispatch, setState, initialValues, intl) => {\n    setState({ type: 'submit' });\n\n    return doAttachApp(values, formApi, authenticationInitialValues, initialValues, setState, intl)\n    .then(async () => {\n        checkSourceStatus(initialValues.source.id);\n        await dispatch(loadEntities());\n        selectedApp = undefined;\n        return setState({ type: 'finish' });\n    })\n    .catch(error => setState({\n        type: 'error',\n        error,\n        values\n    }));\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst AddApplication = () => {\n    const intl = useIntl();\n    const history = useHistory();\n\n    const loaded = useIsLoaded();\n\n    const {\n        appTypes,\n        sourceTypesLoaded,\n        appTypesLoaded,\n        sourceTypes,\n    } = useSelector(({ sources }) => sources, shallowEqual);\n\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const [state, setState] = useReducer(reducer, initialState);\n\n    const container = useRef(document.createElement('div'));\n\n    useEffect(() => {\n        selectedApp = undefined;\n    }, []);\n\n    useEffect(() => {\n        if (source) {\n            // When app is only removed, there is no need to reload values\n            const removeAppAction = state.sourceAppsLength >= source.applications.length && state.sourceAppsLength > 0;\n\n            setState({ type: 'setSourceAppslength', length: source.applications.length });\n\n            if (!removeAppAction) {\n                if (source.endpoints && source.endpoints[0]) {\n                    getSourcesApi()\n                    .listEndpointAuthentications(source.endpoints[0].id)\n                    .then(({ data }) => setState({\n                        type: 'loadAuthentications',\n                        authenticationsValues: data,\n                        initialValues: {\n                            source,\n                            endpoint: source.endpoints[0],\n                            url: endpointToUrl(source.endpoints[0]),\n                            application: selectedApp,\n                        },\n                        values: {}\n                    }));\n                } else {\n                    setState({\n                        type: 'loadWithoutAuthentications',\n                        initialValues: { source, application: selectedApp },\n                        values: {}\n                    });\n                }\n            }\n        }\n    }, [source]);\n\n    const goToSources = () => history.push(routes.sources.path);\n\n    if ((!appTypesLoaded || !sourceTypesLoaded || !loaded || state.state === 'loading') && state.state !== 'submitting') {\n        return  (\n            <WizardBody\n                goToSources={goToSources}\n                step={<LoadingStep\n                    customText={intl.formatMessage({\n                        id: 'sources.loading',\n                        defaultMessage: 'Loading, please wait.'\n                    })}\n                    cancelTitle={<FormattedMessage\n                        id=\"sources.cancel\"\n                        defaultMessage=\"Cancel\"\n                    />}\n                />}\n            />\n        );\n    }\n\n    if (state.state === 'submitting') {\n        return  (\n            <WizardBody\n                goToSources={goToSources}\n                step={<LoadingStep\n                    progressStep={state.progressStep}\n                    progressTexts={state.progressTexts}\n                    cancelTitle={<FormattedMessage\n                        id=\"sources.cancel\"\n                        defaultMessage=\"Cancel\"\n                    />}\n                />}\n            />\n        );\n    }\n\n    const onReset = () => setState({ type: 'reset' });\n\n    if (state.state !== 'wizard') {\n        const shownStep = state.state === 'finished' ? (<FinishedStep\n            title={<FormattedMessage\n                id=\"sources.configurationSuccessful\"\n                defaultMessage=\"Configuration successful\"\n            />}\n            onReset={onReset}\n            onClose={goToSources}\n            progressStep={state.progressStep}\n            progressTexts={state.progressTexts}\n            hideSourcesButton={true}\n            secondaryActions={\n                <Button variant=\"link\" onClick={onReset}>\n                    <FormattedMessage\n                        id=\"sources.continueManageApp\"\n                        defaultMessage=\"Continue managing applications\"\n                    />\n                </Button>\n            }\n            returnButtonTitle={\n                <FormattedMessage\n                    id=\"sources.backToSources\"\n                    defaultMessage=\"Back to Sources\"\n                />\n            }\n            successfulMessage={\n                <FormattedMessage\n                    id=\"sources.successAddApp\"\n                    defaultMessage=\"Your application has been successfully added.\"\n                />\n            }\n        />) :\n            (<ErroredStep\n                onRetry={onReset}\n                onClose={goToSources}\n                message={state.error}\n                progressStep={state.progressStep}\n                progressTexts={state.progressTexts}\n                customText={<FormattedMessage\n                    id=\"sources.successAddApp\"\n                    defaultMessage=\"Your application has not been successfully added:\"\n                />}\n                title={<FormattedMessage\n                    id=\"sources.configurationSuccessful\"\n                    defaultMessage=\"Configuration unsuccessful\"\n                />}\n                returnButtonTitle={<FormattedMessage\n                    id=\"sources.backToSources\"\n                    defaultMessage=\"Back to Sources\"\n                />}\n                retryText={<FormattedMessage\n                    id=\"sources.retry\"\n                    defaultMessage=\"Retry\"\n                />}\n            />);\n\n        return (\n            <WizardBody goToSources={goToSources} step={shownStep} />\n        );\n    }\n\n    const appIds = source.applications.filter(({ isDeleting }) => !isDeleting)\n    .reduce((acc, app) => [...acc, app.application_type_id], []);\n\n    const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n    const sourceTypeName = sourceType && sourceType.name;\n    const filteredAppTypes = appTypes.filter((type) =>\n        !appIds.includes(type.id) && type.supported_source_types.includes(sourceTypeName)\n    ).filter(filterApps);\n\n    const availableAppTypes = filteredAppTypes.map((type) => {\n        const hasDeletingApp = source.applications.find(app => app.application_type_id === type.id);\n        const label = `${type.display_name} ${hasDeletingApp ? `(${intl.formatMessage({\n            id: 'sources.currentlyRemoving',\n            defaultMessage: 'Currently removing'\n        })})` : ''}`;\n\n        return ({ value: type.id, label, isDisabled: hasDeletingApp ? true : false });\n    });\n\n    const schema = createSchema(\n        availableAppTypes,\n        intl,\n        sourceTypes,\n        appTypes,\n        state.authenticationsValues,\n        source,\n        state.values,\n        container.current\n    );\n\n    const onSubmitWrapper = (values, formApi) => onSubmit(\n        values,\n        formApi,\n        state.authenticationsValues,\n        dispatch,\n        setState,\n        state.initialValues,\n        intl\n    );\n\n    const hasAvailableApps = filteredAppTypes.length > 0;\n    const onSubmitFinal = hasAvailableApps ? onSubmitWrapper : goToSources;\n\n    const finalValues = merge(cloneDeep(state.initialValues), state.values);\n\n    const onStay = () => {\n        container.current.hidden = false;\n        setState({ type: 'toggleCancelling' });\n    };\n\n    const cancelBeforeExit = (values) => {\n        if (values?.application) {\n            container.current.hidden = true;\n            setState({ type: 'toggleCancelling', values }); }\n        else {\n            goToSources();\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <CloseModal\n                title={\n                    intl.formatMessage({\n                        id: 'sources.manageAppsCloseModalTitle', defaultMessage: 'Exit application adding?'\n                    })\n                }\n                isOpen={state.isCancelling}\n                onStay={onStay}\n                onExit={goToSources}\n            />\n            <SourcesFormRenderer\n                schema={schema}\n                showFormControls={false}\n                onSubmit={onSubmitFinal}\n                onCancel={cancelBeforeExit}\n                initialValues={finalValues}\n                subscription={{ values: true }}\n                debug={saveSelectedApp}\n                clearedValue={null}\n                FormTemplate={FormTemplateWrapper}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default AddApplication;\n"],"sourceRoot":""}