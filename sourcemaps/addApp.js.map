{"version":3,"sources":["webpack:///./src/api/doUpdateSource.js","webpack:///./src/api/patchCmValues.js","webpack:///./src/components/Authentication.js","webpack:///./src/utilities/SourcesFormRenderer.js","webpack:///./src/components/AddApplication/AuthTypeCleaner.js","webpack:///./src/components/AddApplication/removeAppSubmit.js","webpack:///./src/components/AddApplication/RemoveAppModal.js","webpack:///./src/components/ApplicationsList/ApplicationList.js","webpack:///./src/components/AddApplication/AddApplicationDescription.js","webpack:///./src/components/AddApplication/schema/authenticationSelectionStep.js","webpack:///./src/components/AddApplication/schema/generateFirstAuthStep.js","webpack:///./src/components/AddApplication/AuthTypeSetter.js","webpack:///./src/components/AddApplication/schema/selectAuthenticationStep.js","webpack:///./src/components/AddApplication/AddApplicationSchema.js","webpack:///./src/components/AddApplication/WizardBody.js","webpack:///./src/api/doAttachApp.js","webpack:///./src/components/AddApplication/reducer.js","webpack:///./src/components/AddApplication/AddApplication.js"],"names":["urlOrHost","formData","url","scheme","host","port","path","u","URL","protocol","replace","hostname","defaultPort","pathname","error","parseUrl","endpoint","doUpdateSource","source","id","data","promises","push","getSourcesApi","updateSource","endPointPort","parseInt","endpointData","isNaN","undefined","updateEndpoint","endpoints","authentications","Object","keys","forEach","key","idWithoutPrefix","updateAuthentication","billing_source","credentials","cmDataOut","authentication","axiosInstance","patch","COST_MANAGEMENT_API_BASE","Promise","all","Authentication","rest","formOptions","useFormApi","values","getState","name","match","isEditing","isModified","get","useState","edited","setEdited","firstClick","useRef","mounted","useEffect","current","pristine","doNotRequirePassword","validate","filter","type","validatorTypes","REQUIRED","componentProps","resolveProps","validated","autoFocus","FormGroup","helperText","label","onFocus","isRequired","TextInput","aria-label","value","SourcesFormRenderer","props","FormTemplate","componentMapper","mapperExtension","componentTypes","SWITCH","validatorMapper","PATTERN","MIN_LENGTH","AuthTypeCleaner","selectedAppId","initialValue","setInitialValue","batch","change","removeAppSubmit","app","intl","onCancel","dispatch","titleSuccess","formatMessage","defaultMessage","display_name","titleError","removeApplication","RemoveAppModal","container","useIntl","appTypes","useSelector","sources","useSource","useDispatch","hidden","dependentApps","dependent_applications","map","appName","appType","find","sourceAppsNames","includes","x","Modal","className","isOpen","onClose","variant","header","Title","headingLevel","size","actions","Button","onClick","TextContent","Text","component","TextVariants","p","length","apps","propTypes","PropTypes","shape","string","arrayOf","func","instanceOf","Element","ApplicationList","setApplicationToRemove","applications","application_type_id","isDeleting","sort","a","b","localeCompare","GridItem","md","sm","style","marginBottom","ButtonVariant","link","isInline","AddApplicationDescription","removingApp","sourceTypes","sourceType","source_type_id","Fragment","Grid","hasGutter","h4","product_name","authenticationSelectionStep","authenticationValues","title","fields","RADIO","options","supported_authentication_types","schema","authtype","nextStep","application","auth","generateFirstAuthStep","endpointFields","additionalStepName","skipEndpoint","schemaBuilder","customSteps","additionalIncludesStepKeys","stepProps","firstAdditonalStep","additionalFields","AuthTypeSetter","selectedAuthentication","startsWith","innerSetter","object","SelectAuthenticationDescription","applicationTypeName","authenticationTypeName","generateAuthSelectionOptions","applicationTypes","supportedAuthTypeName","supportedAuthType","includeUsername","username","includeAppName","selectAuthenticationStep","Content","hideField","ifAppSupported","supported_source_types","isAppAvailable","supportedAuthTypes","SUB_FORM","condition","and","when","is","appId","NoAvailableApplicationDescription","ApplicationSummary","hasAlreadySupportedAuthType","authValues","sourceTypeName","hasMultipleAuthenticationTypes","hasAvailableApps","authenticationFields","imported","appendEndpoint","hasEndpointStep","appAdditionalSteps","authType","applicationSelection","DefaultIcon","selectionSteps","WIZARD","inModal","showTitles","crossroads","description","buttonLabels","submit","cancel","back","WizardBodyAttach","step","goToSources","Wizard","steps","isFinishedStep","node","removeEmpty","obj","isEmpty","doAttachApp","formApi","authenticationInitialValues","initialValues","formState","allFormValues","selectedAuthId","authInitialValues","valuesWithoutAuth","newAddedValues","addedDiff","updatedValues","updatedDiff","newAddedAuthValues","updatedAuthValues","filteredValues","merge","cloneDeep","sourceId","endpointId","resolve","hasModifiedEndpoint","hasModifiedUrl","createEndpointData","default","source_id","createEndpoint","authenticationData","resource_id","resource_type","createAuthentication","doCreateApplication","authenticationDataOut","applicationDataOut","authenticationId","promisesSecondRound","authAppData","application_id","authentication_id","createAuthApp","patchSource","timeout","timeoutedApps","checkAppAvailability","console","deleteApplication","handleError","initialState","state","authenticationsValues","sourceAppsLength","isCancelling","reducer","selectedApp","saveSelectedApp","onSubmit","setState","then","checkSourceStatus","loadEntities","FormTemplateWrapper","showFormControls","AddApplication","history","useHistory","loaded","useIsLoaded","shallowEqual","sourceTypesLoaded","appTypesLoaded","useReducer","document","createElement","removeAppAction","listEndpointAuthentications","endpointToUrl","routes","WizardBody","customText","cancelTitle","onSubmitWrapper","onReset","shownStep","onRetry","returnButtonTitle","primaryAction","secondaryActions","target","href","rel","availability_status","hideSourcesButton","successfulMessage","message","availability_status_error","Component","to","replaceRouteId","sourcesEdit","appIds","reduce","acc","filteredAppTypes","filterApps","availableAppTypes","hasDeletingApp","isDisabled","createSchema","onSubmitFinal","onStay","onExit","subscription","debug","clearedValue"],"mappings":"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","file":"js/addApp.ad5229f915888200e03f.js","sourcesContent":["import { defaultPort } from '../components/SourcesTable/formatters';\nimport { getSourcesApi } from './entities';\nimport { patchCmValues } from './patchCmValues';\n\nexport const parseUrl = url => {\n    if (url === null) {\n        return {\n            scheme: null,\n            host: null,\n            port: null,\n            path: null\n        };\n    }\n\n    if (!url) {\n        return ({});\n    }\n\n    try {\n        const u = new URL(url);\n        const scheme =  u.protocol.replace(/:$/, '');\n\n        return {\n            scheme,\n            host: u.hostname,\n            port: u.port === '' ? defaultPort(scheme) : u.port,\n            path: u.pathname\n        };\n    } catch (error) {\n        return ({});\n    }\n};\n\nexport const urlOrHost = formData =>\n    formData.url || formData.url === null ? parseUrl(formData.url) : formData.endpoint ? formData.endpoint : formData;\n\nexport const doUpdateSource = (source, formData) => {\n    const promises = [];\n\n    if (formData.source) {\n        promises.push(getSourcesApi().updateSource(source.source.id, formData.source));\n    }\n\n    if (formData.endpoint || formData.url || formData.url === null) {\n        const { scheme, host, port, path } = urlOrHost(formData);\n        const endPointPort = port === null ? null : parseInt(port, 10);\n\n        const endpointData = {\n            scheme,\n            host,\n            path,\n            port: endPointPort === null ? null : isNaN(endPointPort) ? undefined : endPointPort,\n            ...formData.endpoint\n        };\n\n        promises.push(getSourcesApi().updateEndpoint(source.endpoints[0].id, endpointData));\n    }\n\n    if (formData.authentications) {\n        Object.keys(formData.authentications).forEach((key) => {\n            const idWithoutPrefix = key.replace('a', '');\n\n            promises.push(getSourcesApi().updateAuthentication(idWithoutPrefix, formData.authentications[key]));\n        });\n    }\n\n    if (formData.billing_source || formData.credentials) {\n        let cmDataOut = {};\n\n        if (formData.credentials) {\n            cmDataOut = {\n                authentication: {\n                    credentials: formData.credentials\n                }\n            };\n        }\n\n        if (formData.billing_source) {\n            cmDataOut = {\n                ...cmDataOut,\n                billing_source: formData.billing_source\n            };\n        }\n\n        promises.push(patchCmValues(source.source.id, cmDataOut));\n    }\n\n    return Promise.all(promises);\n};\n","import { axiosInstance } from './entities';\nimport { COST_MANAGEMENT_API_BASE } from './constants';\n\nexport const patchCmValues = (id, data) => axiosInstance.patch(`${COST_MANAGEMENT_API_BASE}/sources/${id}/`, data);\n","import React, { useState, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\n\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\n\nimport TextField from '@data-driven-forms/pf4-component-mapper/dist/cjs/text-field';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validated from '@redhat-cloud-services/frontend-components-sources/cjs/validated';\n\nconst Authentication = (rest) => {\n    const formOptions = useFormApi();\n    const values = formOptions.getState().values;\n\n    const [authenticationId] = rest?.name?.match(/\\d+/) || [];\n    const isEditing = authenticationId || values.authentication?.id;\n\n    // If there is any value, the field is modified (password is always empty on start)\n    let isModified = get(values, rest.name);\n\n    const [edited, setEdited] = useState(!isEditing || isModified);\n    const firstClick = useRef(true);\n    const mounted = useRef(false);\n\n    useEffect(() => {\n        if (mounted.current) {\n            // reset on restart\n            if (\n                !firstClick.current && formOptions.getState().pristine\n            ) {\n                setEdited(false);\n                firstClick.current = true;\n            }\n\n            if (edited) {\n                firstClick.current = false;\n            }\n        }\n    });\n\n    useEffect(() => {\n        mounted.current = true;\n    }, []);\n\n    const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n    const componentProps = {\n        ...rest,\n        ...(isEditing ? {\n            validate: doNotRequirePassword,\n            resolveProps: validated,\n        } : {})\n    };\n\n    if (!edited) {\n        return (<FormGroup\n            helperText={componentProps.helperText}\n            label={componentProps.label}\n            onFocus={() => setEdited(true)}\n            isRequired\n        >\n            <TextInput aria-label=\"pre-filled-authentication\" value=\"•••••••••••••\" />\n        </FormGroup>);\n    }\n\n    return (\n        <TextField { ...componentProps } autoFocus={true}/>\n    );\n};\n\nexport default Authentication;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer/dist/cjs/form-renderer';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validatorMapper from '@data-driven-forms/react-form-renderer/dist/cjs/validator-mapper';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/cjs/component-mapper';\n\nimport { mapperExtension } from '@redhat-cloud-services/frontend-components-sources/cjs/sourceFormRenderer';\n\nimport Authentication from '../components/Authentication';\n\nconst SourcesFormRenderer = props => (\n    <FormRenderer\n        FormTemplate={FormTemplate}\n        componentMapper={{\n            ...componentMapper,\n            ...mapperExtension,\n            authentication: Authentication,\n            'switch-field': componentMapper[componentTypes.SWITCH]\n        }}\n        validatorMapper={{\n            'required-validator': validatorMapper[validatorTypes.REQUIRED],\n            'pattern-validator': validatorMapper[validatorTypes.PATTERN],\n            'min-length-validator': validatorMapper[validatorTypes.MIN_LENGTH],\n            'url-validator': validatorMapper[validatorTypes.URL]\n        }}\n        {...props}\n    />\n);\n\nexport default SourcesFormRenderer;\n","import { useState, useEffect } from 'react';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const AuthTypeCleaner = () => {\n    const formOptions = useFormApi();\n\n    const selectedAppId = get(formOptions.getState().values, 'application.application_type_id', '');\n\n    const [initialValue, setInitialValue] = useState(selectedAppId);\n\n    useEffect(() => {\n        if (initialValue !== selectedAppId) {\n            formOptions.batch(() => {\n                formOptions.change('authentication', undefined);\n                formOptions.change('selectedAuthentication', undefined);\n            });\n            setInitialValue(undefined);\n        }\n    }, [selectedAppId]);\n\n    return null;\n};\n","import { removeApplication } from '../../redux/sources/actions';\n\nconst removeAppSubmit = (app, intl, onCancel, dispatch, source) => {\n    const titleSuccess = intl.formatMessage({\n        id: 'sources.removeAppWarning',\n        defaultMessage: `{ name } was removed from this source.`\n    },\n    {\n        name: app.display_name\n    });\n    const titleError = intl.formatMessage({\n        id: 'sources.removeAppError',\n        defaultMessage: `Removing of { name } application from this source was unsuccessful.`\n    }, {\n        name: app.display_name\n    });\n    onCancel && onCancel();\n    return dispatch(removeApplication(app.id, source.id, titleSuccess, titleError));\n};\n\nexport default removeAppSubmit;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { useSource } from '../../hooks/useSource';\n\nimport removeAppSubmit from './removeAppSubmit';\n\nconst RemoveAppModal = ({ app, onCancel, container }) => {\n    const intl = useIntl();\n\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const onSubmit = () => removeAppSubmit(app, intl, onCancel, dispatch, source);\n\n    useEffect(() => {\n        if (container) {\n            container.hidden = true;\n        }\n    }, []);\n\n    const dependentApps = app.dependent_applications.map(appName => {\n        const appType = appTypes.find(({ name }) => name === appName);\n\n        return appType ? app.sourceAppsNames.includes(appType.display_name) ? appType.display_name : undefined : undefined;\n    }).filter(x => x);\n\n    return (\n        <Modal\n            className=\"ins-c-sources__dialog--warning\"\n            isOpen={true}\n            onClose={onCancel}\n            variant=\"small\"\n            aria-label={\n                intl.formatMessage({\n                    id: 'sources.deleteAppTitle',\n                    defaultMessage: 'Remove application?',\n                })\n            }\n            header={\n                <Title headingLevel=\"h1\" size=\"2xl\">\n                    <ExclamationTriangleIcon size=\"sm\" className=\"ins-m-alert ins-c-source__delete-icon pf-u-mr-sm\" />\n                    {intl.formatMessage({\n                        id: 'sources.deleteAppTitle',\n                        defaultMessage: 'Remove application?',\n                    })}\n                </Title>\n            }\n            actions={[\n                <Button\n                    id=\"deleteSubmit\" key=\"submit\" variant=\"danger\" type=\"button\" onClick={ onSubmit }\n                >\n                    { intl.formatMessage({\n                        id: 'sources.remove',\n                        defaultMessage: 'Remove application'\n                    }) }\n                </Button>,\n                <Button id=\"deleteCancel\" key=\"cancel\" variant=\"link\" type=\"button\" onClick={ onCancel }>\n                    { intl.formatMessage({\n                        id: 'sources.cancel',\n                        defaultMessage: 'Cancel'\n                    }) }\n                </Button>\n            ]}\n        >\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    { intl.formatMessage({\n                        id: 'sources.deleteAppWarning',\n                        defaultMessage: 'Are you sure to remove { appName } from this source?'\n                    }, { appName: <b key=\"b\">{app.display_name}</b> }) }\n                </Text>\n                {dependentApps.length > 0 && <Text component={TextVariants.p}>\n                    { intl.formatMessage({\n                        id: 'sources.deleteAppDetails',\n                        defaultMessage: 'This change will affect these applications: { apps }.'\n                    }, { apps: dependentApps }) }\n                </Text>}\n            </TextContent>\n        </Modal>\n    );\n};\n\nRemoveAppModal.propTypes = {\n    app: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        display_name: PropTypes.string.isRequired,\n        dependent_applications: PropTypes.arrayOf(PropTypes.string),\n        sourceAppsNames: PropTypes.arrayOf(PropTypes.string)\n    }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    container: PropTypes.instanceOf(Element)\n};\n\nexport default RemoveAppModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button, ButtonVariant } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\n\nimport { useSource } from '../../hooks/useSource';\n\nconst ApplicationList = ({ setApplicationToRemove }) => {\n    const intl = useIntl();\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const sourceAppsNames = source.applications\n    .map(({ application_type_id }) => {\n        const appType = appTypes.find(({ id }) => id === application_type_id);\n        return appType ? appType.display_name : undefined;\n    });\n\n    return source.applications\n    .filter((app) => !app.isDeleting)\n    .map((app) => {\n        const type = appTypes.find((appType) => appType.id === app.application_type_id);\n\n        if (type) {\n            return {\n                display_name: type.display_name,\n                id: app.id,\n                dependent_applications: type.dependent_applications\n            };\n        }\n    })\n    .sort((a, b) => a.display_name.localeCompare(b.display_name))\n    .map(({ display_name, id, dependent_applications }) => (\n        <TextContent key={id}>\n            <Grid>\n                <GridItem md={4} sm={6}>\n                    <Text component={TextVariants.p} style={{ marginBottom: 0 }}>\n                        { display_name }\n                    </Text>\n                </GridItem>\n                <GridItem md={8} sm={6} className=\"ins-c-sources__remove-app\">\n                    <Button\n                        variant={ButtonVariant.link}\n                        isInline\n                        onClick={() => setApplicationToRemove({ id, display_name, dependent_applications, sourceAppsNames })}\n                    >\n                        { intl.formatMessage({\n                            id: 'sources.remove',\n                            defaultMessage: 'Remove'\n                        }) }\n                    </Button>\n                </GridItem>\n            </Grid>\n        </TextContent>\n    ));\n};\n\nApplicationList.propTypes = {\n    setApplicationToRemove: PropTypes.func.isRequired,\n};\n\nexport default ApplicationList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/index';\n\nimport RemoveAppModal from './RemoveAppModal';\nimport ApplicationList from '../ApplicationsList/ApplicationList';\nimport { useSource } from '../../hooks/useSource';\n\nconst AddApplicationDescription = ({ container }) => {\n    const [removingApp, setApplicationToRemove] = useState({});\n    const intl = useIntl();\n\n    const sourceTypes = useSelector(({ sources }) => sources.sourceTypes);\n    const source = useSource();\n\n    const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n    const apps = source.applications.filter((app) => !app.isDeleting);\n\n    return (\n        <React.Fragment>\n            {removingApp.id && <RemoveAppModal\n                app={removingApp}\n                onCancel={() => {\n                    if (container) {\n                        container.hidden = false;\n                    }\n\n                    return setApplicationToRemove({});\n                }}\n                container={container}\n            />}\n            <TextContent>\n                <Grid hasGutter>\n                    <GridItem md={2}>\n                        <Text component={TextVariants.h4}>\n                            { intl.formatMessage({\n                                id: 'sources.sourceName',\n                                defaultMessage: 'Source name'\n                            }) }\n                        </Text>\n                        <Text component={TextVariants.p} id=\"add-application-desc-name\">\n                            {source.name}\n                        </Text>\n                    </GridItem>\n                    <GridItem md={2}>\n                        <Text component={TextVariants.h4}>\n                            { intl.formatMessage({\n                                id: 'sources.type',\n                                defaultMessage: 'Type'\n                            }) }\n                        </Text>\n                        <Text component={TextVariants.p} id=\"add-application-desc-type\">\n                            { sourceType ? sourceType.product_name : intl.formatMessage({\n                                id: 'sources.typeNotFound',\n                                defaultMessage: 'Type not found'\n                            })}\n                        </Text>\n                    </GridItem>\n                    <GridItem md={8}>\n                        <Text component={TextVariants.h4}>\n                            { intl.formatMessage({\n                                id: 'sources.apps',\n                                defaultMessage: 'Applications'\n                            }) }\n                        </Text>\n                        {apps.length > 0 ? <ApplicationList setApplicationToRemove={setApplicationToRemove}/>\n                            : (\n                                <Text component={TextVariants.p} id=\"add-application-desc-no-app\">\n                                    {intl.formatMessage({\n                                        id: 'sources.noApps',\n                                        defaultMessage: 'No applications'\n                                    })}\n                                </Text>\n                            )\n                        }\n                    </GridItem>\n                </Grid>\n            </TextContent>\n        </React.Fragment>\n    );\n};\n\nAddApplicationDescription.propTypes = {\n    container: PropTypes.instanceOf(Element)\n};\n\nexport default AddApplicationDescription;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nconst authenticationSelectionStep = (sourceType, appType, intl, authenticationValues) => {\n    const nextStep = ({ values: { application, authtype } }) => {\n        if (authtype) {\n            const hasSupportedAuthType = authenticationValues.find((auth) => auth.authtype === authtype);\n\n            if (hasSupportedAuthType) {\n                return 'selectAuthentication';\n            }\n\n            return `${sourceType.name}-${application && application.application_type_id}-${authtype}`;\n        }\n    };\n\n    return ({\n        name: `selectAuthType-${appType.id}`,\n        title: intl.formatMessage({\n            id: 'sources.selectAuthenticationTitle',\n            defaultMessage: 'Select authentication type'\n        }),\n        fields: [{\n            component: componentTypes.RADIO,\n            name: 'authtype',\n            options: appType.supported_authentication_types[sourceType.name].map(type => ({\n                value: type,\n                label: sourceType.schema.authentication.find((authtype) => authtype.type === type)?.name || 'Unknown type'\n            })),\n            isRequired: true,\n            validate: [{ type: validatorTypes.REQUIRED }]\n        }],\n        nextStep\n    });\n};\n\nexport default authenticationSelectionStep;\n","import * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\n\nconst generateFirstAuthStep = (type, appType, endpointFields, authtype, intl) => {\n    const fields = [...endpointFields];\n\n    const auth = type.schema.authentication.find(({ type }) => type === authtype);\n\n    const additionalStepName = `${type.name}-${authtype}-${appType.name}-additional-step`;\n\n    const skipEndpoint = schemaBuilder.shouldSkipEndpoint(type.name, authtype, appType.name);\n    const customSteps = schemaBuilder.hasCustomSteps(type.name, authtype, appType.name);\n\n    let nextStep;\n\n    if (schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).length > 0) {\n        nextStep = additionalStepName;\n    } else if (endpointFields.length === 0 && !skipEndpoint) {\n        nextStep = `${type.name}-endpoint`;\n    } else {\n        nextStep = 'summary';\n    }\n\n    const additionalIncludesStepKeys = schemaBuilder.getAdditionalStepKeys(type.name, authtype, appType.name);\n    const hasCustomStep = schemaBuilder.shouldSkipSelection(type.name, authtype, appType.name);\n\n    let stepProps = {};\n\n    if (hasCustomStep) {\n        const firstAdditonalStep = schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).find(({ name }) => !name);\n        const additionalFields = schemaBuilder.getAdditionalStepFields(auth.fields, additionalStepName);\n\n        if (firstAdditonalStep.nextStep) {\n            nextStep = firstAdditonalStep.nextStep;\n        } else if (endpointFields.length === 0 && !skipEndpoint && !customSteps) {\n            nextStep = `${type.name}-endpoint`;\n        } else {\n            nextStep = 'summary';\n        }\n\n        stepProps = {\n            ...firstAdditonalStep,\n            fields: [\n                ...fields,\n                ...schemaBuilder.injectAuthFieldsInfo(\n                    [...firstAdditonalStep.fields, ...additionalFields],\n                    type.name,\n                    authtype,\n                    appType.name\n                )\n            ]\n        };\n    }\n\n    return ({\n        name: `${type.name}-${appType.id}-${authtype}`,\n        title: intl.formatMessage({\n            id: 'sources.configureCredentials',\n            defaultMessage: 'Configure credentials'\n        }),\n        fields: [\n            ...fields,\n            ...schemaBuilder.getAdditionalAuthFields(type.name, authtype, appType.name),\n            ...schemaBuilder.injectAuthFieldsInfo(\n                schemaBuilder.getNoStepsFields(auth.fields, additionalIncludesStepKeys),\n                type.name,\n                authtype,\n                appType.name\n            )\n        ],\n        nextStep,\n        ...stepProps\n    });\n};\n\nexport default generateFirstAuthStep;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const innerSetter = ({\n    formOptions,\n    authenticationValues,\n    selectedAuthentication\n}) => {\n    if (!selectedAuthentication.startsWith('new-')) {\n        const authentication = authenticationValues.find(({ id }) => id === selectedAuthentication);\n\n        formOptions.change('authentication', authentication);\n    } else {\n        const authtype = selectedAuthentication.replace('new-', '');\n\n        formOptions.change('authentication', { authtype });\n    }\n};\n\nexport const AuthTypeSetter = ({ authenticationValues }) => {\n    const formOptions = useFormApi();\n\n    const selectedAuthentication = formOptions.getState().values.selectedAuthentication;\n\n    const [initialValue, setInitialValue] = useState(selectedAuthentication);\n\n    useEffect(() => {\n        if (initialValue !== selectedAuthentication) {\n            innerSetter({ formOptions, authenticationValues, selectedAuthentication });\n            setInitialValue(undefined);\n        }\n    }, [selectedAuthentication]);\n\n    return null;\n};\n\nAuthTypeSetter.propTypes = {\n    authenticationValues: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { AuthTypeSetter } from '../AuthTypeSetter';\n\nexport const SelectAuthenticationDescription = ({ applicationTypeName, authenticationTypeName }) => {\n    const intl = useIntl();\n\n    return (\n        <TextContent>\n            <Text component={ TextVariants.p }>\n                { intl.formatMessage({\n                    id: 'sources.selectAuthenticationDescription',\n                    // eslint-disable-next-line max-len\n                    defaultMessage: 'Selected application { applicationTypeName } supports { authenticationTypeName } authentication type. You can use already defined authentication values or define new.'\n                }, { applicationTypeName, authenticationTypeName }) }\n            </Text>\n        </TextContent>\n    );};\n\nSelectAuthenticationDescription.propTypes = {\n    applicationTypeName: PropTypes.string,\n    authenticationTypeName: PropTypes.string\n};\n\nexport const generateAuthSelectionOptions = ({\n    source, authenticationValues, applicationTypes, supportedAuthTypeName, supportedAuthType\n}) => authenticationValues.filter(({ authtype }) => authtype === supportedAuthType).map((values) => {\n    const app = source.applications.find(({ authentications }) => authentications.find(({ id }) => id === values.id));\n\n    const appType = app && app.application_type_id ? applicationTypes.find(({ id }) => id === app.application_type_id) : '';\n\n    const includeUsername = values.username ? `-${values.username}` : '';\n    const includeAppName = appType ? `-${appType.display_name}` : `-unused-${values.id}`;\n    const label = `${supportedAuthTypeName}${includeUsername}${includeAppName}`;\n\n    return {\n        label,\n        value: values.id,\n    };\n});\n\nconst selectAuthenticationStep = ({\n    intl, source, authenticationValues, sourceType, applicationTypes\n}) => {\n    const nextStep = ({ values: { application, authtype, authentication } }) => {\n        const app = application ? application : {};\n        const appId = app.application_type_id ? app.application_type_id : '';\n\n        return `${sourceType.name}-${appId}-${authtype || authentication?.authtype}`;\n    };\n\n    const fields = [{\n        component: 'description',\n        name: 'authtypesetter',\n        Content: AuthTypeSetter,\n        authenticationValues,\n        hideField: true,\n    }];\n\n    applicationTypes.forEach((app) => {\n        const ifAppSupported = app.supported_source_types.includes(sourceType.name);\n        const isAppAvailable = !source.applications?.find(({ application_type_id }) => application_type_id === app.id);\n\n        if (ifAppSupported && isAppAvailable) {\n            const supportedAuthTypes = get(app, `supported_authentication_types[${sourceType.name}]`, []);\n\n            supportedAuthTypes.forEach((supportedAuthType) => {\n                const hasAvailableAuthentications = authenticationValues.find(({ authtype }) => authtype === supportedAuthType);\n\n                if (hasAvailableAuthentications) {\n                    const supportedAuthTypeName =\n                get(sourceType, `schema.authentication`, {}).find(({ type }) => type === supportedAuthType).name;\n\n                    fields.push({\n                        component: componentTypes.SUB_FORM,\n                        name: `${app.name}-subform`,\n                        condition: {\n                            and: [{\n                                when: 'application.application_type_id',\n                                is: app.id\n                            },\n                            ...(supportedAuthTypes.length > 1\n                                ? [{\n                                    when: 'authtype',\n                                    is: supportedAuthType\n                                }]\n                                : []\n                            )]\n                        },\n                        fields: [\n                            {\n                                name: `${app.name}-select-authentication-summary`,\n                                component: 'description',\n                                Content: SelectAuthenticationDescription,\n                                applicationTypeName: app.display_name,\n                                authenticationTypeName: supportedAuthTypeName,\n                            },\n                            {\n                                component: componentTypes.RADIO,\n                                name: 'selectedAuthentication',\n                                label: intl.formatMessage({\n                                    id: 'sources.selectAuthenticationTitle',\n                                    defaultMessage: 'Select authentication'\n                                }),\n                                isRequired: true,\n                                validate: [{ type: validatorTypes.REQUIRED }],\n                                options: [\n                                    {\n                                        label: intl.formatMessage({\n                                            id: 'sources.selectAuthenticationradioLabel',\n                                            defaultMessage: 'Define new { supportedAuthTypeName }'\n                                        }, { supportedAuthTypeName }),\n                                        value: `new-${supportedAuthType}`\n                                    },\n                                    ...generateAuthSelectionOptions({\n                                        authenticationValues,\n                                        source,\n                                        applicationTypes,\n                                        supportedAuthTypeName,\n                                        supportedAuthType\n                                    })\n                                ]\n                            },\n                        ]\n                    });\n                }\n            });\n        }\n    });\n\n    return ({\n        name: 'selectAuthentication',\n        title: intl.formatMessage({\n            id: 'sources.selectAuthenticationTitle',\n            defaultMessage: 'Select authentication'\n        }),\n        fields,\n        nextStep\n    });\n};\n\nexport default selectAuthenticationStep;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { useIntl } from 'react-intl';\nimport * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\nimport get from 'lodash/get';\n\nimport { AuthTypeCleaner } from './AuthTypeCleaner';\nimport AddApplicationDescription from './AddApplicationDescription';\nimport authenticationSelectionStep from './schema/authenticationSelectionStep';\nimport generateFirstAuthStep from './schema/generateFirstAuthStep';\nimport selectAuthenticationStep from './schema/selectAuthenticationStep';\n\nexport const NoAvailableApplicationDescription = () => {\n    const intl = useIntl();\n\n    return (<TextContent>\n        <Text component={ TextVariants.p }>\n            { intl.formatMessage({\n                id: 'sources.allApplicationsAssigned',\n                defaultMessage: 'All available applications have already been added to this source or there is no available application for this source.'\n            }) }\n        </Text>\n    </TextContent>)\n    ;};\n\nexport const ApplicationSummary = () => {\n    const intl = useIntl();\n\n    return (<TextContent>\n        <Text component={ TextVariants.p }>\n            { intl.formatMessage({\n                id: 'sources.reviewAddAppSummary',\n                defaultMessage: 'Review the information below and click Add to add the application to your source. Use the Back button to make changes.'\n            }) }\n        </Text>\n    </TextContent>);\n};\n\nexport const hasAlreadySupportedAuthType = (authValues = [], appType, sourceTypeName) => (\n    authValues.find(({ authtype }) => authtype === get(appType, `supported_authentication_types.${sourceTypeName}[0]`))\n);\n\nexport const hasMultipleAuthenticationTypes = (app, sourceType) => (\n    app.supported_source_types.includes(sourceType.name) && app.supported_authentication_types[sourceType.name]?.length > 1\n);\n\nconst fields = (\n    applications = [], intl, sourceTypes, applicationTypes, authenticationValues, source, container\n) => {\n    const hasAvailableApps = applications.length > 0;\n\n    let nextStep = hasAvailableApps ? 'summary' : undefined;\n    let authenticationFields = [];\n    const sourceType = sourceTypes.find(({ id }) => id === source.source_type_id);\n\n    if (!source.imported && hasAvailableApps) {\n        const appendEndpoint = sourceType.schema.endpoint.hidden ? sourceType.schema.endpoint.fields : [];\n        const hasEndpointStep = appendEndpoint.length === 0;\n\n        applicationTypes.forEach(appType => {\n            if (appType.supported_source_types.includes(sourceType.name)) {\n                appType.supported_authentication_types[sourceType.name].forEach((authtype) => {\n                    authenticationFields.push(\n                        generateFirstAuthStep(\n                            sourceType,\n                            appType,\n                            appendEndpoint,\n                            authtype,\n                            intl\n                        )\n                    );\n                });\n            }\n        });\n\n        sourceType.schema.authentication.forEach(auth => {\n            applicationTypes.forEach(appType => {\n                if (appType.supported_source_types.includes(sourceType.name)) {\n                    const appAdditionalSteps = schemaBuilder.getAdditionalSteps(sourceType.name, auth.type, appType.name);\n\n                    if (appAdditionalSteps.length > 0) {\n                        authenticationFields.push(\n                            ...schemaBuilder.createAdditionalSteps(\n                                appAdditionalSteps,\n                                sourceType.name,\n                                auth.type,\n                                hasEndpointStep,\n                                auth.fields,\n                                appType.name,\n                            )\n                        );\n                    }\n                }\n            });\n        });\n\n        if (hasEndpointStep) {\n            authenticationFields.push(schemaBuilder.createEndpointStep(sourceType.schema.endpoint, sourceType.name));\n        }\n\n        nextStep = ({ values: { application } }) => {\n            if (application) {\n                const appType = applicationTypes.find(({ id }) => id === application.application_type_id);\n\n                const hasMultipleAuthTypes = appType?.supported_authentication_types[sourceType.name]?.length > 1;\n\n                if (hasMultipleAuthTypes) {\n                    return `selectAuthType-${application.application_type_id}`;\n                }\n\n                if (\n                    hasAlreadySupportedAuthType(\n                        authenticationValues,\n                        applicationTypes.find(({ id }) => id === application.application_type_id),\n                        sourceType.name\n                    )\n                ) {\n                    return 'selectAuthentication';\n                }\n\n                const authType = appType?.supported_authentication_types[sourceType.name][0];\n\n                return `${sourceType.name}-${application && application.application_type_id}-${authType}`;\n            }\n        };\n    }\n\n    const applicationSelection = hasAvailableApps ? {\n        component: 'card-select',\n        name: 'application.application_type_id',\n        options: applications,\n        label: intl.formatMessage({\n            id: 'sources.chooseAppToAdd',\n            defaultMessage: 'Choose an application to add'\n        }),\n        DefaultIcon: null,\n        isRequired: true,\n        validate: [{\n            type: validatorTypes.REQUIRED\n        }]\n    } : {\n        component: 'description',\n        name: 'description-no-options',\n        validate: [{\n            type: validatorTypes.REQUIRED\n        }],\n        Content: NoAvailableApplicationDescription\n    };\n\n    const selectionSteps = applicationTypes\n    .filter(app => hasMultipleAuthenticationTypes(app, sourceType))\n    .map(app => authenticationSelectionStep(sourceType, app, intl, authenticationValues));\n\n    if (!source.imported && hasAvailableApps) {\n        selectionSteps.push(\n            selectAuthenticationStep({ intl, source, authenticationValues, sourceType, applicationTypes })\n        );\n    }\n\n    return ({\n        fields: [\n            {\n                component: componentTypes.WIZARD,\n                name: 'wizard',\n                title: intl.formatMessage({\n                    id: 'sources.manageApps',\n                    defaultMessage: 'Manage applications'\n                }),\n                inModal: true,\n                container,\n                showTitles: true,\n                crossroads: ['application.application_type_id', 'selectedAuthentication', 'authtype'],\n                description: intl.formatMessage({\n                    id: 'sources.addAppDescription',\n                    defaultMessage: 'You are managing applications of this source.'\n                }),\n                buttonLabels: {\n                    submit: hasAvailableApps ? intl.formatMessage({\n                        id: 'sources.add',\n                        defaultMessage: 'Add'\n                    }) : intl.formatMessage({\n                        id: 'sources.close',\n                        defaultMessage: 'Close'\n                    }),\n                    cancel: intl.formatMessage({\n                        id: 'sources.cancel',\n                        defaultMessage: 'Cancel'\n                    }),\n                    back: intl.formatMessage({\n                        id: 'sources.back',\n                        defaultMessage: 'Back'\n                    })\n                },\n                fields: [\n                    {\n                        nextStep,\n                        title: intl.formatMessage({\n                            id: 'sources.selectApp',\n                            defaultMessage: 'Select application'\n                        }),\n                        name: 'selectAppStep',\n                        fields: [\n                            {\n                                component: 'description',\n                                name: 'description',\n                                Content: AddApplicationDescription,\n                                container\n                            },\n                            applicationSelection,\n                            {\n                                component: 'description',\n                                name: 'authtypesetter',\n                                Content: AuthTypeCleaner,\n                                hideField: true\n                            }\n                        ]\n                    }, {\n                        title: intl.formatMessage({\n                            id: 'sources.reviewDetails',\n                            defaultMessage: 'Review details'\n                        }),\n                        name: 'summary',\n                        fields: [{\n                            component: 'description',\n                            name: 'description-summary',\n                            Content: ApplicationSummary\n                        }, {\n                            component: 'summary',\n                            name: 'summary',\n                            sourceTypes,\n                            applicationTypes\n                        }]\n                    },\n                    ...selectionSteps,\n                    ...authenticationFields\n                ]\n            }\n        ]\n    });\n};\n\nexport default fields;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Wizard } from '@patternfly/react-core/dist/js/components/Wizard/Wizard';\n\nconst WizardBodyAttach = ({ step, goToSources }) => {\n    const intl = useIntl();\n\n    return (\n        <Wizard\n            isOpen={ true }\n            onClose={goToSources}\n            title={intl.formatMessage({\n                id: 'sources.manageApps',\n                defaultMessage: 'Manage applications'\n            })}\n            description={\n                intl.formatMessage({\n                    id: 'sources.addAppDescription',\n                    defaultMessage: 'You are managing applications of this source.'\n                })\n            }\n            steps={ [{\n                name: 'Finish',\n                component: step,\n                isFinishedStep: true\n            }] }\n        />\n    );\n};\n\nWizardBodyAttach.propTypes = {\n    step: PropTypes.node.isRequired,\n    goToSources: PropTypes.func.isRequired\n};\n\nexport default WizardBodyAttach;\n","import { addedDiff, updatedDiff } from 'deep-object-diff';\nimport { patchSource } from '@redhat-cloud-services/frontend-components-sources/cjs/costManagementAuthentication';\nimport { handleError } from '@redhat-cloud-services/frontend-components-sources/cjs/handleError';\nimport { checkAppAvailability } from '@redhat-cloud-services/frontend-components-sources/cjs/getApplicationStatus';\nimport { timeoutedApps } from '@redhat-cloud-services/frontend-components-sources/cjs/constants';\n\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { getSourcesApi, doCreateApplication } from './entities';\nimport { urlOrHost } from './doUpdateSource';\n\n// modification of https://stackoverflow.com/a/38340374\nexport const removeEmpty = (obj) => {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] && typeof obj[key] === 'object') {\n            if (isEmpty(obj[key])) {\n                delete obj[key];\n            } else {\n                removeEmpty(obj[key]);\n            }\n        } else if (typeof obj[key] === 'undefined') {\n            delete obj[key];\n        }\n    });\n    return obj;\n};\n\nexport const doAttachApp = async (\n    values, formApi, authenticationInitialValues, initialValues, appTypes = []\n) => {\n    let appId;\n\n    const formState = formApi.getState();\n\n    const allFormValues = formState.values;\n\n    const selectedAuthId = allFormValues.authentication ? allFormValues.authentication.id : undefined;\n\n    const authInitialValues = selectedAuthId\n        ? authenticationInitialValues.find(({ id }) => id === selectedAuthId)\n        : undefined;\n\n    const { authentication, ...valuesWithoutAuth } = values;\n\n    const newAddedValues = addedDiff(initialValues, valuesWithoutAuth);\n    const updatedValues = updatedDiff(initialValues, valuesWithoutAuth);\n    const newAddedAuthValues = addedDiff(authInitialValues, authentication);\n    const updatedAuthValues = updatedDiff(authInitialValues, authentication);\n\n    const filteredValues = removeEmpty({\n        ...merge(cloneDeep(newAddedValues), updatedValues),\n        authentication: {\n            ...merge(cloneDeep(newAddedAuthValues), updatedAuthValues)\n        }\n    });\n\n    try {\n        if (!allFormValues.source || !allFormValues.source.id) {\n            throw 'Missing source id';\n        }\n\n        const sourceId = allFormValues.source.id;\n        let endpointId = allFormValues.endpoint ? allFormValues.endpoint.id : undefined;\n\n        const promises = [];\n\n        if (filteredValues.source && !isEmpty(filteredValues.source)) {\n            promises.push(getSourcesApi().updateSource(sourceId, filteredValues.source));\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        const hasModifiedEndpoint = filteredValues.endpoint && !isEmpty(filteredValues.endpoint);\n        const hasModifiedUrl = filteredValues.url && !isEmpty(filteredValues.url);\n\n        if (hasModifiedEndpoint || hasModifiedUrl) {\n            const { scheme, host, port, path } = urlOrHost(filteredValues);\n\n            const endPointPort = parseInt(port, 10);\n\n            const endpointData = removeEmpty({\n                ...filteredValues.endpoint,\n                scheme,\n                host,\n                port: isNaN(endPointPort) ? undefined : endPointPort,\n                path\n            });\n\n            if (endpointId) {\n                promises.push(getSourcesApi().updateEndpoint(endpointId, endpointData));\n            } else {\n                promises.push(Promise.resolve(undefined));\n\n                const createEndpointData = {\n                    ...endpointData,\n                    default: true,\n                    source_id: sourceId\n                };\n\n                const endpoint = await getSourcesApi().createEndpoint(createEndpointData);\n                endpointId = endpoint.id;\n            }\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        if (filteredValues.authentication && !isEmpty(filteredValues.authentication)) {\n            if (selectedAuthId) {\n                promises.push(getSourcesApi().updateAuthentication(selectedAuthId, filteredValues.authentication));\n            } else if (endpointId) {\n                const authenticationData = {\n                    ...filteredValues.authentication,\n                    resource_id: endpointId,\n                    resource_type: 'Endpoint'\n                };\n\n                promises.push(getSourcesApi().createAuthentication(authenticationData));\n            }\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        if (filteredValues.application && filteredValues.application.application_type_id) {\n            promises.push(doCreateApplication(sourceId, filteredValues.application.application_type_id));\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        // eslint-disable-next-line no-unused-vars\n        const [_sourceDataOut, _endpointDataOut, authenticationDataOut, applicationDataOut] = await Promise.all(promises);\n\n        appId = applicationDataOut?.id;\n\n        const authenticationId = selectedAuthId ? selectedAuthId : authenticationDataOut ? authenticationDataOut.id : undefined;\n\n        const promisesSecondRound = [];\n\n        if (applicationDataOut && applicationDataOut.id && authenticationId) {\n            const authAppData = {\n                application_id: applicationDataOut.id,\n                authentication_id: authenticationId\n            };\n\n            promisesSecondRound.push(getSourcesApi().createAuthApp(authAppData));\n        }\n\n        const isAttachingCostManagement = filteredValues.credentials || filteredValues.billing_source;\n        if (isAttachingCostManagement) {\n            const { credentials, billing_source } = filteredValues;\n            let data = {};\n            data = credentials ? { authentication: { credentials } } : {};\n            data = billing_source ? { ...data, billing_source } : data;\n            promisesSecondRound.push(patchSource({ id: sourceId, ...data }));\n        }\n\n        await Promise.all(promisesSecondRound);\n\n        if (applicationDataOut) {\n            const timeout = timeoutedApps(appTypes).includes(applicationDataOut.application_type_id) ? 10000 : 0;\n            return await checkAppAvailability(applicationDataOut.id, timeout);\n        }\n\n        return {};\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n        if (appId) {\n            await getSourcesApi().deleteApplication(appId);\n        }\n\n        const errorMessage = await handleError(error);\n        throw errorMessage;\n    }\n};\n","export const initialState = {\n    state: 'loading',\n    error: '',\n    values: {},\n    authenticationsValues: [],\n    sourceAppsLength: 0,\n    initialValues: {},\n    isCancelling: false,\n};\n\nconst reducer = (state, { type, length, authenticationsValues, initialValues, error, values, data, formApi }) => {\n    switch (type) {\n        case 'setSourceAppslength':\n            return {\n                ...state,\n                sourceAppsLength: length\n            };\n        case 'loadAuthentications':\n            return {\n                ...state,\n                authenticationsValues,\n                initialValues,\n                values: {},\n                state: state.state === 'loading' ? 'wizard' : state.state\n            };\n        case 'loadWithoutAuthentications':\n            return {\n                ...state,\n                initialValues,\n                values: {},\n                state: state.state === 'loading' ? 'wizard' : state.state\n            };\n        case 'reset':\n            return {\n                ...state,\n                state: 'wizard'\n            };\n        case 'submit':\n            return {\n                ...state,\n                values,\n                formApi,\n                state: 'submitting',\n            };\n        case 'finish':\n            return {\n                ...state,\n                state: 'finished',\n                data\n            };\n        case 'error':\n            return {\n                ...state,\n                state: 'errored',\n                error,\n            };\n        case 'toggleCancelling':\n            return {\n                ...state,\n                isCancelling: !state.isCancelling,\n                ...(values && { values })\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React, { useReducer, useEffect, useRef } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport filterApps from '@redhat-cloud-services/frontend-components-sources/cjs/filterApps';\nimport CloseModal from '@redhat-cloud-services/frontend-components-sources/cjs/CloseModal';\nimport LoadingStep from '@redhat-cloud-services/frontend-components-sources/cjs/LoadingStep';\nimport ErroredStep from '@redhat-cloud-services/frontend-components-sources/cjs/ErroredStep';\nimport FinishedStep from '@redhat-cloud-services/frontend-components-sources/cjs/FinishedStep';\nimport TimeoutStep from '@redhat-cloud-services/frontend-components-sources/cjs/TimeoutStep';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\n\nimport { loadEntities } from '../../redux/sources/actions';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport createSchema from './AddApplicationSchema';\nimport WizardBody from './WizardBody';\n\nimport { getSourcesApi } from '../../api/entities';\n\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { endpointToUrl } from '../SourcesTable/formatters';\nimport { routes, replaceRouteId } from '../../Routes';\n\nimport { doAttachApp } from '../../api/doAttachApp';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nimport reducer, { initialState } from './reducer';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text';\n\nimport removeAppSubmit from './removeAppSubmit';\n\nlet selectedApp = undefined; // this has to be not-state value, because it shouldn't re-render the component when changes\nconst saveSelectedApp = ({ values: { application } }) => selectedApp = application;\n\nexport const onSubmit = (values, formApi, authenticationInitialValues, dispatch, setState, initialValues, appTypes) => {\n    setState({ type: 'submit', values, formApi });\n\n    return doAttachApp(values, formApi, authenticationInitialValues, initialValues, appTypes)\n    .then(async (data) => {\n        checkSourceStatus(initialValues.source.id);\n        await dispatch(loadEntities());\n        selectedApp = undefined;\n        return setState({ type: 'finish', data });\n    })\n    .catch(error => setState({\n        type: 'error',\n        error,\n    }));\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst AddApplication = () => {\n    const intl = useIntl();\n    const history = useHistory();\n\n    const loaded = useIsLoaded();\n\n    const {\n        appTypes,\n        sourceTypesLoaded,\n        appTypesLoaded,\n        sourceTypes,\n    } = useSelector(({ sources }) => sources, shallowEqual);\n\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const [state, setState] = useReducer(reducer, initialState);\n\n    const container = useRef(document.createElement('div'));\n\n    const removeApp = () => {\n        setState({ type: 'reset' });\n\n        return removeAppSubmit(\n            { id: state.data?.id, display_name: appTypes.find(({ id }) => id === state.data?.application_type_id)?.display_name },\n            intl,\n            undefined,\n            dispatch,\n            source\n        );\n    };\n\n    useEffect(() => {\n        selectedApp = undefined;\n    }, []);\n\n    useEffect(() => {\n        if (source) {\n            // When app is only removed, there is no need to reload values\n            const removeAppAction = state.sourceAppsLength >= source.applications.length && state.sourceAppsLength > 0;\n\n            setState({ type: 'setSourceAppslength', length: source.applications.length });\n\n            if (!removeAppAction) {\n                if (source.endpoints && source.endpoints[0]) {\n                    getSourcesApi()\n                    .listEndpointAuthentications(source.endpoints[0].id)\n                    .then(({ data }) => setState({\n                        type: 'loadAuthentications',\n                        authenticationsValues: data,\n                        initialValues: {\n                            source,\n                            endpoint: source.endpoints[0],\n                            url: endpointToUrl(source.endpoints[0]),\n                            application: selectedApp,\n                        },\n                        values: {}\n                    }));\n                } else {\n                    setState({\n                        type: 'loadWithoutAuthentications',\n                        initialValues: { source, application: selectedApp },\n                        values: {}\n                    });\n                }\n            }\n        }\n    }, [source]);\n\n    const goToSources = () => history.push(routes.sources.path);\n\n    if ((!appTypesLoaded || !sourceTypesLoaded || !loaded || state.state === 'loading') && state.state !== 'submitting') {\n        return  (\n            <WizardBody\n                goToSources={goToSources}\n                step={<LoadingStep\n                    customText={intl.formatMessage({\n                        id: 'sources.loading',\n                        defaultMessage: 'Loading, please wait.'\n                    })}\n                    cancelTitle={intl.formatMessage({\n                        id: 'sources.close',\n                        defaultMessage: 'Close'\n                    })}\n                    onClose={goToSources}\n                />}\n            />\n        );\n    }\n\n    const onSubmitWrapper = (values, formApi) => onSubmit(\n        values,\n        formApi,\n        state.authenticationsValues,\n        dispatch,\n        setState,\n        state.initialValues,\n        appTypes\n    );\n\n    if (state.state === 'submitting') {\n        return  (\n            <WizardBody\n                goToSources={goToSources}\n                step={<LoadingStep\n                    cancelTitle={intl.formatMessage({\n                        id: 'sources.close',\n                        defaultMessage: 'Close'\n                    })}\n                    onClose={goToSources}\n                    customText={intl.formatMessage({\n                        id: 'wizard.loadingText defaultMessage=Validating source credentials',\n                        defaultMessage: 'Validating source credentials'\n                    })}\n                />}\n            />\n        );\n    }\n\n    const onReset = () => setState({ type: 'reset' });\n\n    if (state.state !== 'wizard') {\n        let shownStep;\n\n        if (state.state !== 'finished') {\n            shownStep = (<ErroredStep\n                onRetry={onReset}\n                onClose={goToSources}\n                returnButtonTitle={intl.formatMessage({\n                    id: 'sources.retry',\n                    defaultMessage: 'Retry'\n                })}\n                primaryAction={() => onSubmitWrapper(state.values, state.formApi)}\n                secondaryActions={\n                    <Text\n                        component='a'\n                        target=\"_blank\"\n                        href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {intl.formatMessage({ id: 'wizard.openTicket', defaultMessage: 'Open a support case' })}\n                    </Text>\n                }\n            />);\n        } else {\n            switch (state.data.availability_status) {\n                case 'available':\n                    shownStep = (<FinishedStep\n                        title={intl.formatMessage({\n                            id: 'sources.configurationSuccessful',\n                            defaultMessage: 'Configuration successful'\n                        })}\n                        hideSourcesButton={true}\n                        onReset={onReset}\n                        onClose={goToSources}\n                        secondaryActions={\n                            <Button variant=\"link\" onClick={onReset}>\n                                { intl.formatMessage({\n                                    id: 'sources.continueManageApp',\n                                    defaultMessage: 'Continue managing applications'\n                                }) }\n                            </Button>\n                        }\n                        returnButtonTitle={\n                            intl.formatMessage({\n                                id: 'sources.backToSources',\n                                defaultMessage: 'Back to Sources'\n                            })\n                        }\n                        successfulMessage={\n                            intl.formatMessage({\n                                id: 'sources.successAddApp',\n                                defaultMessage: 'Your application was successfully added.'\n                            })\n                        }\n                    />);\n                    break;\n                case 'unavailable':\n                    shownStep = (<ErroredStep\n                        onRetry={onReset}\n                        onClose={goToSources}\n                        message={\n                            state.data.availability_status_error\n                            || intl.formatMessage({ id: 'wizard.unknownError', defaultMessage: 'Unknown error' })\n                        }\n                        title={intl.formatMessage({\n                            id: 'sources.configurationSuccessful',\n                            defaultMessage: 'Configuration unsuccessful'\n                        })}\n                        secondaryActions={<Button variant=\"link\" onClick={ removeApp }>\n                            {intl.formatMessage({ id: 'wizard.removeApp', defaultMessage: 'Remove application' })}\n                        </Button>}\n                        Component={() => (\n                            <Link to={replaceRouteId(routes.sourcesEdit.path, source.id)}>\n                                <Button variant='primary' className=\"pf-u-mt-xl\">\n                                    { intl.formatMessage({ id: 'wizard.editSource', defaultMessage: 'Edit source' })}\n                                </Button>\n                            </Link>\n                        )}\n                    />);\n                    break;\n                default:\n                    shownStep = (<TimeoutStep\n                        returnButtonTitle={\n                            intl.formatMessage({\n                                id: 'sources.backToSources',\n                                defaultMessage: 'Back to Sources'\n                            })\n                        }\n                        onClose={ goToSources }\n                        secondaryActions={<Button variant=\"link\" onClick={onReset}>\n                            { intl.formatMessage({\n                                id: 'sources.continueManageApp',\n                                defaultMessage: 'Continue managing applications'\n                            }) }\n                        </Button>}\n                    />);\n            }\n        }\n\n        return (\n            <WizardBody goToSources={goToSources} step={shownStep} />\n        );\n    }\n\n    const appIds = source.applications.filter(({ isDeleting }) => !isDeleting)\n    .reduce((acc, app) => [...acc, app.application_type_id], []);\n\n    const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n    const sourceTypeName = sourceType && sourceType.name;\n    const filteredAppTypes = appTypes.filter((type) =>\n        !appIds.includes(type.id) && type.supported_source_types.includes(sourceTypeName)\n    ).filter(filterApps);\n\n    const availableAppTypes = filteredAppTypes.map((type) => {\n        const hasDeletingApp = source.applications.find(app => app.application_type_id === type.id);\n        const label = `${type.display_name} ${hasDeletingApp ? `(${intl.formatMessage({\n            id: 'sources.currentlyRemoving',\n            defaultMessage: 'Currently removing'\n        })})` : ''}`;\n\n        return ({ value: type.id, label, isDisabled: hasDeletingApp ? true : false });\n    });\n\n    const schema = createSchema(\n        availableAppTypes,\n        intl,\n        sourceTypes,\n        appTypes,\n        state.authenticationsValues,\n        source,\n        container.current\n    );\n\n    const hasAvailableApps = filteredAppTypes.length > 0;\n    const onSubmitFinal = hasAvailableApps ? onSubmitWrapper : goToSources;\n\n    const onStay = () => {\n        container.current.hidden = false;\n        setState({ type: 'toggleCancelling' });\n    };\n\n    const cancelBeforeExit = (values) => {\n        if (values?.application) {\n            container.current.hidden = true;\n            setState({ type: 'toggleCancelling', values }); }\n        else {\n            goToSources();\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <CloseModal\n                title={\n                    intl.formatMessage({\n                        id: 'sources.manageAppsCloseModalTitle', defaultMessage: 'Exit application adding?'\n                    })\n                }\n                isOpen={state.isCancelling}\n                onStay={onStay}\n                onExit={goToSources}\n            />\n            <SourcesFormRenderer\n                schema={schema}\n                showFormControls={false}\n                onSubmit={onSubmitFinal}\n                onCancel={cancelBeforeExit}\n                initialValues={state.initialValues}\n                subscription={{ values: true }}\n                debug={saveSelectedApp}\n                clearedValue={null}\n                FormTemplate={FormTemplateWrapper}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default AddApplication;\n"],"sourceRoot":""}