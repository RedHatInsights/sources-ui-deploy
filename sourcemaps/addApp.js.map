{"version":3,"sources":["webpack:///./src/components/EditField/EditField.js","webpack:///./src/utilities/SourcesFormRenderer.js","webpack:///./src/components/ApplicationsList/ApplicationList.js","webpack:///./src/components/AddApplication/RemoveAppModal.js","webpack:///./src/components/AddApplication/AddApplicationDescription.js","webpack:///./src/components/AddApplication/AuthTypeSetter.js","webpack:///./src/components/AddApplication/AuthTypeCleaner.js","webpack:///./src/components/AddApplication/AddApplicationSchema.js","webpack:///./src/components/steps/LoadingStep.js","webpack:///./src/components/steps/ErroredStep.js","webpack:///./src/components/AddApplication/steps/ErroredStep.js","webpack:///./src/components/steps/FinishedStep.js","webpack:///./src/components/AddApplication/steps/FinishedStep.js","webpack:///./src/components/AddApplication/WizardBody.js","webpack:///./src/api/doAttachApp.js","webpack:///./src/components/AddApplication/AddApplication.js","webpack:///./src/components/AddApplication/onCancel.js"],"names":["EDIT_FIELD_NAME","EditField","isRequired","label","helperText","hideLabel","meta","input","type","setEdit","error","showError","touched","value","emptyText","name","includes","fieldId","isValid","helperTextInvalid","onClick","undefined","tabIndex","onKeyPress","e","charCode","preventDefault","className","propTypes","PropTypes","node","bool","string","object","FieldProvider","oneOfType","func","shape","any","EditFieldProvider","rest","props","SourcesFormRenderer","layoutMapper","formFieldsMapper","mapperExtension","ApplicationList","setApplicationToRemove","breakpoints","namePrefix","appTypes","useSelector","sources","source","useSource","sourceAppsNames","applications","map","application_type_id","appType","find","id","display_name","filter","app","isDeleting","dependent_applications","sort","a","b","localeCompare","key","md","component","TextVariants","p","style","marginBottom","remove","variant","ButtonVariant","link","isInline","defaultMessage","number","defaultProps","RemoveAppModal","onCancel","intl","useIntl","dispatch","useDispatch","dependentApps","appName","x","title","isOpen","isSmall","onClose","isFooterLeftAligned","actions","titleSuccess","formatMessage","titleError","removeApplication","gutter","size","isFilled","values","length","apps","arrayOf","AddApplicationDescription","useState","removingApp","sourceTypes","sourceType","source_type_id","Fragment","TextContent","Grid","Text","h4","product_name","AuthTypeSetter","formOptions","authenticationValues","modifiedValues","selectedAuthentication","getState","initialValue","setInitialValue","useEffect","authentication","newAuthenticationValues","merge","cloneDeep","change","innerSetter","AuthTypeCleaner","selectedAppId","get","batch","NoAvailableApplicationDescription","ApplicationSummary","SelectAuthenticationDescription","applicationTypeName","authenticationTypeName","hasAlreadySupportedAuthType","authValues","sourceTypeName","authtype","generateAuthSelectionOptions","applicationTypes","supportedAuthTypeName","supportedAuthType","authentications","includeUsername","username","includeAppName","selectAuthenticationStep","fields","Content","hideField","forEach","push","componentTypes","SUB_FORM","condition","when","is","RADIO","validate","validatorTypes","REQUIRED","options","stepKey","nextStep","application","appId","hasAvailableApps","authenticationFields","imported","appendEndpoint","schema","endpoint","hidden","hasEndpointStep","supported_source_types","schemaBuilder","createSpecificAuthTypeSelection","auth","appAdditionalSteps","getAdditionalSteps","createAdditionalSteps","createEndpointStep","applicationSelection","DefaultIcon","selectionSteps","WIZARD","inModal","predictSteps","showTitles","crossroads","description","buttonLabels","submit","cancel","back","LoadingStep","customText","Bullseye","EmptyState","EmptyStateVariant","full","Spinner","EmptyStateBody","EmptyStateSecondaryActions","Button","ErroredStep","onRetry","message","EmptyStateIcon","icon","TimesCircleIcon","color","Title","headingLevel","ErroredStepAttach","setState","goToSources","h6","state","FinishedStep","successfulMessage","secondaryActions","CheckCircleIcon","FinishedStepAttach","WizardBodyAttach","step","Wizard","steps","isFinishedStep","removeEmpty","obj","Object","keys","isEmpty","doAttachApp","formApi","authenticationInitialValues","initialValues","formState","allFormValues","selectedAuthId","authInitialValues","valuesWithoutAuth","newAddedValues","addedDiff","updatedValues","updatedDiff","newAddedAuthValues","updatedAuthValues","filteredValues","sourceId","endpointId","promises","getSourcesApi","updateSource","Promise","resolve","hasModifiedEndpoint","hasModifiedUrl","url","urlOrHost","scheme","host","port","path","endPointPort","parseInt","endpointData","isNaN","updateEndpoint","createEndpointData","default","source_id","createEndpoint","updateAuthentication","authenticationData","resource_id","resource_type","createAuthentication","doCreateApplication","all","authenticationDataOut","applicationDataOut","authenticationId","promisesSecondRound","authAppData","application_id","authentication_id","createAuthApp","credentials","billing_source","data","patchSource","handleError","selectedApp","saveSelectedApp","onSubmit","then","checkSourceStatus","loadEntities","initialState","authenticationsValues","sourceAppsLength","reducer","payload","AddApplication","history","useHistory","loaded","useIsLoaded","shallowEqual","sourceTypesLoaded","appTypesLoaded","undoValues","useReducer","removeAppAction","endpoints","listEndpointAuthentications","endpointToUrl","routes","WizardBody","shownStep","appIds","reduce","acc","filteredAppTypes","filterApps","availableAppTypes","hasDeletingApp","isDisabled","usersModifiedValues","createSchema","onSubmitFinal","finalValues","showFormControls","messageId","Date","now","addMessage","undo","UndoButtonAdd","replaceRouteId","sourceManageApps","clearAddSource","onCancelAddApplication","subscription","onStateUpdate","clearedValue"],"mappings":"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","file":"js/addApp.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport PencilAltIcon from '@patternfly/react-icons/dist/js/icons/pencil-alt-icon';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\n\nexport const EDIT_FIELD_NAME = 'edit-field';\n\nconst EditField = ({ isRequired, label, helperText, hideLabel, meta, input, type, setEdit }) => {\n    const { error, touched } = meta;\n    const showError = touched && error;\n\n    let value = input.value;\n\n    if (typeof value === 'boolean') {\n        value = value ? 'True' : 'False';\n    }\n\n    const isPassword = type === 'password' || input.name.includes('password');\n    const emptyText = isPassword ? 'Click to edit' : 'Click to add';\n\n    return (\n        <FormGroup\n            isRequired={ isRequired }\n            label={ !hideLabel && label }\n            fieldId={ input.name }\n            isValid={ !showError }\n            helperText={ helperText }\n            helperTextInvalid={ error }\n            onClick={setEdit ? () => setEdit(input.name) : undefined}\n            tabIndex={0}\n            onKeyPress={(e) => {\n                if (e.charCode === 32 && setEdit) {\n                    e.preventDefault();\n                    setEdit(input.name);\n                }\n            }}\n        >\n            <div className={`pf-c-form__horizontal-group ins-c-sources__edit-field-group ${setEdit ? 'clickable' : ''}`}>\n                <TextContent className={`ins-c-sources__edit-field-group-text-content ${setEdit ? 'clickable' : ''}`}>\n                    <span className=\"ins-c-sources__edit-field-value pf-u-mr-sm\">\n                        {value ? value : setEdit ? emptyText : ''}\n                    </span>\n                    {setEdit && <PencilAltIcon />}\n                </TextContent>\n            </div>\n        </FormGroup>\n    );\n};\n\nEditField.propTypes = {\n    label: PropTypes.node,\n    isRequired: PropTypes.bool,\n    helperText: PropTypes.string,\n    meta: PropTypes.object.isRequired,\n    FieldProvider: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    input: PropTypes.shape({\n        value: PropTypes.any,\n        name: PropTypes.string.isRequired\n    }).isRequired,\n    hideLabel: PropTypes.bool,\n    setEdit: PropTypes.func,\n    type: PropTypes.string\n};\n\nconst EditFieldProvider = ({ FieldProvider, ...rest }) =>\n    (\n        <FieldProvider { ...rest }>\n            { (props) =>  <EditField  { ...props }/> }\n        </FieldProvider>\n    );\n\nEditFieldProvider.propTypes = {\n    FieldProvider: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired\n};\n\nexport default EditFieldProvider;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer';\nimport { layoutMapper, formFieldsMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { mapperExtension } from '@redhat-cloud-services/frontend-components-sources';\n\nimport EditField from '../components/EditField/EditField';\n\nconst SourcesFormRenderer = props => (\n    <FormRenderer\n        layoutMapper={layoutMapper}\n        formFieldsMapper={{\n            ...formFieldsMapper,\n            ...mapperExtension,\n            'edit-field': EditField\n        }}\n        {...props}\n    />\n);\n\nexport default SourcesFormRenderer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button, ButtonVariant } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\n\nimport { useSource } from '../../hooks/useSource';\n\nconst ApplicationList = ({ setApplicationToRemove, breakpoints, namePrefix }) => {\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const sourceAppsNames = source.applications\n    .map(({ application_type_id }) => {\n        const appType = appTypes.find(({ id }) => id === application_type_id);\n        return appType ? appType.display_name : undefined;\n    });\n\n    return source.applications\n    .filter((app) => !app.isDeleting)\n    .map((app) => {\n        const type = appTypes.find((appType) => appType.id === app.application_type_id);\n\n        if (type) {\n            return {\n                display_name: type.display_name,\n                id: app.id,\n                dependent_applications: type.dependent_applications\n            };\n        }\n    })\n    .sort((a, b) => a.display_name.localeCompare(b.display_name))\n    .map(({ display_name, id, dependent_applications }) => (\n        <TextContent key={id}>\n            <Grid>\n                <GridItem md={breakpoints.display_name || 4}>\n                    <Text component={TextVariants.p} style={{ marginBottom: 0 }}>\n                        { namePrefix }{ display_name }\n                    </Text>\n                </GridItem>\n                <GridItem md={breakpoints.remove || 8} className=\"ins-c-sources__remove-app\">\n                    <Button\n                        variant={ButtonVariant.link}\n                        isInline\n                        onClick={() => setApplicationToRemove({ id, display_name, dependent_applications, sourceAppsNames })}\n                    >\n                        <FormattedMessage\n                            id=\"sources.remove\"\n                            defaultMessage=\"Remove\"\n                        />\n                    </Button>\n                </GridItem>\n            </Grid>\n        </TextContent>\n    ));\n};\n\nApplicationList.propTypes = {\n    setApplicationToRemove: PropTypes.func.isRequired,\n    breakpoints: PropTypes.shape({\n        display_name: PropTypes.number,\n        remove: PropTypes.number\n    }),\n    namePrefix: PropTypes.node\n};\n\nApplicationList.defaultProps = {\n    breakpoints: {}\n};\n\nexport default ApplicationList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useIntl, FormattedMessage } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Split } from '@patternfly/react-core/dist/js/layouts/Split/Split';\nimport { SplitItem } from '@patternfly/react-core/dist/js/layouts/Split/SplitItem';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack/Stack';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { removeApplication } from '../../redux/sources/actions';\nimport { useSource } from '../../hooks/useSource';\n\nconst RemoveAppModal = ({ app, onCancel }) => {\n    const intl = useIntl();\n\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const dependentApps = app.dependent_applications.map(appName => {\n        const appType = appTypes.find(({ name }) => name === appName);\n\n        return appType ? app.sourceAppsNames.includes(appType.display_name) ? appType.display_name : undefined : undefined;\n    }).filter(x => x);\n\n    const onSubmit = () => {\n        const titleSuccess = intl.formatMessage({\n            id: 'sources.removeAppWarning',\n            defaultMessage: `{ name } was removed from this source.`\n        },\n        {\n            name: app.display_name\n        });\n        const titleError = intl.formatMessage({\n            id: 'sources.removeAppError',\n            defaultMessage: `Removing of { name } application from this source was unsuccessful.`\n        }, {\n            name: app.display_name\n        });\n        onCancel();\n        return dispatch(removeApplication(app.id, source.id, titleSuccess, titleError));\n    };\n\n    return (\n        <Modal\n            className=\"ins-c-sources__dialog--warning\"\n            title={`Remove ${app.display_name} application`}\n            isOpen={true}\n            isSmall\n            onClose={onCancel}\n            isFooterLeftAligned\n            actions={[\n                <Button\n                    id=\"deleteSubmit\" key=\"submit\" variant=\"danger\" type=\"button\" onClick={ onSubmit }\n                >\n                    <FormattedMessage\n                        id=\"sources.remove\"\n                        defaultMessage=\"Remove\"\n                    />\n                </Button>,\n                <Button id=\"deleteCancel\" key=\"cancel\" variant=\"link\" type=\"button\" onClick={ onCancel }>\n                    <FormattedMessage\n                        id=\"sources.cancel\"\n                        defaultMessage=\"Cancel\"\n                    />\n                </Button>\n            ]}\n        >\n            <Split gutter=\"md\">\n                <SplitItem><ExclamationTriangleIcon size=\"xl\" className=\"ins-m-alert ins-c-source__delete-icon\" /></SplitItem>\n                <SplitItem isFilled>\n                    <Stack gutter=\"md\">\n                        <TextContent>\n                            <Text component={TextVariants.p}>\n                                <FormattedMessage\n                                    id=\"sources.deleteAppWarning\"\n                                    defaultMessage={`Are you sure to remove { appName } from this source?`}\n                                    values={{\n                                        appName: app.display_name\n                                    }}\n                                />\n                            </Text>\n                            {dependentApps.length > 0 && <Text component={TextVariants.p}>\n                                <FormattedMessage\n                                    id=\"sources.deleteAppDetails\"\n                                    defaultMessage={`This change will affect these applications: { apps }.`}\n                                    values={{\n                                        apps: dependentApps\n                                    }}\n                                />\n                            </Text>}\n                        </TextContent>\n                    </Stack>\n                </SplitItem>\n            </Split>\n        </Modal>\n    );\n};\n\nRemoveAppModal.propTypes = {\n    app: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        display_name: PropTypes.string.isRequired,\n        dependent_applications: PropTypes.arrayOf(PropTypes.string),\n        sourceAppsNames: PropTypes.arrayOf(PropTypes.string)\n    }).isRequired,\n    onCancel: PropTypes.func.isRequired\n};\n\nexport default RemoveAppModal;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/index';\n\nimport RemoveAppModal from './RemoveAppModal';\nimport ApplicationList from '../ApplicationsList/ApplicationList';\nimport { useSource } from '../../hooks/useSource';\n\nconst AddApplicationDescription = () => {\n    const [removingApp, setApplicationToRemove] = useState({});\n\n    const sourceTypes = useSelector(({ sources }) => sources.sourceTypes);\n    const source = useSource();\n\n    const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n    const apps = source.applications.filter((app) => !app.isDeleting);\n\n    return (\n        <React.Fragment>\n            {removingApp.id && <RemoveAppModal\n                app={removingApp}\n                onCancel={() => setApplicationToRemove({})}\n            />}\n            <TextContent>\n                <Grid gutter=\"md\">\n                    <GridItem md={2}>\n                        <Text component={TextVariants.h4}>\n                            <FormattedMessage\n                                id=\"sources.sourceName\"\n                                defaultMessage=\"Source name\"\n                            />\n                        </Text>\n                    </GridItem>\n                    <GridItem md={2}>\n                        <Text component={TextVariants.h4}>\n                            <FormattedMessage\n                                id=\"sources.type\"\n                                defaultMessage=\"Type\"\n                            />\n                        </Text>\n                    </GridItem>\n                    <GridItem md={8}>\n                        <Text component={TextVariants.h4}>\n                            <FormattedMessage\n                                id=\"sources.apps\"\n                                defaultMessage=\"Applications\"\n                            />\n                        </Text>\n                    </GridItem>\n                    <GridItem md={2}>\n                        <Text component={TextVariants.p}>\n                            {source.name}\n                        </Text>\n                    </GridItem>\n                    <GridItem md={2}>\n                        <Text component={TextVariants.p}>\n                            { sourceType ? sourceType.product_name : <FormattedMessage\n                                id=\"sources.typeNotFound\"\n                                defaultMessage=\"Type not found\"\n                            />}\n                        </Text>\n                    </GridItem>\n                    <GridItem md={8}>\n                        {apps.length > 0 ? <ApplicationList setApplicationToRemove={setApplicationToRemove}/> : <FormattedMessage\n                            id=\"sources.noApps\"\n                            defaultMessage=\"No applications\"\n                        />}\n                    </GridItem>\n                </Grid>\n            </TextContent>\n        </React.Fragment>\n    );\n};\n\nexport default AddApplicationDescription;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\n\nexport const innerSetter = ({\n    formOptions,\n    modifiedValues,\n    authenticationValues,\n    selectedAuthentication\n}) => {\n    if (selectedAuthentication !== 'new') {\n        const authentication = authenticationValues.find(({ id }) => id === selectedAuthentication);\n\n        if (modifiedValues && modifiedValues.authentication) {\n            const newAuthenticationValues = merge(cloneDeep(authentication), modifiedValues.authentication);\n            formOptions.change('authentication', newAuthenticationValues);\n        } else {\n            formOptions.change('authentication', authentication);\n        }\n    } else {\n        if (modifiedValues && modifiedValues.authentication) {\n            formOptions.change('authentication', modifiedValues.authentication);\n        } else {\n            formOptions.change('authentication', undefined);\n        }\n    }\n};\n\nexport const AuthTypeSetter = ({ formOptions, authenticationValues, modifiedValues }) => {\n    const selectedAuthentication = formOptions.getState().values.selectedAuthentication;\n\n    const [initialValue, setInitialValue] = useState(selectedAuthentication);\n\n    useEffect(() => {\n        if (initialValue !== selectedAuthentication) {\n            innerSetter({ formOptions, authenticationValues, modifiedValues, selectedAuthentication });\n            setInitialValue(undefined);\n        }\n    }, [selectedAuthentication]);\n\n    return null;\n};\n\nAuthTypeSetter.propTypes = {\n    formOptions: PropTypes.shape({\n        getState: PropTypes.func.isRequired,\n        change: PropTypes.func.isRequired\n    }).isRequired,\n    authenticationValues: PropTypes.arrayOf(PropTypes.object),\n    modifiedValues: PropTypes.object\n};\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nexport const AuthTypeCleaner = ({ formOptions, modifiedValues }) => {\n    const selectedAppId = get(formOptions.getState().values, 'application.application_type_id', '');\n\n    const [initialValue, setInitialValue] = useState(selectedAppId);\n\n    useEffect(() => {\n        if (initialValue !== selectedAppId) {\n            const values = modifiedValues && modifiedValues.authentication ? modifiedValues.authentication : undefined;\n            formOptions.batch(() => {\n                formOptions.change('authentication', values);\n                formOptions.change('selectedAuthentication', undefined);\n            });\n            setInitialValue(undefined);\n        }\n    }, [selectedAppId]);\n\n    return null;\n};\n\nAuthTypeCleaner.propTypes = {\n    formOptions: PropTypes.shape({\n        getState: PropTypes.func.isRequired,\n        change: PropTypes.func.isRequired\n    }).isRequired,\n    modifiedValues: PropTypes.object\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { componentTypes, validatorTypes } from '@data-driven-forms/react-form-renderer';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { FormattedMessage } from 'react-intl';\nimport { schemaBuilder } from '@redhat-cloud-services/frontend-components-sources';\nimport get from 'lodash/get';\n\nimport AddApplicationDescription from './AddApplicationDescription';\nimport { AuthTypeSetter } from './AuthTypeSetter';\nimport { AuthTypeCleaner } from './AuthTypeCleaner';\n\nexport const NoAvailableApplicationDescription = () => (<TextContent>\n    <Text component={ TextVariants.p }>\n        <FormattedMessage\n            id=\"sources.allApplicationsAssigned\"\n            defaultMessage=\"All available applications have already been added to this source\n        or there is no available application for this source type.\"\n        />\n    </Text>\n</TextContent>);\n\nexport const ApplicationSummary = () => (<TextContent>\n    <Text component={ TextVariants.p }>\n        <FormattedMessage\n            id=\"sources.reviewAddAppSummary\"\n            defaultMessage=\"Review the information below and click Add to add the application to your source.\n            Use the Back button to make changes.\"\n        />\n    </Text>\n</TextContent>);\n\nexport const SelectAuthenticationDescription = ({ applicationTypeName, authenticationTypeName }) => (\n    <TextContent>\n        <Text component={ TextVariants.p }>\n            <FormattedMessage\n                id=\"sources.selectAuthenticationDescription\"\n                defaultMessage=\"Selected application { applicationTypeName } supports { authenticationTypeName } authentication\n                type. You can use already defined authentication values or define new.\"\n                values={{ applicationTypeName, authenticationTypeName }}\n            />\n        </Text>\n    </TextContent>\n);\n\nSelectAuthenticationDescription.propTypes = {\n    applicationTypeName: PropTypes.string,\n    authenticationTypeName: PropTypes.string\n};\n\nexport const hasAlreadySupportedAuthType = (authValues = [], appType, sourceTypeName) =>\n    authValues.find(({ authtype }) => authtype === get(appType, `supported_authentication_types.${sourceTypeName}[0]`));\n\nconst generateAuthSelectionOptions = ({\n    source, authenticationValues, applicationTypes, supportedAuthTypeName, supportedAuthType\n}) => authenticationValues.filter(({ authtype }) => authtype === supportedAuthType).map((values) => {\n    const app = source.applications.find(({ authentications }) => authentications.find(({ id }) => id === values.id));\n\n    const appType = app && app.application_type_id ? applicationTypes.find(({ id }) => id === app.application_type_id) : '';\n\n    const includeUsername = values.username ? `-${values.username}` : '';\n    const includeAppName = appType ? `-${appType.display_name}` : `-unused-${values.id}`;\n    const label = `${supportedAuthTypeName}${includeUsername}${includeAppName}`;\n\n    return {\n        label,\n        value: values.id,\n    };\n});\n\nexport const selectAuthenticationStep = ({\n    intl, source, authenticationValues, sourceType, applicationTypes, modifiedValues\n}) => {\n    const nextStep = ({ values: { application } }) => {\n        const app = application ? application : {};\n        const appId = app.application_type_id ? app.application_type_id : '';\n\n        return `${sourceType.name}-${appId}`;\n    };\n\n    const fields = [{\n        component: 'description',\n        name: 'authtypesetter',\n        Content: AuthTypeSetter,\n        authenticationValues,\n        hideField: true,\n        modifiedValues\n    }];\n\n    applicationTypes.forEach((app) => {\n        const supportedAuthType = get(app, `supported_authentication_types[${sourceType.name}][0]`, '');\n\n        if (supportedAuthType && hasAlreadySupportedAuthType(authenticationValues, app, sourceType.name)) {\n            const supportedAuthTypeName =\n                get(sourceType, `schema.authentication`, {}).find(({ type }) => type === supportedAuthType).name;\n\n            fields.push({\n                component: componentTypes.SUB_FORM,\n                name: `${app.name}-subform`,\n                condition: {\n                    when: 'application.application_type_id',\n                    is: app.id\n                },\n                fields: [\n                    {\n                        name: `${app.name}-select-authentication-summary`,\n                        component: 'description',\n                        Content: SelectAuthenticationDescription,\n                        applicationTypeName: app.display_name,\n                        authenticationTypeName: supportedAuthTypeName,\n                    },\n                    {\n                        component: componentTypes.RADIO,\n                        name: 'selectedAuthentication',\n                        label: intl.formatMessage({\n                            id: 'sources.selectAuthenticationTitle',\n                            defaultMessage: 'Select authentication'\n                        }),\n                        isRequired: true,\n                        validate: [{ type: validatorTypes.REQUIRED }],\n                        options: [\n                            {\n                                label: intl.formatMessage({\n                                    id: 'sources.selectAuthenticationradioLabel',\n                                    defaultMessage: 'Define new { supportedAuthTypeName }'\n                                }, { supportedAuthTypeName }),\n                                value: 'new'\n                            },\n                            ...generateAuthSelectionOptions(\n                                { authenticationValues, source, applicationTypes, supportedAuthTypeName, supportedAuthType }\n                            )\n                        ]\n                    },\n                ]\n            });\n        }\n    });\n\n    return ({\n        stepKey: 'selectAuthentication',\n        name: 'selectAuthentication',\n        title: intl.formatMessage({\n            id: 'sources.selectAuthenticationTitle',\n            defaultMessage: 'Select authentication'\n        }),\n        fields,\n        nextStep\n    });\n};\n\nconst fields = (applications = [], intl, sourceTypes, applicationTypes, authenticationValues, source, modifiedValues) => {\n    const hasAvailableApps = applications.length > 0;\n\n    let nextStep = hasAvailableApps ? 'summary' : undefined;\n    let authenticationFields = [];\n    const sourceType = sourceTypes.find(({ id }) => id === source.source_type_id);\n\n    if (!source.imported && hasAvailableApps) {\n        const appendEndpoint = sourceType.schema.endpoint.hidden ? sourceType.schema.endpoint.fields : [];\n        const hasEndpointStep = appendEndpoint.length === 0;\n\n        applicationTypes.forEach(appType => {\n            if (appType.supported_source_types.includes(sourceType.name)) {\n                authenticationFields.push(\n                    schemaBuilder.createSpecificAuthTypeSelection(\n                        sourceType,\n                        appType,\n                        appendEndpoint,\n                        false,\n                    )\n                );\n            }\n        });\n\n        sourceType.schema.authentication.forEach(auth => {\n            applicationTypes.forEach(appType => {\n                if (appType.supported_source_types.includes(sourceType.name)) {\n                    const appAdditionalSteps = schemaBuilder.getAdditionalSteps(sourceType.name, auth.type, appType.name);\n\n                    if (appAdditionalSteps.length > 0) {\n                        authenticationFields.push(\n                            ...schemaBuilder.createAdditionalSteps(\n                                appAdditionalSteps,\n                                sourceType.name,\n                                auth.type,\n                                hasEndpointStep,\n                                auth.fields,\n                                appType.name,\n                            )\n                        );\n                    }\n                }\n            });\n        });\n\n        if (hasEndpointStep) {\n            authenticationFields.push(schemaBuilder.createEndpointStep(sourceType.schema.endpoint, sourceType.name));\n        }\n\n        nextStep = ({ values: { application } }) => {\n            if (application) {\n                if (\n                    hasAlreadySupportedAuthType(\n                        authenticationValues,\n                        applicationTypes.find(({ id }) => id === application.application_type_id),\n                        sourceType.name\n                    )\n                ) {\n                    return 'selectAuthentication';\n                }\n\n                return `${sourceType.name}-${application && application.application_type_id}`;\n            }\n        };\n    }\n\n    const applicationSelection = hasAvailableApps ? {\n        component: 'card-select',\n        name: 'application.application_type_id',\n        options: applications,\n        label: intl.formatMessage({\n            id: 'sources.chooseAppToAdd',\n            defaultMessage: 'Choose an application to add'\n        }),\n        DefaultIcon: null,\n        isRequired: true,\n        validate: [{\n            type: validatorTypes.REQUIRED\n        }]\n    } : {\n        component: 'description',\n        name: 'description-no-options',\n        validate: [{\n            type: validatorTypes.REQUIRED\n        }],\n        Content: NoAvailableApplicationDescription\n    };\n\n    const selectionSteps = [];\n\n    if (!source.imported && hasAvailableApps) {\n        selectionSteps.push(\n            selectAuthenticationStep({ intl, source, authenticationValues, sourceType, applicationTypes, modifiedValues })\n        );\n    }\n\n    return ({\n        fields: [\n            {\n                component: componentTypes.WIZARD,\n                name: 'wizard',\n                title: intl.formatMessage({\n                    id: 'sources.manageApps',\n                    defaultMessage: 'Manage applications'\n                }),\n                inModal: true,\n                predictSteps: true,\n                showTitles: true,\n                crossroads: ['application.application_type_id', 'selectedAuthentication'],\n                description: intl.formatMessage({\n                    id: 'sources.addAppDescription',\n                    defaultMessage: 'You are managing applications of this source.'\n                }),\n                buttonLabels: {\n                    submit: hasAvailableApps ? intl.formatMessage({\n                        id: 'sources.add',\n                        defaultMessage: 'Add'\n                    }) : intl.formatMessage({\n                        id: 'sources.close',\n                        defaultMessage: 'Close'\n                    }),\n                    cancel: intl.formatMessage({\n                        id: 'sources.cancel',\n                        defaultMessage: 'Cancel'\n                    }),\n                    back: intl.formatMessage({\n                        id: 'sources.back',\n                        defaultMessage: 'Back'\n                    })\n                },\n                fields: [\n                    {\n                        nextStep,\n                        title: intl.formatMessage({\n                            id: 'sources.selectApp',\n                            defaultMessage: 'Select application'\n                        }),\n                        stepKey: 1,\n                        name: 'selectAppStep',\n                        fields: [\n                            {\n                                component: 'description',\n                                name: 'description',\n                                Content: AddApplicationDescription\n                            },\n                            applicationSelection,\n                            {\n                                component: 'description',\n                                name: 'authtypesetter',\n                                Content: AuthTypeCleaner,\n                                hideField: true,\n                                modifiedValues\n                            }\n                        ]\n                    }, {\n                        title: intl.formatMessage({\n                            id: 'sources.review',\n                            defaultMessage: 'Review'\n                        }),\n                        stepKey: 'summary',\n                        name: 'summary',\n                        fields: [{\n                            component: 'description',\n                            name: 'description-summary',\n                            Content: ApplicationSummary\n                        }, {\n                            component: 'summary',\n                            name: 'summary',\n                            sourceTypes,\n                            applicationTypes\n                        }]\n                    },\n                    ...selectionSteps,\n                    ...authenticationFields\n                ]\n            }\n        ]\n    });\n};\n\nexport default fields;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { EmptyStateSecondaryActions } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateSecondaryActions';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\n\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\nimport { FormattedMessage } from 'react-intl';\n\nconst LoadingStep = ({ onClose, customText }) => (\n    <Bullseye>\n        <EmptyState variant={ EmptyStateVariant.full }>\n            <Spinner />\n            <EmptyStateBody>\n                { customText }\n            </EmptyStateBody>\n            { onClose &&\n        <EmptyStateSecondaryActions>\n            <Button variant=\"link\" onClick={ onClose }>\n                <FormattedMessage\n                    id=\"sources.cancel\"\n                    defaultMessage=\"Cancel\"\n                />\n            </Button>\n        </EmptyStateSecondaryActions> }\n        </EmptyState>\n    </Bullseye>\n);\n\nLoadingStep.propTypes = {\n    onClose: PropTypes.func,\n    customText: PropTypes.node\n};\n\nLoadingStep.defaultProps = {\n    customText: <FormattedMessage\n        id=\"sources.loading\"\n        defaultMessage=\"Loading, please wait.\"\n    />\n};\n\nexport default LoadingStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { EmptyStateSecondaryActions } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateSecondaryActions';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport { FormattedMessage } from 'react-intl';\n\nconst ErroredStep = ({ onClose, onRetry, message, title }) => (\n    <Bullseye>\n        <EmptyState variant={ EmptyStateVariant.full }>\n            <EmptyStateIcon icon={ TimesCircleIcon } color=\"var(--pf-global--danger-color--100)\" />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                { title }\n            </Title>\n            <EmptyStateBody>\n                { message }\n            </EmptyStateBody>\n            <Button variant=\"primary\" onClick={ onClose }>\n                <FormattedMessage\n                    id=\"sources.backToSources\"\n                    defaultMessage=\"Back to Sources\"\n                />\n            </Button>\n            { onRetry && <EmptyStateSecondaryActions>\n                <Button variant=\"link\" onClick={ onRetry }>\n                    <FormattedMessage\n                        id=\"sources.retry\"\n                        defaultMessage=\"Retry\"\n                    />\n                </Button>\n            </EmptyStateSecondaryActions>}\n        </EmptyState>\n    </Bullseye>\n);\n\nErroredStep.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    message: PropTypes.node.isRequired,\n    title: PropTypes.node.isRequired,\n    onRetry: PropTypes.func\n};\n\nexport default ErroredStep;\n","import React from 'react';\nimport { FormattedMessage  } from 'react-intl';\nimport { PropTypes } from 'prop-types';\n\nimport ErroredStep from '../../steps/ErroredStep';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nconst ErroredStepAttach = ({ setState, goToSources, error }) => (<ErroredStep\n    onClose={goToSources}\n    message={\n        <React.Fragment>\n            <FormattedMessage\n                id=\"sources.successAddApp\"\n                defaultMessage=\"Your application has not been successfully added:\"\n            />\n            <br />\n            <TextContent>\n                <Text component={TextVariants.h6}>{ error }</Text>\n            </TextContent>\n        </React.Fragment>\n    }\n    title={<FormattedMessage\n        id=\"sources.configurationSuccessful\"\n        defaultMessage=\"Configuration unsuccessful\"\n    />}\n    onRetry={() => setState({ state: 'wizard' })}\n/>);\n\nErroredStepAttach.propTypes = {\n    setState: PropTypes.func.isRequired,\n    goToSources: PropTypes.func.isRequired,\n    error: PropTypes.string.isRequired\n};\n\nexport default ErroredStepAttach;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { EmptyStateSecondaryActions } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateSecondaryActions';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport { FormattedMessage } from 'react-intl';\n\nconst FinishedStep = ({ onClose, title, successfulMessage, secondaryActions }) => (\n    <Bullseye>\n        <EmptyState variant={ EmptyStateVariant.full }>\n            <EmptyStateIcon icon={ CheckCircleIcon } color=\"var(--pf-global--success-color--100)\" />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                { title }\n            </Title>\n            <EmptyStateBody>\n                { successfulMessage }\n            </EmptyStateBody>\n            <Button variant=\"primary\" onClick={ onClose }>\n                <FormattedMessage\n                    id=\"sources.backToSources\"\n                    defaultMessage=\"Back to Sources\"\n                />\n            </Button>\n            {  secondaryActions && <EmptyStateSecondaryActions>\n                { secondaryActions }\n            </EmptyStateSecondaryActions> }\n        </EmptyState>\n    </Bullseye>\n);\n\nFinishedStep.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    successfulMessage: PropTypes.node.isRequired,\n    title: PropTypes.node.isRequired,\n    secondaryActions: PropTypes.node\n};\n\nexport default FinishedStep;\n","import React from 'react';\nimport { FormattedMessage  } from 'react-intl';\nimport { PropTypes } from 'prop-types';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\n\nimport FinishedStep from '../../steps/FinishedStep';\n\nconst FinishedStepAttach = ({ setState, goToSources }) => (\n    <FinishedStep\n        onClose={goToSources}\n        successfulMessage={<FormattedMessage\n            id=\"sources.successAddApp\"\n            defaultMessage=\"Your application has been successfully added.\"\n        />}\n        title={<FormattedMessage\n            id=\"sources.configurationSuccessful\"\n            defaultMessage=\"Configuration successful\"\n        />}\n        secondaryActions={\n            <Button variant=\"link\" onClick={() => setState({ state: 'wizard' })}>\n                <FormattedMessage\n                    id=\"sources.continueManageApp\"\n                    defaultMessage=\"Continue managing applications\"\n                />\n            </Button>\n        }\n    />\n);\n\nFinishedStepAttach.propTypes = {\n    setState: PropTypes.func.isRequired,\n    goToSources: PropTypes.func.isRequired\n};\n\nexport default FinishedStepAttach;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Wizard } from '@patternfly/react-core/dist/js/components/Wizard/Wizard';\n\nconst WizardBodyAttach = ({ step, goToSources }) => {\n    const intl = useIntl();\n\n    return (\n        <Wizard\n            isOpen={ true }\n            onClose={goToSources}\n            title={intl.formatMessage({\n                id: 'sources.manageApps',\n                defaultMessage: 'Manage applications'\n            })}\n            description={\n                intl.formatMessage({\n                    id: 'sources.addAppDescription',\n                    defaultMessage: 'You are managing applications of this source.'\n                })\n            }\n            steps={ [{\n                name: 'Finish',\n                component: step,\n                isFinishedStep: true\n            }] }\n        />\n    );\n};\n\nWizardBodyAttach.propTypes = {\n    step: PropTypes.node.isRequired,\n    goToSources: PropTypes.func.isRequired\n};\n\nexport default WizardBodyAttach;\n","import { addedDiff, updatedDiff } from 'deep-object-diff';\nimport { patchSource, handleError } from '@redhat-cloud-services/frontend-components-sources';\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { getSourcesApi, doCreateApplication } from './entities';\nimport { urlOrHost } from './doUpdateSource';\n\n// modification of https://stackoverflow.com/a/38340374\nexport const removeEmpty = (obj) => {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] && typeof obj[key] === 'object') {\n            if (isEmpty(obj[key])) {\n                delete obj[key];\n            } else {\n                removeEmpty(obj[key]);\n            }\n        } else if (typeof obj[key] === 'undefined') {\n            delete obj[key];\n        }\n    });\n    return obj;\n};\n\nexport const doAttachApp = async (values, formApi, authenticationInitialValues, initialValues) => {\n    const formState = formApi.getState();\n\n    const allFormValues = formState.values;\n\n    const selectedAuthId = allFormValues.authentication ? allFormValues.authentication.id : undefined;\n\n    const authInitialValues = selectedAuthId\n        ? authenticationInitialValues.find(({ id }) => id === selectedAuthId)\n        : undefined;\n\n    const { authentication, ...valuesWithoutAuth } = values;\n\n    const newAddedValues = addedDiff(initialValues, valuesWithoutAuth);\n    const updatedValues = updatedDiff(initialValues, valuesWithoutAuth);\n    const newAddedAuthValues = addedDiff(authInitialValues, authentication);\n    const updatedAuthValues = updatedDiff(authInitialValues, authentication);\n\n    const filteredValues = removeEmpty({\n        ...merge(cloneDeep(newAddedValues), updatedValues),\n        authentication: {\n            ...merge(cloneDeep(newAddedAuthValues), updatedAuthValues)\n        }\n    });\n\n    try {\n        if (!allFormValues.source || !allFormValues.source.id) {\n            throw 'Missing source id';\n        }\n\n        const sourceId = allFormValues.source.id;\n        let endpointId = allFormValues.endpoint ? allFormValues.endpoint.id : undefined;\n\n        const promises = [];\n\n        if (filteredValues.source && !isEmpty(filteredValues.source)) {\n            promises.push(getSourcesApi().updateSource(sourceId, filteredValues.source));\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        const hasModifiedEndpoint = filteredValues.endpoint && !isEmpty(filteredValues.endpoint);\n        const hasModifiedUrl = filteredValues.url && !isEmpty(filteredValues.url);\n\n        if (hasModifiedEndpoint || hasModifiedUrl) {\n            const { scheme, host, port, path } = urlOrHost(filteredValues);\n\n            const endPointPort = parseInt(port, 10);\n\n            const endpointData = removeEmpty({\n                ...filteredValues.endpoint,\n                scheme,\n                host,\n                port: isNaN(endPointPort) ? undefined : endPointPort,\n                path\n            });\n\n            if (endpointId) {\n                promises.push(getSourcesApi().updateEndpoint(endpointId, endpointData));\n            } else {\n                promises.push(Promise.resolve(undefined));\n\n                const createEndpointData = {\n                    ...endpointData,\n                    default: true,\n                    source_id: sourceId\n                };\n\n                const endpoint = await getSourcesApi().createEndpoint(createEndpointData);\n                endpointId = endpoint.id;\n            }\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        if (filteredValues.authentication && !isEmpty(filteredValues.authentication)) {\n            if (selectedAuthId) {\n                promises.push(getSourcesApi().updateAuthentication(selectedAuthId, filteredValues.authentication));\n            } else if (endpointId) {\n                const authenticationData = {\n                    ...filteredValues.authentication,\n                    resource_id: endpointId,\n                    resource_type: 'Endpoint'\n                };\n\n                promises.push(getSourcesApi().createAuthentication(authenticationData));\n            }\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        if (filteredValues.application && filteredValues.application.application_type_id) {\n            promises.push(doCreateApplication(sourceId, filteredValues.application.application_type_id));\n        } else {\n            promises.push(Promise.resolve(undefined));\n        }\n\n        // eslint-disable-next-line no-unused-vars\n        const [_sourceDataOut, _endpointDataOut, authenticationDataOut, applicationDataOut] = await Promise.all(promises);\n\n        const authenticationId = selectedAuthId ? selectedAuthId : authenticationDataOut ? authenticationDataOut.id : undefined;\n\n        const promisesSecondRound = [];\n\n        if (applicationDataOut && applicationDataOut.id && authenticationId) {\n            const authAppData = {\n                application_id: applicationDataOut.id,\n                authentication_id: authenticationId\n            };\n\n            promisesSecondRound.push(getSourcesApi().createAuthApp(authAppData));\n        }\n\n        const isAttachingCostManagement = filteredValues.credentials || filteredValues.billing_source;\n        if (isAttachingCostManagement) {\n            const { credentials, billing_source } = filteredValues;\n            let data = {};\n            data = credentials ? { authentication: { credentials } } : {};\n            data = billing_source ? { ...data, billing_source } : data;\n            promisesSecondRound.push(patchSource({ id: sourceId, ...data }));\n        }\n\n        await Promise.all(promisesSecondRound);\n    } catch (error) {\n        const errorMessage = await handleError(error);\n        throw errorMessage;\n    }\n};\n","import React, { useReducer, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { filterApps } from '@redhat-cloud-services/frontend-components-sources';\n\nimport { loadEntities } from '../../redux/sources/actions';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport createSchema from './AddApplicationSchema';\nimport LoadingStep from '../steps/LoadingStep';\nimport ErroredStep from './steps/ErroredStep';\nimport FinishedStep from './steps/FinishedStep';\nimport WizardBody from './WizardBody';\n\nimport { getSourcesApi } from '../../api/entities';\n\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { endpointToUrl } from '../SourcesTable/formatters';\nimport { routes } from '../../Routes';\n\nimport { doAttachApp } from '../../api/doAttachApp';\nimport { onCancelAddApplication } from './onCancel';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nlet selectedApp = undefined; // this has to be not-state value, because it shouldn't re-render the component when changes\nconst saveSelectedApp = ({ values: { application } }) => selectedApp = application;\n\nexport const onSubmit = (values, formApi, authenticationInitialValues, dispatch, setState, initialValues) => {\n    setState({ state: 'submitting' });\n\n    return doAttachApp(values, formApi, authenticationInitialValues, initialValues)\n    .then(async () => {\n        checkSourceStatus(initialValues.source.id);\n        await dispatch(loadEntities());\n        selectedApp = undefined;\n        return setState({ state: 'finished' });\n    })\n    .catch(error => setState({\n        state: 'errored',\n        error,\n        values\n    }));\n};\n\nconst initialState = {\n    state: 'loading',\n    error: '',\n    values: {},\n    authenticationsValues: [],\n    sourceAppsLength: 0,\n    initialValues: {}\n};\n\nconst reducer = (state, payload) => ({ ...state, ...payload });\n\nconst AddApplication = () => {\n    const intl = useIntl();\n    const history = useHistory();\n\n    const loaded = useIsLoaded();\n\n    const {\n        appTypes,\n        sourceTypesLoaded,\n        appTypesLoaded,\n        sourceTypes,\n        undoValues\n    } = useSelector(({ sources }) => sources, shallowEqual);\n\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const [state, setState] = useReducer(reducer, initialState);\n\n    useEffect(() => {\n        selectedApp = undefined;\n    }, []);\n\n    useEffect(() => {\n        if (source) {\n            // When app is only removed, there is no need to reload values\n            const removeAppAction = state.sourceAppsLength >= source.applications.length && state.sourceAppsLength > 0;\n\n            setState({ sourceAppsLength: source.applications.length });\n\n            if (!removeAppAction) {\n                if (source.endpoints && source.endpoints[0]) {\n                    getSourcesApi()\n                    .listEndpointAuthentications(source.endpoints[0].id)\n                    .then(({ data }) => setState({\n                        authenticationsValues: data,\n                        initialValues: {\n                            source,\n                            endpoint: source.endpoints[0],\n                            url: endpointToUrl(source.endpoints[0]),\n                            application: selectedApp,\n                        },\n                        values: {}\n                    }))\n                    .then(() => {\n                        if (state.state === 'loading') {\n                            setState({\n                                state: 'wizard'\n                            });\n                        }\n                    });\n                } else {\n                    setState({\n                        initialValues: { source, application: selectedApp },\n                        values: {}\n                    });\n                    if (state.state === 'loading') {\n                        setState({\n                            state: 'wizard'\n                        });\n                    }\n                }\n            }\n        }\n    }, [source]);\n\n    const goToSources = () => history.push(routes.sources.path);\n\n    if (!appTypesLoaded || !sourceTypesLoaded || !loaded) {\n        return  (\n            <WizardBody\n                goToSources={goToSources}\n                step={<LoadingStep />}\n            />\n        );\n    }\n\n    if (state.state === 'loading' || state.state === 'submitting') {\n        return  (\n            <WizardBody\n                goToSources={goToSources}\n                step={<LoadingStep />}\n            />\n        );\n    }\n\n    if (state.state !== 'wizard') {\n        const shownStep = state.state === 'finished' ? (<FinishedStep setState={setState} goToSources={goToSources}/>) :\n            (<ErroredStep setState={setState} goToSources={goToSources} error={state.error}/>);\n\n        return (\n            <WizardBody goToSources={goToSources} step={shownStep} />\n        );\n    }\n\n    const appIds = source.applications.filter(({ isDeleting }) => !isDeleting)\n    .reduce((acc, app) => [...acc, app.application_type_id], []);\n\n    const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n    const sourceTypeName = sourceType && sourceType.name;\n    const filteredAppTypes = appTypes.filter((type) =>\n        !appIds.includes(type.id) && type.supported_source_types.includes(sourceTypeName)\n    ).filter(filterApps);\n\n    const availableAppTypes = filteredAppTypes.map((type) => {\n        const hasDeletingApp = source.applications.find(app => app.application_type_id === type.id);\n        const label = `${type.display_name} ${hasDeletingApp ? `(${intl.formatMessage({\n            id: 'sources.currentlyRemoving',\n            defaultMessage: 'Currently removing'\n        })})` : ''}`;\n\n        return ({ value: type.id, label, isDisabled: hasDeletingApp ? true : false });\n    });\n\n    const usersModifiedValues = merge(cloneDeep(undoValues), state.values);\n\n    const schema = createSchema(\n        availableAppTypes,\n        intl,\n        sourceTypes,\n        appTypes,\n        state.authenticationsValues,\n        source,\n        usersModifiedValues\n    );\n\n    const onSubmitWrapper = (values, formApi) => onSubmit(\n        values,\n        formApi,\n        state.authenticationsValues,\n        dispatch,\n        setState,\n        state.initialValues\n    );\n\n    const hasAvailableApps = filteredAppTypes.length > 0;\n    const onSubmitFinal = hasAvailableApps ? onSubmitWrapper : goToSources;\n\n    const onCancel = (values) => onCancelAddApplication({ values, dispatch, intl, sourceId: source.id, history });\n\n    const finalValues = merge(cloneDeep(state.initialValues), usersModifiedValues);\n\n    return (\n        <SourcesFormRenderer\n            schema={schema}\n            showFormControls={false}\n            onSubmit={onSubmitFinal}\n            onCancel={onCancel}\n            initialValues={finalValues}\n            subscription={{ values: true }}\n            onStateUpdate={saveSelectedApp}\n            clearedValue={null}\n        />\n    );\n};\n\nexport default AddApplication;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport {\n    clearAddSource,\n    addMessage\n} from '../../redux/sources/actions';\nimport UndoButtonAdd from '../../components/UndoButton/UndoButtonAdd';\nimport { routes, replaceRouteId } from '../../Routes';\n\nexport const onCancelAddApplication = ({ values, dispatch, history, intl, sourceId }) => {\n    if (values && values.application) {\n        const messageId = Date.now();\n        dispatch(addMessage(\n            intl.formatMessage({\n                id: 'sources.addApplicationCanceled',\n                defaultMessage: 'Adding an application was cancelled'\n            }),\n            'success',\n            <FormattedMessage\n                id=\"sources.undoMistake\"\n                defaultMessage={ `{undo} if this was a mistake.` }\n                values={ { undo: <UndoButtonAdd\n                    messageId={messageId}\n                    values={values}\n                    path={replaceRouteId(routes.sourceManageApps.path, sourceId)}\n                /> } }\n            />,\n            messageId\n        ));\n    }\n\n    dispatch(clearAddSource());\n    history.push(routes.sources.path);\n};\n"],"sourceRoot":""}