{"version":3,"sources":["webpack:///./src/components/AddApplication/AuthTypeCleaner.js","webpack:///./src/components/AddApplication/AddApplicationDescription.js","webpack:///./src/components/AddApplication/schema/authenticationSelectionStep.js","webpack:///./src/components/AddApplication/schema/generateFirstAuthStep.js","webpack:///./src/components/AddApplication/AuthTypeSetter.js","webpack:///./src/components/AddApplication/schema/selectAuthenticationStep.js","webpack:///./src/components/AddApplication/AddApplicationSchema.js","webpack:///./src/components/AddApplication/WizardBody.js","webpack:///./src/api/doAttachApp.js","webpack:///./src/components/AddApplication/reducer.js","webpack:///./src/components/AddApplication/AddApplication.js","webpack:///./src/components/AddApplication/removeAppSubmit.js","webpack:///./src/components/Authentication.js","webpack:///./src/components/AddApplication/RemoveAppModal.js","webpack:///./src/components/AddApplication/ApplicationSelect.js","webpack:///./src/utilities/SourcesFormRenderer.js","webpack:///./src/api/doUpdateSource.js","webpack:///./src/api/patchCmValues.js"],"names":["AuthTypeCleaner","formOptions","useFormApi","selectedAppId","get","getState","values","useState","initialValue","setInitialValue","useEffect","batch","change","undefined","AddApplicationDescription","intl","useIntl","sourceTypes","useSelector","sources","source","useSource","sourceType","find","type","id","source_type_id","apps","applications","filter","app","isDeleting","appIds","reduce","acc","application_type_id","applicationsPart","includes","length","Fragment","Text","component","TextVariants","h4","formatMessage","defaultMessage","p","TextContent","product_name","authenticationSelectionStep","appType","authenticationValues","name","title","fields","componentTypes","RADIO","options","supported_authentication_types","map","value","label","schema","authentication","authtype","isRequired","validate","validatorTypes","REQUIRED","nextStep","application","auth","generateFirstAuthStep","endpointFields","schemaBuilder","additionalStepName","skipEndpoint","customSteps","additionalIncludesStepKeys","stepProps","firstAdditonalStep","additionalFields","AuthTypeSetter","selectedAuthentication","startsWith","replace","innerSetter","propTypes","PropTypes","arrayOf","object","SelectAuthenticationDescription","applicationTypeName","authenticationTypeName","string","generateAuthSelectionOptions","applicationTypes","supportedAuthTypeName","supportedAuthType","authentications","includeUsername","username","includeAppName","display_name","selectAuthenticationStep","Content","hideField","forEach","ifAppSupported","supported_source_types","isAppAvailable","supportedAuthTypes","push","SUB_FORM","condition","and","when","is","appId","ApplicationSummary","hasAlreadySupportedAuthType","authValues","sourceTypeName","hasMultipleAuthenticationTypes","container","hasAvailableApps","authenticationFields","imported","appendEndpoint","endpoint","hidden","hasEndpointStep","appAdditionalSteps","authType","applicationSelection","selectionSteps","WIZARD","inModal","showTitles","crossroads","description","buttonLabels","submit","cancel","back","WizardBodyAttach","step","goToSources","Wizard","isOpen","onClose","steps","isFinishedStep","node","func","removeEmpty","obj","Object","keys","key","isEmpty","doAttachApp","formApi","authenticationInitialValues","initialValues","a","appTypes","formState","allFormValues","selectedAuthId","authInitialValues","valuesWithoutAuth","newAddedValues","addedDiff","updatedValues","updatedDiff","newAddedAuthValues","updatedAuthValues","filteredValues","merge","cloneDeep","sourceId","endpointId","promises","getSourcesApi","updateSource","Promise","resolve","hasModifiedEndpoint","hasModifiedUrl","url","urlOrHost","scheme","host","port","path","endPointPort","parseInt","endpointData","isNaN","updateEndpoint","createEndpointData","default","source_id","createEndpoint","doCreateApplication","all","endpointDataOut","applicationDataOut","updateAuthentication","authenticationDataOut","authenticationData","resource_id","resource_type","createAuthentication","authenticationId","promisesSecondRound","authAppData","application_id","authentication_id","createAuthApp","credentials","billing_source","data","patchSource","timeout","timeoutedApps","checkAppAvailability","console","error","deleteApplication","handleError","initialState","state","authenticationsValues","sourceAppsLength","isCancelling","reducer","selectedApp","saveSelectedApp","onSubmit","dispatch","setState","then","checkSourceStatus","loadEntities","FormTemplateWrapper","props","showFormControls","AddApplication","history","useHistory","loaded","useIsLoaded","shallowEqual","sourceTypesLoaded","appTypesLoaded","useDispatch","useReducer","useRef","document","createElement","removeAppAction","endpoints","listEndpointAuthentications","endpointToUrl","routes","WizardBody","customText","cancelTitle","onSubmitWrapper","onReset","shownStep","onRetry","returnButtonTitle","primaryAction","secondaryActions","target","href","rel","availability_status","hideSourcesButton","Button","variant","onClick","successfulMessage","message","availability_status_error","removeAppSubmit","Component","to","replaceRouteId","sourcesEdit","className","filteredAppTypes","filterApps","createSchema","current","onSubmitFinal","onStay","onExit","SourcesFormRenderer","onCancel","subscription","debug","clearedValue","FormTemplate","titleSuccess","titleError","removeApplication","Authentication","rest","match","isEditing","isModified","edited","setEdited","firstClick","mounted","pristine","doNotRequirePassword","componentProps","resolveProps","validated","FormGroup","helperText","onFocus","TextInput","aria-label","autoFocus","RemoveAppModal","dependentApps","dependent_applications","appName","sourceAppsNames","x","Modal","header","Title","headingLevel","size","actions","shape","instanceOf","Element","RemoveRadio","option","setApplicationToRemove","htmlFor","ApplicationSelect","useFieldApi","input","onChange","removingApp","isCurrentlyRemoving","Radio","isChecked","isDisabled","componentMapper","mapperExtension","SWITCH","validatorMapper","PATTERN","MIN_LENGTH","URL","formData","u","protocol","hostname","defaultPort","pathname","parseUrl","doUpdateSource","idWithoutPrefix","cmDataOut","axiosInstance","patch","COST_MANAGEMENT_API_BASE"],"mappings":"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","file":"js/addApp.041612b193f01f87f652.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const AuthTypeCleaner = () => {\n  const formOptions = useFormApi();\n\n  const selectedAppId = get(formOptions.getState().values, 'application.application_type_id', '');\n\n  const [initialValue, setInitialValue] = useState(selectedAppId);\n\n  useEffect(() => {\n    if (initialValue !== selectedAppId) {\n      formOptions.batch(() => {\n        formOptions.change('authentication', undefined);\n        formOptions.change('selectedAuthentication', undefined);\n      });\n      setInitialValue(undefined);\n    }\n  }, [selectedAppId]);\n\n  return null;\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { useSource } from '../../hooks/useSource';\n\nconst AddApplicationDescription = () => {\n  const intl = useIntl();\n\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes);\n  const source = useSource();\n\n  const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n  const apps = source.applications.filter((app) => !app.isDeleting);\n\n  const appIds = source.applications\n    .filter(({ isDeleting }) => !isDeleting)\n    .reduce((acc, app) => [...acc, app.application_type_id], []);\n\n  const applicationsPart =\n    apps.filter(({ id }) => !appIds.includes(id)).length > 0 ? (\n      <React.Fragment>\n        <Text component={TextVariants.h4} id=\"add-application-header\">\n          {intl.formatMessage({\n            id: 'sources.apps',\n            defaultMessage: 'Applications',\n          })}\n        </Text>\n        <Text component={TextVariants.p} id=\"add-application-description\">\n          {intl.formatMessage({\n            id: 'sources.addAppMultipleAppDesc',\n            defaultMessage: 'Select a radio button to add an application. Click trash icon to remove an application.',\n          })}\n        </Text>\n      </React.Fragment>\n    ) : (\n      <React.Fragment>\n        <Text component={TextVariants.h4} id=\"add-application-header\">\n          {intl.formatMessage({\n            id: 'sources.addApp',\n            defaultMessage: 'Add an application',\n          })}\n        </Text>\n        <Text component={TextVariants.p} id=\"add-application-description\">\n          {intl.formatMessage({\n            id: 'sources.addAppNoAppsDesc',\n            defaultMessage:\n              'There are currently no applications connected to this source. Select from available applications below.',\n          })}\n        </Text>\n      </React.Fragment>\n    );\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h4}>\n          {intl.formatMessage({\n            id: 'sources.type',\n            defaultMessage: 'Source type',\n          })}\n        </Text>\n        <Text component={TextVariants.p} id=\"add-application-desc-type\">\n          {sourceType\n            ? sourceType.product_name\n            : intl.formatMessage({\n                id: 'sources.typeNotFound',\n                defaultMessage: 'Type not found',\n              })}\n        </Text>\n        {applicationsPart}\n      </TextContent>\n    </React.Fragment>\n  );\n};\n\nexport default AddApplicationDescription;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nconst authenticationSelectionStep = (sourceType, appType, intl, authenticationValues) => {\n  const nextStep = ({ values: { application, authtype } }) => {\n    if (authtype) {\n      const hasSupportedAuthType = authenticationValues.find((auth) => auth.authtype === authtype);\n\n      if (hasSupportedAuthType) {\n        return 'selectAuthentication';\n      }\n\n      return `${sourceType.name}-${application && application.application_type_id}-${authtype}`;\n    }\n  };\n\n  return {\n    name: `selectAuthType-${appType.id}`,\n    title: intl.formatMessage({\n      id: 'sources.selectAuthenticationTitle',\n      defaultMessage: 'Select authentication type',\n    }),\n    fields: [\n      {\n        component: componentTypes.RADIO,\n        name: 'authtype',\n        options: appType.supported_authentication_types[sourceType.name].map((type) => ({\n          value: type,\n          label: sourceType.schema.authentication.find((authtype) => authtype.type === type)?.name || 'Unknown type',\n        })),\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n    ],\n    nextStep,\n  };\n};\n\nexport default authenticationSelectionStep;\n","import * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\n\nconst generateFirstAuthStep = (type, appType, endpointFields, authtype, intl) => {\n  let fields = [...endpointFields];\n\n  if (schemaBuilder.shouldUseAppAuth(type.name, authtype, appType.name)) {\n    fields = [];\n  }\n\n  const auth = type.schema.authentication.find(({ type }) => type === authtype);\n\n  const additionalStepName = `${type.name}-${authtype}-${appType.name}-additional-step`;\n\n  const skipEndpoint = schemaBuilder.shouldSkipEndpoint(type.name, authtype, appType.name);\n  const customSteps = schemaBuilder.hasCustomSteps(type.name, authtype, appType.name);\n\n  let nextStep;\n\n  if (schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).length > 0) {\n    nextStep = additionalStepName;\n  } else if (endpointFields.length === 0 && !skipEndpoint) {\n    nextStep = `${type.name}-endpoint`;\n  } else {\n    nextStep = 'summary';\n  }\n\n  const additionalIncludesStepKeys = schemaBuilder.getAdditionalStepKeys(type.name, authtype, appType.name);\n  const hasCustomStep = schemaBuilder.shouldSkipSelection(type.name, authtype, appType.name);\n\n  let stepProps = {};\n\n  if (hasCustomStep) {\n    const firstAdditonalStep = schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).find(({ name }) => !name);\n    const additionalFields = schemaBuilder.getAdditionalStepFields(auth.fields, additionalStepName);\n\n    if (firstAdditonalStep.nextStep) {\n      nextStep = firstAdditonalStep.nextStep;\n    } else if (endpointFields.length === 0 && !skipEndpoint && !customSteps) {\n      nextStep = `${type.name}-endpoint`;\n    } else {\n      nextStep = 'summary';\n    }\n\n    stepProps = {\n      ...firstAdditonalStep,\n      fields: [\n        ...fields,\n        ...schemaBuilder.injectAuthFieldsInfo(\n          [...firstAdditonalStep.fields, ...additionalFields],\n          type.name,\n          authtype,\n          appType.name\n        ),\n      ],\n    };\n  }\n\n  return {\n    name: `${type.name}-${appType.id}-${authtype}`,\n    title: intl.formatMessage({\n      id: 'sources.configureCredentials',\n      defaultMessage: 'Configure credentials',\n    }),\n    fields: [\n      ...fields,\n      ...schemaBuilder.getAdditionalAuthFields(type.name, authtype, appType.name),\n      ...schemaBuilder.injectAuthFieldsInfo(\n        schemaBuilder.getNoStepsFields(auth.fields, additionalIncludesStepKeys),\n        type.name,\n        authtype,\n        appType.name\n      ),\n    ],\n    nextStep,\n    ...stepProps,\n  };\n};\n\nexport default generateFirstAuthStep;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const innerSetter = ({ formOptions, authenticationValues, selectedAuthentication }) => {\n  if (!selectedAuthentication.startsWith('new-')) {\n    const authentication = authenticationValues.find(({ id }) => id === selectedAuthentication);\n\n    formOptions.change('authentication', authentication);\n  } else {\n    const authtype = selectedAuthentication.replace('new-', '');\n\n    formOptions.change('authentication', { authtype });\n  }\n};\n\nexport const AuthTypeSetter = ({ authenticationValues }) => {\n  const formOptions = useFormApi();\n\n  const selectedAuthentication = formOptions.getState().values.selectedAuthentication;\n\n  const [initialValue, setInitialValue] = useState(selectedAuthentication);\n\n  useEffect(() => {\n    if (initialValue !== selectedAuthentication) {\n      innerSetter({\n        formOptions,\n        authenticationValues,\n        selectedAuthentication,\n      });\n      setInitialValue(undefined);\n    }\n  }, [selectedAuthentication]);\n\n  return null;\n};\n\nAuthTypeSetter.propTypes = {\n  authenticationValues: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { AuthTypeSetter } from '../AuthTypeSetter';\n\nexport const SelectAuthenticationDescription = ({ applicationTypeName, authenticationTypeName }) => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'sources.selectAuthenticationDescription',\n            defaultMessage:\n              'Selected application { applicationTypeName } supports { authenticationTypeName } authentication type. You can use already defined authentication values or define new.',\n          },\n          { applicationTypeName, authenticationTypeName }\n        )}\n      </Text>\n    </TextContent>\n  );\n};\n\nSelectAuthenticationDescription.propTypes = {\n  applicationTypeName: PropTypes.string,\n  authenticationTypeName: PropTypes.string,\n};\n\nexport const generateAuthSelectionOptions = ({\n  source,\n  authenticationValues,\n  applicationTypes,\n  supportedAuthTypeName,\n  supportedAuthType,\n}) =>\n  authenticationValues\n    .filter(({ authtype }) => authtype === supportedAuthType)\n    .map((values) => {\n      const app = source.applications.find(({ authentications }) => authentications.find(({ id }) => id === values.id));\n\n      const appType = app && app.application_type_id ? applicationTypes.find(({ id }) => id === app.application_type_id) : '';\n\n      const includeUsername = values.username ? `-${values.username}` : '';\n      const includeAppName = appType ? `-${appType.display_name}` : `-unused-${values.id}`;\n      const label = `${supportedAuthTypeName}${includeUsername}${includeAppName}`;\n\n      return {\n        label,\n        value: values.id,\n      };\n    });\n\nconst selectAuthenticationStep = ({ intl, source, authenticationValues, sourceType, applicationTypes }) => {\n  const nextStep = ({ values: { application, authtype, authentication } }) => {\n    const app = application ? application : {};\n    const appId = app.application_type_id ? app.application_type_id : '';\n\n    return `${sourceType.name}-${appId}-${authtype || authentication?.authtype}`;\n  };\n\n  const fields = [\n    {\n      component: 'description',\n      name: 'authtypesetter',\n      Content: AuthTypeSetter,\n      authenticationValues,\n      hideField: true,\n    },\n  ];\n\n  applicationTypes.forEach((app) => {\n    const ifAppSupported = app.supported_source_types.includes(sourceType.name);\n    const isAppAvailable = !source.applications?.find(({ application_type_id }) => application_type_id === app.id);\n\n    if (ifAppSupported && isAppAvailable) {\n      const supportedAuthTypes = get(app, `supported_authentication_types[${sourceType.name}]`, []);\n\n      supportedAuthTypes.forEach((supportedAuthType) => {\n        const hasAvailableAuthentications = authenticationValues.find(({ authtype }) => authtype === supportedAuthType);\n\n        if (hasAvailableAuthentications) {\n          const supportedAuthTypeName = get(sourceType, `schema.authentication`, {}).find(\n            ({ type }) => type === supportedAuthType\n          ).name;\n\n          fields.push({\n            component: componentTypes.SUB_FORM,\n            name: `${app.name}-subform`,\n            condition: {\n              and: [\n                {\n                  when: 'application.application_type_id',\n                  is: app.id,\n                },\n                ...(supportedAuthTypes.length > 1\n                  ? [\n                      {\n                        when: 'authtype',\n                        is: supportedAuthType,\n                      },\n                    ]\n                  : []),\n              ],\n            },\n            fields: [\n              {\n                name: `${app.name}-select-authentication-summary`,\n                component: 'description',\n                Content: SelectAuthenticationDescription,\n                applicationTypeName: app.display_name,\n                authenticationTypeName: supportedAuthTypeName,\n              },\n              {\n                component: componentTypes.RADIO,\n                name: 'selectedAuthentication',\n                label: intl.formatMessage({\n                  id: 'sources.selectAuthenticationTitle',\n                  defaultMessage: 'Select authentication',\n                }),\n                isRequired: true,\n                validate: [{ type: validatorTypes.REQUIRED }],\n                options: [\n                  {\n                    label: intl.formatMessage(\n                      {\n                        id: 'sources.selectAuthenticationradioLabel',\n                        defaultMessage: 'Define new { supportedAuthTypeName }',\n                      },\n                      { supportedAuthTypeName }\n                    ),\n                    value: `new-${supportedAuthType}`,\n                  },\n                  ...generateAuthSelectionOptions({\n                    authenticationValues,\n                    source,\n                    applicationTypes,\n                    supportedAuthTypeName,\n                    supportedAuthType,\n                  }),\n                ],\n              },\n            ],\n          });\n        }\n      });\n    }\n  });\n\n  return {\n    name: 'selectAuthentication',\n    title: intl.formatMessage({\n      id: 'sources.selectAuthenticationTitle',\n      defaultMessage: 'Select authentication',\n    }),\n    fields,\n    nextStep,\n  };\n};\n\nexport default selectAuthenticationStep;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { useIntl } from 'react-intl';\nimport * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\nimport get from 'lodash/get';\n\nimport { AuthTypeCleaner } from './AuthTypeCleaner';\nimport AddApplicationDescription from './AddApplicationDescription';\nimport authenticationSelectionStep from './schema/authenticationSelectionStep';\nimport generateFirstAuthStep from './schema/generateFirstAuthStep';\nimport selectAuthenticationStep from './schema/selectAuthenticationStep';\n\nexport const ApplicationSummary = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'sources.reviewAddAppSummary',\n          defaultMessage:\n            'Review the information below and click Add to add the application to your source. Use the Back button to make changes.',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n\nexport const hasAlreadySupportedAuthType = (authValues = [], appType, sourceTypeName) =>\n  authValues.find(({ authtype }) => authtype === get(appType, `supported_authentication_types.${sourceTypeName}[0]`));\n\nexport const hasMultipleAuthenticationTypes = (app, sourceType) =>\n  app.supported_source_types.includes(sourceType.name) && app.supported_authentication_types[sourceType.name]?.length > 1;\n\nconst fields = (applications = [], intl, sourceTypes, applicationTypes, authenticationValues, source, container) => {\n  const hasAvailableApps = applications.length > 0;\n\n  let nextStep = hasAvailableApps ? 'summary' : undefined;\n  let authenticationFields = [];\n  const sourceType = sourceTypes.find(({ id }) => id === source.source_type_id);\n\n  if (!source.imported && hasAvailableApps) {\n    const appendEndpoint = sourceType.schema.endpoint.hidden ? sourceType.schema.endpoint.fields : [];\n    const hasEndpointStep = appendEndpoint.length === 0;\n\n    applicationTypes.forEach((appType) => {\n      if (appType.supported_source_types.includes(sourceType.name)) {\n        appType.supported_authentication_types[sourceType.name].forEach((authtype) => {\n          authenticationFields.push(generateFirstAuthStep(sourceType, appType, appendEndpoint, authtype, intl));\n        });\n      }\n    });\n\n    sourceType.schema.authentication.forEach((auth) => {\n      applicationTypes.forEach((appType) => {\n        if (appType.supported_source_types.includes(sourceType.name)) {\n          const appAdditionalSteps = schemaBuilder.getAdditionalSteps(sourceType.name, auth.type, appType.name);\n\n          if (appAdditionalSteps.length > 0) {\n            authenticationFields.push(\n              ...schemaBuilder.createAdditionalSteps(\n                appAdditionalSteps,\n                sourceType.name,\n                auth.type,\n                hasEndpointStep,\n                auth.fields,\n                appType.name\n              )\n            );\n          }\n        }\n      });\n    });\n\n    if (hasEndpointStep) {\n      authenticationFields.push(schemaBuilder.createEndpointStep(sourceType.schema.endpoint, sourceType.name));\n    }\n\n    nextStep = ({ values: { application } }) => {\n      if (application) {\n        const appType = applicationTypes.find(({ id }) => id === application.application_type_id);\n\n        const hasMultipleAuthTypes = appType?.supported_authentication_types[sourceType.name]?.length > 1;\n\n        if (hasMultipleAuthTypes) {\n          return `selectAuthType-${application.application_type_id}`;\n        }\n\n        if (\n          hasAlreadySupportedAuthType(\n            authenticationValues,\n            applicationTypes.find(({ id }) => id === application.application_type_id),\n            sourceType.name\n          )\n        ) {\n          return 'selectAuthentication';\n        }\n\n        const authType = appType?.supported_authentication_types[sourceType.name][0];\n\n        return `${sourceType.name}-${application && application.application_type_id}-${authType}`;\n      }\n    };\n  }\n\n  const applicationSelection = {\n    component: 'application-select',\n    name: 'application.application_type_id',\n    options: applications,\n    container,\n    validate: [\n      {\n        type: validatorTypes.REQUIRED,\n      },\n    ],\n  };\n\n  const selectionSteps = applicationTypes\n    .filter((app) => hasMultipleAuthenticationTypes(app, sourceType))\n    .map((app) => authenticationSelectionStep(sourceType, app, intl, authenticationValues));\n\n  if (!source.imported && hasAvailableApps) {\n    selectionSteps.push(\n      selectAuthenticationStep({\n        intl,\n        source,\n        authenticationValues,\n        sourceType,\n        applicationTypes,\n      })\n    );\n  }\n\n  return {\n    fields: [\n      {\n        component: componentTypes.WIZARD,\n        name: 'wizard',\n        title: intl.formatMessage({\n          id: 'sources.manageApps',\n          defaultMessage: 'Manage applications',\n        }),\n        inModal: true,\n        container,\n        showTitles: true,\n        crossroads: ['application.application_type_id', 'selectedAuthentication', 'authtype'],\n        description: intl.formatMessage(\n          {\n            id: 'sources.addAppDescription',\n            defaultMessage: 'Add or remove applications from {name}.',\n          },\n          { name: source.name }\n        ),\n        buttonLabels: {\n          submit: intl.formatMessage({\n            id: 'sources.add',\n            defaultMessage: 'Add',\n          }),\n          cancel: intl.formatMessage({\n            id: 'sources.cancel',\n            defaultMessage: 'Cancel',\n          }),\n          back: intl.formatMessage({\n            id: 'sources.back',\n            defaultMessage: 'Back',\n          }),\n        },\n        fields: [\n          {\n            nextStep,\n            title: intl.formatMessage({\n              id: 'sources.selectApp',\n              defaultMessage: 'Add / remove applications',\n            }),\n            name: 'selectAppStep',\n            fields: [\n              {\n                component: 'description',\n                name: 'description',\n                Content: AddApplicationDescription,\n                container,\n              },\n              applicationSelection,\n              {\n                component: 'description',\n                name: 'authtypesetter',\n                Content: AuthTypeCleaner,\n                hideField: true,\n              },\n            ],\n          },\n          {\n            title: intl.formatMessage({\n              id: 'sources.reviewDetails',\n              defaultMessage: 'Review details',\n            }),\n            name: 'summary',\n            fields: [\n              {\n                component: 'description',\n                name: 'description-summary',\n                Content: ApplicationSummary,\n              },\n              {\n                component: 'summary',\n                name: 'summary',\n                sourceTypes,\n                applicationTypes,\n              },\n            ],\n          },\n          ...selectionSteps,\n          ...authenticationFields,\n        ],\n      },\n    ],\n  };\n};\n\nexport default fields;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Wizard } from '@patternfly/react-core/dist/js/components/Wizard/Wizard';\n\nconst WizardBodyAttach = ({ step, goToSources, name }) => {\n  const intl = useIntl();\n\n  return (\n    <Wizard\n      isOpen={true}\n      onClose={goToSources}\n      title={intl.formatMessage({\n        id: 'sources.manageApps',\n        defaultMessage: 'Manage applications',\n      })}\n      description={intl.formatMessage(\n        {\n          id: 'sources.addAppDescription',\n          defaultMessage: 'Add or remove applications from {name}.',\n        },\n        { name }\n      )}\n      steps={[\n        {\n          name: 'Finish',\n          component: step,\n          isFinishedStep: true,\n        },\n      ]}\n    />\n  );\n};\n\nWizardBodyAttach.propTypes = {\n  step: PropTypes.node.isRequired,\n  goToSources: PropTypes.func.isRequired,\n  name: PropTypes.string,\n};\n\nexport default WizardBodyAttach;\n","import { addedDiff, updatedDiff } from 'deep-object-diff';\nimport { patchSource } from '@redhat-cloud-services/frontend-components-sources/cjs/costManagementAuthentication';\nimport { handleError } from '@redhat-cloud-services/frontend-components-sources/cjs/handleError';\nimport { checkAppAvailability } from '@redhat-cloud-services/frontend-components-sources/cjs/getApplicationStatus';\nimport { timeoutedApps } from '@redhat-cloud-services/frontend-components-sources/cjs/constants';\n\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { getSourcesApi, doCreateApplication } from './entities';\nimport { urlOrHost } from './doUpdateSource';\n\n// modification of https://stackoverflow.com/a/38340374\nexport const removeEmpty = (obj) => {\n  Object.keys(obj).forEach((key) => {\n    if (obj[key] && typeof obj[key] === 'object') {\n      if (isEmpty(obj[key])) {\n        delete obj[key];\n      } else {\n        removeEmpty(obj[key]);\n      }\n    } else if (typeof obj[key] === 'undefined') {\n      delete obj[key];\n    }\n  });\n  return obj;\n};\n\nexport const doAttachApp = async (values, formApi, authenticationInitialValues, initialValues, appTypes = []) => {\n  let appId;\n\n  const formState = formApi.getState();\n\n  const allFormValues = formState.values;\n\n  const selectedAuthId = allFormValues.authentication?.id;\n\n  const authInitialValues = selectedAuthId && authenticationInitialValues.find(({ id }) => id === selectedAuthId);\n\n  const { authentication, ...valuesWithoutAuth } = values;\n\n  const newAddedValues = addedDiff(initialValues, valuesWithoutAuth);\n  const updatedValues = updatedDiff(initialValues, valuesWithoutAuth);\n  const newAddedAuthValues = addedDiff(authInitialValues, authentication);\n  const updatedAuthValues = updatedDiff(authInitialValues, authentication);\n\n  const filteredValues = removeEmpty({\n    ...merge(cloneDeep(newAddedValues), updatedValues),\n    authentication: {\n      ...merge(cloneDeep(newAddedAuthValues), updatedAuthValues),\n    },\n  });\n\n  try {\n    if (!allFormValues?.source?.id) {\n      throw 'Missing source id';\n    }\n\n    const sourceId = allFormValues.source.id;\n    let endpointId = allFormValues?.endpoint?.id;\n\n    const promises = [];\n\n    if (filteredValues.source && !isEmpty(filteredValues.source)) {\n      promises.push(getSourcesApi().updateSource(sourceId, filteredValues.source));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    const hasModifiedEndpoint = filteredValues.endpoint && !isEmpty(filteredValues.endpoint);\n    const hasModifiedUrl = filteredValues.url && !isEmpty(filteredValues.url);\n\n    if (hasModifiedEndpoint || hasModifiedUrl) {\n      const { scheme, host, port, path } = urlOrHost(filteredValues);\n\n      const endPointPort = parseInt(port, 10);\n\n      const endpointData = removeEmpty({\n        ...filteredValues.endpoint,\n        scheme,\n        host,\n        port: isNaN(endPointPort) ? undefined : endPointPort,\n        path,\n      });\n\n      if (endpointId) {\n        promises.push(getSourcesApi().updateEndpoint(endpointId, endpointData));\n      } else {\n        const createEndpointData = {\n          ...endpointData,\n          default: true,\n          source_id: sourceId,\n        };\n\n        promises.push(getSourcesApi().createEndpoint(createEndpointData));\n      }\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    if (filteredValues.application?.application_type_id) {\n      promises.push(doCreateApplication(sourceId, filteredValues.application.application_type_id));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    const [_sourceDataOut, endpointDataOut, applicationDataOut] = await Promise.all(promises);\n\n    let authenticationDataOut;\n\n    if (filteredValues.authentication && !isEmpty(filteredValues.authentication)) {\n      if (selectedAuthId) {\n        authenticationDataOut = await getSourcesApi().updateAuthentication(selectedAuthId, filteredValues.authentication);\n      } else {\n        const authenticationData = {\n          ...filteredValues.authentication,\n          resource_id: endpointDataOut?.id || applicationDataOut?.id,\n          resource_type: endpointDataOut?.id ? 'Endpoint' : 'Application',\n        };\n\n        authenticationDataOut = await getSourcesApi().createAuthentication(authenticationData);\n      }\n    }\n\n    appId = applicationDataOut?.id;\n\n    const authenticationId = selectedAuthId || authenticationDataOut?.id;\n\n    const promisesSecondRound = [];\n\n    if (applicationDataOut?.id && authenticationId) {\n      const authAppData = {\n        application_id: applicationDataOut.id,\n        authentication_id: authenticationId,\n      };\n\n      promisesSecondRound.push(getSourcesApi().createAuthApp(authAppData));\n    }\n\n    const isAttachingCostManagement = filteredValues.credentials || filteredValues.billing_source;\n    if (isAttachingCostManagement) {\n      const { credentials, billing_source } = filteredValues;\n      let data = {};\n      data = credentials ? { authentication: { credentials } } : {};\n      data = billing_source ? { ...data, billing_source } : data;\n      promisesSecondRound.push(patchSource({ id: sourceId, ...data }));\n    }\n\n    await Promise.all(promisesSecondRound);\n\n    if (applicationDataOut) {\n      const timeout = timeoutedApps(appTypes).includes(applicationDataOut.application_type_id) ? 10000 : 0;\n      return await checkAppAvailability(applicationDataOut.id, timeout);\n    }\n\n    return {};\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    if (appId) {\n      await getSourcesApi().deleteApplication(appId);\n    }\n\n    const errorMessage = await handleError(error);\n    throw errorMessage;\n  }\n};\n","export const initialState = {\n  state: 'loading',\n  error: '',\n  values: {},\n  authenticationsValues: [],\n  sourceAppsLength: 0,\n  initialValues: {},\n  isCancelling: false,\n};\n\nconst reducer = (state, { type, length, authenticationsValues, initialValues, error, values, data, formApi }) => {\n  switch (type) {\n    case 'setSourceAppslength':\n      return {\n        ...state,\n        sourceAppsLength: length,\n      };\n    case 'loadAuthentications':\n      return {\n        ...state,\n        authenticationsValues,\n        initialValues,\n        values: {},\n        state: state.state === 'loading' ? 'wizard' : state.state,\n      };\n    case 'loadWithoutAuthentications':\n      return {\n        ...state,\n        initialValues,\n        values: {},\n        state: state.state === 'loading' ? 'wizard' : state.state,\n      };\n    case 'reset':\n      return {\n        ...state,\n        state: 'wizard',\n      };\n    case 'submit':\n      return {\n        ...state,\n        values,\n        formApi,\n        state: 'submitting',\n      };\n    case 'finish':\n      return {\n        ...state,\n        state: 'finished',\n        data,\n      };\n    case 'error':\n      return {\n        ...state,\n        state: 'errored',\n        error,\n      };\n    case 'toggleCancelling':\n      return {\n        ...state,\n        isCancelling: !state.isCancelling,\n        ...(values && { values }),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { useReducer, useEffect, useRef } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport filterApps from '@redhat-cloud-services/frontend-components-sources/cjs/filterApps';\nimport CloseModal from '@redhat-cloud-services/frontend-components-sources/cjs/CloseModal';\nimport LoadingStep from '@redhat-cloud-services/frontend-components-sources/cjs/LoadingStep';\nimport ErroredStep from '@redhat-cloud-services/frontend-components-sources/cjs/ErroredStep';\nimport FinishedStep from '@redhat-cloud-services/frontend-components-sources/cjs/FinishedStep';\nimport TimeoutStep from '@redhat-cloud-services/frontend-components-sources/cjs/TimeoutStep';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\n\nimport { loadEntities } from '../../redux/sources/actions';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport createSchema from './AddApplicationSchema';\nimport WizardBody from './WizardBody';\n\nimport { getSourcesApi } from '../../api/entities';\n\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { endpointToUrl } from '../SourcesTable/formatters';\nimport { routes, replaceRouteId } from '../../Routes';\n\nimport { doAttachApp } from '../../api/doAttachApp';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nimport reducer, { initialState } from './reducer';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text';\n\nimport removeAppSubmit from './removeAppSubmit';\n\nlet selectedApp = undefined; // this has to be not-state value, because it shouldn't re-render the component when changes\nconst saveSelectedApp = ({ values: { application } }) => (selectedApp = application);\n\nexport const onSubmit = (values, formApi, authenticationInitialValues, dispatch, setState, initialValues, appTypes) => {\n  setState({ type: 'submit', values, formApi });\n\n  return doAttachApp(values, formApi, authenticationInitialValues, initialValues, appTypes)\n    .then(async (data) => {\n      checkSourceStatus(initialValues.source.id);\n      await dispatch(loadEntities());\n      selectedApp = undefined;\n      return setState({ type: 'finish', data });\n    })\n    .catch((error) =>\n      setState({\n        type: 'error',\n        error,\n      })\n    );\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst AddApplication = () => {\n  const intl = useIntl();\n  const history = useHistory();\n\n  const loaded = useIsLoaded();\n\n  const { appTypes, sourceTypesLoaded, appTypesLoaded, sourceTypes } = useSelector(({ sources }) => sources, shallowEqual);\n\n  const source = useSource();\n\n  const dispatch = useDispatch();\n\n  const [state, setState] = useReducer(reducer, initialState);\n\n  const container = useRef(document.createElement('div'));\n\n  const removeApp = () => {\n    setState({ type: 'reset' });\n\n    return removeAppSubmit(\n      {\n        id: state.data?.id,\n        display_name: appTypes.find(({ id }) => id === state.data?.application_type_id)?.display_name,\n      },\n      intl,\n      undefined,\n      dispatch,\n      source\n    );\n  };\n\n  useEffect(() => {\n    selectedApp = undefined;\n  }, []);\n\n  useEffect(() => {\n    if (source) {\n      // When app is only removed, there is no need to reload values\n      const removeAppAction = state.sourceAppsLength >= source.applications.length && state.sourceAppsLength > 0;\n\n      setState({\n        type: 'setSourceAppslength',\n        length: source.applications.length,\n      });\n\n      if (!removeAppAction) {\n        if (source.endpoints && source.endpoints[0]) {\n          getSourcesApi()\n            .listEndpointAuthentications(source.endpoints[0].id)\n            .then(({ data }) =>\n              setState({\n                type: 'loadAuthentications',\n                authenticationsValues: data,\n                initialValues: {\n                  source,\n                  endpoint: source.endpoints[0],\n                  url: endpointToUrl(source.endpoints[0]),\n                  application: selectedApp,\n                },\n                values: {},\n              })\n            );\n        } else {\n          setState({\n            type: 'loadWithoutAuthentications',\n            initialValues: { source, application: selectedApp },\n            values: {},\n          });\n        }\n      }\n    }\n  }, [source]);\n\n  const goToSources = () => history.push(routes.sources.path);\n\n  if ((!appTypesLoaded || !sourceTypesLoaded || !loaded || state.state === 'loading') && state.state !== 'submitting') {\n    return (\n      <WizardBody\n        goToSources={goToSources}\n        step={\n          <LoadingStep\n            customText={intl.formatMessage({\n              id: 'sources.loading',\n              defaultMessage: 'Loading, please wait.',\n            })}\n            cancelTitle={intl.formatMessage({\n              id: 'sources.close',\n              defaultMessage: 'Close',\n            })}\n            onClose={goToSources}\n          />\n        }\n      />\n    );\n  }\n\n  const onSubmitWrapper = (values, formApi) =>\n    onSubmit(values, formApi, state.authenticationsValues, dispatch, setState, state.initialValues, appTypes);\n\n  if (state.state === 'submitting') {\n    return (\n      <WizardBody\n        name={source.name}\n        goToSources={goToSources}\n        step={\n          <LoadingStep\n            cancelTitle={intl.formatMessage({\n              id: 'sources.close',\n              defaultMessage: 'Close',\n            })}\n            onClose={goToSources}\n            customText={intl.formatMessage({\n              id: 'wizard.loadingText defaultMessage=Validating source credentials',\n              defaultMessage: 'Validating source credentials',\n            })}\n          />\n        }\n      />\n    );\n  }\n\n  const onReset = () => setState({ type: 'reset' });\n\n  if (state.state !== 'wizard') {\n    let shownStep;\n\n    if (state.state !== 'finished') {\n      shownStep = (\n        <ErroredStep\n          onRetry={onReset}\n          onClose={goToSources}\n          returnButtonTitle={intl.formatMessage({\n            id: 'sources.retry',\n            defaultMessage: 'Retry',\n          })}\n          primaryAction={() => onSubmitWrapper(state.values, state.formApi)}\n          secondaryActions={\n            <Text\n              component=\"a\"\n              target=\"_blank\"\n              href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n              rel=\"noopener noreferrer\"\n            >\n              {intl.formatMessage({\n                id: 'wizard.openTicket',\n                defaultMessage: 'Open a support case',\n              })}\n            </Text>\n          }\n        />\n      );\n    } else {\n      switch (state.data.availability_status) {\n        case 'available':\n          shownStep = (\n            <FinishedStep\n              title={intl.formatMessage({\n                id: 'sources.configurationSuccessful',\n                defaultMessage: 'Configuration successful',\n              })}\n              hideSourcesButton={true}\n              onReset={onReset}\n              onClose={goToSources}\n              secondaryActions={\n                <Button variant=\"link\" onClick={onReset}>\n                  {intl.formatMessage({\n                    id: 'sources.continueManageApp',\n                    defaultMessage: 'Continue managing applications',\n                  })}\n                </Button>\n              }\n              returnButtonTitle={intl.formatMessage({\n                id: 'sources.backToSources',\n                defaultMessage: 'Back to Sources',\n              })}\n              successfulMessage={intl.formatMessage({\n                id: 'sources.successAddApp',\n                defaultMessage: 'Your application was successfully added.',\n              })}\n            />\n          );\n          break;\n        case 'unavailable':\n          shownStep = (\n            <ErroredStep\n              onRetry={onReset}\n              onClose={goToSources}\n              message={\n                state.data.availability_status_error ||\n                intl.formatMessage({\n                  id: 'wizard.unknownError',\n                  defaultMessage: 'Unknown error',\n                })\n              }\n              title={intl.formatMessage({\n                id: 'sources.configurationSuccessful',\n                defaultMessage: 'Configuration unsuccessful',\n              })}\n              secondaryActions={\n                <Button variant=\"link\" onClick={removeApp}>\n                  {intl.formatMessage({\n                    id: 'wizard.removeApp',\n                    defaultMessage: 'Remove application',\n                  })}\n                </Button>\n              }\n              Component={() => (\n                <Link to={replaceRouteId(routes.sourcesEdit.path, source.id)}>\n                  <Button variant=\"primary\" className=\"pf-u-mt-xl\">\n                    {intl.formatMessage({\n                      id: 'wizard.editSource',\n                      defaultMessage: 'Edit source',\n                    })}\n                  </Button>\n                </Link>\n              )}\n            />\n          );\n          break;\n        default:\n          shownStep = (\n            <TimeoutStep\n              returnButtonTitle={intl.formatMessage({\n                id: 'sources.backToSources',\n                defaultMessage: 'Back to Sources',\n              })}\n              onClose={goToSources}\n              secondaryActions={\n                <Button variant=\"link\" onClick={onReset}>\n                  {intl.formatMessage({\n                    id: 'sources.continueManageApp',\n                    defaultMessage: 'Continue managing applications',\n                  })}\n                </Button>\n              }\n            />\n          );\n      }\n    }\n\n    return <WizardBody name={source.name} goToSources={goToSources} step={shownStep} />;\n  }\n\n  const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n  const sourceTypeName = sourceType && sourceType.name;\n  const filteredAppTypes = appTypes\n    .filter((type) => type.supported_source_types.includes(sourceTypeName))\n    .filter(filterApps)\n    .map((type) => ({\n      value: type.id,\n      label: type.display_name,\n    }));\n\n  const schema = createSchema(\n    filteredAppTypes,\n    intl,\n    sourceTypes,\n    appTypes,\n    state.authenticationsValues,\n    source,\n    container.current\n  );\n\n  const hasAvailableApps = filteredAppTypes.length > 0;\n  const onSubmitFinal = hasAvailableApps ? onSubmitWrapper : goToSources;\n\n  const onStay = () => {\n    container.current.hidden = false;\n    setState({ type: 'toggleCancelling' });\n  };\n\n  const cancelBeforeExit = (values) => {\n    if (values?.application) {\n      container.current.hidden = true;\n      setState({ type: 'toggleCancelling', values });\n    } else {\n      goToSources();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <CloseModal\n        title={intl.formatMessage({\n          id: 'sources.manageAppsCloseModalTitle',\n          defaultMessage: 'Exit application adding?',\n        })}\n        isOpen={state.isCancelling}\n        onStay={onStay}\n        onExit={goToSources}\n      />\n      <SourcesFormRenderer\n        schema={schema}\n        showFormControls={false}\n        onSubmit={onSubmitFinal}\n        onCancel={cancelBeforeExit}\n        initialValues={state.initialValues}\n        subscription={{ values: true }}\n        debug={saveSelectedApp}\n        clearedValue={null}\n        FormTemplate={FormTemplateWrapper}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default AddApplication;\n","import { removeApplication } from '../../redux/sources/actions';\n\nconst removeAppSubmit = (app, intl, onCancel, dispatch, source) => {\n  const titleSuccess = intl.formatMessage(\n    {\n      id: 'sources.removeAppWarning',\n      defaultMessage: `{ name } was removed from this source.`,\n    },\n    {\n      name: app.display_name,\n    }\n  );\n  const titleError = intl.formatMessage(\n    {\n      id: 'sources.removeAppError',\n      defaultMessage: `Removing of { name } application from this source was unsuccessful.`,\n    },\n    {\n      name: app.display_name,\n    }\n  );\n  onCancel && onCancel();\n  return dispatch(removeApplication(app.id, source.id, titleSuccess, titleError));\n};\n\nexport default removeAppSubmit;\n","import React, { useState, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\n\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\n\nimport TextField from '@data-driven-forms/pf4-component-mapper/dist/cjs/text-field';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validated from '@redhat-cloud-services/frontend-components-sources/cjs/validated';\n\nconst Authentication = (rest) => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n\n  const [authenticationId] = rest?.name?.match(/\\d+/) || [];\n  const isEditing = authenticationId || values.authentication?.id;\n\n  // If there is any value, the field is modified (password is always empty on start)\n  let isModified = get(values, rest.name);\n\n  const [edited, setEdited] = useState(!isEditing || isModified);\n  const firstClick = useRef(true);\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    if (mounted.current) {\n      // reset on restart\n      if (!firstClick.current && formOptions.getState().pristine) {\n        setEdited(false);\n        firstClick.current = true;\n      }\n\n      if (edited) {\n        firstClick.current = false;\n      }\n    }\n  });\n\n  useEffect(() => {\n    mounted.current = true;\n  }, []);\n\n  const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n  const componentProps = {\n    ...rest,\n    ...(isEditing\n      ? {\n          validate: doNotRequirePassword,\n          resolveProps: validated,\n        }\n      : {}),\n  };\n\n  if (!edited && isEditing) {\n    return (\n      <FormGroup helperText={componentProps.helperText} label={componentProps.label} onFocus={() => setEdited(true)} isRequired>\n        <TextInput aria-label=\"pre-filled-authentication\" value=\"•••••••••••••\" />\n      </FormGroup>\n    );\n  }\n\n  return <TextField {...componentProps} autoFocus={true} />;\n};\n\nexport default Authentication;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { useSource } from '../../hooks/useSource';\n\nimport removeAppSubmit from './removeAppSubmit';\n\nconst RemoveAppModal = ({ app, onCancel, container }) => {\n  const intl = useIntl();\n\n  const appTypes = useSelector(({ sources }) => sources.appTypes);\n  const source = useSource();\n\n  const dispatch = useDispatch();\n\n  const onSubmit = () => removeAppSubmit(app, intl, onCancel, dispatch, source);\n\n  useEffect(() => {\n    if (container) {\n      container.hidden = true;\n    }\n  }, []);\n\n  const dependentApps = app.dependent_applications\n    .map((appName) => {\n      const appType = appTypes.find(({ name }) => name === appName);\n\n      return app.sourceAppsNames.includes(appType?.display_name) && appType?.display_name;\n    })\n    .filter((x) => x);\n\n  return (\n    <Modal\n      className=\"ins-c-sources__dialog--warning\"\n      isOpen={true}\n      onClose={onCancel}\n      variant=\"small\"\n      aria-label={intl.formatMessage({\n        id: 'sources.deleteAppTitle',\n        defaultMessage: 'Remove application?',\n      })}\n      header={\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          <ExclamationTriangleIcon size=\"sm\" className=\"ins-m-alert ins-c-source__delete-icon pf-u-mr-sm\" />\n          {intl.formatMessage({\n            id: 'sources.deleteAppTitle',\n            defaultMessage: 'Remove application?',\n          })}\n        </Title>\n      }\n      actions={[\n        <Button id=\"deleteSubmit\" key=\"submit\" variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {intl.formatMessage({\n            id: 'sources.remove',\n            defaultMessage: 'Remove',\n          })}\n        </Button>,\n        <Button id=\"deleteCancel\" key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          {intl.formatMessage({\n            id: 'sources.cancel',\n            defaultMessage: 'Cancel',\n          })}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {intl.formatMessage(\n            {\n              id: 'sources.deleteAppWarning',\n              defaultMessage: '{ appName } will be disconnected from this source.',\n            },\n            { appName: <b key=\"b\">{app.display_name}</b> }\n          )}\n        </Text>\n        {dependentApps.length > 0 && (\n          <Text component={TextVariants.p}>\n            {intl.formatMessage(\n              {\n                id: 'sources.deleteAppDetails',\n                defaultMessage: 'This change will affect these applications: { apps }.',\n              },\n              { apps: dependentApps }\n            )}\n          </Text>\n        )}\n      </TextContent>\n    </Modal>\n  );\n};\n\nRemoveAppModal.propTypes = {\n  app: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    display_name: PropTypes.string.isRequired,\n    dependent_applications: PropTypes.arrayOf(PropTypes.string),\n    sourceAppsNames: PropTypes.arrayOf(PropTypes.string),\n  }).isRequired,\n  onCancel: PropTypes.func.isRequired,\n  container: PropTypes.instanceOf(Element),\n};\n\nexport default RemoveAppModal;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Radio } from '@patternfly/react-core/dist/js/components/Radio/Radio';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport TrashIcon from '@patternfly/react-icons/dist/js/icons/trash-icon';\n\nimport useFieldApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-field-api';\n\nimport { useSource } from '../../hooks/useSource';\n\nimport RemoveAppModal from './RemoveAppModal';\n\nconst RemoveRadio = ({ option, setApplicationToRemove, sourceAppsNames, app, appType }) => {\n  const intl = useIntl();\n\n  const onClick = () =>\n    setApplicationToRemove({\n      id: app?.id,\n      display_name: appType?.display_name,\n      dependent_applications: appType?.dependent_applications,\n      sourceAppsNames,\n    });\n\n  return (\n    <div className=\"pf-c-radio pf-u-mb-md\">\n      <Button\n        id={`remove-app-${option.value}`}\n        variant=\"plain\"\n        aria-label={intl.formatMessage(\n          {\n            id: 'source.removeAppAria',\n            defaultMessage: 'Remove application {app} from this source',\n          },\n          { app: option.label }\n        )}\n        className=\"pf-u-p-0\"\n        onClick={onClick}\n      >\n        <TrashIcon variant=\"small\" />\n      </Button>\n      <label className=\"pf-c-radio__label\" htmlFor={`remove-app-${option.value}`}>\n        {option.label}\n      </label>\n    </div>\n  );\n};\n\nRemoveRadio.propTypes = {\n  option: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n  }),\n  setApplicationToRemove: PropTypes.func.isRequired,\n  sourceAppsNames: PropTypes.arrayOf(PropTypes.string),\n  appType: PropTypes.shape({\n    display_name: PropTypes.string.isRequired,\n    dependent_applications: PropTypes.arrayOf(PropTypes.string),\n  }),\n  app: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    application_type_id: PropTypes.string.isRequired,\n  }),\n};\n\nconst ApplicationSelect = (props) => {\n  const {\n    options,\n    input: { onChange, value, name },\n    container,\n  } = useFieldApi(props);\n\n  const [removingApp, setApplicationToRemove] = useState({});\n\n  const appTypes = useSelector(({ sources }) => sources.appTypes);\n  const source = useSource();\n\n  const sourceAppsNames = source.applications.map(\n    ({ application_type_id }) => appTypes.find(({ id }) => id === application_type_id)?.display_name\n  );\n\n  const appType = (value) => appTypes?.find((appType) => appType.id === value);\n  const app = (value) => source.applications.find((app) => app.application_type_id === value);\n\n  const isCurrentlyRemoving = (value) => app(value)?.isDeleting;\n\n  const appIds = source.applications\n    .filter(({ isDeleting }) => !isDeleting)\n    .reduce((acc, app) => [...acc, app.application_type_id], []);\n\n  return (\n    <div>\n      {removingApp.id && (\n        <RemoveAppModal\n          app={removingApp}\n          onCancel={() => {\n            if (container) {\n              container.hidden = false;\n            }\n\n            return setApplicationToRemove({});\n          }}\n          container={container}\n        />\n      )}\n      {options.map((option) =>\n        !appIds.includes(option.value) ? (\n          <Radio\n            className=\"pf-u-mb-md\"\n            key={option.value}\n            onChange={() => onChange(option.value)}\n            label={option.label}\n            id={`${name}-${option.value}`}\n            name={name}\n            isChecked={value === option.value}\n            isDisabled={isCurrentlyRemoving(option.value)}\n          />\n        ) : (\n          <RemoveRadio\n            key={option.value}\n            option={option}\n            setApplicationToRemove={setApplicationToRemove}\n            sourceAppsNames={sourceAppsNames}\n            app={app(option.value)}\n            appType={appType(option.value)}\n          />\n        )\n      )}\n    </div>\n  );\n};\n\nexport default ApplicationSelect;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer/dist/cjs/form-renderer';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validatorMapper from '@data-driven-forms/react-form-renderer/dist/cjs/validator-mapper';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/cjs/component-mapper';\n\nimport { mapperExtension } from '@redhat-cloud-services/frontend-components-sources/cjs/sourceFormRenderer';\n\nimport Authentication from '../components/Authentication';\n\nimport ApplicationSelect from '../components/AddApplication/ApplicationSelect';\n\nconst SourcesFormRenderer = (props) => (\n  <FormRenderer\n    FormTemplate={FormTemplate}\n    componentMapper={{\n      ...componentMapper,\n      ...mapperExtension,\n      authentication: Authentication,\n      'switch-field': componentMapper[componentTypes.SWITCH],\n      'application-select': ApplicationSelect,\n    }}\n    validatorMapper={{\n      'required-validator': validatorMapper[validatorTypes.REQUIRED],\n      'pattern-validator': validatorMapper[validatorTypes.PATTERN],\n      'min-length-validator': validatorMapper[validatorTypes.MIN_LENGTH],\n      'url-validator': validatorMapper[validatorTypes.URL],\n    }}\n    {...props}\n  />\n);\n\nexport default SourcesFormRenderer;\n","import { defaultPort } from '../components/SourcesTable/formatters';\nimport { getSourcesApi } from './entities';\nimport { patchCmValues } from './patchCmValues';\n\nexport const parseUrl = (url) => {\n  if (url === null) {\n    return {\n      scheme: null,\n      host: null,\n      port: null,\n      path: null,\n    };\n  }\n\n  if (!url) {\n    return {};\n  }\n\n  try {\n    const u = new URL(url);\n    const scheme = u.protocol.replace(/:$/, '');\n\n    return {\n      scheme,\n      host: u.hostname,\n      port: u.port === '' ? defaultPort(scheme) : u.port,\n      path: u.pathname,\n    };\n  } catch (error) {\n    return {};\n  }\n};\n\nexport const urlOrHost = (formData) =>\n  formData.url || formData.url === null ? parseUrl(formData.url) : formData.endpoint ? formData.endpoint : formData;\n\nexport const doUpdateSource = (source, formData) => {\n  const promises = [];\n\n  if (formData.source) {\n    promises.push(getSourcesApi().updateSource(source.source.id, formData.source));\n  }\n\n  if (formData.endpoint || formData.url || formData.url === null) {\n    const { scheme, host, port, path } = urlOrHost(formData);\n    const endPointPort = port === null ? null : parseInt(port, 10);\n\n    const endpointData = {\n      scheme,\n      host,\n      path,\n      port: endPointPort === null ? null : isNaN(endPointPort) ? undefined : endPointPort,\n      ...formData.endpoint,\n    };\n\n    promises.push(getSourcesApi().updateEndpoint(source.endpoints[0].id, endpointData));\n  }\n\n  if (formData.authentications) {\n    Object.keys(formData.authentications).forEach((key) => {\n      const idWithoutPrefix = key.replace('a', '');\n\n      promises.push(getSourcesApi().updateAuthentication(idWithoutPrefix, formData.authentications[key]));\n    });\n  }\n\n  if (formData.billing_source || formData.credentials) {\n    let cmDataOut = {};\n\n    if (formData.credentials) {\n      cmDataOut = {\n        authentication: {\n          credentials: formData.credentials,\n        },\n      };\n    }\n\n    if (formData.billing_source) {\n      cmDataOut = {\n        ...cmDataOut,\n        billing_source: formData.billing_source,\n      };\n    }\n\n    promises.push(patchCmValues(source.source.id, cmDataOut));\n  }\n\n  return Promise.all(promises);\n};\n","import { axiosInstance } from './entities';\nimport { COST_MANAGEMENT_API_BASE } from './constants';\n\nexport const patchCmValues = (id, data) => axiosInstance.patch(`${COST_MANAGEMENT_API_BASE}/sources/${id}/`, data);\n"],"sourceRoot":""}