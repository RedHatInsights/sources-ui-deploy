{"version":3,"sources":["webpack:///./src/components/AddApplication/AuthTypeSetter.js","webpack:///./src/components/AddApplication/schema/selectAuthenticationStep.js","webpack:///./src/components/AddApplication/AddApplicationSchema.js","webpack:///./src/components/AddApplication/schema/generateFirstAuthStep.js","webpack:///./src/components/AddApplication/schema/authenticationSelectionStep.js","webpack:///./src/components/AddApplication/WizardBody.js","webpack:///./src/api/doAttachApp.js","webpack:///./src/components/AddApplication/reducer.js","webpack:///./src/components/AddApplication/AddApplication.js","webpack:///./src/components/AddApplication/removeAppSubmit.js"],"names":["AuthTypeSetter","authenticationValues","formOptions","useFormApi","selectedAuthentication","getState","values","useState","initialValue","setInitialValue","useEffect","startsWith","authtype","replace","change","authentication","find","id","innerSetter","undefined","propTypes","PropTypes","SelectAuthenticationDescription","applicationTypeName","authenticationTypeName","intl","useIntl","TextContent","Text","component","TextVariants","formatMessage","defaultMessage","generateAuthSelectionOptions","supportedAuthTypeName","supportedAuthType","applicationTypes","source","filter","map","includeUsername","username","app","applications","authentications","appType","application_type_id","includeAppName","display_name","label","value","ApplicationSummary","sourceType","container","title","description","firstStep","hasMultipleAuthTypes","hasAlreadyType","authenticationFields","imported","appendEndpoint","schema","endpoint","hidden","fields","hasEndpointStep","length","shouldAddEmpty","supported_authentication_types","name","authTypes","emptyAuthType","supported_source_types","includes","forEach","push","type","endpointFields","schemaBuilder","nextStep","auth","additionalStepName","skipEndpoint","customSteps","additionalIncludesStepKeys","stepProps","firstAdditonalStep","additionalFields","generateFirstAuthStep","appAdditionalSteps","componentTypes","options","isRequired","validate","validatorTypes","application","authenticationSelectionStep","sourceTypeName","get","hasAlreadySupportedAuthType","Content","hideField","ifAppSupported","isAppAvailable","selectAuthenticationStep","appTypeSetter","className","inModal","showTitles","crossroads","buttonLabels","submit","cancel","back","sourceTypes","splice","WizardBodyAttach","step","goToSources","Wizard","isOpen","onClose","steps","isFinishedStep","removeEmpty","obj","Object","keys","key","isEmpty","doAttachApp","formApi","authenticationInitialValues","initialValues","appTypes","formState","allFormValues","selectedAuthId","authInitialValues","valuesWithoutAuth","newAddedValues","addedDiff","updatedValues","updatedDiff","newAddedAuthValues","updatedAuthValues","filteredValues","merge","cloneDeep","startDate","Date","sourceId","endpointId","promises","getSourcesApi","updateSource","Promise","resolve","hasModifiedEndpoint","hasModifiedUrl","url","urlOrHost","scheme","host","port","path","endPointPort","parseInt","endpointData","isNaN","updateEndpoint","createEndpointData","default","source_id","createEndpoint","applicationData","doCreateApplication","all","endpointDataOut","applicationDataOut","updateAuthentication","authenticationDataOut","authenticationData","resource_id","resource_type","createAuthentication","appId","authenticationId","authAppData","application_id","authentication_id","createAuthApp","checkAppAvailability","timeout","timeoutedApps","console","error","deleteApplication","handleError","initialState","state","authenticationsValues","sourceAppsLength","isCancelling","data","onSubmit","dispatch","setState","setSelectedApp","then","checkSourceStatus","loadEntities","FormTemplateWrapper","props","showFormControls","history","useHistory","selectedApp","useRef","saveSelectedApp","current","app_type_id","useParams","loaded","useIsLoaded","useSelector","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","useSource","useDispatch","useReducer","reducer","document","createElement","applicationType","removeAppAction","endpoints","listEndpointAuthentications","endpointToUrl","replaceRouteId","routes","appName","WizardBody","LoadingStep","customText","cancelTitle","onSubmitWrapper","onReset","source_type_id","shownStep","ErroredStep","onRetry","returnButtonTitle","primaryAction","secondaryActions","target","href","rel","computeSourceStatus","AmazonFinishedStep","FinishedStep","hideSourcesButton","successfulMessage","message","computeSourceError","Button","variant","onClick","onCancel","titleSuccess","titleError","removeApplication","removeAppSubmit","Component","Link","to","TimeoutStep","filteredAppTypes","filterApps","Redirect","createSchema","onSubmitFinal","CloseModal","onStay","style","opacity","onExit","SourcesFormRenderer","newValues","diff","subscription","debug","clearedValue","FormTemplate"],"mappings":"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","file":"js/addApplication.9ff8b0e4a38c85d09106.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nexport const innerSetter = ({ formOptions, authenticationValues, selectedAuthentication }) => {\n  if (!selectedAuthentication.startsWith('new-')) {\n    const authentication = authenticationValues.find(({ id }) => id === selectedAuthentication);\n\n    formOptions.change('authentication', authentication);\n  } else {\n    const authtype = selectedAuthentication.replace('new-', '');\n\n    formOptions.change('authentication', { authtype });\n  }\n};\n\nexport const AuthTypeSetter = ({ authenticationValues }) => {\n  const formOptions = useFormApi();\n\n  const selectedAuthentication = formOptions.getState().values.selectedAuthentication;\n\n  const [initialValue, setInitialValue] = useState(selectedAuthentication);\n\n  useEffect(() => {\n    if (initialValue !== selectedAuthentication) {\n      innerSetter({\n        formOptions,\n        authenticationValues,\n        selectedAuthentication,\n      });\n      setInitialValue(undefined);\n    }\n  }, [selectedAuthentication]);\n\n  return null;\n};\n\nAuthTypeSetter.propTypes = {\n  authenticationValues: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nimport { Text, TextVariants, TextContent } from '@patternfly/react-core';\nimport { AuthTypeSetter } from '../AuthTypeSetter';\n\nexport const SelectAuthenticationDescription = ({ applicationTypeName, authenticationTypeName }) => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'sources.selectAuthenticationDescription',\n            defaultMessage:\n              'Selected application { applicationTypeName } supports { authenticationTypeName } authentication type. You can use already defined authentication values or define new.',\n          },\n          { applicationTypeName, authenticationTypeName }\n        )}\n      </Text>\n    </TextContent>\n  );\n};\n\nSelectAuthenticationDescription.propTypes = {\n  applicationTypeName: PropTypes.string,\n  authenticationTypeName: PropTypes.string,\n};\n\nexport const generateAuthSelectionOptions = ({\n  authenticationValues,\n  supportedAuthTypeName,\n  supportedAuthType,\n  applicationTypes,\n  source,\n}) =>\n  authenticationValues\n    .filter(({ authtype }) => authtype === supportedAuthType)\n    .map((values) => {\n      const includeUsername = values.username ? `-${values.username}` : '';\n\n      const app = source.applications.find(({ authentications }) => authentications.find(({ id }) => id === values.id));\n      const appType = app && app.application_type_id ? applicationTypes.find(({ id }) => id === app.application_type_id) : '';\n      const includeAppName = appType ? `-${appType.display_name}` : `-unused-${values.id}`;\n      const label = `${supportedAuthTypeName}${includeUsername}${includeAppName}`;\n\n      return {\n        label,\n        value: values.id,\n      };\n    });\n\nconst selectAuthenticationStep = ({ intl, source, authenticationValues, sourceType, app, applicationTypes }) => {\n  const nextStep = ({ values: { authtype, authentication } }) =>\n    `${sourceType.name}-${app.id}-${authtype || authentication?.authtype}`;\n\n  const fields = [\n    {\n      component: 'description',\n      name: 'authtypesetter',\n      Content: AuthTypeSetter,\n      authenticationValues,\n      hideField: true,\n    },\n  ];\n\n  const ifAppSupported = app.supported_source_types.includes(sourceType.name);\n  const isAppAvailable = !source.applications?.find(({ application_type_id }) => application_type_id === app.id);\n\n  if (ifAppSupported && isAppAvailable) {\n    const supportedAuthTypes = get(app, `supported_authentication_types[${sourceType.name}]`, []);\n\n    supportedAuthTypes.forEach((supportedAuthType) => {\n      const hasAvailableAuthentications = authenticationValues.find(({ authtype }) => authtype === supportedAuthType);\n\n      if (hasAvailableAuthentications) {\n        const supportedAuthTypeName = get(sourceType, `schema.authentication`, {}).find(\n          ({ type }) => type === supportedAuthType\n        ).name;\n\n        fields.push({\n          component: componentTypes.SUB_FORM,\n          name: `${app.name}-subform`,\n          fields: [\n            {\n              name: `${app.name}-select-authentication-summary`,\n              component: 'description',\n              Content: SelectAuthenticationDescription,\n              applicationTypeName: app.display_name,\n              authenticationTypeName: supportedAuthTypeName,\n            },\n            {\n              component: componentTypes.RADIO,\n              name: 'selectedAuthentication',\n              label: intl.formatMessage({\n                id: 'sources.selectAuthenticationTitle',\n                defaultMessage: 'Select authentication',\n              }),\n              isRequired: true,\n              validate: [{ type: validatorTypes.REQUIRED }],\n              options: [\n                {\n                  label: intl.formatMessage(\n                    {\n                      id: 'sources.selectAuthenticationradioLabel',\n                      defaultMessage: 'Define new { supportedAuthTypeName }',\n                    },\n                    { supportedAuthTypeName }\n                  ),\n                  value: `new-${supportedAuthType}`,\n                },\n                ...generateAuthSelectionOptions({\n                  authenticationValues,\n                  supportedAuthTypeName,\n                  supportedAuthType,\n                  applicationTypes,\n                  source,\n                }),\n              ],\n            },\n          ],\n        });\n      }\n    });\n  }\n\n  return {\n    name: 'selectAuthentication',\n    title: intl.formatMessage({\n      id: 'sources.selectAuthenticationTitle',\n      defaultMessage: 'Select authentication',\n    }),\n    fields,\n    nextStep,\n  };\n};\n\nexport default selectAuthenticationStep;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\n\nimport { Text, TextVariants, TextContent } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport * as schemaBuilder from '../../components/addSourceWizard/schemaBuilder';\nimport get from 'lodash/get';\n\nimport authenticationSelectionStep from './schema/authenticationSelectionStep';\nimport generateFirstAuthStep from './schema/generateFirstAuthStep';\nimport selectAuthenticationStep from './schema/selectAuthenticationStep';\nimport emptyAuthType from '../addSourceWizard/emptyAuthType';\n\nexport const ApplicationSummary = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'sources.reviewAddAppSummary',\n          defaultMessage:\n            'Review the information below and click Add to add the application to your source. Use the Back button to make changes.',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n\nexport const hasAlreadySupportedAuthType = (authValues = [], appType, sourceTypeName) =>\n  authValues.find(({ authtype }) => authtype === get(appType, `supported_authentication_types.${sourceTypeName}[0]`));\n\nconst fields = (intl, sourceType, appType, authenticationValues, source, container, title, description, applicationTypes) => {\n  let authenticationFields = [];\n  let firstStep;\n  let hasMultipleAuthTypes;\n  let hasAlreadyType;\n\n  if (!source.imported) {\n    const appendEndpoint = sourceType.schema.endpoint.hidden ? sourceType.schema.endpoint.fields : [];\n    const hasEndpointStep = appendEndpoint.length === 0;\n\n    const shouldAddEmpty =\n      !appType.supported_authentication_types[sourceType.name] ||\n      appType.supported_authentication_types[sourceType.name].length === 0;\n\n    const authTypes = shouldAddEmpty ? [emptyAuthType.type] : appType.supported_authentication_types[sourceType.name];\n    const authentications = shouldAddEmpty ? [emptyAuthType] : sourceType.schema.authentication;\n\n    if (appType.supported_source_types.includes(sourceType.name)) {\n      authTypes.forEach((authtype) => {\n        authenticationFields.push(generateFirstAuthStep(sourceType, appType, appendEndpoint, authtype, intl, shouldAddEmpty));\n      });\n    }\n\n    authentications.forEach((auth) => {\n      if (appType.supported_source_types.includes(sourceType.name)) {\n        const appAdditionalSteps = schemaBuilder.getAdditionalSteps(sourceType.name, auth.type, appType.name);\n\n        if (appAdditionalSteps.length > 0) {\n          authenticationFields.push(\n            ...schemaBuilder.createAdditionalSteps(\n              appAdditionalSteps,\n              sourceType.name,\n              auth.type,\n              hasEndpointStep,\n              auth.fields,\n              appType.name\n            )\n          );\n        }\n      }\n    });\n\n    if (hasEndpointStep) {\n      authenticationFields.push(schemaBuilder.createEndpointStep(sourceType.schema.endpoint, sourceType.name));\n    }\n\n    firstStep = authenticationFields[0];\n\n    hasMultipleAuthTypes = appType?.supported_authentication_types[sourceType.name]?.length > 1;\n\n    if (hasMultipleAuthTypes) {\n      firstStep = authenticationSelectionStep(sourceType, appType, intl, authenticationValues);\n    }\n\n    hasAlreadyType = hasAlreadySupportedAuthType(authenticationValues, appType, sourceType.name);\n\n    if (hasAlreadyType) {\n      firstStep = selectAuthenticationStep({\n        intl,\n        source,\n        authenticationValues,\n        sourceType,\n        app: appType,\n        applicationTypes,\n      });\n    }\n  }\n\n  const appTypeSetter = {\n    component: componentTypes.TEXT_FIELD,\n    name: 'application.application_type_id',\n    hideField: true,\n    initialValue: appType.id,\n  };\n\n  return {\n    fields: [\n      {\n        component: componentTypes.WIZARD,\n        className: 'sources',\n        name: 'wizard',\n        title,\n        inModal: true,\n        container,\n        showTitles: true,\n        crossroads: ['selectedAuthentication', 'authtype'],\n        description,\n        buttonLabels: {\n          submit: intl.formatMessage({\n            id: 'sources.add',\n            defaultMessage: 'Add',\n          }),\n          cancel: intl.formatMessage({\n            id: 'sources.cancel',\n            defaultMessage: 'Cancel',\n          }),\n          back: intl.formatMessage({\n            id: 'sources.back',\n            defaultMessage: 'Back',\n          }),\n        },\n        fields: [\n          ...(source.imported\n            ? []\n            : [\n                {\n                  ...firstStep,\n                  fields: [...firstStep.fields, appTypeSetter],\n                },\n              ]),\n          {\n            title: intl.formatMessage({\n              id: 'sources.reviewDetails',\n              defaultMessage: 'Review details',\n            }),\n            name: 'summary',\n            fields: [\n              {\n                component: 'description',\n                name: 'description-summary',\n                Content: ApplicationSummary,\n              },\n              {\n                component: 'summary',\n                name: 'summary',\n                sourceTypes: [sourceType],\n                applicationTypes: [appType],\n              },\n              ...(source.imported ? [appTypeSetter] : []),\n            ],\n          },\n          ...(hasAlreadyType || hasMultipleAuthTypes ? authenticationFields : authenticationFields.splice(1)),\n        ],\n      },\n    ],\n  };\n};\n\nexport default fields;\n","import * as schemaBuilder from '../../../components/addSourceWizard/schemaBuilder';\nimport emptyAuthType from '../../addSourceWizard/emptyAuthType';\n\nconst generateFirstAuthStep = (type, appType, endpointFields, authtype, intl, shouldAddEmpty) => {\n  let fields = [...endpointFields];\n\n  if (schemaBuilder.shouldUseAppAuth(type.name, authtype, appType.name)) {\n    fields = [];\n  }\n\n  const auth = [...type.schema.authentication, shouldAddEmpty ? emptyAuthType : undefined].find(({ type }) => type === authtype);\n\n  const additionalStepName = `${type.name}-${authtype}-${appType.name}-additional-step`;\n\n  const skipEndpoint = schemaBuilder.shouldSkipEndpoint(type.name, authtype, appType.name);\n  const customSteps = schemaBuilder.hasCustomSteps(type.name, authtype, appType.name);\n\n  let nextStep;\n\n  if (schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).length > 0) {\n    nextStep = additionalStepName;\n  } else if (endpointFields.length === 0 && !skipEndpoint) {\n    nextStep = `${type.name}-endpoint`;\n  } else {\n    nextStep = 'summary';\n  }\n\n  const additionalIncludesStepKeys = schemaBuilder.getAdditionalStepKeys(type.name, authtype, appType.name);\n  const hasCustomStep = schemaBuilder.shouldSkipSelection(type.name, authtype, appType.name);\n\n  let stepProps = {};\n\n  if (hasCustomStep) {\n    const firstAdditonalStep = schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).find(({ name }) => !name);\n    const additionalFields = schemaBuilder.getAdditionalStepFields(auth.fields, additionalStepName);\n\n    if (firstAdditonalStep.nextStep) {\n      nextStep = firstAdditonalStep.nextStep;\n    } else if (endpointFields.length === 0 && !skipEndpoint && !customSteps) {\n      nextStep = `${type.name}-endpoint`;\n    } else {\n      nextStep = 'summary';\n    }\n\n    stepProps = {\n      ...firstAdditonalStep,\n      fields: [\n        ...fields,\n        ...schemaBuilder.injectAuthFieldsInfo(\n          [...firstAdditonalStep.fields, ...additionalFields],\n          type.name,\n          authtype,\n          appType.name\n        ),\n      ],\n    };\n  }\n\n  return {\n    name: `${type.name}-${appType.id}-${authtype}`,\n    title: intl.formatMessage({\n      id: 'sources.configureCredentials',\n      defaultMessage: 'Configure credentials',\n    }),\n    fields: [\n      ...fields,\n      ...schemaBuilder.getAdditionalAuthFields(type.name, authtype, appType.name),\n      ...schemaBuilder.injectAuthFieldsInfo(\n        schemaBuilder.getNoStepsFields(auth.fields, additionalIncludesStepKeys),\n        type.name,\n        authtype,\n        appType.name\n      ),\n    ],\n    nextStep,\n    ...stepProps,\n  };\n};\n\nexport default generateFirstAuthStep;\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nconst authenticationSelectionStep = (sourceType, appType, intl, authenticationValues) => {\n  const nextStep = ({ values: { application, authtype } }) => {\n    if (authtype) {\n      const hasSupportedAuthType = authenticationValues.find((auth) => auth.authtype === authtype);\n\n      if (hasSupportedAuthType) {\n        return 'selectAuthentication';\n      }\n\n      return `${sourceType.name}-${application && application.application_type_id}-${authtype}`;\n    }\n  };\n\n  return {\n    name: `selectAuthType-${appType.id}`,\n    title: intl.formatMessage({\n      id: 'sources.selectAuthenticationTitle',\n      defaultMessage: 'Select authentication type',\n    }),\n    fields: [\n      {\n        component: componentTypes.RADIO,\n        name: 'authtype',\n        options: appType.supported_authentication_types[sourceType.name].map((type) => ({\n          value: type,\n          label: sourceType.schema.authentication.find((authtype) => authtype.type === type)?.name || 'Unknown type',\n        })),\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n    ],\n    nextStep,\n  };\n};\n\nexport default authenticationSelectionStep;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\n\nconst WizardBodyAttach = ({ step, goToSources, title, description }) => (\n  <Wizard\n    isOpen={true}\n    onClose={goToSources}\n    title={title}\n    description={description}\n    steps={[\n      {\n        name: 'Finish',\n        component: step,\n        isFinishedStep: true,\n      },\n    ]}\n  />\n);\n\nWizardBodyAttach.propTypes = {\n  step: PropTypes.node.isRequired,\n  goToSources: PropTypes.func.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default WizardBodyAttach;\n","import { addedDiff, updatedDiff } from 'deep-object-diff';\n\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { getSourcesApi, doCreateApplication } from './entities';\nimport { urlOrHost } from './doUpdateSource';\nimport { checkAppAvailability } from '../api/getApplicationStatus';\nimport handleError from '../api/handleError';\nimport { timeoutedApps } from '../utilities/constants';\nimport emptyAuthType from '../components/addSourceWizard/emptyAuthType';\n\n// modification of https://stackoverflow.com/a/38340374\nexport const removeEmpty = (obj) => {\n  Object.keys(obj).forEach((key) => {\n    if (obj[key] && typeof obj[key] === 'object') {\n      if (isEmpty(obj[key])) {\n        delete obj[key];\n      } else {\n        removeEmpty(obj[key]);\n      }\n    } else if (typeof obj[key] === 'undefined') {\n      delete obj[key];\n    }\n  });\n  return obj;\n};\n\nexport const doAttachApp = async (values, formApi, authenticationInitialValues, initialValues, appTypes = []) => {\n  let appId;\n\n  const formState = formApi.getState();\n\n  const allFormValues = formState.values;\n\n  const selectedAuthId = allFormValues.authentication?.id;\n\n  const authInitialValues = selectedAuthId && authenticationInitialValues.find(({ id }) => id === selectedAuthId);\n\n  const { authentication, ...valuesWithoutAuth } = values;\n\n  const newAddedValues = addedDiff(initialValues, valuesWithoutAuth);\n  const updatedValues = updatedDiff(initialValues, valuesWithoutAuth);\n  const newAddedAuthValues = addedDiff(authInitialValues, authentication);\n  const updatedAuthValues = updatedDiff(authInitialValues, authentication);\n\n  const filteredValues = removeEmpty({\n    ...merge(cloneDeep(newAddedValues), updatedValues),\n    authentication: {\n      ...merge(cloneDeep(newAddedAuthValues), updatedAuthValues),\n    },\n  });\n\n  try {\n    if (!allFormValues?.source?.id) {\n      throw 'Missing source id';\n    }\n\n    const startDate = new Date();\n    const sourceId = allFormValues.source.id;\n    let endpointId = allFormValues?.endpoint?.id;\n\n    const promises = [];\n\n    if (filteredValues.source && !isEmpty(filteredValues.source)) {\n      promises.push(getSourcesApi().updateSource(sourceId, filteredValues.source));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    const hasModifiedEndpoint = filteredValues.endpoint && !isEmpty(filteredValues.endpoint);\n    const hasModifiedUrl = filteredValues.url && !isEmpty(filteredValues.url);\n\n    if (hasModifiedEndpoint || hasModifiedUrl) {\n      const { scheme, host, port, path } = urlOrHost(filteredValues);\n\n      const endPointPort = parseInt(port, 10);\n\n      const endpointData = removeEmpty({\n        ...filteredValues.endpoint,\n        scheme,\n        host,\n        port: isNaN(endPointPort) ? undefined : endPointPort,\n        path,\n      });\n\n      if (endpointId) {\n        promises.push(getSourcesApi().updateEndpoint(endpointId, endpointData));\n      } else {\n        const createEndpointData = {\n          ...endpointData,\n          default: true,\n          source_id: sourceId,\n        };\n\n        promises.push(getSourcesApi().createEndpoint(createEndpointData));\n      }\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    if (filteredValues.application?.application_type_id) {\n      const applicationData = {\n        ...filteredValues.application,\n        source_id: sourceId,\n      };\n\n      promises.push(doCreateApplication(applicationData));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    const [_sourceDataOut, endpointDataOut, applicationDataOut] = await Promise.all(promises);\n\n    let authenticationDataOut;\n\n    if (\n      filteredValues.authentication &&\n      !isEmpty(filteredValues.authentication) &&\n      filteredValues.authentication.authtype !== emptyAuthType.type\n    ) {\n      if (selectedAuthId) {\n        authenticationDataOut = await getSourcesApi().updateAuthentication(selectedAuthId, filteredValues.authentication);\n      } else {\n        const authenticationData = {\n          ...filteredValues.authentication,\n          resource_id: endpointDataOut?.id || applicationDataOut?.id,\n          resource_type: endpointDataOut?.id ? 'Endpoint' : 'Application',\n          source_id: sourceId,\n        };\n\n        authenticationDataOut = await getSourcesApi().createAuthentication(authenticationData);\n      }\n    }\n\n    appId = applicationDataOut?.id;\n\n    const authenticationId = selectedAuthId || authenticationDataOut?.id;\n\n    if (applicationDataOut?.id && authenticationId) {\n      const authAppData = {\n        application_id: applicationDataOut.id,\n        authentication_id: authenticationId,\n      };\n\n      await getSourcesApi().createAuthApp(authAppData);\n    }\n\n    let endpoint;\n    if (endpointId) {\n      endpoint = await checkAppAvailability(endpointId, undefined, undefined, 'getEndpoint', startDate);\n    }\n\n    if (applicationDataOut) {\n      const timeout = timeoutedApps(appTypes).includes(applicationDataOut.application_type_id) ? 10000 : 0;\n      const app = await checkAppAvailability(applicationDataOut.id, timeout);\n\n      return { id: app.id, applications: [app], ...(endpoint && { endpoint: [endpoint] }) };\n    }\n\n    return {};\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    if (appId) {\n      await getSourcesApi().deleteApplication(appId);\n    }\n\n    const errorMessage = await handleError(error);\n    throw errorMessage;\n  }\n};\n","export const initialState = {\n  state: 'loading',\n  error: '',\n  values: {},\n  authenticationsValues: [],\n  sourceAppsLength: 0,\n  initialValues: {},\n  isCancelling: false,\n};\n\nconst reducer = (state, { type, length, authenticationsValues, initialValues, error, values, data, formApi }) => {\n  switch (type) {\n    case 'setSourceAppslength':\n      return {\n        ...state,\n        sourceAppsLength: length,\n      };\n    case 'loadAuthentications':\n      return {\n        ...state,\n        authenticationsValues,\n        initialValues,\n        values: {},\n        state: state.state === 'loading' ? 'wizard' : state.state,\n      };\n    case 'loadWithoutAuthentications':\n      return {\n        ...state,\n        initialValues,\n        values: {},\n        state: state.state === 'loading' ? 'wizard' : state.state,\n      };\n    case 'reset':\n      return {\n        ...state,\n        state: 'wizard',\n      };\n    case 'submit':\n      return {\n        ...state,\n        values,\n        formApi,\n        state: 'submitting',\n      };\n    case 'finish':\n      return {\n        ...state,\n        state: 'finished',\n        data,\n      };\n    case 'error':\n      return {\n        ...state,\n        state: 'errored',\n        error,\n      };\n    case 'toggleCancelling':\n      return {\n        ...state,\n        isCancelling: !state.isCancelling,\n        ...(values && { values }),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { useReducer, useEffect, useRef } from 'react';\nimport { useHistory, Link, useParams, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport isEmpty from 'lodash/isEmpty';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\n\nimport { loadEntities } from '../../redux/sources/actions';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport createSchema from './AddApplicationSchema';\nimport WizardBody from './WizardBody';\n\nimport { getSourcesApi } from '../../api/entities';\n\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { endpointToUrl } from '../../views/formatters';\nimport { routes, replaceRouteId } from '../../Routes';\n\nimport { doAttachApp } from '../../api/doAttachApp';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nimport reducer, { initialState } from './reducer';\nimport { Button, Text } from '@patternfly/react-core';\n\nimport removeAppSubmit from './removeAppSubmit';\nimport { diff } from 'deep-object-diff';\nimport LoadingStep from '../steps/LoadingStep';\nimport ErroredStep from '../steps/ErroredStep';\nimport AmazonFinishedStep from '../steps/AmazonFinishedStep';\nimport FinishedStep from '../steps/FinishedStep';\nimport TimeoutStep from '../steps/TimeoutStep';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport filterApps from '../../utilities/filterApps';\nimport computeSourceError from '../../utilities/computeSourceError';\nimport CloseModal from '../CloseModal';\n\nexport const onSubmit = (\n  values,\n  formApi,\n  authenticationInitialValues,\n  dispatch,\n  setState,\n  initialValues,\n  appTypes,\n  setSelectedApp\n) => {\n  setState({ type: 'submit', values, formApi });\n\n  return doAttachApp(values, formApi, authenticationInitialValues, initialValues, appTypes)\n    .then(async (data) => {\n      checkSourceStatus(initialValues.source.id);\n      await dispatch(loadEntities());\n      setSelectedApp({ values: { application: null } });\n      return setState({ type: 'finish', data });\n    })\n    .catch((error) =>\n      setState({\n        type: 'error',\n        error,\n      })\n    );\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst AddApplication = () => {\n  const intl = useIntl();\n  const history = useHistory();\n  const selectedApp = useRef();\n  const saveSelectedApp = ({ values: { application } }) => (selectedApp.current = application);\n  const { app_type_id } = useParams();\n\n  const loaded = useIsLoaded();\n\n  const { appTypes, sourceTypesLoaded, appTypesLoaded, sourceTypes } = useSelector(({ sources }) => sources, shallowEqual);\n\n  const source = useSource();\n\n  const dispatch = useDispatch();\n\n  const [state, setState] = useReducer(reducer, initialState);\n\n  const container = useRef(document.createElement('div'));\n\n  const applicationType = appTypes.find(({ id }) => id === app_type_id);\n\n  const removeApp = () => {\n    setState({ type: 'reset' });\n\n    return removeAppSubmit(\n      {\n        id: state.data?.id,\n        display_name: appTypes.find(({ id }) => id === state.data?.application_type_id)?.display_name,\n      },\n      intl,\n      undefined,\n      dispatch,\n      source\n    );\n  };\n\n  useEffect(() => {\n    if (source) {\n      // When app is only removed, there is no need to reload values\n      const removeAppAction = state.sourceAppsLength >= source.applications.length && state.sourceAppsLength > 0;\n\n      setState({\n        type: 'setSourceAppslength',\n        length: source.applications.length,\n      });\n\n      if (!removeAppAction) {\n        if (source.endpoints && source.endpoints[0]) {\n          getSourcesApi()\n            .listEndpointAuthentications(source.endpoints[0].id)\n            .then(({ data }) =>\n              setState({\n                type: 'loadAuthentications',\n                authenticationsValues: data,\n                initialValues: {\n                  source,\n                  endpoint: source.endpoints[0],\n                  url: endpointToUrl(source.endpoints[0]),\n                  application: selectedApp.current,\n                },\n                values: {},\n              })\n            );\n        } else {\n          setState({\n            type: 'loadWithoutAuthentications',\n            initialValues: { source, application: selectedApp.current },\n            values: {},\n          });\n        }\n      }\n    }\n  }, [source]);\n\n  const goToSources = () => history.push(replaceRouteId(routes.sourcesDetail.path, source.id));\n\n  const title = intl.formatMessage(\n    {\n      id: 'sources.addApplicationNameTitle',\n      defaultMessage: 'Connect {appName}',\n    },\n    {\n      appName: applicationType?.display_name || 'application',\n    }\n  );\n  const description = intl.formatMessage(\n    {\n      id: 'sources.addApplicationNameDescription',\n      defaultMessage: 'Configure {appName} for this source.',\n    },\n    {\n      appName: applicationType?.display_name || 'application',\n    }\n  );\n\n  if ((!appTypesLoaded || !sourceTypesLoaded || !loaded || state.state === 'loading') && state.state !== 'submitting') {\n    return (\n      <WizardBody\n        goToSources={goToSources}\n        title={title}\n        description={description}\n        step={\n          <LoadingStep\n            customText={intl.formatMessage({\n              id: 'sources.loading',\n              defaultMessage: 'Loading, please wait.',\n            })}\n            cancelTitle={intl.formatMessage({\n              id: 'sources.close',\n              defaultMessage: 'Close',\n            })}\n            onClose={goToSources}\n          />\n        }\n      />\n    );\n  }\n\n  const onSubmitWrapper = (values, formApi) =>\n    onSubmit(values, formApi, state.authenticationsValues, dispatch, setState, state.initialValues, appTypes, saveSelectedApp);\n\n  if (state.state === 'submitting') {\n    return (\n      <WizardBody\n        title={title}\n        description={description}\n        goToSources={goToSources}\n        step={\n          <LoadingStep\n            cancelTitle={intl.formatMessage({\n              id: 'sources.close',\n              defaultMessage: 'Close',\n            })}\n            onClose={goToSources}\n            customText={intl.formatMessage({\n              id: 'wizard.loadingText',\n              defaultMessage: 'Validating credentials',\n            })}\n            description={intl.formatMessage({\n              id: 'wizard.loadingDescription',\n              defaultMessage:\n                'This could take a minute. If you prefer not to wait, close this dialog and the process will continue.',\n            })}\n          />\n        }\n      />\n    );\n  }\n\n  const onReset = () => setState({ type: 'reset' });\n\n  const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n\n  if (state.state !== 'wizard') {\n    let shownStep;\n\n    if (state.state !== 'finished') {\n      shownStep = (\n        <ErroredStep\n          onRetry={onReset}\n          onClose={goToSources}\n          returnButtonTitle={intl.formatMessage({\n            id: 'sources.retry',\n            defaultMessage: 'Retry',\n          })}\n          primaryAction={() => onSubmitWrapper(state.values, state.formApi)}\n          secondaryActions={\n            <Text\n              component=\"a\"\n              target=\"_blank\"\n              href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n              rel=\"noopener noreferrer\"\n            >\n              {intl.formatMessage({\n                id: 'wizard.openTicket',\n                defaultMessage: 'Open a support case',\n              })}\n            </Text>\n          }\n        />\n      );\n    } else {\n      switch (computeSourceStatus(state.data)) {\n        default:\n          if (sourceType.name === 'amazon') {\n            shownStep = <AmazonFinishedStep onClose={goToSources} />;\n          } else {\n            shownStep = (\n              <FinishedStep\n                title={intl.formatMessage({\n                  id: 'sources.configurationSuccessful',\n                  defaultMessage: 'Configuration successful',\n                })}\n                hideSourcesButton={true}\n                onClose={goToSources}\n                returnButtonTitle={intl.formatMessage({\n                  id: 'sources.exit',\n                  defaultMessage: 'Exit',\n                })}\n                successfulMessage={intl.formatMessage({\n                  id: 'sources.successAddApp',\n                  defaultMessage: 'Your application was successfully added.',\n                })}\n              />\n            );\n          }\n\n          break;\n        case 'unavailable':\n          shownStep = (\n            <ErroredStep\n              onRetry={onReset}\n              onClose={goToSources}\n              message={computeSourceError(state.data, intl)}\n              title={intl.formatMessage({\n                id: 'sources.configurationSuccessful',\n                defaultMessage: 'Configuration unsuccessful',\n              })}\n              secondaryActions={\n                <Button variant=\"link\" onClick={removeApp}>\n                  {intl.formatMessage({\n                    id: 'wizard.removeApp',\n                    defaultMessage: 'Remove application',\n                  })}\n                </Button>\n              }\n              Component={() => (\n                <Link to={replaceRouteId(routes.sourcesDetail.path, source.id)}>\n                  <Button variant=\"primary\" className=\"pf-u-mt-xl\">\n                    {intl.formatMessage({\n                      id: 'wizard.editSource',\n                      defaultMessage: 'Edit source',\n                    })}\n                  </Button>\n                </Link>\n              )}\n            />\n          );\n          break;\n        case 'timeout':\n          shownStep = (\n            <TimeoutStep\n              returnButtonTitle={intl.formatMessage({\n                id: 'sources.exit',\n                defaultMessage: 'Exit',\n              })}\n              onClose={goToSources}\n            />\n          );\n          break;\n      }\n    }\n\n    return <WizardBody title={title} description={description} goToSources={goToSources} step={shownStep} />;\n  }\n\n  const sourceTypeName = sourceType && sourceType.name;\n  const filteredAppTypes = appTypes\n    .filter((type) => type.supported_source_types.includes(sourceTypeName))\n    .filter(filterApps)\n    .map((type) => ({\n      value: type.id,\n      label: type.display_name,\n    }));\n\n  if (\n    !applicationType ||\n    source.applications.find(({ application_type_id }) => application_type_id === app_type_id) ||\n    !applicationType.supported_source_types.includes(sourceType.name)\n  ) {\n    return <Redirect to={replaceRouteId(routes.sourcesDetail.path, source.id)} />;\n  }\n\n  const schema = createSchema(\n    intl,\n    sourceType,\n    applicationType,\n    state.authenticationsValues,\n    source,\n    container.current,\n    title,\n    description,\n    appTypes\n  );\n\n  const hasAvailableApps = filteredAppTypes.length > 0;\n  const onSubmitFinal = hasAvailableApps ? onSubmitWrapper : goToSources;\n\n  const onStay = () => {\n    container.current.style.opacity = 1;\n    setState({ type: 'toggleCancelling' });\n  };\n\n  const cancelBeforeExit = (values) => {\n    // eslint-disable-next-line no-unused-vars\n    const { application: _a, ...initialValues } = state.initialValues;\n    // eslint-disable-next-line no-unused-vars\n    const { application: _a1, ...newValues } = values;\n\n    const isChanged = !isEmpty(diff(initialValues, newValues));\n\n    if (isChanged) {\n      container.current.style.opacity = 0;\n      setState({ type: 'toggleCancelling', values });\n    } else {\n      goToSources();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {state.isCancelling && (\n        <CloseModal\n          title={intl.formatMessage({\n            id: 'sources.manageAppsCloseModalTitle',\n            defaultMessage: 'Exit application adding?',\n          })}\n          onStay={onStay}\n          onExit={goToSources}\n        />\n      )}\n      <SourcesFormRenderer\n        schema={schema}\n        showFormControls={false}\n        onSubmit={onSubmitFinal}\n        onCancel={cancelBeforeExit}\n        initialValues={state.initialValues}\n        subscription={{ values: true }}\n        debug={saveSelectedApp}\n        clearedValue={null}\n        FormTemplate={FormTemplateWrapper}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default AddApplication;\n","import { removeApplication } from '../../redux/sources/actions';\n\nconst removeAppSubmit = (app, intl, onCancel, dispatch, source) => {\n  const titleSuccess = intl.formatMessage(\n    {\n      id: 'sources.removeAppWarning',\n      defaultMessage: `{ name } was removed from this source.`,\n    },\n    {\n      name: app.display_name,\n    }\n  );\n  const titleError = intl.formatMessage(\n    {\n      id: 'sources.removeAppError',\n      defaultMessage: `Removing of { name } application from this source was unsuccessful.`,\n    },\n    {\n      name: app.display_name,\n    }\n  );\n  onCancel && onCancel();\n  return dispatch(removeApplication(app.id, source.id, titleSuccess, titleError));\n};\n\nexport default removeAppSubmit;\n"],"sourceRoot":""}