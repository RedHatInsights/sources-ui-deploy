{"version":3,"file":"js/addApplication.27db468b37f02615a46a.js","mappings":"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","sources":["webpack:///./src/components/AddApplication/AuthTypeSetter.js","webpack:///./src/components/AddApplication/schema/selectAuthenticationStep.js","webpack:///./src/components/AddApplication/AddApplicationSchema.js","webpack:///./src/components/AddApplication/schema/generateFirstAuthStep.js","webpack:///./src/components/AddApplication/schema/authenticationSelectionStep.js","webpack:///./src/components/AddApplication/WizardBody.js","webpack:///./src/api/doAttachApp.js","webpack:///./src/components/AddApplication/reducer.js","webpack:///./src/components/AddApplication/AddApplication.js","webpack:///./src/components/AddApplication/removeAppSubmit.js","webpack:///./src/components/CloseModal.js","webpack:///./src/components/steps/AmazonFinishedStep.js","webpack:///./src/components/steps/FinishedStep.js","webpack:///./src/components/steps/TimeoutStep.js","webpack:///./src/utilities/computeSourceError.js","webpack:///./src/utilities/computeSourceStatus.js","webpack:///./src/utilities/computeSourcesUrl.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nexport const innerSetter = ({ formOptions, authenticationValues, selectedAuthentication }) => {\n  if (!selectedAuthentication.startsWith('new-')) {\n    const authentication = authenticationValues.find(({ id }) => id === selectedAuthentication);\n\n    formOptions.change('authentication', authentication);\n  } else {\n    const authtype = selectedAuthentication.replace('new-', '');\n\n    formOptions.change('authentication', { authtype });\n  }\n};\n\nexport const AuthTypeSetter = ({ authenticationValues }) => {\n  const formOptions = useFormApi();\n\n  const selectedAuthentication = formOptions.getState().values.selectedAuthentication;\n\n  const [initialValue, setInitialValue] = useState(selectedAuthentication);\n\n  useEffect(() => {\n    if (initialValue !== selectedAuthentication) {\n      innerSetter({\n        formOptions,\n        authenticationValues,\n        selectedAuthentication,\n      });\n      setInitialValue(undefined);\n    }\n  }, [selectedAuthentication]);\n\n  return null;\n};\n\nAuthTypeSetter.propTypes = {\n  authenticationValues: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { AuthTypeSetter } from '../AuthTypeSetter';\n\nexport const SelectAuthenticationDescription = ({ applicationTypeName, authenticationTypeName }) => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'sources.selectAuthenticationDescription',\n            defaultMessage:\n              'Selected application { applicationTypeName } supports { authenticationTypeName } authentication type. You can use already defined authentication values or define new.',\n          },\n          { applicationTypeName, authenticationTypeName }\n        )}\n      </Text>\n    </TextContent>\n  );\n};\n\nSelectAuthenticationDescription.propTypes = {\n  applicationTypeName: PropTypes.string,\n  authenticationTypeName: PropTypes.string,\n};\n\nexport const generateAuthSelectionOptions = ({\n  authenticationValues,\n  supportedAuthTypeName,\n  supportedAuthType,\n  applicationTypes,\n  source,\n}) =>\n  authenticationValues\n    .filter(({ authtype }) => authtype === supportedAuthType)\n    .map((values) => {\n      const includeUsername = values.username ? `-${values.username}` : '';\n\n      const app = source.applications.find(({ authentications }) => authentications.find(({ id }) => id === values.id));\n      const appType = app && app.application_type_id ? applicationTypes.find(({ id }) => id === app.application_type_id) : '';\n      const includeAppName = appType ? `-${appType.display_name}` : `-unused-${values.id}`;\n      const label = `${supportedAuthTypeName}${includeUsername}${includeAppName}`;\n\n      return {\n        label,\n        value: values.id,\n      };\n    });\n\nconst selectAuthenticationStep = ({ intl, source, authenticationValues, sourceType, app, applicationTypes }) => {\n  const nextStep = ({ values: { authtype, authentication } }) =>\n    `${sourceType.name}-${app.id}-${authtype || authentication?.authtype}`;\n\n  const fields = [\n    {\n      component: 'description',\n      name: 'authtypesetter',\n      Content: AuthTypeSetter,\n      authenticationValues,\n      hideField: true,\n    },\n  ];\n\n  const ifAppSupported = app.supported_source_types.includes(sourceType.name);\n  const isAppAvailable = !source.applications?.find(({ application_type_id }) => application_type_id === app.id);\n\n  if (ifAppSupported && isAppAvailable) {\n    const supportedAuthTypes = get(app, `supported_authentication_types[${sourceType.name}]`, []);\n\n    supportedAuthTypes.forEach((supportedAuthType) => {\n      const hasAvailableAuthentications = authenticationValues.find(({ authtype }) => authtype === supportedAuthType);\n\n      if (hasAvailableAuthentications) {\n        const supportedAuthTypeName = get(sourceType, `schema.authentication`, {}).find(\n          ({ type }) => type === supportedAuthType\n        ).name;\n\n        fields.push({\n          component: componentTypes.SUB_FORM,\n          name: `${app.name}-subform`,\n          fields: [\n            {\n              name: `${app.name}-select-authentication-summary`,\n              component: 'description',\n              Content: SelectAuthenticationDescription,\n              applicationTypeName: app.display_name,\n              authenticationTypeName: supportedAuthTypeName,\n            },\n            {\n              component: componentTypes.RADIO,\n              name: 'selectedAuthentication',\n              label: intl.formatMessage({\n                id: 'sources.selectAuthenticationTitle',\n                defaultMessage: 'Select authentication',\n              }),\n              isRequired: true,\n              validate: [{ type: validatorTypes.REQUIRED }],\n              options: [\n                {\n                  label: intl.formatMessage(\n                    {\n                      id: 'sources.selectAuthenticationradioLabel',\n                      defaultMessage: 'Define new { supportedAuthTypeName }',\n                    },\n                    { supportedAuthTypeName }\n                  ),\n                  value: `new-${supportedAuthType}`,\n                },\n                ...generateAuthSelectionOptions({\n                  authenticationValues,\n                  supportedAuthTypeName,\n                  supportedAuthType,\n                  applicationTypes,\n                  source,\n                }),\n              ],\n            },\n          ],\n        });\n      }\n    });\n  }\n\n  return {\n    name: 'selectAuthentication',\n    title: intl.formatMessage({\n      id: 'sources.selectAuthenticationTitle',\n      defaultMessage: 'Select authentication',\n    }),\n    fields,\n    nextStep,\n  };\n};\n\nexport default selectAuthenticationStep;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\n\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport * as schemaBuilder from '../../components/addSourceWizard/schemaBuilder';\nimport get from 'lodash/get';\n\nimport authenticationSelectionStep from './schema/authenticationSelectionStep';\nimport generateFirstAuthStep from './schema/generateFirstAuthStep';\nimport selectAuthenticationStep from './schema/selectAuthenticationStep';\nimport emptyAuthType from '../addSourceWizard/emptyAuthType';\nexport const ApplicationSummary = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'sources.reviewAddAppSummary',\n          defaultMessage:\n            'Review the information below and click Add to add the application to your source. Use the Back button to make changes.',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n\nexport const hasAlreadySupportedAuthType = (authValues = [], appType, sourceTypeName) =>\n  authValues.find(({ authtype }) => authtype === get(appType, `supported_authentication_types.${sourceTypeName}[0]`));\n\nconst fields = (\n  intl,\n  sourceType,\n  appType,\n  authenticationValues,\n  source,\n  container,\n  title,\n  description,\n  applicationTypes,\n  enableLighthouse\n) => {\n  let authenticationFields = [];\n  let firstStep;\n  let hasMultipleAuthTypes;\n  let hasAlreadyType;\n\n  if (!source.imported) {\n    const appendEndpoint = sourceType.schema.endpoint?.hidden ? sourceType.schema.endpoint?.fields : [];\n    const hasEndpointStep = typeof sourceType.schema.endpoint === 'undefined' ? false : appendEndpoint.length === 0;\n\n    const shouldAddEmpty =\n      !appType.supported_authentication_types[sourceType.name] ||\n      appType.supported_authentication_types[sourceType.name].length === 0;\n\n    const authTypes = shouldAddEmpty ? [emptyAuthType.type] : appType.supported_authentication_types[sourceType.name];\n    const authentications = shouldAddEmpty ? [emptyAuthType] : sourceType.schema.authentication;\n\n    if (appType.supported_source_types.includes(sourceType.name)) {\n      authTypes.forEach((authtype) => {\n        authenticationFields.push(\n          generateFirstAuthStep(sourceType, appType, appendEndpoint, authtype, intl, shouldAddEmpty, enableLighthouse)\n        );\n      });\n    }\n\n    authentications.forEach((auth) => {\n      if (appType.supported_source_types.includes(sourceType.name)) {\n        const appAdditionalSteps = schemaBuilder.getAdditionalSteps(sourceType.name, auth.type, appType.name, enableLighthouse);\n\n        if (appAdditionalSteps.length > 0) {\n          authenticationFields.push(\n            ...schemaBuilder.createAdditionalSteps(\n              appAdditionalSteps,\n              sourceType.name,\n              auth.type,\n              hasEndpointStep,\n              auth.fields,\n              appType.name\n            )\n          );\n        }\n      }\n    });\n\n    if (hasEndpointStep) {\n      authenticationFields.push(schemaBuilder.createEndpointStep(sourceType.schema.endpoint, sourceType.name));\n    }\n\n    firstStep = authenticationFields[0];\n\n    hasMultipleAuthTypes = appType?.supported_authentication_types[sourceType.name]?.length > 1;\n\n    if (hasMultipleAuthTypes) {\n      firstStep = authenticationSelectionStep(sourceType, appType, intl, authenticationValues);\n    }\n\n    hasAlreadyType = hasAlreadySupportedAuthType(authenticationValues, appType, sourceType.name);\n\n    if (hasAlreadyType) {\n      firstStep = selectAuthenticationStep({\n        intl,\n        source,\n        authenticationValues,\n        sourceType,\n        app: appType,\n        applicationTypes,\n      });\n    }\n  }\n\n  const appTypeSetter = {\n    component: componentTypes.TEXT_FIELD,\n    name: 'application.application_type_id',\n    hideField: true,\n    initialValue: appType.id,\n  };\n\n  return {\n    fields: [\n      {\n        component: componentTypes.WIZARD,\n        className: 'sources',\n        name: 'wizard',\n        title,\n        inModal: true,\n        container,\n        showTitles: true,\n        crossroads: ['selectedAuthentication', 'authtype'],\n        description,\n        closeButtonAriaLabel: intl.formatMessage({\n          id: 'wizard.close',\n          defaultMessage: 'Close wizard',\n        }),\n        buttonLabels: {\n          submit: intl.formatMessage({\n            id: 'sources.add',\n            defaultMessage: 'Add',\n          }),\n          cancel: intl.formatMessage({\n            id: 'sources.cancel',\n            defaultMessage: 'Cancel',\n          }),\n          back: intl.formatMessage({\n            id: 'sources.back',\n            defaultMessage: 'Back',\n          }),\n        },\n        fields: [\n          ...(source.imported\n            ? []\n            : [\n                {\n                  ...firstStep,\n                  fields: [...firstStep.fields, appTypeSetter],\n                },\n              ]),\n          {\n            title: intl.formatMessage({\n              id: 'sources.reviewDetails',\n              defaultMessage: 'Review details',\n            }),\n            name: 'summary',\n            fields: [\n              {\n                component: 'description',\n                name: 'description-summary',\n                Content: ApplicationSummary,\n              },\n              {\n                component: 'summary',\n                name: 'summary',\n                sourceTypes: [sourceType],\n                applicationTypes: [appType],\n              },\n              ...(source.imported ? [appTypeSetter] : []),\n            ],\n          },\n          ...(hasAlreadyType || hasMultipleAuthTypes ? authenticationFields : authenticationFields.splice(1)),\n        ],\n      },\n    ],\n  };\n};\n\nexport default fields;\n","import * as schemaBuilder from '../../../components/addSourceWizard/schemaBuilder';\nimport emptyAuthType from '../../addSourceWizard/emptyAuthType';\n\nconst generateFirstAuthStep = (type, appType, endpointFields, authtype, intl, shouldAddEmpty, enableLighthouse) => {\n  let fields = [...endpointFields];\n  const hasEndpoint = type.schema.endpoint && !type.schema.enpoint?.hidden;\n\n  if (schemaBuilder.shouldUseAppAuth(type.name, authtype, appType.name)) {\n    fields = [];\n  }\n\n  const auth = [...type.schema.authentication, shouldAddEmpty ? emptyAuthType : undefined].find(({ type }) => type === authtype);\n\n  const additionalStepName = `${type.name}-${authtype}-${appType.name}-additional-step`;\n\n  const skipEndpoint = schemaBuilder.shouldSkipEndpoint(type.name, authtype, appType.name);\n  const customSteps = schemaBuilder.hasCustomSteps(type.name, authtype, appType.name);\n\n  let nextStep;\n\n  if (schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name, enableLighthouse).length > 0) {\n    nextStep = additionalStepName;\n  } else if (endpointFields.length === 0 && !skipEndpoint && hasEndpoint) {\n    nextStep = `${type.name}-endpoint`;\n  } else {\n    nextStep = 'summary';\n  }\n\n  const additionalIncludesStepKeys = schemaBuilder.getAdditionalStepKeys(type.name, authtype, appType.name);\n  const hasCustomStep = schemaBuilder.shouldSkipSelection(type.name, authtype, appType.name);\n\n  let stepProps = {};\n\n  if (hasCustomStep) {\n    const firstAdditonalStep = schemaBuilder\n      .getAdditionalSteps(type.name, authtype, appType.name, enableLighthouse)\n      .find(({ name }) => !name);\n    const additionalFields = schemaBuilder.getAdditionalStepFields(auth.fields, additionalStepName);\n\n    if (firstAdditonalStep.nextStep) {\n      nextStep = firstAdditonalStep.nextStep;\n    } else if (endpointFields.length === 0 && !skipEndpoint && !customSteps && hasEndpoint) {\n      nextStep = `${type.name}-endpoint`;\n    } else {\n      nextStep = 'summary';\n    }\n\n    stepProps = {\n      ...firstAdditonalStep,\n      fields: [\n        ...fields,\n        ...schemaBuilder.injectAuthFieldsInfo(\n          [...firstAdditonalStep.fields, ...additionalFields],\n          type.name,\n          authtype,\n          appType.name\n        ),\n      ],\n    };\n  }\n\n  return {\n    name: `${type.name}-${appType.id}-${authtype}`,\n    title: intl.formatMessage({\n      id: 'sources.configureCredentials',\n      defaultMessage: 'Configure credentials',\n    }),\n    fields: [\n      ...fields,\n      ...schemaBuilder.getAdditionalAuthFields(type.name, authtype, appType.name),\n      ...schemaBuilder.injectAuthFieldsInfo(\n        schemaBuilder.getNoStepsFields(auth.fields, additionalIncludesStepKeys),\n        type.name,\n        authtype,\n        appType.name\n      ),\n    ],\n    nextStep,\n    ...stepProps,\n  };\n};\n\nexport default generateFirstAuthStep;\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nconst authenticationSelectionStep = (sourceType, appType, intl, authenticationValues) => {\n  const nextStep = ({ values: { application, authtype } }) => {\n    if (authtype) {\n      const hasSupportedAuthType = authenticationValues.find((auth) => auth.authtype === authtype);\n\n      if (hasSupportedAuthType) {\n        return 'selectAuthentication';\n      }\n\n      return `${sourceType.name}-${application && application.application_type_id}-${authtype}`;\n    }\n  };\n\n  return {\n    name: `selectAuthType-${appType.id}`,\n    title: intl.formatMessage({\n      id: 'sources.selectAuthenticationTitle',\n      defaultMessage: 'Select authentication type',\n    }),\n    fields: [\n      {\n        component: componentTypes.RADIO,\n        name: 'authtype',\n        options: appType.supported_authentication_types[sourceType.name].map((type) => ({\n          value: type,\n          label: sourceType.schema.authentication.find((authtype) => authtype.type === type)?.name || 'Unknown type',\n        })),\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n    ],\n    nextStep,\n  };\n};\n\nexport default authenticationSelectionStep;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\n\nconst WizardBodyAttach = ({ step, goToSources, title, description }) => (\n  <Wizard\n    isOpen={true}\n    onClose={goToSources}\n    title={title}\n    description={description}\n    steps={[\n      {\n        name: 'Finish',\n        component: step,\n        isFinishedStep: true,\n      },\n    ]}\n  />\n);\n\nWizardBodyAttach.propTypes = {\n  step: PropTypes.node.isRequired,\n  goToSources: PropTypes.func.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default WizardBodyAttach;\n","import { addedDiff, updatedDiff } from 'deep-object-diff';\n\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { doCreateApplication, getSourcesApi } from './entities';\nimport { urlOrHost } from './doUpdateSource';\nimport { checkAppAvailability } from '../api/getApplicationStatus';\nimport handleError from '../api/handleError';\nimport { timeoutedApps } from '../utilities/constants';\nimport emptyAuthType from '../components/addSourceWizard/emptyAuthType';\n\n// modification of https://stackoverflow.com/a/38340374\nexport const removeEmpty = (obj) => {\n  Object.keys(obj).forEach((key) => {\n    if (obj[key] && typeof obj[key] === 'object') {\n      if (isEmpty(obj[key])) {\n        delete obj[key];\n      } else {\n        removeEmpty(obj[key]);\n      }\n    } else if (typeof obj[key] === 'undefined') {\n      delete obj[key];\n    }\n  });\n  return obj;\n};\n\nexport const doAttachApp = async (values, formApi, authenticationInitialValues, initialValues, appTypes = []) => {\n  let appId;\n\n  const formState = formApi.getState();\n\n  const allFormValues = formState.values;\n\n  const selectedAuthId = allFormValues.authentication?.id;\n\n  const authInitialValues = selectedAuthId && authenticationInitialValues.find(({ id }) => id === selectedAuthId);\n\n  const { authentication, ...valuesWithoutAuth } = values;\n\n  const newAddedValues = addedDiff(initialValues, valuesWithoutAuth);\n  const updatedValues = updatedDiff(initialValues, valuesWithoutAuth);\n  const newAddedAuthValues = addedDiff(authInitialValues, authentication);\n  const updatedAuthValues = updatedDiff(authInitialValues, authentication);\n\n  const filteredValues = removeEmpty({\n    ...merge(cloneDeep(newAddedValues), updatedValues),\n    authentication: {\n      ...merge(cloneDeep(newAddedAuthValues), updatedAuthValues),\n    },\n  });\n\n  try {\n    if (!allFormValues?.source?.id) {\n      throw 'Missing source id';\n    }\n\n    const startDate = new Date();\n    const sourceId = allFormValues.source.id;\n    let endpointId = allFormValues?.endpoint?.id;\n\n    const promises = [];\n\n    if (filteredValues.source && !isEmpty(filteredValues.source)) {\n      promises.push(getSourcesApi().updateSource(sourceId, filteredValues.source));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    const hasModifiedEndpoint = filteredValues.endpoint && !isEmpty(filteredValues.endpoint);\n    const hasModifiedUrl = filteredValues.url && !isEmpty(filteredValues.url);\n\n    if (hasModifiedEndpoint || hasModifiedUrl) {\n      const { scheme, host, port, path } = urlOrHost(filteredValues);\n\n      const endPointPort = parseInt(port, 10);\n\n      const endpointData = removeEmpty({\n        ...filteredValues.endpoint,\n        scheme,\n        host,\n        port: isNaN(endPointPort) ? undefined : endPointPort,\n        path,\n      });\n\n      if (endpointId) {\n        promises.push(getSourcesApi().updateEndpoint(endpointId, endpointData));\n      } else {\n        const createEndpointData = {\n          ...endpointData,\n          default: true,\n          source_id: sourceId,\n        };\n\n        promises.push(getSourcesApi().createEndpoint(createEndpointData));\n      }\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    if (filteredValues.application?.application_type_id) {\n      const applicationData = {\n        ...filteredValues.application,\n        source_id: sourceId,\n      };\n\n      promises.push(doCreateApplication(applicationData));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    const [_sourceDataOut, endpointDataOut, applicationDataOut] = await Promise.all(promises);\n\n    appId = applicationDataOut?.id;\n\n    let authenticationDataOut;\n\n    if (\n      filteredValues.authentication &&\n      !isEmpty(filteredValues.authentication) &&\n      filteredValues.authentication.authtype !== emptyAuthType.type\n    ) {\n      if (selectedAuthId) {\n        authenticationDataOut = await getSourcesApi().updateAuthentication(selectedAuthId, filteredValues.authentication);\n      } else {\n        const authenticationData = {\n          ...filteredValues.authentication,\n          resource_id: endpointDataOut?.id || applicationDataOut?.id,\n          resource_type: endpointDataOut?.id ? 'Endpoint' : 'Application',\n        };\n\n        authenticationDataOut = await getSourcesApi().createAuthentication(authenticationData);\n      }\n    }\n\n    const authenticationId = selectedAuthId || authenticationDataOut?.id;\n\n    if (applicationDataOut?.id && authenticationId) {\n      const authAppData = {\n        application_id: applicationDataOut.id,\n        authentication_id: authenticationId,\n      };\n\n      await getSourcesApi().createAuthApp(authAppData);\n    }\n\n    let endpoint;\n    if (endpointId) {\n      endpoint = await checkAppAvailability(endpointId, undefined, undefined, 'getEndpoint', startDate);\n    }\n\n    if (applicationDataOut) {\n      const timeout = timeoutedApps(appTypes).includes(applicationDataOut.application_type_id) ? 10000 : 0;\n      const app = await checkAppAvailability(applicationDataOut.id, timeout);\n\n      return { id: app.id, applications: [app], ...(endpoint && { endpoint: [endpoint] }) };\n    }\n\n    return {};\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    if (appId) {\n      await getSourcesApi().deleteApplication(appId);\n    }\n\n    const errorMessage = await handleError(error);\n    throw errorMessage;\n  }\n};\n","export const initialState = {\n  state: 'loading',\n  error: '',\n  values: {},\n  authenticationsValues: [],\n  sourceAppsLength: 0,\n  initialValues: {},\n  isCancelling: false,\n};\n\nconst reducer = (state, { type, length, authenticationsValues, initialValues, error, values, data, formApi }) => {\n  switch (type) {\n    case 'setSourceAppslength':\n      return {\n        ...state,\n        sourceAppsLength: length,\n      };\n    case 'loadAuthentications':\n      return {\n        ...state,\n        authenticationsValues,\n        initialValues,\n        values: {},\n        state: state.state === 'loading' ? 'wizard' : state.state,\n      };\n    case 'loadWithoutAuthentications':\n      return {\n        ...state,\n        initialValues,\n        values: {},\n        state: state.state === 'loading' ? 'wizard' : state.state,\n      };\n    case 'reset':\n      return {\n        ...state,\n        state: 'wizard',\n      };\n    case 'submit':\n      return {\n        ...state,\n        values,\n        formApi,\n        state: 'submitting',\n      };\n    case 'finish':\n      return {\n        ...state,\n        state: 'finished',\n        data,\n      };\n    case 'error':\n      return {\n        ...state,\n        state: 'errored',\n        error,\n      };\n    case 'toggleCancelling':\n      return {\n        ...state,\n        isCancelling: !state.isCancelling,\n        ...(values && { values }),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { useEffect, useReducer, useRef } from 'react';\nimport { Link, Redirect, useHistory, useParams } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport isEmpty from 'lodash/isEmpty';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\n\nimport { loadEntities } from '../../redux/sources/actions';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport createSchema from './AddApplicationSchema';\nimport WizardBody from './WizardBody';\n\nimport { getSourcesApi } from '../../api/entities';\n\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { endpointToUrl } from '../../views/formatters';\nimport { replaceRouteId, routes } from '../../Routes';\n\nimport { doAttachApp } from '../../api/doAttachApp';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nimport reducer, { initialState } from './reducer';\nimport { Button, Text } from '@patternfly/react-core';\n\nimport removeAppSubmit from './removeAppSubmit';\nimport { diff } from 'deep-object-diff';\nimport LoadingStep from '../steps/LoadingStep';\nimport ErroredStep from '../steps/ErroredStep';\nimport AmazonFinishedStep from '../steps/AmazonFinishedStep';\nimport FinishedStep from '../steps/FinishedStep';\nimport TimeoutStep from '../steps/TimeoutStep';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport filterApps from '../../utilities/filterApps';\nimport computeSourceError from '../../utilities/computeSourceError';\nimport CloseModal from '../CloseModal';\n\nexport const onSubmit = (\n  values,\n  formApi,\n  authenticationInitialValues,\n  dispatch,\n  setState,\n  initialValues,\n  appTypes,\n  setSelectedApp\n) => {\n  setState({ type: 'submit', values, formApi });\n\n  return doAttachApp(values, formApi, authenticationInitialValues, initialValues, appTypes)\n    .then(async (data) => {\n      checkSourceStatus(initialValues.source.id);\n      await dispatch(loadEntities());\n      setSelectedApp({ values: { application: null } });\n      return setState({ type: 'finish', data });\n    })\n    .catch((error) =>\n      setState({\n        type: 'error',\n        error,\n      })\n    );\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst AddApplication = () => {\n  const intl = useIntl();\n  const history = useHistory();\n  const selectedApp = useRef();\n  const enableLighthouse = useFlag('sources.wizard.lighthouse');\n  const saveSelectedApp = ({ values: { application } }) => (selectedApp.current = application);\n  const { app_type_id } = useParams();\n\n  const loaded = useIsLoaded();\n\n  const { appTypes, sourceTypesLoaded, appTypesLoaded, sourceTypes } = useSelector(({ sources }) => sources, shallowEqual);\n\n  const source = useSource();\n\n  const dispatch = useDispatch();\n\n  const [state, setState] = useReducer(reducer, initialState);\n\n  const container = useRef(document.createElement('div'));\n\n  const applicationType = appTypes.find(({ id }) => id === app_type_id);\n\n  const removeApp = () => {\n    setState({ type: 'reset' });\n\n    return removeAppSubmit(\n      {\n        id: state.data?.id,\n        display_name: appTypes.find(({ id }) => id === state.data?.applications?.[0]?.application_type_id)?.display_name,\n      },\n      intl,\n      undefined,\n      dispatch,\n      source\n    );\n  };\n\n  useEffect(() => {\n    if (source) {\n      // When app is only removed, there is no need to reload values\n      const removeAppAction = state.sourceAppsLength >= source.applications.length && state.sourceAppsLength > 0;\n\n      setState({\n        type: 'setSourceAppslength',\n        length: source.applications.length,\n      });\n\n      if (!removeAppAction) {\n        if (source.endpoints && source.endpoints[0]) {\n          getSourcesApi()\n            .listEndpointAuthentications(source.endpoints[0].id)\n            .then(({ data }) =>\n              setState({\n                type: 'loadAuthentications',\n                authenticationsValues: data,\n                initialValues: {\n                  source,\n                  endpoint: source.endpoints[0],\n                  url: endpointToUrl(source.endpoints[0]),\n                  application: selectedApp.current,\n                },\n                values: {},\n              })\n            );\n        } else {\n          setState({\n            type: 'loadWithoutAuthentications',\n            initialValues: { source, application: selectedApp.current },\n            values: {},\n          });\n        }\n      }\n    }\n  }, [source]);\n\n  const goToSources = () => history.push(replaceRouteId(routes.sourcesDetail.path, source.id));\n\n  const title = intl.formatMessage(\n    {\n      id: 'sources.addApplicationNameTitle',\n      defaultMessage: 'Connect {appName}',\n    },\n    {\n      appName: applicationType?.display_name || 'application',\n    }\n  );\n  const description = intl.formatMessage(\n    {\n      id: 'sources.addApplicationNameDescription',\n      defaultMessage: 'Configure {appName} for this source.',\n    },\n    {\n      appName: applicationType?.display_name || 'application',\n    }\n  );\n\n  if ((!appTypesLoaded || !sourceTypesLoaded || !loaded || state.state === 'loading') && state.state !== 'submitting') {\n    return (\n      <WizardBody\n        goToSources={goToSources}\n        title={title}\n        description={description}\n        step={\n          <LoadingStep\n            customText={intl.formatMessage({\n              id: 'sources.loading',\n              defaultMessage: 'Loading, please wait.',\n            })}\n            cancelTitle={intl.formatMessage({\n              id: 'sources.close',\n              defaultMessage: 'Close',\n            })}\n            onClose={goToSources}\n          />\n        }\n      />\n    );\n  }\n\n  const onSubmitWrapper = (values, formApi) =>\n    onSubmit(values, formApi, state.authenticationsValues, dispatch, setState, state.initialValues, appTypes, saveSelectedApp);\n\n  if (state.state === 'submitting') {\n    return (\n      <WizardBody\n        title={title}\n        description={description}\n        goToSources={goToSources}\n        step={\n          <LoadingStep\n            cancelTitle={intl.formatMessage({\n              id: 'sources.close',\n              defaultMessage: 'Close',\n            })}\n            onClose={goToSources}\n            customText={intl.formatMessage({\n              id: 'wizard.loadingText',\n              defaultMessage: 'Validating credentials',\n            })}\n            description={intl.formatMessage({\n              id: 'wizard.loadingDescription',\n              defaultMessage:\n                'This could take a minute. If you prefer not to wait, close this dialog and the process will continue.',\n            })}\n          />\n        }\n      />\n    );\n  }\n\n  const onReset = () => setState({ type: 'reset' });\n\n  const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n\n  if (state.state !== 'wizard') {\n    let shownStep;\n\n    if (state.state !== 'finished') {\n      shownStep = (\n        <ErroredStep\n          onRetry={onReset}\n          onClose={goToSources}\n          returnButtonTitle={intl.formatMessage({\n            id: 'sources.retry',\n            defaultMessage: 'Retry',\n          })}\n          primaryAction={() => onSubmitWrapper(state.values, state.formApi)}\n          secondaryActions={\n            <Text\n              component=\"a\"\n              target=\"_blank\"\n              href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n              rel=\"noopener noreferrer\"\n            >\n              {intl.formatMessage({\n                id: 'wizard.openTicket',\n                defaultMessage: 'Open a support case',\n              })}\n            </Text>\n          }\n        />\n      );\n    } else {\n      switch (computeSourceStatus(state.data)) {\n        default:\n          if (sourceType.name === 'amazon') {\n            shownStep = <AmazonFinishedStep onClose={goToSources} />;\n          } else {\n            shownStep = (\n              <FinishedStep\n                title={intl.formatMessage({\n                  id: 'sources.configurationSuccessful',\n                  defaultMessage: 'Configuration successful',\n                })}\n                hideSourcesButton={true}\n                onClose={goToSources}\n                returnButtonTitle={intl.formatMessage({\n                  id: 'sources.exit',\n                  defaultMessage: 'Exit',\n                })}\n                successfulMessage={intl.formatMessage({\n                  id: 'sources.successAddApp',\n                  defaultMessage: 'Your application was successfully added.',\n                })}\n              />\n            );\n          }\n\n          break;\n        case 'unavailable':\n          shownStep = (\n            <ErroredStep\n              onRetry={onReset}\n              onClose={goToSources}\n              message={computeSourceError(state.data, intl)}\n              title={intl.formatMessage({\n                id: 'sources.configurationSuccessful',\n                defaultMessage: 'Configuration unsuccessful',\n              })}\n              secondaryActions={\n                <Button variant=\"link\" onClick={removeApp}>\n                  {intl.formatMessage({\n                    id: 'wizard.removeApp',\n                    defaultMessage: 'Remove application',\n                  })}\n                </Button>\n              }\n              Component={() => (\n                <Link to={replaceRouteId(routes.sourcesDetail.path, source.id)}>\n                  <Button variant=\"primary\" className=\"pf-u-mt-xl\">\n                    {intl.formatMessage({\n                      id: 'wizard.editSource',\n                      defaultMessage: 'Edit source',\n                    })}\n                  </Button>\n                </Link>\n              )}\n            />\n          );\n          break;\n        case 'timeout':\n          shownStep = (\n            <TimeoutStep\n              returnButtonTitle={intl.formatMessage({\n                id: 'sources.exit',\n                defaultMessage: 'Exit',\n              })}\n              onClose={goToSources}\n            />\n          );\n          break;\n      }\n    }\n\n    return <WizardBody title={title} description={description} goToSources={goToSources} step={shownStep} />;\n  }\n\n  const sourceTypeName = sourceType && sourceType.name;\n  const filteredAppTypes = appTypes\n    .filter((type) => type.supported_source_types.includes(sourceTypeName))\n    .filter(filterApps)\n    .map((type) => ({\n      value: type.id,\n      label: type.display_name,\n    }));\n\n  if (\n    !applicationType ||\n    source.applications.find(({ application_type_id }) => application_type_id === app_type_id) ||\n    !applicationType.supported_source_types.includes(sourceType.name)\n  ) {\n    return <Redirect to={replaceRouteId(routes.sourcesDetail.path, source.id)} />;\n  }\n\n  const schema = createSchema(\n    intl,\n    sourceType,\n    applicationType,\n    state.authenticationsValues,\n    source,\n    container.current,\n    title,\n    description,\n    appTypes,\n    enableLighthouse\n  );\n\n  const hasAvailableApps = filteredAppTypes.length > 0;\n  const onSubmitFinal = hasAvailableApps ? onSubmitWrapper : goToSources;\n\n  const onStay = () => {\n    container.current.style.opacity = 1;\n    container.current.setAttribute('aria-hidden', 'false');\n\n    setState({ type: 'toggleCancelling' });\n  };\n\n  const cancelBeforeExit = (values) => {\n    // eslint-disable-next-line no-unused-vars\n    const { application: _a, ...initialValues } = state.initialValues;\n    // eslint-disable-next-line no-unused-vars\n    const { application: _a1, ...newValues } = values;\n\n    const isChanged = !isEmpty(diff(initialValues, newValues));\n\n    if (isChanged) {\n      container.current.style.opacity = 0;\n      container.current.setAttribute('aria-hidden', 'true');\n      setState({ type: 'toggleCancelling', values });\n    } else {\n      goToSources();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {state.isCancelling && (\n        <CloseModal\n          title={intl.formatMessage({\n            id: 'sources.manageAppsCloseModalTitle',\n            defaultMessage: 'Exit application adding?',\n          })}\n          onStay={onStay}\n          onExit={goToSources}\n        />\n      )}\n      <SourcesFormRenderer\n        schema={schema}\n        showFormControls={false}\n        onSubmit={onSubmitFinal}\n        onCancel={cancelBeforeExit}\n        initialValues={state.initialValues}\n        subscription={{ values: true }}\n        debug={saveSelectedApp}\n        clearedValue={null}\n        FormTemplate={FormTemplateWrapper}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default AddApplication;\n","import { removeApplication } from '../../redux/sources/actions';\n\nconst removeAppSubmit = (app, intl, onCancel, dispatch, source) => {\n  const titleSuccess = intl.formatMessage(\n    {\n      id: 'sources.removeAppWarning',\n      defaultMessage: `{ name } was removed from this source.`,\n    },\n    {\n      name: app.display_name,\n    }\n  );\n  const titleError = intl.formatMessage(\n    {\n      id: 'sources.removeAppError',\n      defaultMessage: `Removing of { name } application from this source was unsuccessful.`,\n    },\n    {\n      name: app.display_name,\n    }\n  );\n  onCancel && onCancel();\n  return dispatch(removeApplication(app.id, source.id, titleSuccess, titleError));\n};\n\nexport default removeAppSubmit;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { Button, Modal, Title } from '@patternfly/react-core';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\n\nconst CloseModal = ({ onExit, onStay, title, exitTitle, stayTitle, description }) => {\n  const intl = useIntl();\n\n  const isMounted = useRef(false);\n\n  return (\n    <Modal\n      onEscapePress={(e) => {\n        isMounted.current ? onStay(e) : undefined;\n        isMounted.current = true;\n      }}\n      className=\"sources\"\n      variant=\"small\"\n      title={title}\n      aria-label={intl.formatMessage({ id: 'wizard.closeAriaLabel', defaultMessage: 'Close add source wizard' })}\n      header={\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          <ExclamationTriangleIcon size=\"sm\" className=\"src-c-warning-icon\" aria-label=\"Exclamation icon\" />\n          {title}\n        </Title>\n      }\n      isOpen\n      onClose={onStay}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" id=\"on-exit-button\" onClick={onExit}>\n          {exitTitle}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" id=\"on-stay-button\" onClick={onStay}>\n          {stayTitle}\n        </Button>,\n      ]}\n    >\n      {description}\n    </Modal>\n  );\n};\n\nCloseModal.propTypes = {\n  onExit: PropTypes.func.isRequired,\n  onStay: PropTypes.func.isRequired,\n  title: PropTypes.node,\n  exitTitle: PropTypes.node,\n  stayTitle: PropTypes.node,\n  description: PropTypes.node,\n};\n\nCloseModal.defaultProps = {\n  title: <FormattedMessage id=\"wizard.closeTitle\" defaultMessage=\"Exit source creation?\" />,\n  exitTitle: <FormattedMessage id=\"wizard.exitText\" defaultMessage=\"Exit\" />,\n  stayTitle: <FormattedMessage id=\"wizard.stayText\" defaultMessage=\"Stay\" />,\n  description: <FormattedMessage id=\"wizard.closeWarning\" defaultMessage=\"All inputs will be discarded.\" />,\n};\n\nexport default CloseModal;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Alert,\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Grid,\n  GridItem,\n  Text,\n  Title,\n} from '@patternfly/react-core';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\n\nconst AwsLink = ({ href, children }) => (\n  <React.Fragment>\n    <CheckCircleIcon className=\"pf-u-mr-sm\" fill=\"var(--pf-global--success-color--100)\" />\n    <Text component=\"a\" href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      {children}\n    </Text>\n  </React.Fragment>\n);\n\nAwsLink.propTypes = {\n  href: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PREFIX = insights.chrome.isBeta() ? 'beta/' : '';\n\nconst GOLDIMAGES_HREF = 'https://access.redhat.com/management/cloud';\nconst SUBWATCH_HREF = `/${PREFIX}subscriptions`;\nconst INSIGHTS_HREF = `/${PREFIX}insights`;\nconst COST_HREF = `/${PREFIX}cost-management`;\nconst LEARNMORE_HREF = 'https://access.redhat.com/public-cloud/aws';\n\nconst AmazonFinishedStep = ({ onClose }) => {\n  const intl = useIntl();\n\n  return (\n    <Fragment>\n      <Alert\n        variant=\"info\"\n        isInline\n        title={intl.formatMessage({ id: 'aws.alertTitle', defaultMessage: 'Allow 24 hours for full activation' })}\n      >\n        {intl.formatMessage({\n          id: 'aws.alertDescription',\n          defaultMessage: 'Manage connections for this source at any time in Settings > Sources.',\n        })}\n      </Alert>\n      <Bullseye>\n        <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-md\">\n          <EmptyStateIcon icon={CheckCircleIcon} color=\"var(--pf-global--success-color--100)\" className=\"pf-u-mb-0\" />\n          <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n            {intl.formatMessage({ id: 'aws.successTitle', defaultMessage: 'Amazon Web Services connection established' })}\n          </Title>\n          <EmptyStateBody>\n            {intl.formatMessage({\n              id: 'aws.successDescription',\n              defaultMessage: 'Discover the benefits of your connection or exit to manage your new source.',\n            })}\n            <Grid hasGutter className=\"src-c-aws-grid pf-u-mt-md\">\n              <GridItem md=\"6\">\n                <AwsLink href={GOLDIMAGES_HREF}>\n                  {intl.formatMessage({ id: 'aws.goldImages', defaultMessage: 'View enabled AWS gold images' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={SUBWATCH_HREF}>\n                  {intl.formatMessage({ id: 'aws.subwtachUsage', defaultMessage: 'Subscription Watch usage' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={INSIGHTS_HREF}>\n                  {intl.formatMessage({ id: 'aws.insights', defaultMessage: 'Get started with Red Hat Insights' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={COST_HREF}>\n                  {intl.formatMessage({ id: 'aws.costLink', defaultMessage: 'Cost Management reporting' })}\n                </AwsLink>\n              </GridItem>\n            </Grid>\n          </EmptyStateBody>\n          <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n            {intl.formatMessage({ id: 'exit', defaultMessage: 'Exit' })}\n          </Button>\n          <EmptyStateSecondaryActions>\n            <Text component=\"a\" href={LEARNMORE_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n              {intl.formatMessage({ id: 'aws.learnMore', defaultMessage: 'Learn more about this Cloud' })}\n            </Text>\n          </EmptyStateSecondaryActions>\n        </EmptyState>\n      </Bullseye>\n    </Fragment>\n  );\n};\n\nAmazonFinishedStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default AmazonFinishedStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport computeSourcesUrl from '../../utilities/computeSourcesUrl';\n\nconst FinishedStep = ({\n  onClose,\n  successfulMessage,\n  hideSourcesButton,\n  returnButtonTitle,\n  title,\n  linkText,\n  secondaryActions,\n}) => (\n  <Bullseye>\n    <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n      <EmptyStateIcon icon={CheckCircleIcon} color=\"var(--pf-global--success-color--100)\" className=\"pf-u-mb-0\" />\n      <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n        {title}\n      </Title>\n      <EmptyStateBody className=\"src-c-wizard--step-text\">{successfulMessage}</EmptyStateBody>\n      <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n        {returnButtonTitle}\n      </Button>\n      {!hideSourcesButton && (\n        <EmptyStateSecondaryActions>\n          <Button variant=\"link\" component=\"a\" target=\"_blank\" rel=\"noopener noreferrer\" href={computeSourcesUrl()}>\n            {linkText}\n          </Button>\n        </EmptyStateSecondaryActions>\n      )}\n      {secondaryActions && <EmptyStateSecondaryActions>{secondaryActions}</EmptyStateSecondaryActions>}\n    </EmptyState>\n  </Bullseye>\n);\n\nFinishedStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  successfulMessage: PropTypes.node.isRequired,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node.isRequired,\n  title: PropTypes.node,\n  linkText: PropTypes.node,\n  secondaryActions: PropTypes.node,\n};\n\nFinishedStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.succConfiguration\" defaultMessage=\"Configuration successful\" />,\n  linkText: <FormattedMessage id=\"wizard.toSources\" defaultMessage=\"Take me to sources\" />,\n};\n\nexport default FinishedStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\n\nconst TimeoutStep = ({ onClose, returnButtonTitle, title, secondaryActions }) => {\n  const intl = useIntl();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n        <EmptyStateIcon icon={WrenchIcon} color=\"var(--pf-global--Color--200)\" className=\"pf-u-mb-0\" />\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n          {title}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage(\n            {\n              id: 'wizard.uncompleteConfigurationDescription',\n              defaultMessage:\n                'We are still working to confirm credentials and app settings.{newLine}To track progress, check the Status column in the Sources table.',\n            },\n            { newLine: <br key=\"br\" /> }\n          )}\n        </EmptyStateBody>\n        <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n          {returnButtonTitle}\n        </Button>\n        {secondaryActions && <EmptyStateSecondaryActions>{secondaryActions}</EmptyStateSecondaryActions>}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nTimeoutStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  returnButtonTitle: PropTypes.node.isRequired,\n  title: PropTypes.node,\n  secondaryActions: PropTypes.node,\n};\n\nTimeoutStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.uncompleteConfigurationTitle\" defaultMessage=\"Configuration in progress\" />,\n};\n\nexport default TimeoutStep;\n","const computeSourceError = (source, intl) =>\n  source.applications?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  source.endpoint?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  source.authentications?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  intl.formatMessage({ id: 'wizard.unknownError', defaultMessage: 'Unknown error' });\n\nexport default computeSourceError;\n","export const computeSourceStatus = (source) => {\n  const appStatuses =\n    source.applications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const endpointStatuses =\n    source.endpoint?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const authenticationsStatuses =\n    source.authentications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n\n  const statuses = [...appStatuses, ...endpointStatuses, ...authenticationsStatuses];\n\n  if (statuses.includes('unavailable')) {\n    return 'unavailable';\n  }\n\n  if (statuses.length > 0 && statuses.every((status) => status === 'available')) {\n    return 'available';\n  }\n\n  if (statuses.includes('timeout')) {\n    return 'timeout';\n  }\n\n  return 'finished';\n};\n\nexport default computeSourceStatus;\n","const computeSourcesUrl = () => (insights.chrome.isBeta() ? `/beta/settings/sources` : `/settings/sources`);\n\nexport default computeSourcesUrl;\n"],"names":["AuthTypeSetter","authenticationValues","formOptions","useFormApi","selectedAuthentication","getState","values","useState","initialValue","setInitialValue","useEffect","startsWith","authtype","replace","change","authentication","find","id","innerSetter","undefined","propTypes","PropTypes","SelectAuthenticationDescription","applicationTypeName","authenticationTypeName","intl","useIntl","TextContent","Text","component","TextVariants","formatMessage","defaultMessage","generateAuthSelectionOptions","supportedAuthTypeName","supportedAuthType","applicationTypes","source","filter","map","includeUsername","username","app","applications","authentications","appType","application_type_id","includeAppName","display_name","label","value","ApplicationSummary","sourceType","container","title","description","enableLighthouse","firstStep","hasMultipleAuthTypes","hasAlreadyType","authenticationFields","imported","appendEndpoint","schema","endpoint","hidden","fields","hasEndpointStep","length","shouldAddEmpty","supported_authentication_types","name","authTypes","emptyAuthType","supported_source_types","includes","forEach","push","type","endpointFields","hasEndpoint","enpoint","schemaBuilder","nextStep","auth","additionalStepName","skipEndpoint","customSteps","additionalIncludesStepKeys","stepProps","firstAdditonalStep","additionalFields","generateFirstAuthStep","appAdditionalSteps","componentTypes","options","isRequired","validate","validatorTypes","application","authenticationSelectionStep","sourceTypeName","get","hasAlreadySupportedAuthType","Content","hideField","ifAppSupported","isAppAvailable","selectAuthenticationStep","appTypeSetter","className","inModal","showTitles","crossroads","closeButtonAriaLabel","buttonLabels","submit","cancel","back","sourceTypes","splice","WizardBodyAttach","step","goToSources","Wizard","isOpen","onClose","steps","isFinishedStep","removeEmpty","obj","Object","keys","key","isEmpty","doAttachApp","formApi","authenticationInitialValues","initialValues","appTypes","formState","allFormValues","selectedAuthId","authInitialValues","valuesWithoutAuth","newAddedValues","addedDiff","updatedValues","updatedDiff","newAddedAuthValues","updatedAuthValues","filteredValues","merge","cloneDeep","startDate","Date","sourceId","endpointId","promises","getSourcesApi","updateSource","Promise","resolve","hasModifiedEndpoint","hasModifiedUrl","url","urlOrHost","scheme","host","port","path","endPointPort","parseInt","endpointData","isNaN","updateEndpoint","createEndpointData","default","source_id","createEndpoint","applicationData","doCreateApplication","all","endpointDataOut","applicationDataOut","appId","updateAuthentication","authenticationDataOut","authenticationData","resource_id","resource_type","createAuthentication","authenticationId","authAppData","application_id","authentication_id","createAuthApp","checkAppAvailability","timeout","timeoutedApps","console","error","deleteApplication","handleError","initialState","state","authenticationsValues","sourceAppsLength","isCancelling","data","onSubmit","dispatch","setState","setSelectedApp","then","checkSourceStatus","loadEntities","FormTemplateWrapper","props","showFormControls","history","useHistory","selectedApp","useRef","useFlag","saveSelectedApp","current","app_type_id","useParams","loaded","useIsLoaded","useSelector","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","useSource","useDispatch","useReducer","reducer","document","createElement","applicationType","removeAppAction","endpoints","listEndpointAuthentications","endpointToUrl","replaceRouteId","routes","appName","WizardBody","LoadingStep","customText","cancelTitle","onSubmitWrapper","onReset","source_type_id","shownStep","ErroredStep","onRetry","returnButtonTitle","primaryAction","secondaryActions","target","href","rel","computeSourceStatus","AmazonFinishedStep","FinishedStep","hideSourcesButton","successfulMessage","message","computeSourceError","Button","variant","onClick","removeAppSubmit","Component","Link","to","TimeoutStep","filteredAppTypes","filterApps","Redirect","createSchema","onSubmitFinal","CloseModal","onStay","style","opacity","setAttribute","onExit","SourcesFormRenderer","onCancel","newValues","diff","subscription","debug","clearedValue","FormTemplate","titleSuccess","titleError","removeApplication","exitTitle","stayTitle","isMounted","Modal","onEscapePress","e","header","Title","headingLevel","size","actions","defaultProps","AwsLink","children","fill","PREFIX","insights","chrome","isBeta","SUBWATCH_HREF","INSIGHTS_HREF","COST_HREF","Fragment","Alert","isInline","Bullseye","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","CheckCircleIcon","color","EmptyStateBody","Grid","hasGutter","GridItem","md","EmptyStateSecondaryActions","linkText","computeSourcesUrl","WrenchIcon","newLine","Boolean","availability_status_error","appStatuses","availability_status","endpointStatuses","authenticationsStatuses","statuses","every","status"],"sourceRoot":""}