{"version":3,"sources":["webpack:///./src/components/AddApplication/schema/authenticationSelectionStep.js","webpack:///./src/components/AddApplication/schema/generateFirstAuthStep.js","webpack:///./src/components/AddApplication/AuthTypeSetter.js","webpack:///./src/components/AddApplication/schema/selectAuthenticationStep.js","webpack:///./src/components/AddApplication/AddApplicationSchema.js","webpack:///./src/components/AddApplication/WizardBody.js","webpack:///./src/api/doAttachApp.js","webpack:///./src/components/AddApplication/reducer.js","webpack:///./src/components/AddApplication/AddApplication.js","webpack:///./src/components/AddApplication/removeAppSubmit.js"],"names":["authenticationSelectionStep","sourceType","appType","intl","authenticationValues","name","id","title","formatMessage","defaultMessage","fields","component","componentTypes","RADIO","options","supported_authentication_types","map","type","value","label","schema","authentication","find","authtype","isRequired","validate","validatorTypes","REQUIRED","nextStep","values","application","auth","application_type_id","generateFirstAuthStep","endpointFields","schemaBuilder","additionalStepName","skipEndpoint","customSteps","length","additionalIncludesStepKeys","stepProps","firstAdditonalStep","additionalFields","AuthTypeSetter","formOptions","useFormApi","selectedAuthentication","getState","useState","initialValue","setInitialValue","useEffect","startsWith","replace","change","innerSetter","undefined","propTypes","PropTypes","arrayOf","object","SelectAuthenticationDescription","applicationTypeName","authenticationTypeName","useIntl","TextContent","Text","TextVariants","p","string","generateAuthSelectionOptions","supportedAuthTypeName","supportedAuthType","applicationTypes","source","filter","includeUsername","username","app","applications","authentications","includeAppName","display_name","selectAuthenticationStep","Content","hideField","ifAppSupported","supported_source_types","includes","isAppAvailable","get","forEach","push","SUB_FORM","ApplicationSummary","container","description","firstStep","hasMultipleAuthTypes","hasAlreadyType","authenticationFields","imported","appendEndpoint","endpoint","hidden","hasEndpointStep","appAdditionalSteps","authValues","sourceTypeName","hasAlreadySupportedAuthType","appTypeSetter","TEXT_FIELD","WIZARD","inModal","showTitles","crossroads","buttonLabels","submit","cancel","back","sourceTypes","splice","WizardBodyAttach","step","goToSources","Wizard","isOpen","onClose","steps","isFinishedStep","node","func","removeEmpty","obj","Object","keys","key","isEmpty","doAttachApp","formApi","authenticationInitialValues","initialValues","a","appTypes","formState","allFormValues","selectedAuthId","authInitialValues","valuesWithoutAuth","newAddedValues","addedDiff","updatedValues","updatedDiff","newAddedAuthValues","updatedAuthValues","filteredValues","merge","cloneDeep","startDate","Date","sourceId","endpointId","promises","getSourcesApi","updateSource","Promise","resolve","hasModifiedEndpoint","hasModifiedUrl","url","urlOrHost","scheme","host","port","path","endPointPort","parseInt","endpointData","isNaN","updateEndpoint","createEndpointData","default","source_id","createEndpoint","applicationData","doCreateApplication","all","endpointDataOut","applicationDataOut","updateAuthentication","authenticationDataOut","authenticationData","resource_id","resource_type","createAuthentication","appId","authenticationId","authAppData","application_id","authentication_id","createAuthApp","checkAppAvailability","timeout","timeoutedApps","console","error","deleteApplication","handleError","initialState","state","authenticationsValues","sourceAppsLength","isCancelling","reducer","data","onSubmit","dispatch","setState","setSelectedApp","then","checkSourceStatus","loadEntities","FormTemplateWrapper","props","showFormControls","AddApplication","history","useHistory","selectedApp","useRef","saveSelectedApp","current","app_type_id","useParams","loaded","useIsLoaded","useSelector","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","useSource","useDispatch","useReducer","document","createElement","applicationType","removeAppAction","endpoints","listEndpointAuthentications","endpointToUrl","replaceRouteId","routes","sourcesDetail","appName","WizardBody","customText","cancelTitle","onSubmitWrapper","onReset","source_type_id","shownStep","onRetry","returnButtonTitle","primaryAction","secondaryActions","target","href","rel","computeSourceStatus","hideSourcesButton","successfulMessage","message","availability_status_error","Button","variant","onClick","removeAppSubmit","Component","to","className","filteredAppTypes","filterApps","createSchema","onSubmitFinal","Fragment","onStay","onExit","SourcesFormRenderer","onCancel","newValues","diff","subscription","debug","clearedValue","FormTemplate","titleSuccess","titleError","removeApplication"],"mappings":"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","file":"js/addApplication.a9fdc7a8a7628128ca26.js","sourcesContent":["import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nconst authenticationSelectionStep = (sourceType, appType, intl, authenticationValues) => {\n  const nextStep = ({ values: { application, authtype } }) => {\n    if (authtype) {\n      const hasSupportedAuthType = authenticationValues.find((auth) => auth.authtype === authtype);\n\n      if (hasSupportedAuthType) {\n        return 'selectAuthentication';\n      }\n\n      return `${sourceType.name}-${application && application.application_type_id}-${authtype}`;\n    }\n  };\n\n  return {\n    name: `selectAuthType-${appType.id}`,\n    title: intl.formatMessage({\n      id: 'sources.selectAuthenticationTitle',\n      defaultMessage: 'Select authentication type',\n    }),\n    fields: [\n      {\n        component: componentTypes.RADIO,\n        name: 'authtype',\n        options: appType.supported_authentication_types[sourceType.name].map((type) => ({\n          value: type,\n          label: sourceType.schema.authentication.find((authtype) => authtype.type === type)?.name || 'Unknown type',\n        })),\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n    ],\n    nextStep,\n  };\n};\n\nexport default authenticationSelectionStep;\n","import * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\n\nconst generateFirstAuthStep = (type, appType, endpointFields, authtype, intl) => {\n  let fields = [...endpointFields];\n\n  if (schemaBuilder.shouldUseAppAuth(type.name, authtype, appType.name)) {\n    fields = [];\n  }\n\n  const auth = type.schema.authentication.find(({ type }) => type === authtype);\n\n  const additionalStepName = `${type.name}-${authtype}-${appType.name}-additional-step`;\n\n  const skipEndpoint = schemaBuilder.shouldSkipEndpoint(type.name, authtype, appType.name);\n  const customSteps = schemaBuilder.hasCustomSteps(type.name, authtype, appType.name);\n\n  let nextStep;\n\n  if (schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).length > 0) {\n    nextStep = additionalStepName;\n  } else if (endpointFields.length === 0 && !skipEndpoint) {\n    nextStep = `${type.name}-endpoint`;\n  } else {\n    nextStep = 'summary';\n  }\n\n  const additionalIncludesStepKeys = schemaBuilder.getAdditionalStepKeys(type.name, authtype, appType.name);\n  const hasCustomStep = schemaBuilder.shouldSkipSelection(type.name, authtype, appType.name);\n\n  let stepProps = {};\n\n  if (hasCustomStep) {\n    const firstAdditonalStep = schemaBuilder.getAdditionalSteps(type.name, authtype, appType.name).find(({ name }) => !name);\n    const additionalFields = schemaBuilder.getAdditionalStepFields(auth.fields, additionalStepName);\n\n    if (firstAdditonalStep.nextStep) {\n      nextStep = firstAdditonalStep.nextStep;\n    } else if (endpointFields.length === 0 && !skipEndpoint && !customSteps) {\n      nextStep = `${type.name}-endpoint`;\n    } else {\n      nextStep = 'summary';\n    }\n\n    stepProps = {\n      ...firstAdditonalStep,\n      fields: [\n        ...fields,\n        ...schemaBuilder.injectAuthFieldsInfo(\n          [...firstAdditonalStep.fields, ...additionalFields],\n          type.name,\n          authtype,\n          appType.name\n        ),\n      ],\n    };\n  }\n\n  return {\n    name: `${type.name}-${appType.id}-${authtype}`,\n    title: intl.formatMessage({\n      id: 'sources.configureCredentials',\n      defaultMessage: 'Configure credentials',\n    }),\n    fields: [\n      ...fields,\n      ...schemaBuilder.getAdditionalAuthFields(type.name, authtype, appType.name),\n      ...schemaBuilder.injectAuthFieldsInfo(\n        schemaBuilder.getNoStepsFields(auth.fields, additionalIncludesStepKeys),\n        type.name,\n        authtype,\n        appType.name\n      ),\n    ],\n    nextStep,\n    ...stepProps,\n  };\n};\n\nexport default generateFirstAuthStep;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const innerSetter = ({ formOptions, authenticationValues, selectedAuthentication }) => {\n  if (!selectedAuthentication.startsWith('new-')) {\n    const authentication = authenticationValues.find(({ id }) => id === selectedAuthentication);\n\n    formOptions.change('authentication', authentication);\n  } else {\n    const authtype = selectedAuthentication.replace('new-', '');\n\n    formOptions.change('authentication', { authtype });\n  }\n};\n\nexport const AuthTypeSetter = ({ authenticationValues }) => {\n  const formOptions = useFormApi();\n\n  const selectedAuthentication = formOptions.getState().values.selectedAuthentication;\n\n  const [initialValue, setInitialValue] = useState(selectedAuthentication);\n\n  useEffect(() => {\n    if (initialValue !== selectedAuthentication) {\n      innerSetter({\n        formOptions,\n        authenticationValues,\n        selectedAuthentication,\n      });\n      setInitialValue(undefined);\n    }\n  }, [selectedAuthentication]);\n\n  return null;\n};\n\nAuthTypeSetter.propTypes = {\n  authenticationValues: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { AuthTypeSetter } from '../AuthTypeSetter';\n\nexport const SelectAuthenticationDescription = ({ applicationTypeName, authenticationTypeName }) => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage(\n          {\n            id: 'sources.selectAuthenticationDescription',\n            defaultMessage:\n              'Selected application { applicationTypeName } supports { authenticationTypeName } authentication type. You can use already defined authentication values or define new.',\n          },\n          { applicationTypeName, authenticationTypeName }\n        )}\n      </Text>\n    </TextContent>\n  );\n};\n\nSelectAuthenticationDescription.propTypes = {\n  applicationTypeName: PropTypes.string,\n  authenticationTypeName: PropTypes.string,\n};\n\nexport const generateAuthSelectionOptions = ({\n  authenticationValues,\n  supportedAuthTypeName,\n  supportedAuthType,\n  applicationTypes,\n  source,\n}) =>\n  authenticationValues\n    .filter(({ authtype }) => authtype === supportedAuthType)\n    .map((values) => {\n      const includeUsername = values.username ? `-${values.username}` : '';\n\n      const app = source.applications.find(({ authentications }) => authentications.find(({ id }) => id === values.id));\n      const appType = app && app.application_type_id ? applicationTypes.find(({ id }) => id === app.application_type_id) : '';\n      const includeAppName = appType ? `-${appType.display_name}` : `-unused-${values.id}`;\n      const label = `${supportedAuthTypeName}${includeUsername}${includeAppName}`;\n\n      return {\n        label,\n        value: values.id,\n      };\n    });\n\nconst selectAuthenticationStep = ({ intl, source, authenticationValues, sourceType, app, applicationTypes }) => {\n  const nextStep = ({ values: { authtype, authentication } }) =>\n    `${sourceType.name}-${app.id}-${authtype || authentication?.authtype}`;\n\n  const fields = [\n    {\n      component: 'description',\n      name: 'authtypesetter',\n      Content: AuthTypeSetter,\n      authenticationValues,\n      hideField: true,\n    },\n  ];\n\n  const ifAppSupported = app.supported_source_types.includes(sourceType.name);\n  const isAppAvailable = !source.applications?.find(({ application_type_id }) => application_type_id === app.id);\n\n  if (ifAppSupported && isAppAvailable) {\n    const supportedAuthTypes = get(app, `supported_authentication_types[${sourceType.name}]`, []);\n\n    supportedAuthTypes.forEach((supportedAuthType) => {\n      const hasAvailableAuthentications = authenticationValues.find(({ authtype }) => authtype === supportedAuthType);\n\n      if (hasAvailableAuthentications) {\n        const supportedAuthTypeName = get(sourceType, `schema.authentication`, {}).find(({ type }) => type === supportedAuthType)\n          .name;\n\n        fields.push({\n          component: componentTypes.SUB_FORM,\n          name: `${app.name}-subform`,\n          fields: [\n            {\n              name: `${app.name}-select-authentication-summary`,\n              component: 'description',\n              Content: SelectAuthenticationDescription,\n              applicationTypeName: app.display_name,\n              authenticationTypeName: supportedAuthTypeName,\n            },\n            {\n              component: componentTypes.RADIO,\n              name: 'selectedAuthentication',\n              label: intl.formatMessage({\n                id: 'sources.selectAuthenticationTitle',\n                defaultMessage: 'Select authentication',\n              }),\n              isRequired: true,\n              validate: [{ type: validatorTypes.REQUIRED }],\n              options: [\n                {\n                  label: intl.formatMessage(\n                    {\n                      id: 'sources.selectAuthenticationradioLabel',\n                      defaultMessage: 'Define new { supportedAuthTypeName }',\n                    },\n                    { supportedAuthTypeName }\n                  ),\n                  value: `new-${supportedAuthType}`,\n                },\n                ...generateAuthSelectionOptions({\n                  authenticationValues,\n                  supportedAuthTypeName,\n                  supportedAuthType,\n                  applicationTypes,\n                  source,\n                }),\n              ],\n            },\n          ],\n        });\n      }\n    });\n  }\n\n  return {\n    name: 'selectAuthentication',\n    title: intl.formatMessage({\n      id: 'sources.selectAuthenticationTitle',\n      defaultMessage: 'Select authentication',\n    }),\n    fields,\n    nextStep,\n  };\n};\n\nexport default selectAuthenticationStep;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nimport { useIntl } from 'react-intl';\nimport * as schemaBuilder from '@redhat-cloud-services/frontend-components-sources/cjs/schemaBuilder';\nimport get from 'lodash/get';\n\nimport authenticationSelectionStep from './schema/authenticationSelectionStep';\nimport generateFirstAuthStep from './schema/generateFirstAuthStep';\nimport selectAuthenticationStep from './schema/selectAuthenticationStep';\n\nexport const ApplicationSummary = () => {\n  const intl = useIntl();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.p}>\n        {intl.formatMessage({\n          id: 'sources.reviewAddAppSummary',\n          defaultMessage:\n            'Review the information below and click Add to add the application to your source. Use the Back button to make changes.',\n        })}\n      </Text>\n    </TextContent>\n  );\n};\n\nexport const hasAlreadySupportedAuthType = (authValues = [], appType, sourceTypeName) =>\n  authValues.find(({ authtype }) => authtype === get(appType, `supported_authentication_types.${sourceTypeName}[0]`));\n\nconst fields = (intl, sourceType, appType, authenticationValues, source, container, title, description, applicationTypes) => {\n  let authenticationFields = [];\n  let firstStep;\n  let hasMultipleAuthTypes;\n  let hasAlreadyType;\n\n  if (!source.imported) {\n    const appendEndpoint = sourceType.schema.endpoint.hidden ? sourceType.schema.endpoint.fields : [];\n    const hasEndpointStep = appendEndpoint.length === 0;\n\n    if (appType.supported_source_types.includes(sourceType.name)) {\n      appType.supported_authentication_types[sourceType.name].forEach((authtype) => {\n        authenticationFields.push(generateFirstAuthStep(sourceType, appType, appendEndpoint, authtype, intl));\n      });\n    }\n\n    sourceType.schema.authentication.forEach((auth) => {\n      if (appType.supported_source_types.includes(sourceType.name)) {\n        const appAdditionalSteps = schemaBuilder.getAdditionalSteps(sourceType.name, auth.type, appType.name);\n\n        if (appAdditionalSteps.length > 0) {\n          authenticationFields.push(\n            ...schemaBuilder.createAdditionalSteps(\n              appAdditionalSteps,\n              sourceType.name,\n              auth.type,\n              hasEndpointStep,\n              auth.fields,\n              appType.name\n            )\n          );\n        }\n      }\n    });\n\n    if (hasEndpointStep) {\n      authenticationFields.push(schemaBuilder.createEndpointStep(sourceType.schema.endpoint, sourceType.name));\n    }\n\n    firstStep = authenticationFields[0];\n\n    hasMultipleAuthTypes = appType?.supported_authentication_types[sourceType.name]?.length > 1;\n\n    if (hasMultipleAuthTypes) {\n      firstStep = authenticationSelectionStep(sourceType, appType, intl, authenticationValues);\n    }\n\n    hasAlreadyType = hasAlreadySupportedAuthType(authenticationValues, appType, sourceType.name);\n\n    if (hasAlreadyType) {\n      firstStep = selectAuthenticationStep({\n        intl,\n        source,\n        authenticationValues,\n        sourceType,\n        app: appType,\n        applicationTypes,\n      });\n    }\n  }\n\n  const appTypeSetter = {\n    component: componentTypes.TEXT_FIELD,\n    name: 'application.application_type_id',\n    hideField: true,\n    initialValue: appType.id,\n  };\n\n  return {\n    fields: [\n      {\n        component: componentTypes.WIZARD,\n        name: 'wizard',\n        title,\n        inModal: true,\n        container,\n        showTitles: true,\n        crossroads: ['selectedAuthentication', 'authtype'],\n        description,\n        buttonLabels: {\n          submit: intl.formatMessage({\n            id: 'sources.add',\n            defaultMessage: 'Add',\n          }),\n          cancel: intl.formatMessage({\n            id: 'sources.cancel',\n            defaultMessage: 'Cancel',\n          }),\n          back: intl.formatMessage({\n            id: 'sources.back',\n            defaultMessage: 'Back',\n          }),\n        },\n        fields: [\n          ...(source.imported\n            ? []\n            : [\n                {\n                  ...firstStep,\n                  fields: [...firstStep.fields, appTypeSetter],\n                },\n              ]),\n          {\n            title: intl.formatMessage({\n              id: 'sources.reviewDetails',\n              defaultMessage: 'Review details',\n            }),\n            name: 'summary',\n            fields: [\n              {\n                component: 'description',\n                name: 'description-summary',\n                Content: ApplicationSummary,\n              },\n              {\n                component: 'summary',\n                name: 'summary',\n                sourceTypes: [sourceType],\n                applicationTypes: [appType],\n              },\n              ...(source.imported ? [appTypeSetter] : []),\n            ],\n          },\n          ...(hasAlreadyType || hasMultipleAuthTypes ? authenticationFields : authenticationFields.splice(1)),\n        ],\n      },\n    ],\n  };\n};\n\nexport default fields;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Wizard } from '@patternfly/react-core/dist/js/components/Wizard/Wizard';\n\nconst WizardBodyAttach = ({ step, goToSources, title, description }) => (\n  <Wizard\n    isOpen={true}\n    onClose={goToSources}\n    title={title}\n    description={description}\n    steps={[\n      {\n        name: 'Finish',\n        component: step,\n        isFinishedStep: true,\n      },\n    ]}\n  />\n);\n\nWizardBodyAttach.propTypes = {\n  step: PropTypes.node.isRequired,\n  goToSources: PropTypes.func.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default WizardBodyAttach;\n","import { addedDiff, updatedDiff } from 'deep-object-diff';\nimport { handleError } from '@redhat-cloud-services/frontend-components-sources/cjs/handleError';\nimport { checkAppAvailability } from '@redhat-cloud-services/frontend-components-sources/cjs/getApplicationStatus';\nimport { timeoutedApps } from '@redhat-cloud-services/frontend-components-sources/cjs/constants';\n\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { getSourcesApi, doCreateApplication } from './entities';\nimport { urlOrHost } from './doUpdateSource';\n\n// modification of https://stackoverflow.com/a/38340374\nexport const removeEmpty = (obj) => {\n  Object.keys(obj).forEach((key) => {\n    if (obj[key] && typeof obj[key] === 'object') {\n      if (isEmpty(obj[key])) {\n        delete obj[key];\n      } else {\n        removeEmpty(obj[key]);\n      }\n    } else if (typeof obj[key] === 'undefined') {\n      delete obj[key];\n    }\n  });\n  return obj;\n};\n\nexport const doAttachApp = async (values, formApi, authenticationInitialValues, initialValues, appTypes = []) => {\n  let appId;\n\n  const formState = formApi.getState();\n\n  const allFormValues = formState.values;\n\n  const selectedAuthId = allFormValues.authentication?.id;\n\n  const authInitialValues = selectedAuthId && authenticationInitialValues.find(({ id }) => id === selectedAuthId);\n\n  const { authentication, ...valuesWithoutAuth } = values;\n\n  const newAddedValues = addedDiff(initialValues, valuesWithoutAuth);\n  const updatedValues = updatedDiff(initialValues, valuesWithoutAuth);\n  const newAddedAuthValues = addedDiff(authInitialValues, authentication);\n  const updatedAuthValues = updatedDiff(authInitialValues, authentication);\n\n  const filteredValues = removeEmpty({\n    ...merge(cloneDeep(newAddedValues), updatedValues),\n    authentication: {\n      ...merge(cloneDeep(newAddedAuthValues), updatedAuthValues),\n    },\n  });\n\n  try {\n    if (!allFormValues?.source?.id) {\n      throw 'Missing source id';\n    }\n\n    const startDate = new Date();\n    const sourceId = allFormValues.source.id;\n    let endpointId = allFormValues?.endpoint?.id;\n\n    const promises = [];\n\n    if (filteredValues.source && !isEmpty(filteredValues.source)) {\n      promises.push(getSourcesApi().updateSource(sourceId, filteredValues.source));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    const hasModifiedEndpoint = filteredValues.endpoint && !isEmpty(filteredValues.endpoint);\n    const hasModifiedUrl = filteredValues.url && !isEmpty(filteredValues.url);\n\n    if (hasModifiedEndpoint || hasModifiedUrl) {\n      const { scheme, host, port, path } = urlOrHost(filteredValues);\n\n      const endPointPort = parseInt(port, 10);\n\n      const endpointData = removeEmpty({\n        ...filteredValues.endpoint,\n        scheme,\n        host,\n        port: isNaN(endPointPort) ? undefined : endPointPort,\n        path,\n      });\n\n      if (endpointId) {\n        promises.push(getSourcesApi().updateEndpoint(endpointId, endpointData));\n      } else {\n        const createEndpointData = {\n          ...endpointData,\n          default: true,\n          source_id: sourceId,\n        };\n\n        promises.push(getSourcesApi().createEndpoint(createEndpointData));\n      }\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    if (filteredValues.application?.application_type_id) {\n      const applicationData = {\n        ...filteredValues.application,\n        source_id: sourceId,\n      };\n\n      promises.push(doCreateApplication(applicationData));\n    } else {\n      promises.push(Promise.resolve(undefined));\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    const [_sourceDataOut, endpointDataOut, applicationDataOut] = await Promise.all(promises);\n\n    let authenticationDataOut;\n\n    if (filteredValues.authentication && !isEmpty(filteredValues.authentication)) {\n      if (selectedAuthId) {\n        authenticationDataOut = await getSourcesApi().updateAuthentication(selectedAuthId, filteredValues.authentication);\n      } else {\n        const authenticationData = {\n          ...filteredValues.authentication,\n          resource_id: endpointDataOut?.id || applicationDataOut?.id,\n          resource_type: endpointDataOut?.id ? 'Endpoint' : 'Application',\n          source_id: sourceId,\n        };\n\n        authenticationDataOut = await getSourcesApi().createAuthentication(authenticationData);\n      }\n    }\n\n    appId = applicationDataOut?.id;\n\n    const authenticationId = selectedAuthId || authenticationDataOut?.id;\n\n    if (applicationDataOut?.id && authenticationId) {\n      const authAppData = {\n        application_id: applicationDataOut.id,\n        authentication_id: authenticationId,\n      };\n\n      await getSourcesApi().createAuthApp(authAppData);\n    }\n\n    let endpoint;\n    if (endpointId) {\n      endpoint = await checkAppAvailability(endpointId, undefined, undefined, 'getEndpoint', startDate);\n    }\n\n    if (applicationDataOut) {\n      const timeout = timeoutedApps(appTypes).includes(applicationDataOut.application_type_id) ? 10000 : 0;\n      const app = await checkAppAvailability(applicationDataOut.id, timeout);\n\n      return { id: app.id, applications: [app], ...(endpoint && { endpoint: [endpoint] }) };\n    }\n\n    return {};\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    if (appId) {\n      await getSourcesApi().deleteApplication(appId);\n    }\n\n    const errorMessage = await handleError(error);\n    throw errorMessage;\n  }\n};\n","export const initialState = {\n  state: 'loading',\n  error: '',\n  values: {},\n  authenticationsValues: [],\n  sourceAppsLength: 0,\n  initialValues: {},\n  isCancelling: false,\n};\n\nconst reducer = (state, { type, length, authenticationsValues, initialValues, error, values, data, formApi }) => {\n  switch (type) {\n    case 'setSourceAppslength':\n      return {\n        ...state,\n        sourceAppsLength: length,\n      };\n    case 'loadAuthentications':\n      return {\n        ...state,\n        authenticationsValues,\n        initialValues,\n        values: {},\n        state: state.state === 'loading' ? 'wizard' : state.state,\n      };\n    case 'loadWithoutAuthentications':\n      return {\n        ...state,\n        initialValues,\n        values: {},\n        state: state.state === 'loading' ? 'wizard' : state.state,\n      };\n    case 'reset':\n      return {\n        ...state,\n        state: 'wizard',\n      };\n    case 'submit':\n      return {\n        ...state,\n        values,\n        formApi,\n        state: 'submitting',\n      };\n    case 'finish':\n      return {\n        ...state,\n        state: 'finished',\n        data,\n      };\n    case 'error':\n      return {\n        ...state,\n        state: 'errored',\n        error,\n      };\n    case 'toggleCancelling':\n      return {\n        ...state,\n        isCancelling: !state.isCancelling,\n        ...(values && { values }),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { useReducer, useEffect, useRef } from 'react';\nimport { useHistory, Link, useParams, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport isEmpty from 'lodash/isEmpty';\n\nimport filterApps from '@redhat-cloud-services/frontend-components-sources/cjs/filterApps';\nimport CloseModal from '@redhat-cloud-services/frontend-components-sources/cjs/CloseModal';\nimport LoadingStep from '@redhat-cloud-services/frontend-components-sources/cjs/LoadingStep';\nimport ErroredStep from '@redhat-cloud-services/frontend-components-sources/cjs/ErroredStep';\nimport FinishedStep from '@redhat-cloud-services/frontend-components-sources/cjs/FinishedStep';\nimport TimeoutStep from '@redhat-cloud-services/frontend-components-sources/cjs/TimeoutStep';\nimport computeSourceStatus from '@redhat-cloud-services/frontend-components-sources/cjs/computeSourceStatus';\nimport AmazonFinishedStep from '@redhat-cloud-services/frontend-components-sources/cjs/AmazonFinishedStep';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\n\nimport { loadEntities } from '../../redux/sources/actions';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport createSchema from './AddApplicationSchema';\nimport WizardBody from './WizardBody';\n\nimport { getSourcesApi } from '../../api/entities';\n\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { endpointToUrl } from '../../views/formatters';\nimport { routes, replaceRouteId } from '../../Routes';\n\nimport { doAttachApp } from '../../api/doAttachApp';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nimport reducer, { initialState } from './reducer';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text';\n\nimport removeAppSubmit from './removeAppSubmit';\nimport { diff } from 'deep-object-diff';\n\nexport const onSubmit = (\n  values,\n  formApi,\n  authenticationInitialValues,\n  dispatch,\n  setState,\n  initialValues,\n  appTypes,\n  setSelectedApp\n) => {\n  setState({ type: 'submit', values, formApi });\n\n  return doAttachApp(values, formApi, authenticationInitialValues, initialValues, appTypes)\n    .then(async (data) => {\n      checkSourceStatus(initialValues.source.id);\n      await dispatch(loadEntities());\n      setSelectedApp({ values: { application: null } });\n      return setState({ type: 'finish', data });\n    })\n    .catch((error) =>\n      setState({\n        type: 'error',\n        error,\n      })\n    );\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst AddApplication = () => {\n  const intl = useIntl();\n  const history = useHistory();\n  const selectedApp = useRef();\n  const saveSelectedApp = ({ values: { application } }) => (selectedApp.current = application);\n  const { app_type_id } = useParams();\n\n  const loaded = useIsLoaded();\n\n  const { appTypes, sourceTypesLoaded, appTypesLoaded, sourceTypes } = useSelector(({ sources }) => sources, shallowEqual);\n\n  const source = useSource();\n\n  const dispatch = useDispatch();\n\n  const [state, setState] = useReducer(reducer, initialState);\n\n  const container = useRef(document.createElement('div'));\n\n  const applicationType = appTypes.find(({ id }) => id === app_type_id);\n\n  const removeApp = () => {\n    setState({ type: 'reset' });\n\n    return removeAppSubmit(\n      {\n        id: state.data?.id,\n        display_name: appTypes.find(({ id }) => id === state.data?.application_type_id)?.display_name,\n      },\n      intl,\n      undefined,\n      dispatch,\n      source\n    );\n  };\n\n  useEffect(() => {\n    if (source) {\n      // When app is only removed, there is no need to reload values\n      const removeAppAction = state.sourceAppsLength >= source.applications.length && state.sourceAppsLength > 0;\n\n      setState({\n        type: 'setSourceAppslength',\n        length: source.applications.length,\n      });\n\n      if (!removeAppAction) {\n        if (source.endpoints && source.endpoints[0]) {\n          getSourcesApi()\n            .listEndpointAuthentications(source.endpoints[0].id)\n            .then(({ data }) =>\n              setState({\n                type: 'loadAuthentications',\n                authenticationsValues: data,\n                initialValues: {\n                  source,\n                  endpoint: source.endpoints[0],\n                  url: endpointToUrl(source.endpoints[0]),\n                  application: selectedApp.current,\n                },\n                values: {},\n              })\n            );\n        } else {\n          setState({\n            type: 'loadWithoutAuthentications',\n            initialValues: { source, application: selectedApp.current },\n            values: {},\n          });\n        }\n      }\n    }\n  }, [source]);\n\n  const goToSources = () => history.push(replaceRouteId(routes.sourcesDetail.path, source.id));\n\n  const title = intl.formatMessage(\n    {\n      id: 'sources.addApplicationNameTitle',\n      defaultMessage: 'Connect {appName}',\n    },\n    {\n      appName: applicationType?.display_name || 'application',\n    }\n  );\n  const description = intl.formatMessage(\n    {\n      id: 'sources.addApplicationNameDescription',\n      defaultMessage: 'Configure {appName} for this source.',\n    },\n    {\n      appName: applicationType?.display_name || 'application',\n    }\n  );\n\n  if ((!appTypesLoaded || !sourceTypesLoaded || !loaded || state.state === 'loading') && state.state !== 'submitting') {\n    return (\n      <WizardBody\n        goToSources={goToSources}\n        title={title}\n        description={description}\n        step={\n          <LoadingStep\n            customText={intl.formatMessage({\n              id: 'sources.loading',\n              defaultMessage: 'Loading, please wait.',\n            })}\n            cancelTitle={intl.formatMessage({\n              id: 'sources.close',\n              defaultMessage: 'Close',\n            })}\n            onClose={goToSources}\n          />\n        }\n      />\n    );\n  }\n\n  const onSubmitWrapper = (values, formApi) =>\n    onSubmit(values, formApi, state.authenticationsValues, dispatch, setState, state.initialValues, appTypes, saveSelectedApp);\n\n  if (state.state === 'submitting') {\n    return (\n      <WizardBody\n        title={title}\n        description={description}\n        goToSources={goToSources}\n        step={\n          <LoadingStep\n            cancelTitle={intl.formatMessage({\n              id: 'sources.close',\n              defaultMessage: 'Close',\n            })}\n            onClose={goToSources}\n            customText={intl.formatMessage({\n              id: 'wizard.loadingText',\n              defaultMessage: 'Validating credentials',\n            })}\n            description={intl.formatMessage({\n              id: 'wizard.loadingDescription',\n              defaultMessage:\n                'This could take a minute. If you prefer not to wait, close this dialog and the process will continue.',\n            })}\n          />\n        }\n      />\n    );\n  }\n\n  const onReset = () => setState({ type: 'reset' });\n\n  const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n\n  if (state.state !== 'wizard') {\n    let shownStep;\n\n    if (state.state !== 'finished') {\n      shownStep = (\n        <ErroredStep\n          onRetry={onReset}\n          onClose={goToSources}\n          returnButtonTitle={intl.formatMessage({\n            id: 'sources.retry',\n            defaultMessage: 'Retry',\n          })}\n          primaryAction={() => onSubmitWrapper(state.values, state.formApi)}\n          secondaryActions={\n            <Text\n              component=\"a\"\n              target=\"_blank\"\n              href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n              rel=\"noopener noreferrer\"\n            >\n              {intl.formatMessage({\n                id: 'wizard.openTicket',\n                defaultMessage: 'Open a support case',\n              })}\n            </Text>\n          }\n        />\n      );\n    } else {\n      switch (computeSourceStatus(state.data)) {\n        default:\n          if (sourceType.name === 'amazon') {\n            shownStep = <AmazonFinishedStep onClose={goToSources} />;\n          } else {\n            shownStep = (\n              <FinishedStep\n                title={intl.formatMessage({\n                  id: 'sources.configurationSuccessful',\n                  defaultMessage: 'Configuration successful',\n                })}\n                hideSourcesButton={true}\n                onClose={goToSources}\n                returnButtonTitle={intl.formatMessage({\n                  id: 'sources.exit',\n                  defaultMessage: 'Exit',\n                })}\n                successfulMessage={intl.formatMessage({\n                  id: 'sources.successAddApp',\n                  defaultMessage: 'Your application was successfully added.',\n                })}\n              />\n            );\n          }\n\n          break;\n        case 'unavailable':\n          shownStep = (\n            <ErroredStep\n              onRetry={onReset}\n              onClose={goToSources}\n              message={\n                state.data.applications?.[0]?.availability_status_error ||\n                state.data.endpoint?.[0]?.availability_status_error ||\n                intl.formatMessage({\n                  id: 'wizard.unknownError',\n                  defaultMessage: 'Unknown error',\n                })\n              }\n              title={intl.formatMessage({\n                id: 'sources.configurationSuccessful',\n                defaultMessage: 'Configuration unsuccessful',\n              })}\n              secondaryActions={\n                <Button variant=\"link\" onClick={removeApp}>\n                  {intl.formatMessage({\n                    id: 'wizard.removeApp',\n                    defaultMessage: 'Remove application',\n                  })}\n                </Button>\n              }\n              Component={() => (\n                <Link to={replaceRouteId(routes.sourcesDetail.path, source.id)}>\n                  <Button variant=\"primary\" className=\"pf-u-mt-xl\">\n                    {intl.formatMessage({\n                      id: 'wizard.editSource',\n                      defaultMessage: 'Edit source',\n                    })}\n                  </Button>\n                </Link>\n              )}\n            />\n          );\n          break;\n        case 'timeout':\n          shownStep = (\n            <TimeoutStep\n              returnButtonTitle={intl.formatMessage({\n                id: 'sources.exit',\n                defaultMessage: 'Exit',\n              })}\n              onClose={goToSources}\n            />\n          );\n          break;\n      }\n    }\n\n    return <WizardBody title={title} description={description} goToSources={goToSources} step={shownStep} />;\n  }\n\n  const sourceTypeName = sourceType && sourceType.name;\n  const filteredAppTypes = appTypes\n    .filter((type) => type.supported_source_types.includes(sourceTypeName))\n    .filter(filterApps)\n    .map((type) => ({\n      value: type.id,\n      label: type.display_name,\n    }));\n\n  if (\n    !applicationType ||\n    source.applications.find(({ application_type_id }) => application_type_id === app_type_id) ||\n    !applicationType.supported_source_types.includes(sourceType.name)\n  ) {\n    return <Redirect to={replaceRouteId(routes.sourcesDetail.path, source.id)} />;\n  }\n\n  const schema = createSchema(\n    intl,\n    sourceType,\n    applicationType,\n    state.authenticationsValues,\n    source,\n    container.current,\n    title,\n    description,\n    appTypes\n  );\n\n  const hasAvailableApps = filteredAppTypes.length > 0;\n  const onSubmitFinal = hasAvailableApps ? onSubmitWrapper : goToSources;\n\n  const onStay = () => {\n    container.current.hidden = false;\n    setState({ type: 'toggleCancelling' });\n  };\n\n  const cancelBeforeExit = (values) => {\n    // eslint-disable-next-line no-unused-vars\n    const { application: _a, ...initialValues } = state.initialValues;\n    // eslint-disable-next-line no-unused-vars\n    const { application: _a1, ...newValues } = values;\n\n    const isChanged = !isEmpty(diff(initialValues, newValues));\n\n    if (isChanged) {\n      container.current.hidden = true;\n      setState({ type: 'toggleCancelling', values });\n    } else {\n      goToSources();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <CloseModal\n        title={intl.formatMessage({\n          id: 'sources.manageAppsCloseModalTitle',\n          defaultMessage: 'Exit application adding?',\n        })}\n        isOpen={state.isCancelling}\n        onStay={onStay}\n        onExit={goToSources}\n      />\n      <SourcesFormRenderer\n        schema={schema}\n        showFormControls={false}\n        onSubmit={onSubmitFinal}\n        onCancel={cancelBeforeExit}\n        initialValues={state.initialValues}\n        subscription={{ values: true }}\n        debug={saveSelectedApp}\n        clearedValue={null}\n        FormTemplate={FormTemplateWrapper}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default AddApplication;\n","import { removeApplication } from '../../redux/sources/actions';\n\nconst removeAppSubmit = (app, intl, onCancel, dispatch, source) => {\n  const titleSuccess = intl.formatMessage(\n    {\n      id: 'sources.removeAppWarning',\n      defaultMessage: `{ name } was removed from this source.`,\n    },\n    {\n      name: app.display_name,\n    }\n  );\n  const titleError = intl.formatMessage(\n    {\n      id: 'sources.removeAppError',\n      defaultMessage: `Removing of { name } application from this source was unsuccessful.`,\n    },\n    {\n      name: app.display_name,\n    }\n  );\n  onCancel && onCancel();\n  return dispatch(removeApplication(app.id, source.id, titleSuccess, titleError));\n};\n\nexport default removeAppSubmit;\n"],"sourceRoot":""}