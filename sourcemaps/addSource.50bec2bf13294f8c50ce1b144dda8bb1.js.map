{"version":3,"file":"js/addSource.36d403470ecc956d89e5.js","mappings":"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","sources":["webpack:///./src/components/CloseModal.js","webpack:///./src/components/FormComponents/Authentication.js","webpack:///./src/components/addSourceWizard/SourceAddModal.js","webpack:///./src/components/addSourceWizard/EditLink.js","webpack:///./src/components/addSourceWizard/FinalWizard.js","webpack:///./src/api/createSuperSource.js","webpack:///./src/api/createSource.js","webpack:///./src/components/addSourceWizard/index.js","webpack:///./src/components/steps/AmazonFinishedStep.js","webpack:///./src/components/steps/FinishedStep.js","webpack:///./src/components/steps/TimeoutStep.js","webpack:///./src/utilities/computeSourceError.js","webpack:///./src/utilities/computeSourcesUrl.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { Button, Modal, Title } from '@patternfly/react-core';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\n\nconst CloseModal = ({ onExit, onStay, title, exitTitle, stayTitle, description }) => {\n  const intl = useIntl();\n\n  const isMounted = useRef(false);\n\n  return (\n    <Modal\n      onEscapePress={(e) => {\n        isMounted.current ? onStay(e) : undefined;\n        isMounted.current = true;\n      }}\n      className=\"sources\"\n      variant=\"small\"\n      title={title}\n      aria-label={intl.formatMessage({ id: 'wizard.closeAriaLabel', defaultMessage: 'Close add source wizard' })}\n      header={\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          <ExclamationTriangleIcon size=\"sm\" className=\"src-c-warning-icon\" aria-label=\"Exclamation icon\" />\n          {title}\n        </Title>\n      }\n      isOpen\n      onClose={onStay}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" id=\"on-exit-button\" onClick={onExit}>\n          {exitTitle}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" id=\"on-stay-button\" onClick={onStay}>\n          {stayTitle}\n        </Button>,\n      ]}\n    >\n      {description}\n    </Modal>\n  );\n};\n\nCloseModal.propTypes = {\n  onExit: PropTypes.func.isRequired,\n  onStay: PropTypes.func.isRequired,\n  title: PropTypes.node,\n  exitTitle: PropTypes.node,\n  stayTitle: PropTypes.node,\n  description: PropTypes.node,\n};\n\nCloseModal.defaultProps = {\n  title: <FormattedMessage id=\"wizard.closeTitle\" defaultMessage=\"Exit source creation?\" />,\n  exitTitle: <FormattedMessage id=\"wizard.exitText\" defaultMessage=\"Exit\" />,\n  stayTitle: <FormattedMessage id=\"wizard.stayText\" defaultMessage=\"Stay\" />,\n  description: <FormattedMessage id=\"wizard.closeWarning\" defaultMessage=\"All inputs will be discarded.\" />,\n};\n\nexport default CloseModal;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { useIntl } from 'react-intl';\n\nconst Authentication = (rest) => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  const { authentication } = formOptions.getState().values;\n\n  const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n  const componentProps = {\n    ...rest,\n    ...(authentication && authentication.id\n      ? {\n          isRequired: false,\n          helperText: intl.formatMessage(\n            {\n              id: 'wizard.changeAuthHelper',\n              defaultMessage: 'Changing this resets your current {label}.',\n            },\n            { label: rest.label }\n          ),\n          validate: doNotRequirePassword,\n        }\n      : {}),\n  };\n\n  const Component = componentMapper[componentTypes.TEXT_FIELD];\n\n  return <Component {...componentProps} />;\n};\n\nexport default Authentication;\n","import React, { useEffect, useReducer, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\n\nimport { Wizard } from '@patternfly/react-core';\n\nimport createSchema from './SourceAddSchema';\nimport { doLoadApplicationTypes, doLoadSourceTypes } from '../../api/wizardHelpers';\nimport { wizardDescription, wizardTitle } from './stringConstants';\nimport filterApps, { filterVendorAppTypes } from '../../utilities/filterApps';\nimport filterTypes, { filterVendorTypes } from '../../utilities/filterTypes';\nimport Authentication from '../FormComponents/Authentication';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport LoadingStep from '../steps/LoadingStep';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst initialValues = {\n  schema: {},\n  sourceTypes: [],\n  isLoading: true,\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst SourceAddModal = ({\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  isCancelling,\n  onCancel,\n  values,\n  onSubmit,\n  selectedType,\n  initialWizardState,\n  activeCategory,\n}) => {\n  const enableLighthouse = useFlag('sources.wizard.lighthouse');\n\n  const reducer = (\n    state,\n    {\n      type,\n      sourceTypes,\n      applicationTypes,\n      container,\n      disableAppSelection,\n      intl,\n      selectedType,\n      initialWizardState,\n      activeCategory,\n    }\n  ) => {\n    switch (type) {\n      case 'loaded':\n        return {\n          ...state,\n          schema: createSchema(\n            sourceTypes.filter(filterTypes).filter(filterVendorTypes(activeCategory)),\n            applicationTypes.filter(filterApps).filter(filterVendorAppTypes(sourceTypes, activeCategory)),\n            disableAppSelection,\n            container,\n            intl,\n            selectedType,\n            initialWizardState,\n            activeCategory,\n            enableLighthouse\n          ),\n          isLoading: false,\n          sourceTypes,\n          applicationTypes,\n        };\n    }\n  };\n\n  const [{ schema, sourceTypes: stateSourceTypes, applicationTypes: stateApplicationTypes, isLoading }, dispatch] = useReducer(\n    reducer,\n    initialValues\n  );\n  const isMounted = useRef(false);\n  const container = useRef(document.createElement('div'));\n  const intl = useIntl();\n\n  useEffect(() => {\n    isMounted.current = true;\n\n    const promises = [];\n    if (!sourceTypes) {\n      promises.push(doLoadSourceTypes());\n    }\n\n    if (!applicationTypes) {\n      promises.push(doLoadApplicationTypes());\n    }\n\n    Promise.all(promises).then((data) => {\n      const sourceTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'sourceTypes'));\n      const applicationTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'applicationTypes'));\n\n      if (isMounted.current) {\n        dispatch({\n          type: 'loaded',\n          sourceTypes: sourceTypes || sourceTypesOut.sourceTypes,\n          applicationTypes: applicationTypes || applicationTypesOut.applicationTypes,\n          disableAppSelection,\n          container: container.current,\n          intl,\n          selectedType,\n          initialWizardState,\n          activeCategory,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    container.current.style.opacity = isCancelling ? 0 : 1;\n  }, [isCancelling]);\n\n  if (isLoading) {\n    return (\n      <Wizard\n        className=\"sources\"\n        isOpen={true}\n        onClose={onCancel}\n        title={wizardTitle(activeCategory)}\n        description={wizardDescription(activeCategory)}\n        steps={[\n          {\n            name: 'Loading',\n            component: <LoadingStep onClose={() => onCancel()} />,\n            isFinishedStep: true,\n          },\n        ]}\n      />\n    );\n  }\n\n  return (\n    <SourcesFormRenderer\n      initialValues={{\n        ...values,\n        ...(selectedType && { source_type: selectedType }),\n      }}\n      schema={schema}\n      onSubmit={(values, _formApi, wizardState) => onSubmit(values, stateSourceTypes, wizardState, stateApplicationTypes)}\n      onCancel={onCancel}\n      FormTemplate={FormTemplateWrapper}\n      subscription={{ values: true }}\n      componentMapper={{\n        authentication: Authentication,\n      }}\n    />\n  );\n};\n\nSourceAddModal.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    })\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    })\n  ),\n  values: PropTypes.object,\n  disableAppSelection: PropTypes.bool,\n  isCancelling: PropTypes.bool,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n  activeCategory: PropTypes.string,\n};\n\nSourceAddModal.defaultProps = {\n  values: {},\n  disableAppSelection: false,\n};\n\nexport default SourceAddModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { Button } from '@patternfly/react-core';\nimport computeSourcesUrl from '../../utilities/computeSourcesUrl';\n\nconst EditLink = ({ id }) => {\n  const intl = useIntl();\n  const message = intl.formatMessage({ id: 'wizard.editSource', defaultMessage: 'Edit source' });\n\n  if (insights.chrome.getApp() === 'sources') {\n    return (\n      <Link to={`/sources/detail/${id}`}>\n        <Button variant=\"primary\" className=\"pf-u-mt-xl\">\n          {message}\n        </Button>\n      </Link>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"primary\"\n      className=\"pf-u-mt-xl\"\n      component=\"a\"\n      target=\"_blank\"\n      href={`${computeSourcesUrl()}/detail/${id}`}\n      rel=\"noopener noreferrer\"\n    >\n      {message}\n    </Button>\n  );\n};\n\nEditLink.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default EditLink;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Button, Text, TextContent, Wizard } from '@patternfly/react-core';\n\nimport { wizardDescription, wizardTitle } from './stringConstants';\nimport { getSourcesApi } from '../../api/entities';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport EditLink from './EditLink';\nimport computeSourceError from '../../utilities/computeSourceError';\n\nimport FinishedStep from '../steps/FinishedStep';\nimport LoadingStep from '../steps/LoadingStep';\nimport ErroredStep from '../steps/ErroredStep';\nimport TimeoutStep from '../steps/TimeoutStep';\nimport AmazonFinishedStep from '../steps/AmazonFinishedStep';\n\nconst FinalWizard = ({\n  afterSubmit,\n  afterError,\n  isFinished,\n  isErrored,\n  successfulMessage,\n  hideSourcesButton,\n  returnButtonTitle,\n  reset,\n  createdSource = {},\n  tryAgain,\n  afterSuccess,\n  sourceTypes,\n  activeCategory,\n}) => {\n  const [isDeletingSource, setIsDeleting] = useState();\n  const [isAfterDeletion, setDeleted] = useState();\n\n  const intl = useIntl();\n\n  const removeSource = () => {\n    setIsDeleting(true);\n\n    return getSourcesApi()\n      .deleteSource(createdSource.id)\n      .then(() => {\n        afterSuccess && afterSuccess();\n        setDeleted(true);\n      })\n      .catch(() => setIsDeleting(false));\n  };\n\n  const addAnotherSourceButton = (\n    <Button variant=\"link\" onClick={reset}>\n      {intl.formatMessage({\n        id: 'wizard.addAnotherSource',\n        defaultMessage: 'Add another source',\n      })}\n    </Button>\n  );\n\n  let step;\n  if (isAfterDeletion) {\n    step = (\n      <FinishedStep\n        onClose={afterSubmit}\n        title={intl.formatMessage({ id: 'wizard.removeSourceSuccessTitle', defaultMessage: 'Removing successful' })}\n        successfulMessage={intl.formatMessage({\n          id: 'wizard.removeSourceSuccessDescription',\n          defaultMessage: 'Source was successfully removed.',\n        })}\n        hideSourcesButton={hideSourcesButton}\n        returnButtonTitle={returnButtonTitle}\n        secondaryActions={addAnotherSourceButton}\n      />\n    );\n  } else if (isDeletingSource) {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.removingSource',\n          defaultMessage: 'Removing source',\n        })}\n      />\n    );\n  } else if (isFinished) {\n    switch (computeSourceStatus(createdSource)) {\n      case 'unavailable':\n        step = (\n          <ErroredStep\n            onClose={afterSubmit}\n            secondaryActions={\n              <Button variant=\"link\" onClick={removeSource}>\n                {intl.formatMessage({ id: 'wizard.removeSource', defaultMessage: 'Remove source' })}\n              </Button>\n            }\n            Component={() => <EditLink id={createdSource.id} />}\n            message={computeSourceError(createdSource, intl)}\n            title={intl.formatMessage({ id: 'wizard.configurationUnsuccessful', defaultMessage: 'Configuration unsuccessful' })}\n          />\n        );\n        break;\n      case 'timeout':\n        step = (\n          <TimeoutStep onClose={afterSubmit} returnButtonTitle={returnButtonTitle} secondaryActions={addAnotherSourceButton} />\n        );\n        break;\n      default:\n        if (createdSource.source_type_id === sourceTypes.find(({ name }) => name === 'amazon')?.id) {\n          step = <AmazonFinishedStep onClose={afterSubmit} />;\n        } else {\n          step = (\n            <FinishedStep\n              onClose={afterSubmit}\n              successfulMessage={successfulMessage}\n              hideSourcesButton={hideSourcesButton}\n              returnButtonTitle={returnButtonTitle}\n              secondaryActions={addAnotherSourceButton}\n            />\n          );\n        }\n\n        break;\n    }\n  } else if (isErrored) {\n    step = (\n      <ErroredStep\n        onClose={afterError}\n        primaryAction={tryAgain}\n        secondaryActions={\n          <Text\n            component=\"a\"\n            target=\"_blank\"\n            href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n            rel=\"noopener noreferrer\"\n          >\n            {intl.formatMessage({ id: 'wizard.openTicket', defaultMessage: 'Open a support case' })}\n          </Text>\n        }\n        returnButtonTitle={intl.formatMessage({\n          id: 'wizard.retryText',\n          defaultMessage: 'Retry',\n        })}\n      />\n    );\n  } else {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.loadingText',\n          defaultMessage: 'Validating credentials',\n        })}\n        description={\n          <TextContent>\n            <Text className=\"pf-u-mb-md\">\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-a',\n                defaultMessage:\n                  // eslint-disable-next-line max-len\n                  \"This might take some time. You'll receive a notification if you are still in the Sources application when the process completes. Otherwise, you can check the status in the main sources table at any time.\",\n              })}\n            </Text>\n            <Text>\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-b',\n                defaultMessage: 'In the meantime, you can close this window while the validation process continues.',\n              })}\n            </Text>\n          </TextContent>\n        }\n        onClose={afterError}\n        cancelTitle={intl.formatMessage({ id: 'wizard.close', defaultMessage: 'Close' })}\n      />\n    );\n  }\n\n  return (\n    <Wizard\n      className=\"sources\"\n      isOpen={true}\n      onClose={isFinished ? afterSubmit : afterError}\n      title={wizardTitle(activeCategory)}\n      description={wizardDescription(activeCategory)}\n      steps={[\n        {\n          name: 'Finish',\n          component: step,\n          isFinishedStep: true,\n        },\n      ]}\n    />\n  );\n};\n\nFinalWizard.propTypes = {\n  afterSubmit: PropTypes.func.isRequired,\n  afterError: PropTypes.func.isRequired,\n  isFinished: PropTypes.bool.isRequired,\n  isErrored: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node.isRequired,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node.isRequired,\n  errorMessage: PropTypes.node,\n  reset: PropTypes.func,\n  createdSource: PropTypes.object,\n  tryAgain: PropTypes.func,\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n  activeCategory: PropTypes.string,\n};\n\nexport default FinalWizard;\n","import { getSourcesApi } from './entities';\nimport { checkAppAvailability } from './getApplicationStatus';\nimport handleError from './handleError';\n\nconst createSuperSource = async (formData) => {\n  try {\n    const startDate = new Date();\n\n    const sourceData = await getSourcesApi().bulkCreate({\n      sources: [{ ...formData.source, source_type_name: formData.source_type }],\n      authentications: [{ ...formData.authentication, resource_name: formData.source.name, resource_type: 'source' }],\n      applications: formData.applications.map((appId) => ({\n        application_type_id: appId,\n        source_name: formData.source.name,\n      })),\n    });\n\n    const authenticationDataOut = await checkAppAvailability(\n      sourceData.authentications[0].id,\n      undefined,\n      undefined,\n      'showAuthentication',\n      startDate\n    );\n\n    return {\n      ...sourceData,\n      ...sourceData.sources[0],\n      authentications: [authenticationDataOut],\n    };\n  } catch (error) {\n    const errorMessage = await handleError(error);\n    throw errorMessage;\n  }\n};\n\nexport default createSuperSource;\n","import { handleError } from './handleError';\n\nimport { getSourcesApi } from './entities';\nimport { checkAppAvailability } from './getApplicationStatus';\nimport checkSourceStatus from './checkSourceStatus';\nimport { NO_APPLICATION_VALUE } from '../components/addSourceWizard/stringConstants';\nimport emptyAuthType from '../components/addSourceWizard/emptyAuthType';\n\nexport const parseUrl = (url) => {\n  if (!url) {\n    return {};\n  }\n\n  try {\n    const u = new URL(url);\n    return {\n      scheme: u.protocol.replace(/:$/, ''),\n      host: u.hostname,\n      port: u.port,\n      path: u.pathname,\n    };\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n    return {};\n  }\n};\n\nexport const urlOrHost = (formData) => (formData.url ? parseUrl(formData.url) : formData);\n\nexport const handleErrorWrapper = (sourceId) => async (error) => await handleError(error, sourceId);\n\nexport const doCreateSource = async (formData, timetoutedApps = [], applicationTypes) => {\n  let source;\n  try {\n    const payload = {\n      sources: [{ ...formData.source, source_type_name: formData.source_type }],\n      endpoints: [],\n      authentications: [],\n      applications: [],\n    };\n\n    const hasEndpoint = formData.url || formData.endpoint;\n    if (hasEndpoint) {\n      const { scheme, host, port, path } = urlOrHost(formData);\n\n      const endPointPort = parseInt(port, 10);\n\n      payload.endpoints.push({\n        ...formData.endpoint,\n        default: true,\n        source_name: formData.source.name,\n        scheme,\n        host,\n        port: isNaN(endPointPort) ? undefined : endPointPort,\n        path,\n      });\n    }\n\n    const hasApplication =\n      formData.application?.application_type_id && formData.application?.application_type_id !== NO_APPLICATION_VALUE;\n\n    if (hasApplication) {\n      payload.applications.push({\n        ...formData.application,\n        source_name: formData.source.name,\n      });\n    }\n\n    if (formData.authentication && formData.authentication.authtype !== emptyAuthType.type) {\n      payload.authentications.push({\n        ...formData.authentication,\n        resource_type: hasEndpoint ? 'endpoint' : hasApplication ? 'application' : 'source',\n        resource_name: formData.source.name,\n        ...(hasApplication && {\n          resource_name: applicationTypes?.find(({ id }) => id === formData.application.application_type_id)?.name,\n        }),\n        ...(hasEndpoint && { resource_name: urlOrHost(formData).host }),\n      });\n    }\n\n    const dataOut = await getSourcesApi().bulkCreate(payload);\n\n    source = dataOut.sources?.[0];\n    let app = dataOut.applications?.[0];\n    let endpoint = dataOut.endpoints?.[0];\n    let auth = dataOut.authentications?.[0];\n\n    if (hasEndpoint && hasApplication) {\n      await getSourcesApi().createAuthApp({\n        application_id: app.id,\n        authentication_id: auth.id,\n      });\n    }\n\n    await checkSourceStatus(source.id);\n\n    if (app) {\n      const timeout = timetoutedApps.includes(app.application_type_id) ? 10000 : 0;\n      app = await checkAppAvailability(app.id, timeout);\n    }\n\n    if (endpoint) {\n      endpoint = await checkAppAvailability(endpoint.id, undefined, undefined, 'getEndpoint');\n    }\n\n    return {\n      ...source,\n      endpoint: [endpoint].filter(Boolean),\n      applications: [app].filter(Boolean),\n    };\n  } catch (error) {\n    const errorMessage = await handleError(error, source ? source.id : undefined);\n    throw errorMessage;\n  }\n};\n","import React, { useReducer, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core';\n\nimport Form from './SourceAddModal';\nimport FinalWizard from './FinalWizard';\n\nimport { wizardTitle } from './stringConstants';\n\nimport isSuperKey from '../../utilities/isSuperKey';\nimport { CLOUD_VENDOR, REDHAT_VENDOR, timeoutedApps } from '../../utilities/constants';\nimport createSuperSource from '../../api/createSuperSource';\nimport { doCreateSource } from '../../api/createSource';\nimport CloseModal from '../CloseModal';\n\nconst prepareInitialValues = (initialValues, activeCategory) => ({\n  isSubmitted: false,\n  isFinished: false,\n  isErrored: false,\n  isCancelling: false,\n  values: initialValues,\n  createdSource: {},\n  error: undefined,\n  activeCategory,\n});\n\nconst reducer = (state, { type, values, data, error, initialValues, sourceTypes, applicationTypes }) => {\n  switch (type) {\n    case 'reset':\n      return prepareInitialValues(initialValues, state.activeCategory);\n    case 'prepareSubmitState':\n      return {\n        ...state,\n        isFinished: false,\n        isErrored: false,\n        error: undefined,\n        isSubmitted: true,\n        values,\n        sourceTypes,\n        applicationTypes,\n      };\n    case 'setSubmitted':\n      return { ...state, isFinished: true, createdSource: data };\n    case 'setErrored':\n      return { ...state, isErrored: true, error: error.toString() };\n    case 'onStay':\n      return { ...state, isCancelling: false };\n    case 'showCancelModal':\n      return { ...state, isCancelling: true, values };\n  }\n};\n\nconst AddSourceWizard = ({\n  successfulMessage,\n  isOpen,\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  hideSourcesButton,\n  returnButtonTitle,\n  initialValues,\n  onClose,\n  afterSuccess,\n  selectedType,\n  initialWizardState,\n  submitCallback,\n  activeCategory: propsActiveCategory,\n}) => {\n  const [{ isErrored, isFinished, isSubmitted, values, error, isCancelling, createdSource, activeCategory, ...state }, dispatch] =\n    useReducer(reducer, prepareInitialValues(initialValues, propsActiveCategory));\n\n  const onSubmit = (formValues, sourceTypes, wizardState, applicationTypes) => {\n    dispatch({ type: 'prepareSubmitState', values: formValues, sourceTypes, applicationTypes });\n\n    const fn = isSuperKey(formValues.source) ? createSuperSource : doCreateSource;\n\n    return fn(formValues, timeoutedApps(applicationTypes), applicationTypes)\n      .then((data) => {\n        afterSuccess && afterSuccess(data);\n        submitCallback && submitCallback({ isSubmitted: true, createdSource: data, sourceTypes });\n        dispatch({ type: 'setSubmitted', data });\n      })\n      .catch((error) => {\n        submitCallback && submitCallback({ isErrored: true, error, values: formValues, sourceTypes, wizardState });\n        dispatch({ type: 'setErrored', error });\n      });\n  };\n\n  const reset = () => dispatch({ type: 'reset', initialValues });\n\n  const afterSubmit = () => {\n    onClose(undefined, createdSource);\n    reset();\n  };\n\n  const onCancelBeforeExit = (values) => (isEmpty(values) ? onClose({}) : dispatch({ type: 'showCancelModal', values }));\n\n  const onExit = () => onClose(values);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  if (!isSubmitted) {\n    return (\n      <React.Fragment>\n        {isCancelling && <CloseModal onExit={onExit} onStay={() => dispatch({ type: 'onStay' })} />}\n        <Form\n          isCancelling={isCancelling}\n          values={values}\n          onSubmit={onSubmit}\n          onCancel={onCancelBeforeExit}\n          sourceTypes={sourceTypes}\n          applicationTypes={applicationTypes}\n          disableAppSelection={disableAppSelection}\n          selectedType={selectedType}\n          initialWizardState={initialWizardState}\n          activeCategory={activeCategory}\n        />\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <FinalWizard\n      afterSubmit={afterSubmit}\n      afterError={() => onClose({})}\n      isFinished={isFinished}\n      isErrored={isErrored}\n      successfulMessage={successfulMessage}\n      hideSourcesButton={hideSourcesButton}\n      returnButtonTitle={returnButtonTitle}\n      errorMessage={error}\n      reset={reset}\n      createdSource={createdSource}\n      tryAgain={() => onSubmit(values, state.sourceTypes, undefined, state.applicationTypes)}\n      afterSuccess={afterSuccess}\n      sourceTypes={state.sourceTypes}\n      activeCategory={activeCategory}\n    />\n  );\n};\n\nAddSourceWizard.propTypes = {\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    })\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    })\n  ),\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node,\n  initialValues: PropTypes.shape({\n    [PropTypes.string]: PropTypes.oneOf([PropTypes.string, PropTypes.array, PropTypes.number, PropTypes.bool]),\n  }),\n  disableAppSelection: PropTypes.bool,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n  submitCallback: PropTypes.func,\n  activeCategory: PropTypes.oneOf([REDHAT_VENDOR, CLOUD_VENDOR]),\n};\n\nAddSourceWizard.defaultProps = {\n  successfulMessage: <FormattedMessage id=\"wizard.successfulMessage\" defaultMessage=\"Your source was successfully added.\" />,\n  initialValues: {},\n  returnButtonTitle: <FormattedMessage id=\"wizard.goBackToSources\" defaultMessage=\"Go back to Sources\" />,\n};\n\nconst AddSourceButton = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Button variant=\"primary\" onClick={() => setIsOpen(true)}>\n        {wizardTitle()}\n      </Button>\n      <AddSourceWizard isOpen={isOpen} onClose={() => setIsOpen(false)} {...props} />\n    </React.Fragment>\n  );\n};\n\nexport { AddSourceButton, AddSourceWizard };\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Alert,\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Grid,\n  GridItem,\n  Text,\n  Title,\n} from '@patternfly/react-core';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\n\nconst AwsLink = ({ href, children }) => (\n  <React.Fragment>\n    <CheckCircleIcon className=\"pf-u-mr-sm\" fill=\"var(--pf-global--success-color--100)\" />\n    <Text component=\"a\" href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      {children}\n    </Text>\n  </React.Fragment>\n);\n\nAwsLink.propTypes = {\n  href: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PREFIX = insights.chrome.isBeta() ? 'beta/' : '';\n\nconst GOLDIMAGES_HREF = 'https://access.redhat.com/management/cloud';\nconst SUBWATCH_HREF = `/${PREFIX}subscriptions`;\nconst INSIGHTS_HREF = `/${PREFIX}insights`;\nconst COST_HREF = `/${PREFIX}cost-management`;\nconst LEARNMORE_HREF = 'https://access.redhat.com/public-cloud/aws';\n\nconst AmazonFinishedStep = ({ onClose }) => {\n  const intl = useIntl();\n\n  return (\n    <Fragment>\n      <Alert\n        variant=\"info\"\n        isInline\n        title={intl.formatMessage({ id: 'aws.alertTitle', defaultMessage: 'Allow 24 hours for full activation' })}\n      >\n        {intl.formatMessage({\n          id: 'aws.alertDescription',\n          defaultMessage: 'Manage connections for this source at any time in Settings > Sources.',\n        })}\n      </Alert>\n      <Bullseye>\n        <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-md\">\n          <EmptyStateIcon icon={CheckCircleIcon} color=\"var(--pf-global--success-color--100)\" className=\"pf-u-mb-0\" />\n          <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n            {intl.formatMessage({ id: 'aws.successTitle', defaultMessage: 'Amazon Web Services connection established' })}\n          </Title>\n          <EmptyStateBody>\n            {intl.formatMessage({\n              id: 'aws.successDescription',\n              defaultMessage: 'Discover the benefits of your connection or exit to manage your new source.',\n            })}\n            <Grid hasGutter className=\"src-c-aws-grid pf-u-mt-md\">\n              <GridItem md=\"6\">\n                <AwsLink href={GOLDIMAGES_HREF}>\n                  {intl.formatMessage({ id: 'aws.goldImages', defaultMessage: 'View enabled AWS gold images' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={SUBWATCH_HREF}>\n                  {intl.formatMessage({ id: 'aws.subwtachUsage', defaultMessage: 'Subscription Watch usage' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={INSIGHTS_HREF}>\n                  {intl.formatMessage({ id: 'aws.insights', defaultMessage: 'Get started with Red Hat Insights' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={COST_HREF}>\n                  {intl.formatMessage({ id: 'aws.costLink', defaultMessage: 'Cost Management reporting' })}\n                </AwsLink>\n              </GridItem>\n            </Grid>\n          </EmptyStateBody>\n          <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n            {intl.formatMessage({ id: 'exit', defaultMessage: 'Exit' })}\n          </Button>\n          <EmptyStateSecondaryActions>\n            <Text component=\"a\" href={LEARNMORE_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n              {intl.formatMessage({ id: 'aws.learnMore', defaultMessage: 'Learn more about this Cloud' })}\n            </Text>\n          </EmptyStateSecondaryActions>\n        </EmptyState>\n      </Bullseye>\n    </Fragment>\n  );\n};\n\nAmazonFinishedStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default AmazonFinishedStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport computeSourcesUrl from '../../utilities/computeSourcesUrl';\n\nconst FinishedStep = ({\n  onClose,\n  successfulMessage,\n  hideSourcesButton,\n  returnButtonTitle,\n  title,\n  linkText,\n  secondaryActions,\n}) => (\n  <Bullseye>\n    <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n      <EmptyStateIcon icon={CheckCircleIcon} color=\"var(--pf-global--success-color--100)\" className=\"pf-u-mb-0\" />\n      <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n        {title}\n      </Title>\n      <EmptyStateBody className=\"src-c-wizard--step-text\">{successfulMessage}</EmptyStateBody>\n      <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n        {returnButtonTitle}\n      </Button>\n      {!hideSourcesButton && (\n        <EmptyStateSecondaryActions>\n          <Button variant=\"link\" component=\"a\" target=\"_blank\" rel=\"noopener noreferrer\" href={computeSourcesUrl()}>\n            {linkText}\n          </Button>\n        </EmptyStateSecondaryActions>\n      )}\n      {secondaryActions && <EmptyStateSecondaryActions>{secondaryActions}</EmptyStateSecondaryActions>}\n    </EmptyState>\n  </Bullseye>\n);\n\nFinishedStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  successfulMessage: PropTypes.node.isRequired,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node.isRequired,\n  title: PropTypes.node,\n  linkText: PropTypes.node,\n  secondaryActions: PropTypes.node,\n};\n\nFinishedStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.succConfiguration\" defaultMessage=\"Configuration successful\" />,\n  linkText: <FormattedMessage id=\"wizard.toSources\" defaultMessage=\"Take me to sources\" />,\n};\n\nexport default FinishedStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\n\nconst TimeoutStep = ({ onClose, returnButtonTitle, title, secondaryActions }) => {\n  const intl = useIntl();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full} className=\"pf-u-mt-4xl\">\n        <EmptyStateIcon icon={WrenchIcon} color=\"var(--pf-global--Color--200)\" className=\"pf-u-mb-0\" />\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n          {title}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage(\n            {\n              id: 'wizard.uncompleteConfigurationDescription',\n              defaultMessage:\n                'We are still working to confirm credentials and app settings.{newLine}To track progress, check the Status column in the Sources table.',\n            },\n            { newLine: <br key=\"br\" /> }\n          )}\n        </EmptyStateBody>\n        <Button variant=\"primary\" onClick={onClose} className=\"pf-u-mt-xl\">\n          {returnButtonTitle}\n        </Button>\n        {secondaryActions && <EmptyStateSecondaryActions>{secondaryActions}</EmptyStateSecondaryActions>}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nTimeoutStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  returnButtonTitle: PropTypes.node.isRequired,\n  title: PropTypes.node,\n  secondaryActions: PropTypes.node,\n};\n\nTimeoutStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.uncompleteConfigurationTitle\" defaultMessage=\"Configuration in progress\" />,\n};\n\nexport default TimeoutStep;\n","const computeSourceError = (source, intl) =>\n  source.applications?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  source.endpoint?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  source.authentications?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  intl.formatMessage({ id: 'wizard.unknownError', defaultMessage: 'Unknown error' });\n\nexport default computeSourceError;\n","const computeSourcesUrl = () => (insights.chrome.isBeta() ? `/beta/settings/sources` : `/settings/sources`);\n\nexport default computeSourcesUrl;\n"],"names":["CloseModal","onExit","onStay","title","exitTitle","stayTitle","description","intl","useIntl","isMounted","useRef","Modal","onEscapePress","e","current","className","variant","formatMessage","id","defaultMessage","header","Title","headingLevel","size","isOpen","onClose","actions","Button","key","onClick","propTypes","PropTypes","defaultProps","rest","authentication","useFormApi","getState","values","doNotRequirePassword","validate","filter","type","validatorTypes","componentProps","isRequired","helperText","label","Component","componentMapper","componentTypes","initialValues","schema","sourceTypes","isLoading","FormTemplateWrapper","props","showFormControls","SourceAddModal","applicationTypes","disableAppSelection","isCancelling","onCancel","onSubmit","selectedType","initialWizardState","activeCategory","enableLighthouse","useFlag","useReducer","state","container","createSchema","filterTypes","filterVendorTypes","filterApps","filterVendorAppTypes","stateSourceTypes","stateApplicationTypes","dispatch","document","createElement","useEffect","promises","push","doLoadSourceTypes","doLoadApplicationTypes","Promise","all","then","data","sourceTypesOut","find","types","Object","prototype","hasOwnProperty","call","applicationTypesOut","style","opacity","Wizard","wizardTitle","wizardDescription","steps","name","component","LoadingStep","isFinishedStep","SourcesFormRenderer","source_type","_formApi","wizardState","FormTemplate","subscription","Authentication","product_name","endpoint","display_name","EditLink","message","insights","chrome","getApp","Link","to","target","href","computeSourcesUrl","rel","FinalWizard","step","afterSubmit","afterError","isFinished","isErrored","successfulMessage","hideSourcesButton","returnButtonTitle","reset","createdSource","tryAgain","afterSuccess","useState","isDeletingSource","setIsDeleting","isAfterDeletion","setDeleted","addAnotherSourceButton","FinishedStep","secondaryActions","customText","computeSourceStatus","ErroredStep","getSourcesApi","deleteSource","computeSourceError","TimeoutStep","source_type_id","AmazonFinishedStep","primaryAction","Text","TextContent","cancelTitle","errorMessage","formData","startDate","Date","bulkCreate","sources","source","source_type_name","authentications","resource_name","resource_type","applications","map","appId","application_type_id","source_name","sourceData","checkAppAvailability","undefined","authenticationDataOut","handleError","urlOrHost","url","u","URL","scheme","protocol","replace","host","hostname","port","path","pathname","error","console","log","parseUrl","doCreateSource","timetoutedApps","payload","endpoints","hasEndpoint","endPointPort","parseInt","default","isNaN","hasApplication","application","NO_APPLICATION_VALUE","authtype","emptyAuthType","dataOut","app","auth","createAuthApp","application_id","authentication_id","checkSourceStatus","timeout","includes","Boolean","prepareInitialValues","isSubmitted","reducer","toString","AddSourceWizard","submitCallback","propsActiveCategory","formValues","isSuperKey","createSuperSource","timeoutedApps","isEmpty","REDHAT_VENDOR","CLOUD_VENDOR","AddSourceButton","setIsOpen","AwsLink","children","fill","PREFIX","isBeta","SUBWATCH_HREF","INSIGHTS_HREF","COST_HREF","Fragment","Alert","isInline","Bullseye","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","CheckCircleIcon","color","EmptyStateBody","Grid","hasGutter","GridItem","md","EmptyStateSecondaryActions","linkText","WrenchIcon","newLine","availability_status_error"],"sourceRoot":""}