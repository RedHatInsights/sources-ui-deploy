{"version":3,"sources":["webpack:///./src/components/FormComponents/Authentication.js","webpack:///./src/components/addSourceWizard/SourceAddModal.js","webpack:///./src/components/addSourceWizard/EditLink.js","webpack:///./src/components/addSourceWizard/FinalWizard.js","webpack:///./src/api/createSuperSource.js","webpack:///./src/api/createSource.js","webpack:///./src/components/addSourceWizard/index.js"],"names":["rest","intl","useIntl","authentication","useFormApi","getState","values","doNotRequirePassword","validate","filter","type","validatorTypes","componentProps","id","isRequired","helperText","formatMessage","defaultMessage","label","Component","componentMapper","componentTypes","initialValues","schema","sourceTypes","isLoading","reducer","state","applicationTypes","container","disableAppSelection","selectedType","initialWizardState","activeVendor","createSchema","filterTypes","filterVendorTypes","filterApps","filterVendorAppTypes","FormTemplateWrapper","props","showFormControls","SourceAddModal","isCancelling","onCancel","onSubmit","useReducer","stateSourceTypes","stateApplicationTypes","dispatch","isMounted","useRef","document","createElement","useEffect","current","promises","push","doLoadSourceTypes","doLoadApplicationTypes","Promise","all","then","data","sourceTypesOut","find","types","Object","prototype","hasOwnProperty","call","applicationTypesOut","style","opacity","Wizard","className","isOpen","onClose","title","wizardTitle","description","wizardDescription","steps","name","component","LoadingStep","isFinishedStep","SourcesFormRenderer","source_type","_formApi","wizardState","FormTemplate","subscription","Authentication","propTypes","PropTypes","product_name","endpoint","display_name","defaultProps","EditLink","message","insights","chrome","getApp","Link","to","Button","variant","target","href","computeSourcesUrl","rel","FinalWizard","step","afterSubmit","afterError","isFinished","isErrored","successfulMessage","hideSourcesButton","returnButtonTitle","reset","createdSource","tryAgain","afterSuccess","useState","isDeletingSource","setIsDeleting","isAfterDeletion","setDeleted","addAnotherSourceButton","onClick","FinishedStep","secondaryActions","customText","computeSourceStatus","ErroredStep","getSourcesApi","deleteSource","computeSourceError","TimeoutStep","source_type_id","AmazonFinishedStep","primaryAction","Text","TextContent","cancelTitle","errorMessage","formData","startDate","Date","bulkCreate","sources","source","source_type_name","authentications","resource_name","resource_type","applications","map","appId","application_type_id","source_name","sourceData","checkSourceStatus","checkStatusPromises","checkAppAvailability","undefined","forEach","authenticationDataOut","handleError","urlOrHost","url","u","URL","scheme","protocol","replace","host","hostname","port","path","pathname","error","console","log","parseUrl","doCreateSource","timetoutedApps","payload","endpoints","hasEndpoint","endPointPort","parseInt","default","isNaN","hasApplication","application","NO_APPLICATION_VALUE","authtype","emptyAuthType","dataOut","app","timeout","includes","Boolean","prepareInitialValues","isSubmitted","toString","AddSourceWizard","submitCallback","propsActiveVendor","formValues","isSuperKey","createSuperSource","timeoutedApps","CloseModal","onExit","onStay","isEmpty","REDHAT_VENDOR","CLOUD_VENDOR","AddSourceButton","setIsOpen"],"mappings":"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","file":"js/addSource.5ce0c58e696133c2b75a.js","sourcesContent":["import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { useIntl } from 'react-intl';\n\nconst Authentication = (rest) => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  const { authentication } = formOptions.getState().values;\n\n  const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n  const componentProps = {\n    ...rest,\n    ...(authentication && authentication.id\n      ? {\n          isRequired: false,\n          helperText: intl.formatMessage(\n            {\n              id: 'wizard.changeAuthHelper',\n              defaultMessage: 'Changing this resets your current {label}.',\n            },\n            { label: rest.label }\n          ),\n          validate: doNotRequirePassword,\n        }\n      : {}),\n  };\n\n  const Component = componentMapper[componentTypes.TEXT_FIELD];\n\n  return <Component {...componentProps} />;\n};\n\nexport default Authentication;\n","import React, { useRef, useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\n\nimport { Wizard } from '@patternfly/react-core';\n\nimport createSchema from './SourceAddSchema';\nimport { doLoadSourceTypes, doLoadApplicationTypes } from '../../api/wizardHelpers';\nimport { wizardDescription, wizardTitle } from './stringConstants';\nimport filterApps, { filterVendorAppTypes } from '../../utilities/filterApps';\nimport filterTypes, { filterVendorTypes } from '../../utilities/filterTypes';\nimport Authentication from '../FormComponents/Authentication';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport LoadingStep from '../steps/LoadingStep';\n\nconst initialValues = {\n  schema: {},\n  sourceTypes: [],\n  isLoading: true,\n};\n\nconst reducer = (\n  state,\n  { type, sourceTypes, applicationTypes, container, disableAppSelection, intl, selectedType, initialWizardState, activeVendor }\n) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        schema: createSchema(\n          sourceTypes.filter(filterTypes).filter(filterVendorTypes(activeVendor)),\n          applicationTypes.filter(filterApps).filter(filterVendorAppTypes(sourceTypes, activeVendor)),\n          disableAppSelection,\n          container,\n          intl,\n          selectedType,\n          initialWizardState,\n          activeVendor\n        ),\n        isLoading: false,\n        sourceTypes,\n        applicationTypes,\n      };\n  }\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst SourceAddModal = ({\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  isCancelling,\n  onCancel,\n  values,\n  onSubmit,\n  selectedType,\n  initialWizardState,\n  activeVendor,\n}) => {\n  const [{ schema, sourceTypes: stateSourceTypes, applicationTypes: stateApplicationTypes, isLoading }, dispatch] = useReducer(\n    reducer,\n    initialValues\n  );\n  const isMounted = useRef(false);\n  const container = useRef(document.createElement('div'));\n  const intl = useIntl();\n\n  useEffect(() => {\n    isMounted.current = true;\n\n    const promises = [];\n    if (!sourceTypes) {\n      promises.push(doLoadSourceTypes());\n    }\n\n    if (!applicationTypes) {\n      promises.push(doLoadApplicationTypes());\n    }\n\n    Promise.all(promises).then((data) => {\n      const sourceTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'sourceTypes'));\n      const applicationTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'applicationTypes'));\n\n      if (isMounted.current) {\n        dispatch({\n          type: 'loaded',\n          sourceTypes: sourceTypes || sourceTypesOut.sourceTypes,\n          applicationTypes: applicationTypes || applicationTypesOut.applicationTypes,\n          disableAppSelection,\n          container: container.current,\n          intl,\n          selectedType,\n          initialWizardState,\n          activeVendor,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    container.current.style.opacity = isCancelling ? 0 : 1;\n  }, [isCancelling]);\n\n  if (isLoading) {\n    return (\n      <Wizard\n        className=\"sources\"\n        isOpen={true}\n        onClose={onCancel}\n        title={wizardTitle(activeVendor)}\n        description={wizardDescription(activeVendor)}\n        steps={[\n          {\n            name: 'Loading',\n            component: <LoadingStep onClose={() => onCancel()} />,\n            isFinishedStep: true,\n          },\n        ]}\n      />\n    );\n  }\n\n  return (\n    <SourcesFormRenderer\n      initialValues={{\n        ...values,\n        ...(selectedType && { source_type: selectedType }),\n      }}\n      schema={schema}\n      onSubmit={(values, _formApi, wizardState) => onSubmit(values, stateSourceTypes, wizardState, stateApplicationTypes)}\n      onCancel={onCancel}\n      FormTemplate={FormTemplateWrapper}\n      subscription={{ values: true }}\n      componentMapper={{\n        authentication: Authentication,\n      }}\n    />\n  );\n};\n\nSourceAddModal.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    })\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    })\n  ),\n  values: PropTypes.object,\n  disableAppSelection: PropTypes.bool,\n  isCancelling: PropTypes.bool,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n  activeVendor: PropTypes.string,\n};\n\nSourceAddModal.defaultProps = {\n  values: {},\n  disableAppSelection: false,\n};\n\nexport default SourceAddModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { Button } from '@patternfly/react-core';\nimport computeSourcesUrl from '../../utilities/computeSourcesUrl';\n\nconst EditLink = ({ id }) => {\n  const intl = useIntl();\n  const message = intl.formatMessage({ id: 'wizard.editSource', defaultMessage: 'Edit source' });\n\n  if (insights.chrome.getApp() === 'sources') {\n    return (\n      <Link to={`/sources/detail/${id}`}>\n        <Button variant=\"primary\" className=\"pf-u-mt-xl\">\n          {message}\n        </Button>\n      </Link>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"primary\"\n      className=\"pf-u-mt-xl\"\n      component=\"a\"\n      target=\"_blank\"\n      href={`${computeSourcesUrl()}/detail/${id}`}\n      rel=\"noopener noreferrer\"\n    >\n      {message}\n    </Button>\n  );\n};\n\nEditLink.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default EditLink;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextContent, Button, Wizard } from '@patternfly/react-core';\n\nimport { wizardDescription, wizardTitle } from './stringConstants';\nimport { getSourcesApi } from '../../api/entities';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport EditLink from './EditLink';\nimport computeSourceError from '../../utilities/computeSourceError';\n\nimport FinishedStep from '../steps/FinishedStep';\nimport LoadingStep from '../steps/LoadingStep';\nimport ErroredStep from '../steps/ErroredStep';\nimport TimeoutStep from '../steps/TimeoutStep';\nimport AmazonFinishedStep from '../steps/AmazonFinishedStep';\n\nconst FinalWizard = ({\n  afterSubmit,\n  afterError,\n  isFinished,\n  isErrored,\n  successfulMessage,\n  hideSourcesButton,\n  returnButtonTitle,\n  reset,\n  createdSource = {},\n  tryAgain,\n  afterSuccess,\n  sourceTypes,\n  activeVendor,\n}) => {\n  const [isDeletingSource, setIsDeleting] = useState();\n  const [isAfterDeletion, setDeleted] = useState();\n\n  const intl = useIntl();\n\n  const removeSource = () => {\n    setIsDeleting(true);\n\n    return getSourcesApi()\n      .deleteSource(createdSource.id)\n      .then(() => {\n        afterSuccess && afterSuccess();\n        setDeleted(true);\n      })\n      .catch(() => setIsDeleting(false));\n  };\n\n  const addAnotherSourceButton = (\n    <Button variant=\"link\" onClick={reset}>\n      {intl.formatMessage({\n        id: 'wizard.addAnotherSource',\n        defaultMessage: 'Add another source',\n      })}\n    </Button>\n  );\n\n  let step;\n  if (isAfterDeletion) {\n    step = (\n      <FinishedStep\n        onClose={afterSubmit}\n        title={intl.formatMessage({ id: 'wizard.removeSourceSuccessTitle', defaultMessage: 'Removing successful' })}\n        successfulMessage={intl.formatMessage({\n          id: 'wizard.removeSourceSuccessDescription',\n          defaultMessage: 'Source was successfully removed.',\n        })}\n        hideSourcesButton={hideSourcesButton}\n        returnButtonTitle={returnButtonTitle}\n        secondaryActions={addAnotherSourceButton}\n      />\n    );\n  } else if (isDeletingSource) {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.removingSource',\n          defaultMessage: 'Removing source',\n        })}\n      />\n    );\n  } else if (isFinished) {\n    switch (computeSourceStatus(createdSource)) {\n      case 'unavailable':\n        step = (\n          <ErroredStep\n            onClose={afterSubmit}\n            secondaryActions={\n              <Button variant=\"link\" onClick={removeSource}>\n                {intl.formatMessage({ id: 'wizard.removeSource', defaultMessage: 'Remove source' })}\n              </Button>\n            }\n            Component={() => <EditLink id={createdSource.id} />}\n            message={computeSourceError(createdSource, intl)}\n            title={intl.formatMessage({ id: 'wizard.configurationUnsuccessful', defaultMessage: 'Configuration unsuccessful' })}\n          />\n        );\n        break;\n      case 'timeout':\n        step = (\n          <TimeoutStep onClose={afterSubmit} returnButtonTitle={returnButtonTitle} secondaryActions={addAnotherSourceButton} />\n        );\n        break;\n      default:\n        if (createdSource.source_type_id === sourceTypes.find(({ name }) => name === 'amazon')?.id) {\n          step = <AmazonFinishedStep onClose={afterSubmit} />;\n        } else {\n          step = (\n            <FinishedStep\n              onClose={afterSubmit}\n              successfulMessage={successfulMessage}\n              hideSourcesButton={hideSourcesButton}\n              returnButtonTitle={returnButtonTitle}\n              secondaryActions={addAnotherSourceButton}\n            />\n          );\n        }\n\n        break;\n    }\n  } else if (isErrored) {\n    step = (\n      <ErroredStep\n        onClose={afterError}\n        primaryAction={tryAgain}\n        secondaryActions={\n          <Text\n            component=\"a\"\n            target=\"_blank\"\n            href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n            rel=\"noopener noreferrer\"\n          >\n            {intl.formatMessage({ id: 'wizard.openTicket', defaultMessage: 'Open a support case' })}\n          </Text>\n        }\n        returnButtonTitle={intl.formatMessage({\n          id: 'wizard.retryText',\n          defaultMessage: 'Retry',\n        })}\n      />\n    );\n  } else {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.loadingText',\n          defaultMessage: 'Validating credentials',\n        })}\n        description={\n          <TextContent>\n            <Text className=\"pf-u-mb-md\">\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-a',\n                defaultMessage:\n                  // eslint-disable-next-line max-len\n                  \"This might take some time. You'll receive a notification if you are still in the Sources application when the process completes. Otherwise, you can check the status in the main sources table at any time.\",\n              })}\n            </Text>\n            <Text>\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-b',\n                defaultMessage: 'In the meantime, you can close this window while the validation process continues.',\n              })}\n            </Text>\n          </TextContent>\n        }\n        onClose={afterError}\n        cancelTitle={intl.formatMessage({ id: 'wizard.close', defaultMessage: 'Close' })}\n      />\n    );\n  }\n\n  return (\n    <Wizard\n      className=\"sources\"\n      isOpen={true}\n      onClose={isFinished ? afterSubmit : afterError}\n      title={wizardTitle(activeVendor)}\n      description={wizardDescription(activeVendor)}\n      steps={[\n        {\n          name: 'Finish',\n          component: step,\n          isFinishedStep: true,\n        },\n      ]}\n    />\n  );\n};\n\nFinalWizard.propTypes = {\n  afterSubmit: PropTypes.func.isRequired,\n  afterError: PropTypes.func.isRequired,\n  isFinished: PropTypes.bool.isRequired,\n  isErrored: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node.isRequired,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node.isRequired,\n  errorMessage: PropTypes.node,\n  reset: PropTypes.func,\n  createdSource: PropTypes.object,\n  tryAgain: PropTypes.func,\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n  activeVendor: PropTypes.string,\n};\n\nexport default FinalWizard;\n","import { getSourcesApi } from './entities';\nimport checkSourceStatus from './checkSourceStatus';\nimport { checkAppAvailability } from './getApplicationStatus';\nimport handleError from './handleError';\n\nconst createSuperSource = async (formData) => {\n  try {\n    const startDate = new Date();\n\n    const sourceData = await getSourcesApi().bulkCreate({\n      sources: [{ ...formData.source, source_type_name: formData.source_type }],\n      authentications: [{ ...formData.authentication, resource_name: formData.source.name, resource_type: 'source' }],\n      applications: formData.applications.map((appId) => ({\n        application_type_id: appId,\n        source_name: formData.source.name,\n      })),\n    });\n\n    await checkSourceStatus(sourceData.sources[0].id);\n\n    const checkStatusPromises = [];\n\n    checkStatusPromises.push(\n      checkAppAvailability(sourceData.authentications[0].id, undefined, undefined, 'showAuthentication', startDate)\n    );\n\n    sourceData.applications.forEach(({ id }) =>\n      checkStatusPromises.push(checkAppAvailability(id, undefined, undefined, 'showApplication', startDate))\n    );\n\n    const [authenticationDataOut, ...applications] = await Promise.all(checkStatusPromises);\n\n    return {\n      ...sourceData,\n      ...sourceData.sources[0],\n      authentications: [authenticationDataOut],\n      applications,\n    };\n  } catch (error) {\n    const errorMessage = await handleError(error);\n    throw errorMessage;\n  }\n};\n\nexport default createSuperSource;\n","import { handleError } from './handleError';\n\nimport { getSourcesApi } from './entities';\nimport { checkAppAvailability } from './getApplicationStatus';\nimport checkSourceStatus from './checkSourceStatus';\nimport { NO_APPLICATION_VALUE } from '../components/addSourceWizard/stringConstants';\nimport emptyAuthType from '../components/addSourceWizard/emptyAuthType';\n\nexport const parseUrl = (url) => {\n  if (!url) {\n    return {};\n  }\n\n  try {\n    const u = new URL(url);\n    return {\n      scheme: u.protocol.replace(/:$/, ''),\n      host: u.hostname,\n      port: u.port,\n      path: u.pathname,\n    };\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n    return {};\n  }\n};\n\nexport const urlOrHost = (formData) => (formData.url ? parseUrl(formData.url) : formData);\n\nexport const handleErrorWrapper = (sourceId) => async (error) => await handleError(error, sourceId);\n\nexport const doCreateSource = async (formData, timetoutedApps = [], applicationTypes) => {\n  let source;\n  try {\n    const payload = {\n      sources: [{ ...formData.source, source_type_name: formData.source_type }],\n      endpoints: [],\n      authentications: [],\n      applications: [],\n    };\n\n    const hasEndpoint = formData.url || formData.endpoint;\n    if (hasEndpoint) {\n      const { scheme, host, port, path } = urlOrHost(formData);\n\n      const endPointPort = parseInt(port, 10);\n\n      payload.endpoints.push({\n        ...formData.endpoint,\n        default: true,\n        source_name: formData.source.name,\n        scheme,\n        host,\n        port: isNaN(endPointPort) ? undefined : endPointPort,\n        path,\n      });\n    }\n\n    const hasApplication =\n      formData.application?.application_type_id && formData.application?.application_type_id !== NO_APPLICATION_VALUE;\n\n    if (hasApplication) {\n      payload.applications.push({\n        ...formData.application,\n        source_name: formData.source.name,\n      });\n    }\n\n    if (formData.authentication && formData.authentication.authtype !== emptyAuthType.type) {\n      payload.authentications.push({\n        ...formData.authentication,\n        resource_type: hasEndpoint ? 'endpoint' : hasApplication ? 'application' : 'source',\n        resource_name: formData.source.name,\n        ...(hasApplication && {\n          resource_name: applicationTypes?.find(({ id }) => id === formData.application.application_type_id)?.name,\n        }),\n        ...(hasEndpoint && { resource_name: urlOrHost(formData).host }),\n      });\n    }\n\n    const dataOut = await getSourcesApi().bulkCreate(payload);\n\n    source = dataOut.sources?.[0];\n    let app = dataOut.applications?.[0];\n    let endpoint = dataOut.endpoints?.[0];\n\n    await checkSourceStatus(source.id);\n\n    if (app) {\n      const timeout = timetoutedApps.includes(app.application_type_id) ? 10000 : 0;\n      app = await checkAppAvailability(app.id, timeout);\n    }\n\n    if (endpoint) {\n      endpoint = await checkAppAvailability(endpoint.id, undefined, undefined, 'getEndpoint');\n    }\n\n    return {\n      ...source,\n      endpoint: [endpoint].filter(Boolean),\n      applications: [app].filter(Boolean),\n    };\n  } catch (error) {\n    const errorMessage = await handleError(error, source ? source.id : undefined);\n    throw errorMessage;\n  }\n};\n","import React, { useState, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core';\n\nimport Form from './SourceAddModal';\nimport FinalWizard from './FinalWizard';\n\nimport { wizardTitle } from './stringConstants';\n\nimport isSuperKey from '../../utilities/isSuperKey';\nimport { CLOUD_VENDOR, REDHAT_VENDOR, timeoutedApps } from '../../utilities/constants';\nimport createSuperSource from '../../api/createSuperSource';\nimport { doCreateSource } from '../../api/createSource';\nimport CloseModal from '../CloseModal';\n\nconst prepareInitialValues = (initialValues, activeVendor) => ({\n  isSubmitted: false,\n  isFinished: false,\n  isErrored: false,\n  isCancelling: false,\n  values: initialValues,\n  createdSource: {},\n  error: undefined,\n  activeVendor,\n});\n\nconst reducer = (state, { type, values, data, error, initialValues, sourceTypes, applicationTypes }) => {\n  switch (type) {\n    case 'reset':\n      return prepareInitialValues(initialValues);\n    case 'prepareSubmitState':\n      return {\n        ...state,\n        isFinished: false,\n        isErrored: false,\n        error: undefined,\n        isSubmitted: true,\n        values,\n        sourceTypes,\n        applicationTypes,\n      };\n    case 'setSubmitted':\n      return { ...state, isFinished: true, createdSource: data };\n    case 'setErrored':\n      return { ...state, isErrored: true, error: error.toString() };\n    case 'onStay':\n      return { ...state, isCancelling: false };\n    case 'showCancelModal':\n      return { ...state, isCancelling: true, values };\n  }\n};\n\nconst AddSourceWizard = ({\n  successfulMessage,\n  isOpen,\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  hideSourcesButton,\n  returnButtonTitle,\n  initialValues,\n  onClose,\n  afterSuccess,\n  selectedType,\n  initialWizardState,\n  submitCallback,\n  activeVendor: propsActiveVendor,\n}) => {\n  const [\n    { isErrored, isFinished, isSubmitted, values, error, isCancelling, createdSource, activeVendor, ...state },\n    dispatch,\n  ] = useReducer(reducer, prepareInitialValues(initialValues, propsActiveVendor));\n\n  const onSubmit = (formValues, sourceTypes, wizardState, applicationTypes) => {\n    dispatch({ type: 'prepareSubmitState', values: formValues, sourceTypes, applicationTypes });\n\n    const fn = isSuperKey(formValues.source) ? createSuperSource : doCreateSource;\n\n    return fn(formValues, timeoutedApps(applicationTypes), applicationTypes)\n      .then((data) => {\n        afterSuccess && afterSuccess(data);\n        submitCallback && submitCallback({ isSubmitted: true, createdSource: data, sourceTypes });\n        dispatch({ type: 'setSubmitted', data });\n      })\n      .catch((error) => {\n        submitCallback && submitCallback({ isErrored: true, error, values: formValues, sourceTypes, wizardState });\n        dispatch({ type: 'setErrored', error });\n      });\n  };\n\n  const reset = () => dispatch({ type: 'reset', initialValues });\n\n  const afterSubmit = () => {\n    onClose(undefined, createdSource);\n    reset();\n  };\n\n  const onCancelBeforeExit = (values) => (isEmpty(values) ? onClose({}) : dispatch({ type: 'showCancelModal', values }));\n\n  const onExit = () => onClose(values);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  if (!isSubmitted) {\n    return (\n      <React.Fragment>\n        {isCancelling && <CloseModal onExit={onExit} onStay={() => dispatch({ type: 'onStay' })} />}\n        <Form\n          isCancelling={isCancelling}\n          values={values}\n          onSubmit={onSubmit}\n          onCancel={onCancelBeforeExit}\n          sourceTypes={sourceTypes}\n          applicationTypes={applicationTypes}\n          disableAppSelection={disableAppSelection}\n          selectedType={selectedType}\n          initialWizardState={initialWizardState}\n          activeVendor={activeVendor}\n        />\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <FinalWizard\n      afterSubmit={afterSubmit}\n      afterError={() => onClose({})}\n      isFinished={isFinished}\n      isErrored={isErrored}\n      successfulMessage={successfulMessage}\n      hideSourcesButton={hideSourcesButton}\n      returnButtonTitle={returnButtonTitle}\n      errorMessage={error}\n      reset={reset}\n      createdSource={createdSource}\n      tryAgain={() => onSubmit(values, state.sourceTypes, undefined, state.applicationTypes)}\n      afterSuccess={afterSuccess}\n      sourceTypes={state.sourceTypes}\n      activeVendor={activeVendor}\n    />\n  );\n};\n\nAddSourceWizard.propTypes = {\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    })\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    })\n  ),\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node,\n  initialValues: PropTypes.shape({\n    [PropTypes.string]: PropTypes.oneOf([PropTypes.string, PropTypes.array, PropTypes.number, PropTypes.bool]),\n  }),\n  disableAppSelection: PropTypes.bool,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n  submitCallback: PropTypes.func,\n  activeVendor: PropTypes.oneOf([REDHAT_VENDOR, CLOUD_VENDOR]),\n};\n\nAddSourceWizard.defaultProps = {\n  successfulMessage: <FormattedMessage id=\"wizard.successfulMessage\" defaultMessage=\"Your source was successfully added.\" />,\n  initialValues: {},\n  returnButtonTitle: <FormattedMessage id=\"wizard.goBackToSources\" defaultMessage=\"Go back to Sources\" />,\n};\n\nconst AddSourceButton = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Button variant=\"primary\" onClick={() => setIsOpen(true)}>\n        {wizardTitle()}\n      </Button>\n      <AddSourceWizard isOpen={isOpen} onClose={() => setIsOpen(false)} {...props} />\n    </React.Fragment>\n  );\n};\n\nexport { AddSourceButton, AddSourceWizard };\n"],"sourceRoot":""}