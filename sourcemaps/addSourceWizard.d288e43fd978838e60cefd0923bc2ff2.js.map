{"version":3,"file":"js/addSourceWizard.79fe3ce383fb172f6972.js","mappings":"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","sources":["webpack:///./src/api/checkSourceStatus.js","webpack:///./src/api/delay.js","webpack:///./src/api/getApplicationStatus.js","webpack:///./src/components/CloseModal.js","webpack:///./src/components/FormComponents/Authentication.js","webpack:///./src/components/addSourceWizard/SourceAddModal.js","webpack:///./src/components/addSourceWizard/EditLink.js","webpack:///./src/components/addSourceWizard/FinalWizard.js","webpack:///./src/api/createSuperSource.js","webpack:///./src/api/createSource.js","webpack:///./src/components/addSourceWizard/index.js","webpack:///./src/components/steps/AmazonFinishedStep.js","webpack:///./src/components/steps/ErroredStep.js","webpack:///./src/components/steps/FinishedStep.js","webpack:///./src/components/steps/LoadingStep.js","webpack:///./src/components/steps/TimeoutStep.js","webpack:///./src/utilities/computeSourceError.js","webpack:///./src/utilities/computeSourceStatus.js","webpack:///./src/utilities/computeSourcesUrl.js","webpack:///./src/utilities/filterApps.js","webpack:///./src/utilities/filterTypes.js","webpack:///./src/utilities/isSuperKey.js"],"sourcesContent":["import { getSourcesApi } from './entities';\n\nexport const checkSourceStatus = (id) =>\n  getSourcesApi()\n    .checkAvailabilitySource(id)\n    .catch(() => {});\n\nexport default checkSourceStatus;\n","export const delay = (interval, prms) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve.bind(null, prms), interval);\n  });\n};\n","import { getSourcesApi } from './entities';\nimport { delay } from './delay';\n\nexport const checkAppAvailability = (id, timeout = 10000, interval = 1000, entity = 'showApplication', updatedTime) =>\n  new Promise((res, rej) => {\n    const start = Date.now();\n\n    const checkSource = () =>\n      // eslint-disable-next-line prettier/prettier\n      getSourcesApi()[entity](id)\n        .then((data) => {\n          const isTimeOuted = Date.now() - start >= timeout;\n\n          if (isTimeOuted) {\n            if (updatedTime) {\n              return {\n                ...data,\n                availability_status: null,\n                availability_status_error: null,\n              };\n            }\n\n            return data;\n          }\n\n          if (data.availability_status === 'available' || data.availability_status === 'unavailable') {\n            if (updatedTime && new Date(data.last_checked_at || data.updated_at) > updatedTime) {\n              return data;\n            }\n\n            if (!updatedTime) {\n              return data;\n            }\n          }\n\n          return delay(interval).then(() => checkSource());\n        });\n\n    return checkSource()\n      .then((data) => res(data))\n      .catch((error) => rej(error));\n  });\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { Button, Modal, Title } from '@patternfly/react-core';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\n\nconst CloseModal = ({ onExit, onStay, title, exitTitle, stayTitle, description }) => {\n  const intl = useIntl();\n\n  const isMounted = useRef(false);\n\n  return (\n    <Modal\n      onEscapePress={(e) => {\n        isMounted.current ? onStay(e) : undefined;\n        isMounted.current = true;\n      }}\n      className=\"sources\"\n      variant=\"small\"\n      title={title}\n      aria-label={intl.formatMessage({ id: 'wizard.closeAriaLabel', defaultMessage: 'Close add source wizard' })}\n      header={\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          <ExclamationTriangleIcon size=\"sm\" className=\"src-c-warning-icon\" aria-label=\"Exclamation icon\" />\n          {title}\n        </Title>\n      }\n      isOpen\n      onClose={onStay}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" id=\"on-exit-button\" onClick={onExit}>\n          {exitTitle}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" id=\"on-stay-button\" onClick={onStay}>\n          {stayTitle}\n        </Button>,\n      ]}\n    >\n      {description}\n    </Modal>\n  );\n};\n\nCloseModal.propTypes = {\n  onExit: PropTypes.func.isRequired,\n  onStay: PropTypes.func.isRequired,\n  title: PropTypes.node,\n  exitTitle: PropTypes.node,\n  stayTitle: PropTypes.node,\n  description: PropTypes.node,\n};\n\nCloseModal.defaultProps = {\n  title: <FormattedMessage id=\"wizard.closeTitle\" defaultMessage=\"Cancel creating the integration?\" />,\n  exitTitle: <FormattedMessage id=\"wizard.exitText\" defaultMessage=\"Cancel\" />,\n  stayTitle: <FormattedMessage id=\"wizard.stayText\" defaultMessage=\"Stay\" />,\n  description: <FormattedMessage id=\"wizard.closeWarning\" defaultMessage=\"All inputs will be discarded.\" />,\n};\n\nexport default CloseModal;\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { useIntl } from 'react-intl';\n\nconst Authentication = (rest) => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  const { authentication } = formOptions.getState().values;\n\n  const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n  const componentProps = {\n    ...rest,\n    ...(authentication && authentication.id\n      ? {\n          isRequired: false,\n          helperText: intl.formatMessage(\n            {\n              id: 'wizard.changeAuthHelper',\n              defaultMessage: 'Changing this resets your current {label}.',\n            },\n            { label: rest.label },\n          ),\n          validate: doNotRequirePassword,\n        }\n      : {}),\n  };\n\n  const Component = componentMapper[componentTypes.TEXT_FIELD];\n\n  return <Component {...componentProps} />;\n};\n\nexport default Authentication;\n","import React, { useEffect, useReducer, useRef } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\n\nimport { Wizard } from '@patternfly/react-core/deprecated';\n\nimport createSchema from './SourceAddSchema';\nimport { doLoadApplicationTypes, doLoadSourceTypes } from '../../api/wizardHelpers';\nimport { wizardDescription, wizardTitle } from './stringConstants';\nimport filterApps, { filterVendorAppTypes } from '../../utilities/filterApps';\nimport filterTypes, { filterVendorTypes } from '../../utilities/filterTypes';\nimport Authentication from '../FormComponents/Authentication';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport LoadingStep from '../steps/LoadingStep';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst initialValues = {\n  schema: {},\n  sourceTypes: [],\n  isLoading: true,\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst SourceAddModal = ({\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  isCancelling,\n  onCancel,\n  values,\n  onSubmit,\n  selectedType,\n  initialWizardState,\n  activeCategory,\n}) => {\n  const enableLighthouse = useFlag('sources.wizard.lighthouse');\n\n  const reducer = (\n    state,\n    {\n      type,\n      sourceTypes,\n      applicationTypes,\n      container,\n      disableAppSelection,\n      intl,\n      selectedType,\n      initialWizardState,\n      activeCategory,\n      hcsEnrolled,\n    },\n  ) => {\n    switch (type) {\n      case 'loaded':\n        return {\n          ...state,\n          schema: createSchema(\n            sourceTypes.filter(filterTypes).filter(filterVendorTypes(activeCategory)),\n            applicationTypes.filter(filterApps).filter(filterVendorAppTypes(sourceTypes, activeCategory)),\n            disableAppSelection,\n            container,\n            intl,\n            selectedType,\n            initialWizardState,\n            activeCategory,\n            enableLighthouse,\n            hcsEnrolled,\n          ),\n          isLoading: false,\n          sourceTypes,\n          applicationTypes,\n          hcsEnrolled,\n        };\n    }\n  };\n\n  const [{ schema, sourceTypes: stateSourceTypes, applicationTypes: stateApplicationTypes, isLoading }, dispatch] = useReducer(\n    reducer,\n    initialValues,\n  );\n  const hcsEnrolled = useSelector(({ sources }) => sources.hcsEnrolled, shallowEqual);\n  const isMounted = useRef(false);\n  const container = useRef(document.createElement('div'));\n  const intl = useIntl();\n\n  useEffect(() => {\n    isMounted.current = true;\n\n    const promises = [];\n    if (!sourceTypes) {\n      promises.push(doLoadSourceTypes());\n    }\n\n    if (!applicationTypes) {\n      promises.push(doLoadApplicationTypes());\n    }\n\n    Promise.all(promises).then((data) => {\n      const sourceTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'sourceTypes'));\n      const applicationTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'applicationTypes'));\n\n      if (isMounted.current) {\n        dispatch({\n          type: 'loaded',\n          sourceTypes: sourceTypes || sourceTypesOut.sourceTypes,\n          applicationTypes: applicationTypes || applicationTypesOut.applicationTypes,\n          hcsEnrolled,\n          disableAppSelection,\n          container: container.current,\n          intl,\n          selectedType,\n          initialWizardState,\n          activeCategory,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    container.current.style.opacity = isCancelling ? 0 : 1;\n  }, [isCancelling]);\n\n  if (isLoading) {\n    return (\n      <Wizard\n        className=\"sources\"\n        isOpen={true}\n        onClose={onCancel}\n        title={wizardTitle(activeCategory)}\n        description={wizardDescription(activeCategory)}\n        steps={[\n          {\n            name: 'Loading',\n            component: <LoadingStep onClose={() => onCancel()} />,\n            isFinishedStep: true,\n          },\n        ]}\n      />\n    );\n  }\n\n  return (\n    <SourcesFormRenderer\n      initialValues={{\n        ...values,\n        ...(selectedType && { source_type: selectedType }),\n      }}\n      schema={schema}\n      onSubmit={(values, _formApi, wizardState) =>\n        onSubmit(values, stateSourceTypes, wizardState, stateApplicationTypes, hcsEnrolled)\n      }\n      onCancel={onCancel}\n      FormTemplate={FormTemplateWrapper}\n      subscription={{ values: true }}\n      componentMapper={{\n        authentication: Authentication,\n      }}\n    />\n  );\n};\n\nSourceAddModal.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    }),\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    }),\n  ),\n  values: PropTypes.object,\n  disableAppSelection: PropTypes.bool,\n  isCancelling: PropTypes.bool,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n  activeCategory: PropTypes.string,\n};\n\nSourceAddModal.defaultProps = {\n  values: {},\n  disableAppSelection: false,\n};\n\nexport default SourceAddModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport computeSourcesUrl from '../../utilities/computeSourcesUrl';\nimport AppLink from '../AppLink';\n\nconst EditLink = ({ id }) => {\n  const intl = useIntl();\n  const message = intl.formatMessage({ id: 'wizard.editSource', defaultMessage: 'Edit integration' });\n  const { getApp, isBeta } = useChrome();\n\n  if (getApp() === 'sources') {\n    return (\n      <AppLink to={`/detail/${id}`}>\n        <Button variant=\"primary\" className=\"pf-v5-u-mt-xl\">\n          {message}\n        </Button>\n      </AppLink>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"primary\"\n      className=\"pf-v5-u-mt-xl\"\n      component=\"a\"\n      target=\"_blank\"\n      href={`${computeSourcesUrl(isBeta())}/detail/${id}`}\n      rel=\"noopener noreferrer\"\n    >\n      {message}\n    </Button>\n  );\n};\n\nEditLink.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default EditLink;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { Button, Modal, Text, TextContent } from '@patternfly/react-core';\nimport { Wizard } from '@patternfly/react-core/deprecated';\n\nimport { wizardDescription, wizardTitle } from './stringConstants';\nimport { getSourcesApi } from '../../api/entities';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport EditLink from './EditLink';\nimport computeSourceError from '../../utilities/computeSourceError';\n\nimport FinishedStep from '../steps/FinishedStep';\nimport LoadingStep from '../steps/LoadingStep';\nimport ErroredStep from '../steps/ErroredStep';\nimport TimeoutStep from '../steps/TimeoutStep';\nimport AmazonFinishedStep from '../steps/AmazonFinishedStep';\nimport { COST_MANAGEMENT_APP_ID, HCS_APP_NAME } from '../../utilities/constants';\n\nconst FinalWizard = ({\n  afterSubmit,\n  afterError,\n  isFinished,\n  isErrored,\n  successfulMessage,\n  hideSourcesButton,\n  returnButtonTitle,\n  reset,\n  createdSource = {},\n  tryAgain,\n  afterSuccess,\n  sourceTypes,\n  activeCategory,\n}) => {\n  const [isDeletingSource, setIsDeleting] = useState();\n  const [isAfterDeletion, setDeleted] = useState();\n  const isStorageOnly = createdSource.applications?.some((app) => app?.extra?.storage_only);\n  const isCostManagement = createdSource.applications?.some((app) => app?.application_type_id === COST_MANAGEMENT_APP_ID);\n  const isHcs = createdSource.applications?.some((app) => app?.extra?.hcs);\n\n  const intl = useIntl();\n\n  const removeSource = () => {\n    setIsDeleting(true);\n\n    return getSourcesApi()\n      .deleteSource(createdSource.id)\n      .then(() => {\n        afterSuccess && afterSuccess();\n        setDeleted(true);\n      })\n      .catch(() => setIsDeleting(false));\n  };\n\n  const addAnotherSourceButton = (\n    <Button variant=\"link\" onClick={reset}>\n      {intl.formatMessage({\n        id: 'wizard.addAnotherSource',\n        defaultMessage: 'Add another integration',\n      })}\n    </Button>\n  );\n\n  let step;\n  if (isAfterDeletion) {\n    step = (\n      <FinishedStep\n        onClose={afterSubmit}\n        title={intl.formatMessage({ id: 'wizard.removeSourceSuccessTitle', defaultMessage: 'Removing successful' })}\n        successfulMessage={intl.formatMessage({\n          id: 'wizard.removeSourceSuccessDescription',\n          defaultMessage: 'Integration was successfully removed.',\n        })}\n        hideSourcesButton={hideSourcesButton}\n        returnButtonTitle={returnButtonTitle}\n        secondaryActions={addAnotherSourceButton}\n      />\n    );\n  } else if (isDeletingSource) {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.removingSource',\n          defaultMessage: 'Removing integration',\n        })}\n      />\n    );\n  } else if (isFinished) {\n    switch (computeSourceStatus(createdSource)) {\n      case 'unavailable':\n        step = (\n          <ErroredStep\n            onClose={afterSubmit}\n            secondaryActions={\n              <Button variant=\"link\" onClick={removeSource}>\n                {intl.formatMessage({ id: 'wizard.removeSource', defaultMessage: 'Remove integration' })}\n              </Button>\n            }\n            Component={() => <EditLink id={createdSource.id} />}\n            message={computeSourceError(createdSource, intl)}\n            title={intl.formatMessage({ id: 'wizard.configurationUnsuccessful', defaultMessage: 'Configuration unsuccessful' })}\n          />\n        );\n        break;\n      case 'timeout':\n        step = (\n          <TimeoutStep\n            onClose={afterSubmit}\n            returnButtonTitle={returnButtonTitle}\n            secondaryActions={addAnotherSourceButton}\n            {...(isCostManagement &&\n              isStorageOnly && {\n                uuid: createdSource?.uid,\n              })}\n          />\n        );\n        break;\n      default:\n        if (createdSource.source_type_id === sourceTypes.find(({ name }) => name === 'amazon')?.id) {\n          step = <AmazonFinishedStep onClose={afterSubmit} />;\n        } else {\n          step = (\n            <FinishedStep\n              onClose={afterSubmit}\n              successfulMessage={\n                isCostManagement && isStorageOnly\n                  ? `You have chosen to manually customize the cost data set sent to ${\n                      isHcs ? HCS_APP_NAME : 'Cost Management'\n                    }, you will still need to perform additional steps to complete the process.`\n                  : successfulMessage\n              }\n              {...(isCostManagement &&\n                isStorageOnly && {\n                  title: <FormattedMessage id=\"wizard.waitTheresMore\" defaultMessage=\"Success, but wait there's more!\" />,\n                  uuid: createdSource?.uid,\n                })}\n              hideSourcesButton={hideSourcesButton}\n              returnButtonTitle={returnButtonTitle}\n              secondaryActions={addAnotherSourceButton}\n            />\n          );\n        }\n\n        break;\n    }\n  } else if (isErrored) {\n    step = (\n      <ErroredStep\n        onClose={afterError}\n        primaryAction={tryAgain}\n        secondaryActions={\n          <Text\n            component=\"a\"\n            target=\"_blank\"\n            href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n            rel=\"noopener noreferrer\"\n          >\n            {intl.formatMessage({ id: 'wizard.openTicket', defaultMessage: 'Open a support case' })}\n          </Text>\n        }\n        returnButtonTitle={intl.formatMessage({\n          id: 'wizard.retryText',\n          defaultMessage: 'Retry',\n        })}\n      />\n    );\n  } else {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.loadingText',\n          defaultMessage: 'Validating credentials',\n        })}\n        description={\n          <TextContent>\n            <Text className=\"pf-v5-u-mb-md\">\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-a',\n                defaultMessage:\n                  // eslint-disable-next-line max-len\n                  \"This might take some time. You'll receive a notification if you are still in the Integrations application when the process completes. Otherwise, you can check the status in the main integrations table at any time.\",\n              })}\n            </Text>\n            <Text>\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-b',\n                defaultMessage: 'In the meantime, you can close this window while the validation process continues.',\n              })}\n            </Text>\n          </TextContent>\n        }\n        onClose={afterError}\n        cancelTitle={intl.formatMessage({ id: 'wizard.close', defaultMessage: 'Close' })}\n      />\n    );\n  }\n\n  const appendTo = React.useMemo(() => document.querySelector('.pf-v5-c-page.chr-c-page'), []);\n\n  return (\n    <Modal isOpen width=\"58%\" hasNoBodyWrapper appendTo={appendTo} showClose={false}>\n      <Wizard\n        className=\"sources\"\n        onClose={isFinished ? afterSubmit : afterError}\n        title={wizardTitle(activeCategory)}\n        description={wizardDescription(activeCategory)}\n        steps={[\n          {\n            name: 'Finish',\n            component: step,\n            isFinishedStep: true,\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n\nFinalWizard.propTypes = {\n  afterSubmit: PropTypes.func.isRequired,\n  afterError: PropTypes.func.isRequired,\n  isFinished: PropTypes.bool.isRequired,\n  isErrored: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node.isRequired,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node.isRequired,\n  errorMessage: PropTypes.node,\n  reset: PropTypes.func,\n  createdSource: PropTypes.object,\n  tryAgain: PropTypes.func,\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    }),\n  ),\n  activeCategory: PropTypes.string,\n};\n\nexport default FinalWizard;\n","import { getSourcesApi } from './entities';\nimport { checkAppAvailability } from './getApplicationStatus';\nimport handleError from './handleError';\n\nconst createSuperSource = async (formData) => {\n  try {\n    const startDate = new Date();\n\n    const sourceData = await getSourcesApi().bulkCreate({\n      sources: [{ ...formData.source, source_type_name: formData.source_type }],\n      authentications: [{ ...formData.authentication, resource_name: formData.source.name, resource_type: 'source' }],\n      applications: formData.applications.map((appId) => ({\n        application_type_id: appId,\n        source_name: formData.source.name,\n      })),\n    });\n\n    const authenticationDataOut = await checkAppAvailability(\n      sourceData.authentications[0].id,\n      undefined,\n      undefined,\n      'showAuthentication',\n      startDate,\n    );\n\n    return {\n      ...sourceData,\n      ...sourceData.sources[0],\n      authentications: [authenticationDataOut],\n    };\n  } catch (error) {\n    const errorMessage = await handleError(error);\n    throw errorMessage;\n  }\n};\n\nexport default createSuperSource;\n","import { handleError } from './handleError';\n\nimport { getSourcesApi } from './entities';\nimport { checkAppAvailability } from './getApplicationStatus';\nimport checkSourceStatus from './checkSourceStatus';\nimport { NO_APPLICATION_VALUE } from '../components/addSourceWizard/stringConstants';\nimport emptyAuthType from '../components/addSourceWizard/emptyAuthType';\n\nexport const parseUrl = (url) => {\n  if (!url) {\n    return {};\n  }\n\n  try {\n    const u = new URL(url);\n    return {\n      scheme: u.protocol.replace(/:$/, ''),\n      host: u.hostname,\n      port: u.port,\n      path: u.pathname,\n    };\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n    return {};\n  }\n};\n\nexport const urlOrHost = (formData) => (formData.url ? parseUrl(formData.url) : formData);\n\nexport const handleErrorWrapper = (sourceId) => async (error) => await handleError(error, sourceId);\n\nexport const doCreateSource = async (formData, timetoutedApps = [], applicationTypes) => {\n  let source;\n  try {\n    const payload = {\n      sources: [{ ...formData.source, source_type_name: formData.source_type }],\n      endpoints: [],\n      authentications: [],\n      applications: [],\n    };\n\n    const hasEndpoint = formData.url || formData.endpoint;\n    if (hasEndpoint) {\n      const { scheme, host, port, path } = urlOrHost(formData);\n\n      const endPointPort = parseInt(port, 10);\n\n      payload.endpoints.push({\n        ...formData.endpoint,\n        default: true,\n        source_name: formData.source.name,\n        scheme,\n        host,\n        port: isNaN(endPointPort) ? undefined : endPointPort,\n        path,\n      });\n    }\n\n    const hasApplication =\n      formData.application?.application_type_id && formData.application?.application_type_id !== NO_APPLICATION_VALUE;\n\n    if (hasApplication) {\n      payload.applications.push({\n        ...formData.application,\n        source_name: formData.source.name,\n      });\n    }\n\n    if (formData.authentication && formData.authentication.authtype !== emptyAuthType.type) {\n      payload.authentications.push({\n        ...formData.authentication,\n        resource_type: hasEndpoint ? 'endpoint' : hasApplication ? 'application' : 'source',\n        resource_name: formData.source.name,\n        ...(hasApplication && {\n          resource_name: applicationTypes?.find(({ id }) => id === formData.application.application_type_id)?.name,\n        }),\n        ...(hasEndpoint && { resource_name: urlOrHost(formData).host }),\n      });\n    }\n\n    const dataOut = await getSourcesApi().bulkCreate(payload);\n\n    source = dataOut.sources?.[0];\n    let app = dataOut.applications?.[0];\n    let endpoint = dataOut.endpoints?.[0];\n    let auth = dataOut.authentications?.[0];\n\n    if (hasEndpoint && hasApplication) {\n      await getSourcesApi().createAuthApp({\n        application_id: app.id,\n        authentication_id: auth.id,\n      });\n    }\n\n    await checkSourceStatus(source.id);\n\n    if (app) {\n      const timeout = timetoutedApps.includes(app.application_type_id) ? 10000 : 0;\n      app = await checkAppAvailability(app.id, timeout);\n    }\n\n    if (endpoint) {\n      endpoint = await checkAppAvailability(endpoint.id, undefined, undefined, 'getEndpoint');\n    }\n\n    return {\n      ...source,\n      endpoint: [endpoint].filter(Boolean),\n      applications: [app].filter(Boolean),\n    };\n  } catch (error) {\n    const errorMessage = await handleError(error, source ? source.id : undefined);\n    throw errorMessage;\n  }\n};\n","import React, { useReducer, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core';\n\nimport Form from './SourceAddModal';\nimport FinalWizard from './FinalWizard';\n\nimport { wizardTitle } from './stringConstants';\n\nimport isSuperKey from '../../utilities/isSuperKey';\nimport { CLOUD_VENDOR, REDHAT_VENDOR, timeoutedApps } from '../../utilities/constants';\nimport createSuperSource from '../../api/createSuperSource';\nimport { doCreateSource } from '../../api/createSource';\nimport CloseModal from '../CloseModal';\n\nconst prepareInitialValues = (initialValues, activeCategory) => ({\n  isSubmitted: false,\n  isFinished: false,\n  isErrored: false,\n  isCancelling: false,\n  values: initialValues,\n  createdSource: {},\n  error: undefined,\n  activeCategory,\n});\n\nconst reducer = (state, { type, values, data, error, initialValues, sourceTypes, applicationTypes }) => {\n  switch (type) {\n    case 'reset':\n      return prepareInitialValues(initialValues, state.activeCategory);\n    case 'prepareSubmitState':\n      return {\n        ...state,\n        isFinished: false,\n        isErrored: false,\n        error: undefined,\n        isSubmitted: true,\n        values,\n        sourceTypes,\n        applicationTypes,\n      };\n    case 'setSubmitted':\n      return { ...state, isFinished: true, createdSource: data };\n    case 'setErrored':\n      return { ...state, isErrored: true, error: error.toString() };\n    case 'onStay':\n      return { ...state, isCancelling: false };\n    case 'showCancelModal':\n      return { ...state, isCancelling: true, values };\n  }\n};\n\nconst AddSourceWizard = ({\n  successfulMessage,\n  isOpen,\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  hideSourcesButton,\n  returnButtonTitle,\n  initialValues,\n  onClose,\n  afterSuccess,\n  selectedType,\n  initialWizardState,\n  submitCallback,\n  activeCategory: propsActiveCategory,\n}) => {\n  const [{ isErrored, isFinished, isSubmitted, values, error, isCancelling, createdSource, activeCategory, ...state }, dispatch] =\n    useReducer(reducer, prepareInitialValues(initialValues, propsActiveCategory));\n\n  const onSubmit = (formValues, sourceTypes, wizardState, applicationTypes, hcsEnrolled) => {\n    dispatch({ type: 'prepareSubmitState', values: formValues, sourceTypes, applicationTypes });\n\n    const fn = isSuperKey(formValues.source) ? createSuperSource : doCreateSource;\n    const submitValues = {\n      ...formValues,\n      application: { ...formValues.application, extra: { ...(formValues.application?.extra || {}), hcs: !!hcsEnrolled } },\n    };\n\n    return fn(submitValues, timeoutedApps(applicationTypes), applicationTypes)\n      .then((data) => {\n        afterSuccess && afterSuccess(data);\n        submitCallback && submitCallback({ isSubmitted: true, createdSource: data, sourceTypes });\n        dispatch({ type: 'setSubmitted', data });\n      })\n      .catch((error) => {\n        submitCallback && submitCallback({ isErrored: true, error, values: formValues, sourceTypes, wizardState });\n        dispatch({ type: 'setErrored', error });\n      });\n  };\n\n  const reset = () => dispatch({ type: 'reset', initialValues });\n\n  const afterSubmit = () => {\n    onClose(undefined, createdSource);\n    reset();\n  };\n\n  const onCancelBeforeExit = (values) => (isEmpty(values) ? onClose({}) : dispatch({ type: 'showCancelModal', values }));\n\n  const onExit = () => onClose(values);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  if (!isSubmitted) {\n    return (\n      <React.Fragment>\n        {isCancelling && <CloseModal onExit={onExit} onStay={() => dispatch({ type: 'onStay' })} />}\n        <Form\n          isCancelling={isCancelling}\n          values={values}\n          onSubmit={onSubmit}\n          onCancel={onCancelBeforeExit}\n          sourceTypes={sourceTypes}\n          applicationTypes={applicationTypes}\n          disableAppSelection={disableAppSelection}\n          selectedType={selectedType}\n          initialWizardState={initialWizardState}\n          activeCategory={activeCategory}\n        />\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <FinalWizard\n      afterSubmit={afterSubmit}\n      afterError={() => onClose({})}\n      isFinished={isFinished}\n      isErrored={isErrored}\n      successfulMessage={successfulMessage}\n      hideSourcesButton={hideSourcesButton}\n      returnButtonTitle={returnButtonTitle}\n      errorMessage={error}\n      reset={reset}\n      createdSource={createdSource}\n      tryAgain={() => onSubmit(values, state.sourceTypes, undefined, state.applicationTypes)}\n      afterSuccess={afterSuccess}\n      sourceTypes={state.sourceTypes}\n      activeCategory={activeCategory}\n    />\n  );\n};\n\nAddSourceWizard.propTypes = {\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    }),\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    }),\n  ),\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node,\n  initialValues: PropTypes.shape({\n    [PropTypes.string]: PropTypes.oneOf([PropTypes.string, PropTypes.array, PropTypes.number, PropTypes.bool]),\n  }),\n  disableAppSelection: PropTypes.bool,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n  submitCallback: PropTypes.func,\n  activeCategory: PropTypes.oneOf([REDHAT_VENDOR, CLOUD_VENDOR]),\n};\n\nAddSourceWizard.defaultProps = {\n  successfulMessage: <FormattedMessage id=\"wizard.successfulMessage\" defaultMessage=\"Your integration was successfully added.\" />,\n  initialValues: {},\n  returnButtonTitle: <FormattedMessage id=\"wizard.goBackToSources\" defaultMessage=\"Go back to Integrations\" />,\n};\n\nexport const AddSourceButton = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Button variant=\"primary\" onClick={() => setIsOpen(true)}>\n        {wizardTitle()}\n      </Button>\n      <AddSourceWizard isOpen={isOpen} onClose={() => setIsOpen(false)} {...props} />\n    </React.Fragment>\n  );\n};\n\nexport default AddSourceWizard;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport {\n  Alert,\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Grid,\n  GridItem,\n  Text,\n  Title,\n} from '@patternfly/react-core';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst AwsLink = ({ href, children }) => (\n  <React.Fragment>\n    <CheckCircleIcon className=\"pf-v5-u-mr-sm\" fill=\"var(--pf-v5-global--success-color--100)\" />\n    <Text component=\"a\" href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      {children}\n    </Text>\n  </React.Fragment>\n);\n\nAwsLink.propTypes = {\n  href: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst GOLDIMAGES_HREF = 'https://access.redhat.com/management/cloud';\nconst LEARNMORE_HREF = 'https://access.redhat.com/public-cloud/aws';\n\nconst AmazonFinishedStep = ({ onClose }) => {\n  const intl = useIntl();\n  const { isBeta } = useChrome();\n  const PREFIX = isBeta() ? 'preview/' : '';\n\n  const SUBWATCH_HREF = `/${PREFIX}subscriptions`;\n  const INSIGHTS_HREF = `/${PREFIX}insights`;\n  const COST_HREF = `/${PREFIX}cost-management`;\n\n  return (\n    <Fragment>\n      <Alert\n        variant=\"info\"\n        isInline\n        title={intl.formatMessage({ id: 'aws.alertTitle', defaultMessage: 'Allow 24 hours for full activation' })}\n      >\n        {intl.formatMessage({\n          id: 'aws.alertDescription',\n          defaultMessage: 'Manage connections for this source at any time in Settings > Sources.',\n        })}\n      </Alert>\n      <Bullseye>\n        <EmptyState variant={EmptyStateVariant.full} className=\"pf-v5-u-mt-md\">\n          <EmptyStateIcon icon={CheckCircleIcon} color=\"var(--pf-v5-global--success-color--100)\" className=\"pf-v5-u-mb-0\" />\n          <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-xl\">\n            {intl.formatMessage({ id: 'aws.successTitle', defaultMessage: 'Amazon Web Services connection established' })}\n          </Title>\n          <EmptyStateBody>\n            {intl.formatMessage({\n              id: 'aws.successDescription',\n              defaultMessage: 'Discover the benefits of your connection or exit to manage your new source.',\n            })}\n            <Grid hasGutter className=\"src-c-aws-grid pf-v5-u-mt-md\">\n              <GridItem md=\"6\">\n                <AwsLink href={GOLDIMAGES_HREF}>\n                  {intl.formatMessage({ id: 'aws.goldImages', defaultMessage: 'View enabled AWS gold images' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={SUBWATCH_HREF}>\n                  {intl.formatMessage({ id: 'aws.subwtachUsage', defaultMessage: 'Subscription Watch usage' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={INSIGHTS_HREF}>\n                  {intl.formatMessage({ id: 'aws.insights', defaultMessage: 'Get started with Red Hat Insights' })}\n                </AwsLink>\n              </GridItem>\n              <GridItem md=\"6\">\n                <AwsLink href={COST_HREF}>\n                  {intl.formatMessage({ id: 'aws.costLink', defaultMessage: 'Cost Management reporting' })}\n                </AwsLink>\n              </GridItem>\n            </Grid>\n          </EmptyStateBody>\n          <Button variant=\"primary\" onClick={onClose} className=\"pf-v5-u-mt-xl\">\n            {intl.formatMessage({ id: 'exit', defaultMessage: 'Exit' })}\n          </Button>\n          <EmptyStateActions>\n            <Text component=\"a\" href={LEARNMORE_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n              {intl.formatMessage({ id: 'aws.learnMore', defaultMessage: 'Learn more about this Cloud' })}\n            </Text>\n          </EmptyStateActions>\n        </EmptyState>\n      </Bullseye>\n    </Fragment>\n  );\n};\n\nAmazonFinishedStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default AmazonFinishedStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\n\nconst ErroredStep = ({ onClose, returnButtonTitle, message, title, customText, primaryAction, secondaryActions, Component }) => (\n  <Bullseye>\n    <EmptyState variant={EmptyStateVariant.full} className=\"pf-v5-u-mt-4xl\">\n      <EmptyStateIcon icon={ExclamationCircleIcon} color=\"var(--pf-v5-global--danger-color--100)\" className=\"pf-v5-u-mb-0\" />\n      <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-xl\">\n        {title}\n      </Title>\n      <EmptyStateBody className=\"src-c-wizard--step-text\">{message || customText}</EmptyStateBody>\n      <Component variant=\"primary\" onClick={primaryAction || onClose}>\n        {returnButtonTitle}\n      </Component>\n      {secondaryActions && <EmptyStateActions className=\"pf-v5-u-mt-sm\">{secondaryActions}</EmptyStateActions>}\n    </EmptyState>\n  </Bullseye>\n);\n\nErroredStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  returnButtonTitle: PropTypes.node,\n  message: PropTypes.node,\n  title: PropTypes.node,\n  customText: PropTypes.node,\n  primaryAction: PropTypes.func,\n  secondaryActions: PropTypes.node,\n  Component: PropTypes.elementType,\n};\n\nErroredStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.unsuccConfiguration\" defaultMessage=\"Something went wrong\" />,\n  // eslint-disable-next-line max-len\n  customText: (\n    <FormattedMessage\n      id=\"wizard.errorText\"\n      defaultMessage=\"There was a problem while trying to add your source. Please try again. If the error persists, open a support case.\"\n    />\n  ),\n  Component: Button,\n};\n\nexport default ErroredStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { ClipboardCopy } from '@patternfly/react-core';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Form,\n  FormGroup,\n  Title,\n} from '@patternfly/react-core';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport computeSourcesUrl from '../../utilities/computeSourcesUrl';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst FinishedStep = ({\n  onClose,\n  successfulMessage,\n  hideSourcesButton,\n  returnButtonTitle,\n  title,\n  linkText,\n  secondaryActions,\n  uuid,\n}) => {\n  const { isBeta } = useChrome();\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full} className=\"pf-v5-u-mt-4xl\">\n        <EmptyStateIcon icon={CheckCircleIcon} color=\"var(--pf-v5-global--success-color--100)\" className=\"pf-v5-u-mb-0\" />\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-xl\">\n          {title}\n        </Title>\n        <EmptyStateBody className=\"src-c-wizard--step-text\">{successfulMessage}</EmptyStateBody>\n        {uuid && (\n          <Form className=\"src-c-uuid\">\n            <FormGroup label={<FormattedMessage id=\"wizard.sourcesUid\" defaultMessage=\"Source UUID\" />} fieldId=\"source-uuid\">\n              <ClipboardCopy id=\"source-uuid\" isReadOnly hoverTip=\"Source UUID\" clickTip=\"Copied\" className=\"pf-v5-u-mt-md\">\n                {uuid}\n              </ClipboardCopy>\n            </FormGroup>\n          </Form>\n        )}\n        <Button variant=\"primary\" onClick={onClose} className=\"pf-v5-u-mt-xl\">\n          {returnButtonTitle}\n        </Button>\n        {!hideSourcesButton && (\n          <EmptyStateActions>\n            <Button variant=\"link\" component=\"a\" target=\"_blank\" rel=\"noopener noreferrer\" href={computeSourcesUrl(isBeta())}>\n              {linkText}\n            </Button>\n          </EmptyStateActions>\n        )}\n        {secondaryActions && <EmptyStateActions>{secondaryActions}</EmptyStateActions>}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  successfulMessage: PropTypes.node.isRequired,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node.isRequired,\n  title: PropTypes.node,\n  linkText: PropTypes.node,\n  secondaryActions: PropTypes.node,\n  uuid: PropTypes.string,\n};\n\nFinishedStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.succConfiguration\" defaultMessage=\"Configuration successful\" />,\n  linkText: <FormattedMessage id=\"wizard.toSources\" defaultMessage=\"Take me to sources\" />,\n};\n\nexport default FinishedStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\n\nconst LoadingStep = ({ onClose, customText, cancelTitle, description }) => (\n  <Bullseye>\n    <EmptyState variant={EmptyStateVariant.full} className=\"pf-v5-u-mt-4xl\">\n      <EmptyStateIcon icon={Spinner} className=\"pf-v5-u-mb-0\" />\n      <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-xl\">\n        {customText}\n      </Title>\n      {description && <EmptyStateBody className=\"src-c-wizard--step-text\">{description}</EmptyStateBody>}\n      {onClose && (\n        <EmptyStateActions className=\"pf-v5-u-mt-xl\">\n          <Button variant=\"link\" onClick={onClose}>\n            {cancelTitle}\n          </Button>\n        </EmptyStateActions>\n      )}\n    </EmptyState>\n  </Bullseye>\n);\n\nLoadingStep.propTypes = {\n  onClose: PropTypes.func,\n  customText: PropTypes.node,\n  cancelTitle: PropTypes.node,\n  description: PropTypes.node,\n};\n\nLoadingStep.defaultProps = {\n  customText: <FormattedMessage id=\"wizard.loadingText\" defaultMessage=\"Loading, please wait.\" />,\n  cancelTitle: <FormattedMessage id=\"wizard.cancelText\" defaultMessage=\"Cancel\" />,\n};\n\nexport default LoadingStep;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { ClipboardCopy } from '@patternfly/react-core';\n\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\n\nconst TimeoutStep = ({ onClose, returnButtonTitle, title, secondaryActions, uuid }) => {\n  const intl = useIntl();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full} className=\"pf-v5-u-mt-4xl\">\n        <EmptyStateIcon icon={WrenchIcon} color=\"var(--pf-v5-global--Color--200)\" className=\"pf-v5-u-mb-0\" />\n        <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-v5-u-mt-xl\">\n          {title}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage(\n            {\n              id: 'wizard.uncompleteConfigurationDescription',\n              defaultMessage:\n                'We are still working to confirm credentials and app settings.{newLine}To track progress, check the Status column in the Integrations table.',\n            },\n            { newLine: <br key=\"br\" /> },\n          )}\n          {uuid ?? (\n            <ClipboardCopy isReadOnly hoverTip=\"Source UUID\" clickTip=\"Copied\" className=\"pf-v5-u-mt-md\">\n              {uuid}\n            </ClipboardCopy>\n          )}\n        </EmptyStateBody>\n        <Button variant=\"primary\" onClick={onClose} className=\"pf-v5-u-mt-xl\">\n          {returnButtonTitle}\n        </Button>\n        {secondaryActions && <EmptyStateActions>{secondaryActions}</EmptyStateActions>}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nTimeoutStep.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  returnButtonTitle: PropTypes.node.isRequired,\n  title: PropTypes.node,\n  secondaryActions: PropTypes.node,\n  uuid: PropTypes.string,\n};\n\nTimeoutStep.defaultProps = {\n  title: <FormattedMessage id=\"wizard.uncompleteConfigurationTitle\" defaultMessage=\"Configuration in progress\" />,\n};\n\nexport default TimeoutStep;\n","const computeSourceError = (source, intl) =>\n  source.applications?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  source.endpoint?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  source.authentications?.filter(Boolean).find(({ availability_status_error }) => availability_status_error)\n    ?.availability_status_error ||\n  intl.formatMessage({ id: 'wizard.unknownError', defaultMessage: 'Unknown error' });\n\nexport default computeSourceError;\n","export const computeSourceStatus = (source) => {\n  const appStatuses =\n    source.applications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const endpointStatuses =\n    source.endpoint?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const authenticationsStatuses =\n    source.authentications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n\n  const statuses = [...appStatuses, ...endpointStatuses, ...authenticationsStatuses];\n\n  if (statuses.includes('unavailable')) {\n    return 'unavailable';\n  }\n\n  if (statuses.length > 0 && statuses.every((status) => status === 'available')) {\n    return 'available';\n  }\n\n  if (statuses.includes('timeout')) {\n    return 'timeout';\n  }\n\n  return 'finished';\n};\n\nexport default computeSourceStatus;\n","const computeSourcesUrl = (isBeta = false) => (isBeta ? `/preview/settings/integrations` : `/settings/integrations`);\n\nexport default computeSourcesUrl;\n","import { REMEDIATIONS_NAME, TOPOLOGY_INV_NAME } from './constants';\n\nconst filterApps = (type) => type.name !== TOPOLOGY_INV_NAME && type.name !== REMEDIATIONS_NAME;\n\nexport const filterVendorAppTypes =\n  (sourceTypes, category) =>\n  ({ supported_source_types }) =>\n    supported_source_types.find((type) => sourceTypes.find(({ name }) => type === name)?.category === category);\n\nexport default filterApps;\n","import { ANSIBLE_TOWER_NAME, SATELLITE_NAME } from './constants';\n\nconst filterTypes = (type) => type.schema;\n\nconst hiddenTypes = [SATELLITE_NAME, ANSIBLE_TOWER_NAME];\n\nexport const filterVendorTypes =\n  (activeCategory, showHidden) =>\n  ({ category, name }) => {\n    if (showHidden) {\n      return category === activeCategory;\n    } else {\n      return category === activeCategory && !hiddenTypes.includes(name);\n    }\n  };\n\nexport default filterTypes;\n","import { ACCOUNT_AUTHORIZATION } from '../components/constants';\n\nconst isSuperKey = (source) => source?.app_creation_workflow === ACCOUNT_AUTHORIZATION;\n\nexport default isSuperKey;\n"],"names":["checkSourceStatus","id","checkAvailabilitySource","catch","checkAppAvailability","timeout","interval","entity","updatedTime","Promise","res","rej","start","Date","now","checkSource","then","data","availability_status","availability_status_error","last_checked_at","updated_at","prms","resolve","setTimeout","bind","delay","error","CloseModal","onExit","onStay","title","exitTitle","stayTitle","description","intl","isMounted","useRef","Modal","onEscapePress","e","current","className","variant","formatMessage","defaultMessage","header","Title","headingLevel","size","isOpen","onClose","actions","Button","key","onClick","propTypes","isRequired","defaultProps","rest","formOptions","authentication","getState","values","doNotRequirePassword","validate","filter","type","REQUIRED","componentProps","helperText","label","Component","TEXT_FIELD","initialValues","schema","sourceTypes","isLoading","FormTemplateWrapper","props","showFormControls","SourceAddModal","applicationTypes","disableAppSelection","isCancelling","onCancel","onSubmit","selectedType","initialWizardState","activeCategory","enableLighthouse","useFlag","stateSourceTypes","stateApplicationTypes","dispatch","useReducer","state","container","hcsEnrolled","filterTypes","filterApps","sources","document","createElement","useEffect","promises","push","all","sourceTypesOut","find","types","Object","prototype","hasOwnProperty","call","applicationTypesOut","style","opacity","Wizard","steps","name","component","LoadingStep","isFinishedStep","SourcesFormRenderer","source_type","_formApi","wizardState","FormTemplate","subscription","componentMapper","product_name","endpoint","display_name","EditLink","message","getApp","isBeta","useChrome","AppLink","to","target","href","computeSourcesUrl","rel","FinalWizard","afterSubmit","afterError","isFinished","isErrored","successfulMessage","hideSourcesButton","returnButtonTitle","reset","createdSource","tryAgain","afterSuccess","isDeletingSource","setIsDeleting","useState","isAfterDeletion","setDeleted","isStorageOnly","applications","some","app","extra","storage_only","isCostManagement","application_type_id","isHcs","hcs","removeSource","deleteSource","addAnotherSourceButton","step","FinishedStep","secondaryActions","customText","computeSourceStatus","ErroredStep","computeSourceError","TimeoutStep","uuid","uid","source_type_id","AmazonFinishedStep","primaryAction","Text","TextContent","cancelTitle","appendTo","querySelector","width","hasNoBodyWrapper","showClose","errorMessage","async","formData","startDate","sourceData","bulkCreate","source","source_type_name","authentications","resource_name","resource_type","map","appId","source_name","authenticationDataOut","undefined","urlOrHost","url","u","URL","scheme","protocol","replace","host","hostname","port","path","pathname","console","log","parseUrl","doCreateSource","timetoutedApps","payload","endpoints","hasEndpoint","endPointPort","parseInt","default","isNaN","hasApplication","application","authtype","emptyAuthType","dataOut","auth","createAuthApp","application_id","authentication_id","includes","Boolean","prepareInitialValues","isSubmitted","reducer","toString","AddSourceWizard","submitCallback","propsActiveCategory","formValues","isSuperKey","AddSourceButton","setIsOpen","AwsLink","children","fill","PREFIX","SUBWATCH_HREF","INSIGHTS_HREF","COST_HREF","Fragment","Alert","isInline","Bullseye","EmptyState","EmptyStateVariant","full","EmptyStateIcon","icon","color","EmptyStateBody","Grid","hasGutter","GridItem","md","EmptyStateActions","linkText","Form","FormGroup","fieldId","ClipboardCopy","isReadOnly","hoverTip","clickTip","Spinner","newLine","statuses","length","every","status","filterVendorAppTypes","category","supported_source_types","hiddenTypes","filterVendorTypes","showHidden","app_creation_workflow"],"sourceRoot":""}