{"version":3,"file":"js/addSourceWizard.ce935b853f5d5c779835.js","mappings":"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","sources":["webpack:///./src/components/FormComponents/Authentication.js","webpack:///./src/components/addSourceWizard/SourceAddModal.js","webpack:///./src/components/addSourceWizard/EditLink.js","webpack:///./src/components/addSourceWizard/FinalWizard.js","webpack:///./src/api/createSuperSource.js","webpack:///./src/api/createSource.js","webpack:///./src/components/addSourceWizard/index.js","webpack:///./src/utilities/filterTypes.js","webpack:///./src/utilities/isSuperKey.js"],"sourcesContent":["import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { useIntl } from 'react-intl';\n\nconst Authentication = (rest) => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  const { authentication } = formOptions.getState().values;\n\n  const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n  const componentProps = {\n    ...rest,\n    ...(authentication && authentication.id\n      ? {\n          isRequired: false,\n          helperText: intl.formatMessage(\n            {\n              id: 'wizard.changeAuthHelper',\n              defaultMessage: 'Changing this resets your current {label}.',\n            },\n            { label: rest.label }\n          ),\n          validate: doNotRequirePassword,\n        }\n      : {}),\n  };\n\n  const Component = componentMapper[componentTypes.TEXT_FIELD];\n\n  return <Component {...componentProps} />;\n};\n\nexport default Authentication;\n","import React, { useEffect, useReducer, useRef } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\n\nimport { Wizard } from '@patternfly/react-core/deprecated';\n\nimport createSchema from './SourceAddSchema';\nimport { doLoadApplicationTypes, doLoadSourceTypes } from '../../api/wizardHelpers';\nimport { wizardDescription, wizardTitle } from './stringConstants';\nimport filterApps, { filterVendorAppTypes } from '../../utilities/filterApps';\nimport filterTypes, { filterVendorTypes } from '../../utilities/filterTypes';\nimport Authentication from '../FormComponents/Authentication';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport LoadingStep from '../steps/LoadingStep';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst initialValues = {\n  schema: {},\n  sourceTypes: [],\n  isLoading: true,\n};\n\nconst FormTemplateWrapper = (props) => <FormTemplate {...props} showFormControls={false} />;\n\nconst SourceAddModal = ({\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  isCancelling,\n  onCancel,\n  values,\n  onSubmit,\n  selectedType,\n  initialWizardState,\n  activeCategory,\n}) => {\n  const enableLighthouse = useFlag('sources.wizard.lighthouse');\n\n  const reducer = (\n    state,\n    {\n      type,\n      sourceTypes,\n      applicationTypes,\n      container,\n      disableAppSelection,\n      intl,\n      selectedType,\n      initialWizardState,\n      activeCategory,\n      hcsEnrolled,\n    }\n  ) => {\n    switch (type) {\n      case 'loaded':\n        return {\n          ...state,\n          schema: createSchema(\n            sourceTypes.filter(filterTypes).filter(filterVendorTypes(activeCategory)),\n            applicationTypes.filter(filterApps).filter(filterVendorAppTypes(sourceTypes, activeCategory)),\n            disableAppSelection,\n            container,\n            intl,\n            selectedType,\n            initialWizardState,\n            activeCategory,\n            enableLighthouse,\n            hcsEnrolled\n          ),\n          isLoading: false,\n          sourceTypes,\n          applicationTypes,\n          hcsEnrolled,\n        };\n    }\n  };\n\n  const [{ schema, sourceTypes: stateSourceTypes, applicationTypes: stateApplicationTypes, isLoading }, dispatch] = useReducer(\n    reducer,\n    initialValues\n  );\n  const hcsEnrolled = useSelector(({ sources }) => sources.hcsEnrolled, shallowEqual);\n  const isMounted = useRef(false);\n  const container = useRef(document.createElement('div'));\n  const intl = useIntl();\n\n  useEffect(() => {\n    isMounted.current = true;\n\n    const promises = [];\n    if (!sourceTypes) {\n      promises.push(doLoadSourceTypes());\n    }\n\n    if (!applicationTypes) {\n      promises.push(doLoadApplicationTypes());\n    }\n\n    Promise.all(promises).then((data) => {\n      const sourceTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'sourceTypes'));\n      const applicationTypesOut = data.find((types) => Object.prototype.hasOwnProperty.call(types, 'applicationTypes'));\n\n      if (isMounted.current) {\n        dispatch({\n          type: 'loaded',\n          sourceTypes: sourceTypes || sourceTypesOut.sourceTypes,\n          applicationTypes: applicationTypes || applicationTypesOut.applicationTypes,\n          hcsEnrolled,\n          disableAppSelection,\n          container: container.current,\n          intl,\n          selectedType,\n          initialWizardState,\n          activeCategory,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    container.current.style.opacity = isCancelling ? 0 : 1;\n  }, [isCancelling]);\n\n  if (isLoading) {\n    return (\n      <Wizard\n        className=\"sources\"\n        isOpen={true}\n        onClose={onCancel}\n        title={wizardTitle(activeCategory)}\n        description={wizardDescription(activeCategory)}\n        steps={[\n          {\n            name: 'Loading',\n            component: <LoadingStep onClose={() => onCancel()} />,\n            isFinishedStep: true,\n          },\n        ]}\n      />\n    );\n  }\n\n  return (\n    <SourcesFormRenderer\n      initialValues={{\n        ...values,\n        ...(selectedType && { source_type: selectedType }),\n      }}\n      schema={schema}\n      onSubmit={(values, _formApi, wizardState) =>\n        onSubmit(values, stateSourceTypes, wizardState, stateApplicationTypes, hcsEnrolled)\n      }\n      onCancel={onCancel}\n      FormTemplate={FormTemplateWrapper}\n      subscription={{ values: true }}\n      componentMapper={{\n        authentication: Authentication,\n      }}\n    />\n  );\n};\n\nSourceAddModal.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    })\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    })\n  ),\n  values: PropTypes.object,\n  disableAppSelection: PropTypes.bool,\n  isCancelling: PropTypes.bool,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n  activeCategory: PropTypes.string,\n};\n\nSourceAddModal.defaultProps = {\n  values: {},\n  disableAppSelection: false,\n};\n\nexport default SourceAddModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport computeSourcesUrl from '../../utilities/computeSourcesUrl';\nimport AppLink from '../AppLink';\n\nconst EditLink = ({ id }) => {\n  const intl = useIntl();\n  const message = intl.formatMessage({ id: 'wizard.editSource', defaultMessage: 'Edit source' });\n  const { getApp, isBeta } = useChrome();\n\n  if (getApp() === 'sources') {\n    return (\n      <AppLink to={`/detail/${id}`}>\n        <Button variant=\"primary\" className=\"pf-u-mt-xl\">\n          {message}\n        </Button>\n      </AppLink>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"primary\"\n      className=\"pf-u-mt-xl\"\n      component=\"a\"\n      target=\"_blank\"\n      href={`${computeSourcesUrl(isBeta())}/detail/${id}`}\n      rel=\"noopener noreferrer\"\n    >\n      {message}\n    </Button>\n  );\n};\n\nEditLink.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default EditLink;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { Button, Modal, Text, TextContent } from '@patternfly/react-core';\nimport { Wizard } from '@patternfly/react-core/deprecated';\n\nimport { wizardDescription, wizardTitle } from './stringConstants';\nimport { getSourcesApi } from '../../api/entities';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport EditLink from './EditLink';\nimport computeSourceError from '../../utilities/computeSourceError';\n\nimport FinishedStep from '../steps/FinishedStep';\nimport LoadingStep from '../steps/LoadingStep';\nimport ErroredStep from '../steps/ErroredStep';\nimport TimeoutStep from '../steps/TimeoutStep';\nimport AmazonFinishedStep from '../steps/AmazonFinishedStep';\nimport { COST_MANAGEMENT_APP_ID, HCS_APP_NAME } from '../../utilities/constants';\n\nconst FinalWizard = ({\n  afterSubmit,\n  afterError,\n  isFinished,\n  isErrored,\n  successfulMessage,\n  hideSourcesButton,\n  returnButtonTitle,\n  reset,\n  createdSource = {},\n  tryAgain,\n  afterSuccess,\n  sourceTypes,\n  activeCategory,\n}) => {\n  const [isDeletingSource, setIsDeleting] = useState();\n  const [isAfterDeletion, setDeleted] = useState();\n  const isStorageOnly = createdSource.applications?.some((app) => app?.extra?.storage_only);\n  const isCostManagement = createdSource.applications?.some((app) => app?.application_type_id === COST_MANAGEMENT_APP_ID);\n  const isHcs = createdSource.applications?.some((app) => app?.extra?.hcs);\n\n  const intl = useIntl();\n\n  const removeSource = () => {\n    setIsDeleting(true);\n\n    return getSourcesApi()\n      .deleteSource(createdSource.id)\n      .then(() => {\n        afterSuccess && afterSuccess();\n        setDeleted(true);\n      })\n      .catch(() => setIsDeleting(false));\n  };\n\n  const addAnotherSourceButton = (\n    <Button variant=\"link\" onClick={reset}>\n      {intl.formatMessage({\n        id: 'wizard.addAnotherSource',\n        defaultMessage: 'Add another source',\n      })}\n    </Button>\n  );\n\n  let step;\n  if (isAfterDeletion) {\n    step = (\n      <FinishedStep\n        onClose={afterSubmit}\n        title={intl.formatMessage({ id: 'wizard.removeSourceSuccessTitle', defaultMessage: 'Removing successful' })}\n        successfulMessage={intl.formatMessage({\n          id: 'wizard.removeSourceSuccessDescription',\n          defaultMessage: 'Source was successfully removed.',\n        })}\n        hideSourcesButton={hideSourcesButton}\n        returnButtonTitle={returnButtonTitle}\n        secondaryActions={addAnotherSourceButton}\n      />\n    );\n  } else if (isDeletingSource) {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.removingSource',\n          defaultMessage: 'Removing source',\n        })}\n      />\n    );\n  } else if (isFinished) {\n    switch (computeSourceStatus(createdSource)) {\n      case 'unavailable':\n        step = (\n          <ErroredStep\n            onClose={afterSubmit}\n            secondaryActions={\n              <Button variant=\"link\" onClick={removeSource}>\n                {intl.formatMessage({ id: 'wizard.removeSource', defaultMessage: 'Remove source' })}\n              </Button>\n            }\n            Component={() => <EditLink id={createdSource.id} />}\n            message={computeSourceError(createdSource, intl)}\n            title={intl.formatMessage({ id: 'wizard.configurationUnsuccessful', defaultMessage: 'Configuration unsuccessful' })}\n          />\n        );\n        break;\n      case 'timeout':\n        step = (\n          <TimeoutStep\n            onClose={afterSubmit}\n            returnButtonTitle={returnButtonTitle}\n            secondaryActions={addAnotherSourceButton}\n            {...(isCostManagement &&\n              isStorageOnly && {\n                uuid: createdSource?.uid,\n              })}\n          />\n        );\n        break;\n      default:\n        if (createdSource.source_type_id === sourceTypes.find(({ name }) => name === 'amazon')?.id) {\n          step = <AmazonFinishedStep onClose={afterSubmit} />;\n        } else {\n          step = (\n            <FinishedStep\n              onClose={afterSubmit}\n              successfulMessage={\n                isCostManagement && isStorageOnly\n                  ? `You have chosen to manually customize the cost data set sent to ${\n                      isHcs ? HCS_APP_NAME : 'Cost Management'\n                    }, you will still need to perform additional steps to complete the process.`\n                  : successfulMessage\n              }\n              {...(isCostManagement &&\n                isStorageOnly && {\n                  title: <FormattedMessage id=\"wizard.waitTheresMore\" defaultMessage=\"Success, but wait there's more!\" />,\n                  uuid: createdSource?.uid,\n                })}\n              hideSourcesButton={hideSourcesButton}\n              returnButtonTitle={returnButtonTitle}\n              secondaryActions={addAnotherSourceButton}\n            />\n          );\n        }\n\n        break;\n    }\n  } else if (isErrored) {\n    step = (\n      <ErroredStep\n        onClose={afterError}\n        primaryAction={tryAgain}\n        secondaryActions={\n          <Text\n            component=\"a\"\n            target=\"_blank\"\n            href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n            rel=\"noopener noreferrer\"\n          >\n            {intl.formatMessage({ id: 'wizard.openTicket', defaultMessage: 'Open a support case' })}\n          </Text>\n        }\n        returnButtonTitle={intl.formatMessage({\n          id: 'wizard.retryText',\n          defaultMessage: 'Retry',\n        })}\n      />\n    );\n  } else {\n    step = (\n      <LoadingStep\n        customText={intl.formatMessage({\n          id: 'wizard.loadingText',\n          defaultMessage: 'Validating credentials',\n        })}\n        description={\n          <TextContent>\n            <Text className=\"pf-u-mb-md\">\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-a',\n                defaultMessage:\n                  // eslint-disable-next-line max-len\n                  \"This might take some time. You'll receive a notification if you are still in the Sources application when the process completes. Otherwise, you can check the status in the main sources table at any time.\",\n              })}\n            </Text>\n            <Text>\n              {intl.formatMessage({\n                id: 'wizard.loadingDescription-b',\n                defaultMessage: 'In the meantime, you can close this window while the validation process continues.',\n              })}\n            </Text>\n          </TextContent>\n        }\n        onClose={afterError}\n        cancelTitle={intl.formatMessage({ id: 'wizard.close', defaultMessage: 'Close' })}\n      />\n    );\n  }\n\n  const appendTo = React.useMemo(() => document.querySelector('.pf-v5-c-page.chr-c-page'), []);\n\n  return (\n    <Modal isOpen width=\"58%\" hasNoBodyWrapper appendTo={appendTo} showClose={false}>\n      <Wizard\n        className=\"sources\"\n        onClose={isFinished ? afterSubmit : afterError}\n        title={wizardTitle(activeCategory)}\n        description={wizardDescription(activeCategory)}\n        steps={[\n          {\n            name: 'Finish',\n            component: step,\n            isFinishedStep: true,\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n\nFinalWizard.propTypes = {\n  afterSubmit: PropTypes.func.isRequired,\n  afterError: PropTypes.func.isRequired,\n  isFinished: PropTypes.bool.isRequired,\n  isErrored: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node.isRequired,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node.isRequired,\n  errorMessage: PropTypes.node,\n  reset: PropTypes.func,\n  createdSource: PropTypes.object,\n  tryAgain: PropTypes.func,\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n  activeCategory: PropTypes.string,\n};\n\nexport default FinalWizard;\n","import { getSourcesApi } from './entities';\nimport { checkAppAvailability } from './getApplicationStatus';\nimport handleError from './handleError';\n\nconst createSuperSource = async (formData) => {\n  try {\n    const startDate = new Date();\n\n    const sourceData = await getSourcesApi().bulkCreate({\n      sources: [{ ...formData.source, source_type_name: formData.source_type }],\n      authentications: [{ ...formData.authentication, resource_name: formData.source.name, resource_type: 'source' }],\n      applications: formData.applications.map((appId) => ({\n        application_type_id: appId,\n        source_name: formData.source.name,\n      })),\n    });\n\n    const authenticationDataOut = await checkAppAvailability(\n      sourceData.authentications[0].id,\n      undefined,\n      undefined,\n      'showAuthentication',\n      startDate\n    );\n\n    return {\n      ...sourceData,\n      ...sourceData.sources[0],\n      authentications: [authenticationDataOut],\n    };\n  } catch (error) {\n    const errorMessage = await handleError(error);\n    throw errorMessage;\n  }\n};\n\nexport default createSuperSource;\n","import { handleError } from './handleError';\n\nimport { getSourcesApi } from './entities';\nimport { checkAppAvailability } from './getApplicationStatus';\nimport checkSourceStatus from './checkSourceStatus';\nimport { NO_APPLICATION_VALUE } from '../components/addSourceWizard/stringConstants';\nimport emptyAuthType from '../components/addSourceWizard/emptyAuthType';\n\nexport const parseUrl = (url) => {\n  if (!url) {\n    return {};\n  }\n\n  try {\n    const u = new URL(url);\n    return {\n      scheme: u.protocol.replace(/:$/, ''),\n      host: u.hostname,\n      port: u.port,\n      path: u.pathname,\n    };\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n    return {};\n  }\n};\n\nexport const urlOrHost = (formData) => (formData.url ? parseUrl(formData.url) : formData);\n\nexport const handleErrorWrapper = (sourceId) => async (error) => await handleError(error, sourceId);\n\nexport const doCreateSource = async (formData, timetoutedApps = [], applicationTypes) => {\n  let source;\n  try {\n    const payload = {\n      sources: [{ ...formData.source, source_type_name: formData.source_type }],\n      endpoints: [],\n      authentications: [],\n      applications: [],\n    };\n\n    const hasEndpoint = formData.url || formData.endpoint;\n    if (hasEndpoint) {\n      const { scheme, host, port, path } = urlOrHost(formData);\n\n      const endPointPort = parseInt(port, 10);\n\n      payload.endpoints.push({\n        ...formData.endpoint,\n        default: true,\n        source_name: formData.source.name,\n        scheme,\n        host,\n        port: isNaN(endPointPort) ? undefined : endPointPort,\n        path,\n      });\n    }\n\n    const hasApplication =\n      formData.application?.application_type_id && formData.application?.application_type_id !== NO_APPLICATION_VALUE;\n\n    if (hasApplication) {\n      payload.applications.push({\n        ...formData.application,\n        source_name: formData.source.name,\n      });\n    }\n\n    if (formData.authentication && formData.authentication.authtype !== emptyAuthType.type) {\n      payload.authentications.push({\n        ...formData.authentication,\n        resource_type: hasEndpoint ? 'endpoint' : hasApplication ? 'application' : 'source',\n        resource_name: formData.source.name,\n        ...(hasApplication && {\n          resource_name: applicationTypes?.find(({ id }) => id === formData.application.application_type_id)?.name,\n        }),\n        ...(hasEndpoint && { resource_name: urlOrHost(formData).host }),\n      });\n    }\n\n    const dataOut = await getSourcesApi().bulkCreate(payload);\n\n    source = dataOut.sources?.[0];\n    let app = dataOut.applications?.[0];\n    let endpoint = dataOut.endpoints?.[0];\n    let auth = dataOut.authentications?.[0];\n\n    if (hasEndpoint && hasApplication) {\n      await getSourcesApi().createAuthApp({\n        application_id: app.id,\n        authentication_id: auth.id,\n      });\n    }\n\n    await checkSourceStatus(source.id);\n\n    if (app) {\n      const timeout = timetoutedApps.includes(app.application_type_id) ? 10000 : 0;\n      app = await checkAppAvailability(app.id, timeout);\n    }\n\n    if (endpoint) {\n      endpoint = await checkAppAvailability(endpoint.id, undefined, undefined, 'getEndpoint');\n    }\n\n    return {\n      ...source,\n      endpoint: [endpoint].filter(Boolean),\n      applications: [app].filter(Boolean),\n    };\n  } catch (error) {\n    const errorMessage = await handleError(error, source ? source.id : undefined);\n    throw errorMessage;\n  }\n};\n","import React, { useReducer, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core';\n\nimport Form from './SourceAddModal';\nimport FinalWizard from './FinalWizard';\n\nimport { wizardTitle } from './stringConstants';\n\nimport isSuperKey from '../../utilities/isSuperKey';\nimport { CLOUD_VENDOR, REDHAT_VENDOR, timeoutedApps } from '../../utilities/constants';\nimport createSuperSource from '../../api/createSuperSource';\nimport { doCreateSource } from '../../api/createSource';\nimport CloseModal from '../CloseModal';\n\nconst prepareInitialValues = (initialValues, activeCategory) => ({\n  isSubmitted: false,\n  isFinished: false,\n  isErrored: false,\n  isCancelling: false,\n  values: initialValues,\n  createdSource: {},\n  error: undefined,\n  activeCategory,\n});\n\nconst reducer = (state, { type, values, data, error, initialValues, sourceTypes, applicationTypes }) => {\n  switch (type) {\n    case 'reset':\n      return prepareInitialValues(initialValues, state.activeCategory);\n    case 'prepareSubmitState':\n      return {\n        ...state,\n        isFinished: false,\n        isErrored: false,\n        error: undefined,\n        isSubmitted: true,\n        values,\n        sourceTypes,\n        applicationTypes,\n      };\n    case 'setSubmitted':\n      return { ...state, isFinished: true, createdSource: data };\n    case 'setErrored':\n      return { ...state, isErrored: true, error: error.toString() };\n    case 'onStay':\n      return { ...state, isCancelling: false };\n    case 'showCancelModal':\n      return { ...state, isCancelling: true, values };\n  }\n};\n\nconst AddSourceWizard = ({\n  successfulMessage,\n  isOpen,\n  sourceTypes,\n  applicationTypes,\n  disableAppSelection,\n  hideSourcesButton,\n  returnButtonTitle,\n  initialValues,\n  onClose,\n  afterSuccess,\n  selectedType,\n  initialWizardState,\n  submitCallback,\n  activeCategory: propsActiveCategory,\n}) => {\n  const [{ isErrored, isFinished, isSubmitted, values, error, isCancelling, createdSource, activeCategory, ...state }, dispatch] =\n    useReducer(reducer, prepareInitialValues(initialValues, propsActiveCategory));\n\n  const onSubmit = (formValues, sourceTypes, wizardState, applicationTypes, hcsEnrolled) => {\n    dispatch({ type: 'prepareSubmitState', values: formValues, sourceTypes, applicationTypes });\n\n    const fn = isSuperKey(formValues.source) ? createSuperSource : doCreateSource;\n    const submitValues = {\n      ...formValues,\n      application: { ...formValues.application, extra: { ...(formValues.application?.extra || {}), hcs: !!hcsEnrolled } },\n    };\n\n    return fn(submitValues, timeoutedApps(applicationTypes), applicationTypes)\n      .then((data) => {\n        afterSuccess && afterSuccess(data);\n        submitCallback && submitCallback({ isSubmitted: true, createdSource: data, sourceTypes });\n        dispatch({ type: 'setSubmitted', data });\n      })\n      .catch((error) => {\n        submitCallback && submitCallback({ isErrored: true, error, values: formValues, sourceTypes, wizardState });\n        dispatch({ type: 'setErrored', error });\n      });\n  };\n\n  const reset = () => dispatch({ type: 'reset', initialValues });\n\n  const afterSubmit = () => {\n    onClose(undefined, createdSource);\n    reset();\n  };\n\n  const onCancelBeforeExit = (values) => (isEmpty(values) ? onClose({}) : dispatch({ type: 'showCancelModal', values }));\n\n  const onExit = () => onClose(values);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  if (!isSubmitted) {\n    return (\n      <React.Fragment>\n        {isCancelling && <CloseModal onExit={onExit} onStay={() => dispatch({ type: 'onStay' })} />}\n        <Form\n          isCancelling={isCancelling}\n          values={values}\n          onSubmit={onSubmit}\n          onCancel={onCancelBeforeExit}\n          sourceTypes={sourceTypes}\n          applicationTypes={applicationTypes}\n          disableAppSelection={disableAppSelection}\n          selectedType={selectedType}\n          initialWizardState={initialWizardState}\n          activeCategory={activeCategory}\n        />\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <FinalWizard\n      afterSubmit={afterSubmit}\n      afterError={() => onClose({})}\n      isFinished={isFinished}\n      isErrored={isErrored}\n      successfulMessage={successfulMessage}\n      hideSourcesButton={hideSourcesButton}\n      returnButtonTitle={returnButtonTitle}\n      errorMessage={error}\n      reset={reset}\n      createdSource={createdSource}\n      tryAgain={() => onSubmit(values, state.sourceTypes, undefined, state.applicationTypes)}\n      afterSuccess={afterSuccess}\n      sourceTypes={state.sourceTypes}\n      activeCategory={activeCategory}\n    />\n  );\n};\n\nAddSourceWizard.propTypes = {\n  afterSuccess: PropTypes.func,\n  sourceTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      product_name: PropTypes.string.isRequired,\n      schema: PropTypes.shape({\n        authentication: PropTypes.array,\n        endpoint: PropTypes.object,\n      }),\n    })\n  ),\n  applicationTypes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      display_name: PropTypes.string.isRequired,\n    })\n  ),\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  successfulMessage: PropTypes.node,\n  initialValues: PropTypes.shape({\n    [PropTypes.string]: PropTypes.oneOf([PropTypes.string, PropTypes.array, PropTypes.number, PropTypes.bool]),\n  }),\n  disableAppSelection: PropTypes.bool,\n  hideSourcesButton: PropTypes.bool,\n  returnButtonTitle: PropTypes.node,\n  selectedType: PropTypes.string,\n  initialWizardState: PropTypes.object,\n  submitCallback: PropTypes.func,\n  activeCategory: PropTypes.oneOf([REDHAT_VENDOR, CLOUD_VENDOR]),\n};\n\nAddSourceWizard.defaultProps = {\n  successfulMessage: <FormattedMessage id=\"wizard.successfulMessage\" defaultMessage=\"Your source was successfully added.\" />,\n  initialValues: {},\n  returnButtonTitle: <FormattedMessage id=\"wizard.goBackToSources\" defaultMessage=\"Go back to Sources\" />,\n};\n\nexport const AddSourceButton = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Button variant=\"primary\" onClick={() => setIsOpen(true)}>\n        {wizardTitle()}\n      </Button>\n      <AddSourceWizard isOpen={isOpen} onClose={() => setIsOpen(false)} {...props} />\n    </React.Fragment>\n  );\n};\n\nexport default AddSourceWizard;\n","import { ANSIBLE_TOWER_NAME, SATELLITE_NAME } from './constants';\n\nconst filterTypes = (type) => type.schema;\n\nconst hiddenTypes = [SATELLITE_NAME, ANSIBLE_TOWER_NAME];\n\nexport const filterVendorTypes =\n  (activeCategory, showHidden) =>\n  ({ category, name }) => {\n    if (showHidden) {\n      return category === activeCategory;\n    } else {\n      return category === activeCategory && !hiddenTypes.includes(name);\n    }\n  };\n\nexport default filterTypes;\n","import { ACCOUNT_AUTHORIZATION } from '../components/constants';\n\nconst isSuperKey = (source) => source?.app_creation_workflow === ACCOUNT_AUTHORIZATION;\n\nexport default isSuperKey;\n"],"names":["rest","intl","useIntl","formOptions","authentication","getState","values","doNotRequirePassword","validate","filter","type","REQUIRED","componentProps","id","isRequired","helperText","formatMessage","defaultMessage","label","Component","TEXT_FIELD","initialValues","schema","sourceTypes","isLoading","FormTemplateWrapper","props","showFormControls","SourceAddModal","applicationTypes","disableAppSelection","isCancelling","onCancel","onSubmit","selectedType","initialWizardState","activeCategory","enableLighthouse","useFlag","stateSourceTypes","stateApplicationTypes","dispatch","useReducer","state","container","hcsEnrolled","filterTypes","filterApps","sources","isMounted","useRef","document","createElement","useEffect","current","promises","push","Promise","all","then","data","sourceTypesOut","find","types","Object","prototype","hasOwnProperty","call","applicationTypesOut","style","opacity","Wizard","className","isOpen","onClose","title","description","steps","name","component","LoadingStep","isFinishedStep","SourcesFormRenderer","source_type","_formApi","wizardState","FormTemplate","subscription","componentMapper","propTypes","product_name","endpoint","display_name","defaultProps","EditLink","message","getApp","isBeta","useChrome","AppLink","to","Button","variant","target","href","computeSourcesUrl","rel","FinalWizard","afterSubmit","afterError","isFinished","isErrored","successfulMessage","hideSourcesButton","returnButtonTitle","reset","createdSource","tryAgain","afterSuccess","isDeletingSource","setIsDeleting","useState","isAfterDeletion","setDeleted","isStorageOnly","applications","some","app","extra","storage_only","isCostManagement","application_type_id","isHcs","hcs","removeSource","deleteSource","catch","addAnotherSourceButton","onClick","step","FinishedStep","secondaryActions","customText","computeSourceStatus","ErroredStep","computeSourceError","TimeoutStep","uuid","uid","source_type_id","AmazonFinishedStep","primaryAction","Text","TextContent","cancelTitle","appendTo","querySelector","Modal","width","hasNoBodyWrapper","showClose","errorMessage","async","formData","startDate","Date","sourceData","bulkCreate","source","source_type_name","authentications","resource_name","resource_type","map","appId","source_name","authenticationDataOut","undefined","error","urlOrHost","url","u","URL","scheme","protocol","replace","host","hostname","port","path","pathname","console","log","parseUrl","doCreateSource","timetoutedApps","payload","endpoints","hasEndpoint","endPointPort","parseInt","default","isNaN","hasApplication","application","authtype","emptyAuthType","dataOut","auth","createAuthApp","application_id","authentication_id","checkSourceStatus","timeout","includes","Boolean","prepareInitialValues","isSubmitted","reducer","toString","AddSourceWizard","submitCallback","propsActiveCategory","formValues","isSuperKey","CloseModal","onExit","onStay","AddSourceButton","setIsOpen","hiddenTypes","filterVendorTypes","showHidden","category","app_creation_workflow"],"sourceRoot":""}