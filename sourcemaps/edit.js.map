{"version":3,"sources":["webpack:///./src/components/SourceEditForm/sourceEditContext.js","webpack:///./src/components/EditField/EditField.js","webpack:///./src/components/EditField/EditFieldWrapper.js","webpack:///./src/utilities/SourcesFormRenderer.js","webpack:///./src/api/doLoadSourceForEdit.js","webpack:///./src/components/SourceEditForm/Header.js","webpack:///./src/components/SourceEditForm/helpers.js","webpack:///./src/components/SourceEditForm/onSubmit.js","webpack:///./src/components/SourceEditForm/parser/AuthenticationManagement.js","webpack:///./src/components/SourceEditForm/parser/RemoveAuthPlaceholder.js","webpack:///./src/components/SourceEditForm/parser/helpers.js","webpack:///./src/components/SourceEditForm/parser/authentication.js","webpack:///./src/components/SourceEditForm/parser/unsupportedAuthType.js","webpack:///./src/components/SourceEditForm/parser/endpoint.js","webpack:///./src/components/SourceEditForm/parser/application.js","webpack:///./src/components/SourceEditForm/parser/parseSourceToSchema.js","webpack:///./src/components/SourceEditForm/parser/genericInfo.js","webpack:///./src/components/SourceEditForm/reducer.js","webpack:///./src/components/SourceEditForm/parser/RemoveAuth.js","webpack:///./src/components/SourceEditForm/SourceEditModal.js","webpack:///./src/api/getCmValues.js","webpack:///./src/components/SourceEditForm/importedRedirect.js"],"names":["sourceEditContext","createContext","EDIT_FIELD_NAME","EditField","isRequired","label","helperText","hideLabel","name","type","isEditable","useFormApi","getFieldState","getState","setState","useContext","value","get","initialValues","error","touched","showError","emptyText","includes","fieldId","isValid","helperTextInvalid","tabIndex","onKeyPress","e","charCode","preventDefault","onClick","className","propTypes","PropTypes","node","bool","string","NOT_CHANGING_COMPONENTS","componentTypes","CHECKBOX","SWITCH","EditFieldWrapper","originalComponent","props","Component","clearProps","componentMapper","RendererContext","editing","SourcesFormRenderer","FormTemplate","mapperExtension","validatorMapper","validatorTypes","REQUIRED","PATTERN","MIN_LENGTH","URL","Header","Grid","GridItem","xs","Title","headingLevel","TitleLevel","h1","size","id","defaultMessage","prepareInitialValues","sourceTypeName","endpoint","url","endpoints","authentications","rest","auhenticationsFinal","length","forEach","auth","scheme","host","path","port","endpointToUrl","undefined","source_type","onSubmit","values","dispatch","source","intl","push","updateSource","filteredValues","Object","keys","filter","key","set","selectOnlyEditedValues","formatMessage","authentication","costManagement","then","checkSourceStatus","routes","sources","loadEntities","AuthenticationManagement","schemaAuth","appTypes","isDeleting","appNames","applications","find","map","application_type_id","Boolean","app","display_name","sm","Button","variant","aria-label","removingAuth","TextContent","Text","component","TextVariants","small","authid","join","arrayOf","object","shape","RemoveAuthPlaceholder","Bullseye","Spinner","modifyFields","fields","field","modifyAuthSchemas","editedName","startsWith","fieldName","replace","createAuthFieldName","finalField","split","pop","validate","validation","removeRequiredValidator","authenticationFields","sourceType","schema","authtype","Content","p","additionalStepKeys","hardcodedSchemas","getAdditionalAuthSteps","enhancedFields","stepKey","getEnhancedAuthField","SUB_FORM","endpointFields","hidden","getEnhancedEndpointField","title","APP_NAMES","cmFieldsPrefixes","isCMField","some","prefix","getCMFields","flatMap","x","getEnhancedCMField","authenticationsTypes","apps","hasAppField","appendClusterIdentifier","TEXT_FIELD","costManagementFields","costManagementApp","hasCostManagement","billingSourceFields","enhandcedFields","applicationsFields","parseSourceToSchema","sourceId","asyncValidatorDebounced","isReadOnly","initialState","loading","isAuthRemoving","reducer","state","authId","product_name","RemoveAuth","body","actions","hasAttachedApp","useDispatch","useIntl","onClose","count","authname","doDeleteAuthentication","addMessage","handleError","Modal","isOpen","isFooterLeftAligned","isSmall","header","SourceEditModal","useReducer","history","useHistory","sourceRedux","useSource","isLoaded","useIsLoaded","useSelector","shallowEqual","sourceTypes","sourceTypesLoaded","appTypesLoaded","useEffect","Promise","all","getSourcesApi","showSource","listSourceEndpoints","listSourceApplications","axiosInstance","COST_MANAGEMENT_API_BASE","sourceData","data","basicValues","billing_source","credentials","listEndpointAuthentications","doLoadSourceForEdit","imported","redirectWhenImported","source_type_id","returnToSources","isLarge","Fragment","Provider","onCancel","formApi","dirtyFields","formWrapperProps","isHorizontal","canReset","disableSubmit","submitLabel","clearedValue","onReset"],"mappings":"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","file":"js/edit.980f9e77485086f677b6.js","sourcesContent":["import { createContext } from 'react';\n\nconst sourceEditContext = createContext();\n\nexport default sourceEditContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nimport PencilAltIcon from '@patternfly/react-icons/dist/js/icons/pencil-alt-icon';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\n\nimport sourceEditContext from '../SourceEditForm/sourceEditContext';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nexport const EDIT_FIELD_NAME = 'edit-field';\n\nconst EditField = ({ isRequired, label, helperText, hideLabel, name, type, isEditable }) => {\n    const { getFieldState, getState } = useFormApi();\n\n    const { setState } = useContext(sourceEditContext);\n\n    const { error, touched, value } = getFieldState(name) || { value: get(getState().initialValues, name) };\n    const showError = touched && error;\n\n    const isPassword = type === 'password' || name.includes('password');\n    const emptyText = isPassword ? 'Click to edit' : 'Click to add';\n\n    return (\n        <FormGroup\n            isRequired={ isRequired }\n            label={ !hideLabel && label }\n            fieldId={ name }\n            isValid={ !showError }\n            helperText={ helperText }\n            helperTextInvalid={ error }\n            tabIndex={0}\n            onKeyPress={(e) => {\n                if (e.charCode === 32 && isEditable) {\n                    e.preventDefault();\n                    setState({ type: 'setEdit', name });\n                }\n            }}\n            {...(isEditable && { onClick: () => setState({ type: 'setEdit', name }) })}\n        >\n            <div className={`pf-c-form__horizontal-group ins-c-sources__edit-field-group ${isEditable ? 'clickable' : ''}`}>\n                <TextContent className={`ins-c-sources__edit-field-group-text-content ${isEditable ? 'clickable' : ''}`}>\n                    <span className=\"ins-c-sources__edit-field-value pf-u-mr-sm\">\n                        {value ? value : isEditable ? emptyText : ''}\n                    </span>\n                    {isEditable && <PencilAltIcon />}\n                </TextContent>\n            </div>\n        </FormGroup>\n    );\n};\n\nEditField.propTypes = {\n    label: PropTypes.node,\n    isRequired: PropTypes.bool,\n    helperText: PropTypes.node,\n    hideLabel: PropTypes.bool,\n    isEditable: PropTypes.bool,\n    type: PropTypes.string,\n    name: PropTypes.string\n};\n\nexport default EditField;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport RendererContext from '@data-driven-forms/react-form-renderer/dist/cjs/renderer-context';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\n\nimport sourceEditContext from '../SourceEditForm/sourceEditContext';\nimport EditField from './EditField';\n\nexport const NOT_CHANGING_COMPONENTS = [componentTypes.CHECKBOX, componentTypes.SWITCH];\n\nconst EditFieldWrapper = ({ originalComponent, isEditable = true, ...props }) => {\n    let Component = EditField;\n    let clearProps = {};\n\n    const { componentMapper } = useContext(RendererContext);\n    const { editing } = useContext(sourceEditContext);\n\n    if (editing[props.name] || NOT_CHANGING_COMPONENTS.includes(originalComponent)) {\n        Component = componentMapper[originalComponent];\n    } else if (isEditable) {\n        clearProps = { isEditable: true };\n    }\n\n    return <Component {...props} {...clearProps}/>;\n};\n\nEditFieldWrapper.propTypes = {\n    originalComponent: PropTypes.string,\n    name: PropTypes.string,\n    isEditable: PropTypes.bool\n};\n\nexport default EditFieldWrapper;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer/dist/cjs/form-renderer';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validatorMapper from '@data-driven-forms/react-form-renderer/dist/cjs/validator-mapper';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/cjs/component-mapper';\n\nimport { mapperExtension } from '@redhat-cloud-services/frontend-components-sources/cjs/sourceFormRenderer';\n\nimport EditFieldWrapper from '../components/EditField/EditFieldWrapper';\n\nconst SourcesFormRenderer = props => (\n    <FormRenderer\n        FormTemplate={FormTemplate}\n        componentMapper={{\n            ...componentMapper,\n            ...mapperExtension,\n            'edit-field': EditFieldWrapper,\n            'switch-field': componentMapper[componentTypes.SWITCH]\n        }}\n        validatorMapper={{\n            'required-validator': validatorMapper[validatorTypes.REQUIRED],\n            'pattern-validator': validatorMapper[validatorTypes.PATTERN],\n            'min-length-validator': validatorMapper[validatorTypes.MIN_LENGTH],\n            'url-validator': validatorMapper[validatorTypes.URL]\n        }}\n        {...props}\n    />\n);\n\nexport default SourcesFormRenderer;\n","import { getSourcesApi } from './entities';\nimport { getCmValues } from './getCmValues';\n\nexport const doLoadSourceForEdit = (source) => Promise.all([\n    getSourcesApi().showSource(source.id),\n    getSourcesApi().listSourceEndpoints(source.id),\n    getSourcesApi().listSourceApplications(source.id),\n    getCmValues(source.id).catch(() => undefined)\n]).then(([sourceData, endpoints, applications, costManagement]) => {\n    const endpoint = endpoints && endpoints.data && endpoints.data[0];\n\n    let basicValues = {\n        source: {\n            ...source,\n            ...sourceData\n        },\n        applications: applications.data\n    };\n\n    if (costManagement) {\n        basicValues = {\n            ...basicValues,\n            billing_source: costManagement.billing_source,\n            credentials: costManagement.authentication.credentials\n        };\n    }\n\n    if (!endpoint) { // bail out\n        return basicValues;\n    }\n\n    return getSourcesApi().listEndpointAuthentications(endpoint.id).then(authentications => ({\n        ...basicValues,\n        endpoints: endpoints.data,\n        authentications: authentications.data\n    }));\n});\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\nimport { Title, TitleLevel } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst Header = () => (\n    <Grid>\n        <GridItem xs={12}>\n            <Title headingLevel={TitleLevel.h1} size=\"3xl\">\n                <FormattedMessage\n                    id=\"sources.editSource\"\n                    defaultMessage=\"Edit source\"\n                />\n            </Title>\n        </GridItem>\n        <GridItem xs={12}>\n            <FormattedMessage\n                id=\"sources.editSourceDescription\"\n                defaultMessage=\"You are editing a source.\"\n            />\n        </GridItem>\n    </Grid>\n);\n\nexport default Header;\n","import get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { endpointToUrl } from '../SourcesTable/formatters';\n\nexport const selectOnlyEditedValues = (values, editing) => {\n    const filteredValues = {};\n\n    Object.keys(editing)\n    .filter((key) => editing[key])\n    .forEach((key) => {\n        set(filteredValues, key, get(values, key));\n    });\n\n    return filteredValues;\n};\n\nexport const prepareInitialValues = ({ endpoints, authentications, ...rest }, sourceTypeName) => {\n    const auhenticationsFinal = {};\n\n    if (authentications && authentications.length > 0) {\n        authentications.forEach((auth) => {\n            auhenticationsFinal[`a${auth.id}`] = auth;\n        });\n    }\n\n    let endpoint;\n    let url;\n\n    if (endpoints && endpoints.length > 0) {\n        endpoint = endpoints[0];\n    }\n\n    if (endpoint) {\n        url = (endpoint.scheme || endpoint.host || endpoint.path || endpoint.port) ? endpointToUrl(endpoint) : undefined;\n    }\n\n    return ({\n        source_type: sourceTypeName,\n        endpoint,\n        authentications: auhenticationsFinal,\n        url,\n        ...rest\n    });\n};\n","import { selectOnlyEditedValues } from './helpers';\nimport { updateSource, loadEntities } from '../../redux/sources/actions';\nimport { routes } from '../../Routes';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nexport const onSubmit = (values, editing, dispatch, source, intl, push) => dispatch(updateSource(\n    source,\n    selectOnlyEditedValues(values, editing),\n    intl.formatMessage({\n        id: 'sources.modifiedNotificationTitle',\n        defaultMessage: `\"{ name }\" was modified successfully.`\n    }, { name: source.source.name }),\n    intl.formatMessage({\n        id: 'sources.modifiedNotificationDescription',\n        defaultMessage: 'The source was successfully modified.'\n    }),\n    {\n        authentication: intl.formatMessage({\n            id: 'sources.sourceEditAuthFailure',\n            defaultMessage: 'Authentication update failure.'\n        }),\n        source: intl.formatMessage({\n            id: 'sources.sourceEditFailure',\n            defaultMessage: 'Source update failure.'\n        }),\n        endpoint: intl.formatMessage({\n            id: 'sources.sourceEditEndpointFailure',\n            defaultMessage: 'Endpoint update failure.'\n        }),\n        costManagement: intl.formatMessage({\n            id: 'sources.sourceCostmanagementFailure',\n            defaultMessage: 'Cost Management update failure.'\n        })\n    }))\n.then(() => {\n    checkSourceStatus(source.source.id);\n    push(routes.sources.path);\n    dispatch(loadEntities());\n});\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport TrashIcon from '@patternfly/react-icons/dist/js/icons/trash-icon';\n\nimport sourceEditContext from '../sourceEditContext';\nimport { FormattedMessage } from 'react-intl';\n\nconst AuthenticationManagement = ({ schemaAuth, auth, appTypes, isDeleting }) => {\n    const { source, setState } = useContext(sourceEditContext);\n\n    const attachedAppTypes = source.source.applications.filter(\n        ({ authentications }) => authentications.find(({ id }) => id === auth.id)\n    );\n\n    const appNames = attachedAppTypes.map(\n        ({ application_type_id }) => application_type_id ? appTypes.find(({ id }) => id === application_type_id) : undefined\n    ).filter(Boolean).map(app => app.display_name);\n\n    const setAuthRemoving = () => setState({\n        type: 'setAuthRemoving',\n        removingAuth: {\n            auth,\n            appNames,\n            schemaAuth\n        }\n    });\n\n    return (\n        <GridItem sm={12}>\n            <Title size=\"xl\">{schemaAuth.name}&nbsp;\n                {!isDeleting &&\n                    <Button variant=\"plain\" aria-label=\"Remove authentication\" onClick={setAuthRemoving}>\n                        <TrashIcon />\n                    </Button>\n                }\n            </Title>\n            <TextContent>\n                <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                    <FormattedMessage\n                        id=\"sources.removeAuthDescription\"\n                        defaultMessage=\"id: {authid} { appNames}\"\n                        values={{\n                            authid: auth.id,\n                            appNames: appNames.length > 0 ?\n                                <FormattedMessage\n                                    id=\"sources.removeAuthWithApps\"\n                                    defaultMessage=\"used by {appNames}\"\n                                    values={{ appNames: appNames.join(', ') }}\n                                />\n                                : <FormattedMessage\n                                    id=\"sources.removeAuthNoApps\"\n                                    defaultMessage=\"not used by any app\"\n                                />\n                        }}\n                    />\n                </Text>\n            </TextContent>\n        </GridItem>\n    );\n};\n\nAuthenticationManagement.propTypes = {\n    isDeleting: PropTypes.bool,\n    appTypes: PropTypes.arrayOf(PropTypes.object),\n    schemaAuth: PropTypes.shape({\n        name: PropTypes.string.isRequired\n    }).isRequired,\n    auth: PropTypes.shape({\n        id: PropTypes.string.isRequired\n    }).isRequired\n};\n\nexport default AuthenticationManagement;\n","import React from 'react';\n\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nconst RemoveAuthPlaceholder = () => (\n    <Grid>\n        <GridItem xs={12}>\n            <Bullseye>\n                <Spinner size=\"lg\"/>\n            </Bullseye>\n        </GridItem>\n        <GridItem xs={12}>\n            <Bullseye>\n                <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mt-md\">\n                        <FormattedMessage\n                            id=\"sources.removingAuthMessage\"\n                            defaultMessage=\"This authentication is being removed...\"\n                        />\n                    </Text>\n                </TextContent>\n            </Bullseye>\n        </GridItem>\n    </Grid>\n);\n\nexport default RemoveAuthPlaceholder;\n","import { EDIT_FIELD_NAME } from '../../EditField/EditField';\n\nexport const modifyFields = (fields) => fields.map((field) => ({\n    ...field,\n    originalComponent: field.component,\n    component: EDIT_FIELD_NAME\n}));\n","import React from 'react';\nimport get from 'lodash/get';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport hardcodedSchemas from '@redhat-cloud-services/frontend-components-sources/cjs/hardcodedSchemas';\nimport { FormattedMessage } from 'react-intl';\n\nimport { unsupportedAuthTypeField } from './unsupportedAuthType';\nimport AuthenticationManagement from './AuthenticationManagement';\nimport RemoveAuthPlaceholder from './RemoveAuthPlaceholder';\nimport { modifyFields } from './helpers';\n\nexport const createAuthFieldName = (fieldName, id) => `authentications.a${id}.${fieldName.replace('authentication.', '')}`;\n\nexport const getLastPartOfName = (fieldName) => fieldName.split('.').pop();\n\nexport const removeRequiredValidator = (validate = []) =>\n    validate.filter(validation => validation.type !== validatorTypes.REQUIRED && validation.type !== 'required-validator');\n\nexport const getEnhancedAuthField = (sourceType, authtype, name) =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, 'generic', name], {});\n\nexport const getAdditionalAuthSteps = (sourceType, authtype) =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, 'generic', 'includeStepKeyFields'], []);\n\nexport const modifyAuthSchemas = (fields, id) => fields.map((field) => {\n    const editedName = field.name.startsWith('authentication') ? createAuthFieldName(field.name, id) : field.name;\n\n    const finalField = ({\n        ...field,\n        name: editedName,\n    });\n\n    const isPassword = getLastPartOfName(finalField.name) === 'password';\n\n    if (isPassword) {\n        finalField.helperText = (<FormattedMessage\n            id=\"sources.passwordResetHelperText\"\n            defaultMessage={`Changing this resets your current { label }.`}\n            values={{\n                label: finalField.label\n            }}\n        />);\n        finalField.isRequired = false;\n        finalField.validate = removeRequiredValidator(finalField.validate);\n    }\n\n    return finalField;\n});\n\nexport const authenticationFields = (authentications, sourceType, appTypes) => {\n    if (!authentications || authentications.length === 0 || !sourceType.schema || !sourceType.schema.authentication) {\n        return [];\n    }\n\n    return authentications.map(({ isDeleting, ...auth }) => {\n        const schemaAuth = sourceType.schema.authentication.find(({ type }) => type === auth.authtype);\n\n        if (!schemaAuth) {\n            return unsupportedAuthTypeField(auth.authtype);\n        }\n\n        const additionalStepKeys = getAdditionalAuthSteps(sourceType.name, auth.authtype);\n\n        const enhancedFields = schemaAuth.fields\n        .filter(field => !field.stepKey || additionalStepKeys.includes(field.stepKey))\n        .map((field) => ({\n            ...field,\n            ...getEnhancedAuthField(sourceType.name, auth.authtype, field.name)\n        }));\n\n        return ({\n            component: componentTypes.SUB_FORM,\n            name: schemaAuth.name,\n            fields: [\n                {\n                    component: 'description',\n                    name: `${auth.id}-authentication-management`,\n                    Content: AuthenticationManagement,\n                    schemaAuth,\n                    appTypes,\n                    auth,\n                    isDeleting\n                },\n                isDeleting ?  {\n                    component: 'description',\n                    name: `${auth.id}-remove-spinner`,\n                    Content: RemoveAuthPlaceholder\n                } : modifyFields(modifyAuthSchemas(enhancedFields, auth.id))\n            ]\n        });\n    });\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nexport const unsupportedAuthTypeField = (type) => ({\n    component: 'description',\n    name: `${type}-unsupported`,\n    // eslint-disable-next-line react/display-name\n    Content: () => (\n        <TextContent>\n            <Text component={ TextVariants.p }>\n                <FormattedMessage\n                    id=\"sources.unsupportedAuthType\"\n                    defaultMessage={`Authentication type of { type } is no longer supported.`}\n                    values={{ type }}\n                />\n            </Text>\n        </TextContent>\n    )\n});\n","import React from 'react';\nimport get from 'lodash/get';\nimport { FormattedMessage } from 'react-intl';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport hardcodedSchemas from '@redhat-cloud-services/frontend-components-sources/cjs/hardcodedSchemas';\nimport { modifyFields } from './helpers';\n\nexport const getEnhancedEndpointField = (sourceType, name) =>\n    get(hardcodedSchemas, [sourceType, 'endpoint', name], {});\n\nexport const endpointFields = (sourceType) => {\n    if (!sourceType.schema || !sourceType.schema.endpoint || sourceType.schema.endpoint.hidden) {\n        return undefined;\n    }\n\n    const schemaAuth = sourceType.schema.endpoint;\n\n    const enhancedFields = schemaAuth.fields.map((field) => ({\n        ...field,\n        ...getEnhancedEndpointField(sourceType.name, field.name)\n    }));\n\n    return ({\n        component: componentTypes.SUB_FORM,\n        title: <FormattedMessage\n            id=\"sources.endpoint\"\n            defaultMessage=\"Endpoint\"\n        />,\n        name: 'endpoint',\n        fields: modifyFields(enhancedFields)\n    });\n};\n","import React from 'react';\nimport get from 'lodash/get';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport hardcodedSchemas from '@redhat-cloud-services/frontend-components-sources/cjs/hardcodedSchemas';\nimport { FormattedMessage } from 'react-intl';\nimport { modifyFields } from './helpers';\nimport { EDIT_FIELD_NAME } from '../../EditField/EditField';\n\nexport const APP_NAMES = {\n    COST_MANAGAMENT: '/insights/platform/cost-management'\n};\n\nexport const cmFieldsPrefixes = ['billing_source', 'credentials'];\n\nexport const isCMField = ({ name }) => cmFieldsPrefixes.some((prefix) => name.startsWith(prefix));\n\nexport const getCMFields = (authentication) =>\n    Object.keys(authentication)\n    .map((key) => authentication[key].fields.filter(isCMField))\n    .flatMap((x) => x);\n\nexport const getEnhancedCMField = (sourceType, name, authenticationsTypes) => {\n    let field = undefined;\n\n    authenticationsTypes.forEach((type) => {\n        const apps = field ? {} : get(hardcodedSchemas, [sourceType, 'authentication', type], {});\n\n        Object.keys(apps).find((key) => {\n            const hasAppField = get(hardcodedSchemas, [sourceType, 'authentication', type, key, name], undefined);\n            if (hasAppField) {\n                field = hasAppField;\n                return true;\n            }\n        });\n    });\n\n    return field ? field : {};\n};\n\nexport const appendClusterIdentifier = (sourceType) =>\n    sourceType.name === 'openshift' ? [{\n        name: 'source.source_ref',\n        label: <FormattedMessage\n            id=\"sources.clusterIdentifier\"\n            defaultMessage=\"Cluster identifier\"\n        />,\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n        originalComponent: componentTypes.TEXT_FIELD,\n        component: EDIT_FIELD_NAME\n    }] : [];\n\nexport const costManagementFields = (\n    applications = [],\n    sourceType,\n    appTypes,\n    source\n) => {\n    const costManagementApp = appTypes.find(({ name }) => name === APP_NAMES.COST_MANAGAMENT);\n\n    if (!costManagementApp) {\n        return undefined;\n    }\n\n    const hasCostManagement = applications.find(({ application_type_id }) => application_type_id === costManagementApp.id);\n\n    if (!hasCostManagement) {\n        return undefined;\n    }\n\n    const billingSourceFields = getCMFields(sourceType.schema.authentication);\n\n    const authenticationsTypes = source.authentications ? source.authentications.map(({ authtype }) => authtype) : [];\n\n    const enhandcedFields = billingSourceFields.map((field) => ({\n        ...field,\n        ...getEnhancedCMField(sourceType.name, field.name, authenticationsTypes)\n    }));\n\n    return ({\n        component: componentTypes.SUB_FORM,\n        title: costManagementApp.display_name,\n        name: costManagementApp.display_name,\n        fields: [\n            ...modifyFields(enhandcedFields),\n            ...appendClusterIdentifier(sourceType)\n        ]\n    });\n};\n\nexport const applicationsFields = (\n    applications,\n    sourceType,\n    appTypes,\n    source\n) => ([\n    costManagementFields(\n        applications,\n        sourceType,\n        appTypes,\n        source\n    )\n]);\n","import { genericInfo } from './genericInfo';\nimport { authenticationFields } from './authentication';\nimport { endpointFields } from './endpoint';\nimport { applicationsFields } from './application';\n\nexport const parseSourceToSchema = (source, sourceType, appTypes) => ({\n    fields: [\n        ...genericInfo(source.source.id),\n        ...authenticationFields(source.authentications, sourceType, appTypes),\n        ...applicationsFields(source.applications, sourceType, appTypes, source),\n        source.endpoints && source.endpoints.length > 0 ? endpointFields(sourceType) : false\n    ].filter(Boolean)\n});\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport { asyncValidatorDebounced } from '@redhat-cloud-services/frontend-components-sources/cjs/SourceAddSchema';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nimport { EDIT_FIELD_NAME } from '../../EditField/EditField';\n\nexport const genericInfo = (sourceId) => ([\n    {\n        name: 'source.name',\n        label: <FormattedMessage\n            id=\"sources.sourceName\"\n            defaultMessage=\"Source name\"\n        />,\n        originalComponent: componentTypes.TEXT_FIELD,\n        component: EDIT_FIELD_NAME,\n        validate: [\n            (value) => asyncValidatorDebounced(value, sourceId),\n            { type: validatorTypes.REQUIRED }\n        ],\n        isRequired: true\n    }, {\n        name: 'source_type',\n        label: <FormattedMessage\n            id=\"sources.sourceType\"\n            defaultMessage=\"Source type\"\n        />,\n        isReadOnly: true,\n        component: EDIT_FIELD_NAME,\n        isEditable: false\n    }\n]);\n","import { parseSourceToSchema } from './parser/parseSourceToSchema';\nimport { prepareInitialValues } from './helpers';\n\nexport const initialState = {\n    loading: true,\n    editing: {},\n    source: undefined,\n    initialValues: {},\n    sourceType: undefined,\n    schema: undefined,\n    isAuthRemoving: null\n};\n\nconst reducer = (state, { type, source, name, sourceType, appTypes, authId, removingAuth }) => {\n    switch (type) {\n        case 'createForm':\n            return {\n                ...state,\n                sourceType,\n                initialValues: prepareInitialValues(state.source, sourceType.product_name),\n                schema: parseSourceToSchema(state.source, sourceType, appTypes),\n                loading: false\n            };\n        case 'setSource':\n            return {\n                ...state,\n                source\n            };\n        case 'reset':\n            return {\n                ...state,\n                editing: {}\n            };\n        case 'setEdit':\n            return {\n                ...state,\n                editing: {\n                    ...state.editing,\n                    [name]: !state.editing[name]\n                }\n            };\n        case 'removeAuthPending':\n            return {\n                ...state,\n                isAuthRemoving: null,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.map((auth) => auth.id === authId ? {\n                        ...auth, isDeleting: true\n                    } : auth)\n                }\n            };\n        case 'removeAuthRejected':\n            return {\n                ...state,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.map((auth) => auth.id === authId ? {\n                        ...auth, isDeleting: false\n                    } : auth)\n                }\n            };\n        case 'removeAuthFulfill':\n            return {\n                ...state,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.filter((auth) => auth.id !== authId)\n                }\n            };\n        case 'setAuthRemoving':\n            return {\n                ...state,\n                isAuthRemoving: removingAuth\n            };\n        case 'closeAuthRemoving':\n            return {\n                ...state,\n                isAuthRemoving: null\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport sourceEditContext from '../sourceEditContext';\nimport { addMessage } from '../../../redux/sources/actions';\nimport { doDeleteAuthentication } from '../../../api/entities';\nimport { handleError } from '@redhat-cloud-services/frontend-components-sources/cjs/handleError';\n\nconst RemoveAuth = ({ appNames, schemaAuth, auth }) => {\n    const hasAttachedApp = appNames.length > 0;\n    let body;\n    let actions;\n\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    const { setState } = useContext(sourceEditContext);\n\n    const onClose = () => setState({ type: 'closeAuthRemoving' });\n\n    const onRemove = () => {\n        setState({ type: 'removeAuthPending', authId: auth.id });\n        onClose();\n        return doDeleteAuthentication(auth.id).then(() => {\n            setState({ type: 'removeAuthFulfill', authId: auth.id });\n            dispatch(addMessage(\n                intl.formatMessage(\n                    { id: 'sources.authRemoveFullfil', defaultMessage: 'Authentication was deleted successfully.' }\n                ),\n                'success'\n            ));\n        })\n        .catch((error) => {\n            setState({ type: 'removeAuthRejected', authId: auth.id });\n            dispatch(addMessage(\n                intl.formatMessage(\n                    { id: 'sources.authRemoveRejected', defaultMessage: 'Authentication was not deleted successfully.' }\n                ),\n                'danger',\n                handleError(error)\n            ));\n        });\n    };\n\n    if (hasAttachedApp) {\n        body = (<FormattedMessage\n            id=\"sources.removeAuthWarningApps\"\n            defaultMessage=\"To remove {authname} authentication you have to remove attached\n            {count, plural, one {application} other {applications}}: { appNames }.\"\n            values={{\n                appNames: appNames.join(', '),\n                count: appNames.length,\n                authname: <b>{schemaAuth.name}</b>\n            }}\n        />);\n        actions = [<Button\n            id=\"deleteCancel\"\n            key=\"cancel\"\n            variant=\"link\"\n            type=\"button\"\n            onClick={ onClose }\n        >\n            <FormattedMessage\n                id=\"sources.close\"\n                defaultMessage=\"Close\"\n            />\n        </Button>];\n    } else {\n        body = (<FormattedMessage\n            id=\"sources.removeAuthWarning\"\n            defaultMessage=\"This action will permanently remove {auth} from this source.\"\n            values={{ auth: <b>{schemaAuth.name}</b> }}\n        />);\n        actions = [<Button\n            id=\"deleteSubmit\"\n            key=\"submit\"\n            variant=\"danger\"\n            type=\"button\"\n            onClick={ onRemove }\n        >\n            <FormattedMessage\n                id=\"sources.deleteConfirm\"\n                defaultMessage=\"Remove authentication\"\n            />\n        </Button>,\n        <Button\n            id=\"deleteCancel\"\n            key=\"cancel\"\n            variant=\"link\"\n            type=\"button\"\n            onClick={ onClose }\n        >\n            <FormattedMessage\n                id=\"sources.deleteCancel\"\n                defaultMessage=\"Cancel\"\n            />\n        </Button>];\n    }\n\n    return (\n        <Modal\n            isOpen\n            className=\"ins-c-sources__dialog--warning\"\n            isFooterLeftAligned\n            onClose={onClose}\n            actions={actions}\n            isSmall\n            title={\n                intl.formatMessage({\n                    id: 'sources.deleteAuthTitle',\n                    defaultMessage: 'Remove authentication?',\n                })\n            }\n            header={\n                <Title size=\"2xl\">\n                    <ExclamationTriangleIcon size=\"sm\" className=\"ins-m-alert ins-c-source__delete-icon pf-u-mr-sm\" />\n                    {intl.formatMessage({\n                        id: 'sources.deleteAppTitle',\n                        defaultMessage: 'Remove authentication?',\n                    })}\n                </Title>\n            }\n        >\n\n            <TextContent>\n                <Text variant={TextVariants.p}>\n                    {body}\n                </Text>\n            </TextContent>\n        </Modal>\n    );\n};\n\nRemoveAuth.propTypes = {\n    appNames: PropTypes.arrayOf(PropTypes.string),\n    schemaAuth: PropTypes.shape({\n        name: PropTypes.string.isRequired\n    }).isRequired,\n    auth: PropTypes.shape({\n        id: PropTypes.string.isRequired\n    }).isRequired\n};\n\nexport default RemoveAuth;\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\n\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport { doLoadSourceForEdit } from '../../api/doLoadSourceForEdit';\nimport Header from './Header';\nimport { onSubmit } from './onSubmit';\n\nimport { redirectWhenImported } from './importedRedirect';\nimport { routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport reducer, { initialState } from './reducer';\nimport sourceEditContext from './sourceEditContext';\nimport RemoveAuth from './parser/RemoveAuth';\n\nconst SourceEditModal = () => {\n    const [state, setState] = useReducer(reducer, initialState);\n    const history = useHistory();\n    const sourceRedux = useSource();\n    const isLoaded = useIsLoaded();\n\n    const { loading, editing, source, initialValues, schema } = state;\n\n    const intl = useIntl();\n\n    const {\n        sourceTypes,\n        appTypes,\n        sourceTypesLoaded,\n        appTypesLoaded\n    } = useSelector(({ sources }) => sources, shallowEqual);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (sourceRedux) {\n            doLoadSourceForEdit(sourceRedux).then((source) => {\n                if (source.source.imported) {\n                    redirectWhenImported(dispatch, intl, history, source.source.name);\n                }\n\n                setState({ type: 'setSource', source });\n            });\n        }\n    }, [sourceRedux, isLoaded]);\n\n    useEffect(() => {\n        if (source && appTypesLoaded && sourceTypesLoaded) {\n            const sourceType = sourceTypes.find(({ id }) => id === source.source.source_type_id);\n\n            setState({ type: 'createForm', sourceType, source, appTypes });\n        }\n    }, [appTypesLoaded, source, sourceTypesLoaded]);\n\n    const isLoading = !appTypesLoaded || !sourceTypesLoaded || loading;\n\n    const returnToSources = () => history.push(routes.sources.path);\n\n    if (isLoading) {\n        return (\n            <Modal\n                title={intl.formatMessage({\n                    id: 'sources.editSource',\n                    defaultMessage: 'Edit source.'\n                })}\n                header={<Header />}\n                isOpen={true}\n                isLarge\n                onClose={returnToSources}\n            >\n                <div className=\"ins-c-sources__dialog--spinnerContainer\">\n                    <Spinner />\n                </div>\n            </Modal>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <sourceEditContext.Provider value={{ setState, source, editing }}>\n                {state.isAuthRemoving && <RemoveAuth {...state.isAuthRemoving}/>}\n                <Modal\n                    title={intl.formatMessage({\n                        id: 'sources.editSource',\n                        defaultMessage: 'Edit source.'\n                    })}\n                    header={<Header />}\n                    isOpen={!state.isAuthRemoving}\n                    isLarge\n                    onClose={returnToSources}\n                >\n                    <SourcesFormRenderer\n                        onCancel={returnToSources}\n                        schema={schema}\n                        onSubmit={\n                            (values, formApi) =>\n                                onSubmit(values, formApi.getState().dirtyFields, dispatch, source, intl, history.push)\n                        }\n                        FormTemplate={(props) => (<FormTemplate\n                            {...props}\n                            formWrapperProps={{\n                                isHorizontal: true\n                            }}\n                            canReset\n                            disableSubmit={['submitting', 'pristine']}\n                            submitLabel={intl.formatMessage({\n                                id: 'sources.save',\n                                defaultMessage: 'Save'\n                            })}\n                        />)}\n                        clearedValue={null}\n                        onReset={() => setState({ type: 'reset' })}\n                        initialValues={initialValues}\n                    />\n                </Modal>\n            </sourceEditContext.Provider>\n        </React.Fragment>\n    );\n};\n\nexport default SourceEditModal;\n","import { axiosInstance } from './entities';\nimport { COST_MANAGEMENT_API_BASE } from './constants';\n\nexport const getCmValues = (id) => axiosInstance.get(`${COST_MANAGEMENT_API_BASE}/sources/${id}/`);\n","import { routes } from '../../Routes';\nimport { addMessage } from '../../redux/sources/actions';\n\nexport const redirectWhenImported = (dispatch, intl, history, name) => {\n    dispatch(addMessage(\n        intl.formatMessage({\n            id: 'sources.importSourceCannotEdited',\n            defaultMessage: 'Source { name } is imported.'\n        }, { name }),\n        'danger',\n        intl.formatMessage({\n            id: 'sources.importedSourcesCannotEdited',\n            defaultMessage: 'Imported sources cannot be edited.'\n        }),\n    ));\n    history.push(routes.sources.path);\n};\n"],"sourceRoot":""}