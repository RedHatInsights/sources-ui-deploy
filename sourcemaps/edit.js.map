{"version":3,"sources":["webpack:///./src/components/EditField/EditField.js","webpack:///./src/utilities/SourcesFormRenderer.js","webpack:///./src/api/doLoadSourceForEdit.js","webpack:///./src/components/SourceEditForm/HorizontalFormWrapper.js","webpack:///./src/components/SourceEditForm/Header.js","webpack:///./src/components/SourceEditForm/helpers.js","webpack:///./src/components/SourceEditForm/onSubmit.js","webpack:///./src/components/SourceEditForm/parser/genericInfo.js","webpack:///./src/components/SourceEditForm/sourceEditContext.js","webpack:///./src/components/SourceEditForm/parser/RemoveAuth.js","webpack:///./src/components/SourceEditForm/parser/AuthenticationManagement.js","webpack:///./src/components/SourceEditForm/parser/RemoveAuthPlaceholder.js","webpack:///./src/components/SourceEditForm/parser/authentication.js","webpack:///./src/components/SourceEditForm/parser/unsupportedAuthType.js","webpack:///./src/components/SourceEditForm/parser/helpers.js","webpack:///./src/components/SourceEditForm/parser/endpoint.js","webpack:///./src/components/SourceEditForm/parser/application.js","webpack:///./src/components/SourceEditForm/parser/parseSourceToSchema.js","webpack:///./src/components/SourceEditForm/reducer.js","webpack:///./src/components/SourceEditForm/SourceEditModal.js","webpack:///./src/api/getCmValues.js","webpack:///./src/components/SourceEditForm/importedRedirect.js"],"names":["EDIT_FIELD_NAME","EditField","isRequired","label","helperText","hideLabel","meta","input","type","setEdit","error","showError","touched","value","emptyText","name","includes","fieldId","isValid","helperTextInvalid","onClick","undefined","tabIndex","onKeyPress","e","charCode","preventDefault","className","propTypes","PropTypes","node","bool","object","FieldProvider","oneOfType","func","shape","any","string","EditFieldProvider","rest","props","SourcesFormRenderer","layoutMapper","formFieldsMapper","mapperExtension","HorizontalFormWrapper","children","Form","isHorizontal","Header","Grid","GridItem","xs","Title","headingLevel","TitleLevel","h1","size","id","defaultMessage","prepareInitialValues","sourceTypeName","endpoint","url","endpoints","authentications","auhenticationsFinal","length","forEach","auth","scheme","host","path","port","endpointToUrl","source_type","onSubmit","values","editing","dispatch","source","intl","push","updateSource","filteredValues","Object","keys","filter","key","set","get","selectOnlyEditedValues","formatMessage","authentication","costManagement","then","checkSourceStatus","routes","sources","loadEntities","genericInfo","sourceId","component","componentTypes","TEXT_FIELD","validate","asyncValidator","isReadOnly","sourceEditContext","createContext","RemoveAuth","body","actions","onClose","appNames","schemaAuth","hasAttachedApp","useDispatch","useIntl","setState","useContext","join","count","variant","authId","doDeleteAuthentication","addMessage","handleError","Modal","isOpen","isFooterLeftAligned","isSmall","title","Split","gutter","SplitItem","isFilled","Stack","TextContent","Text","TextVariants","p","arrayOf","AuthenticationManagement","appTypes","isDeleting","useState","isRemoving","setRemove","applications","find","map","application_type_id","Boolean","app","display_name","Fragment","sm","Button","aria-label","small","authid","RemoveAuthPlaceholder","Bullseye","Spinner","modifyAuthSchemas","fields","field","editedName","startsWith","fieldName","replace","createAuthFieldName","isEditing","finalField","split","pop","validation","validatorTypes","REQUIRED","removeRequiredValidator","authenticationFields","sourceType","schema","authtype","Content","additionalStepKeys","hardcodedSchemas","getAdditionalAuthSteps","enhancedFields","stepKey","getEnhancedAuthField","SUB_FORM","NOT_CHANGING_COMPONENTS","CHECKBOX","SWITCH","modifyFields","endpointFields","hidden","getEnhancedEndpointField","APP_NAMES","cmFieldsPrefixes","isCMField","some","prefix","getCMFields","flatMap","x","getEnhancedCMField","authenticationsTypes","apps","hasAppField","appendClusterIdentifier","costManagementFields","costManagementApp","hasCostManagement","billingSourceFields","enhandcedFields","applicationsFields","parseSourceToSchema","initialState","loading","initialValues","reducer","state","product_name","SourceEditModal","useReducer","history","useHistory","sourceRedux","useSource","isLoaded","useIsLoaded","useSelector","shallowEqual","sourceTypes","sourceTypesLoaded","appTypesLoaded","useEffect","Promise","all","getSourcesApi","showSource","listSourceEndpoints","listSourceApplications","axiosInstance","COST_MANAGEMENT_API_BASE","sourceData","data","basicValues","billing_source","credentials","listEndpointAuthentications","doLoadSourceForEdit","imported","redirectWhenImported","source_type_id","returnToSources","header","isLarge","Provider","onCancel","formApi","getState","dirtyFields","FormWrapper","clearedValue","canReset","disableSubmit","onReset","buttonsLabels","submitLabel"],"mappings":"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","file":"js/edit.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport PencilAltIcon from '@patternfly/react-icons/dist/js/icons/pencil-alt-icon';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\n\nexport const EDIT_FIELD_NAME = 'edit-field';\n\nconst EditField = ({ isRequired, label, helperText, hideLabel, meta, input, type, setEdit }) => {\n    const { error, touched } = meta;\n    const showError = touched && error;\n\n    let value = input.value;\n\n    if (typeof value === 'boolean') {\n        value = value ? 'True' : 'False';\n    }\n\n    const isPassword = type === 'password' || input.name.includes('password');\n    const emptyText = isPassword ? 'Click to edit' : 'Click to add';\n\n    return (\n        <FormGroup\n            isRequired={ isRequired }\n            label={ !hideLabel && label }\n            fieldId={ input.name }\n            isValid={ !showError }\n            helperText={ helperText }\n            helperTextInvalid={ error }\n            onClick={setEdit ? () => setEdit(input.name) : undefined}\n            tabIndex={0}\n            onKeyPress={(e) => {\n                if (e.charCode === 32 && setEdit) {\n                    e.preventDefault();\n                    setEdit(input.name);\n                }\n            }}\n        >\n            <div className={`pf-c-form__horizontal-group ins-c-sources__edit-field-group ${setEdit ? 'clickable' : ''}`}>\n                <TextContent className={`ins-c-sources__edit-field-group-text-content ${setEdit ? 'clickable' : ''}`}>\n                    <span className=\"ins-c-sources__edit-field-value pf-u-mr-sm\">\n                        {value ? value : setEdit ? emptyText : ''}\n                    </span>\n                    {setEdit && <PencilAltIcon />}\n                </TextContent>\n            </div>\n        </FormGroup>\n    );\n};\n\nEditField.propTypes = {\n    label: PropTypes.node,\n    isRequired: PropTypes.bool,\n    helperText: PropTypes.node,\n    meta: PropTypes.object.isRequired,\n    FieldProvider: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    input: PropTypes.shape({\n        value: PropTypes.any,\n        name: PropTypes.string.isRequired\n    }).isRequired,\n    hideLabel: PropTypes.bool,\n    setEdit: PropTypes.func,\n    type: PropTypes.string\n};\n\nconst EditFieldProvider = ({ FieldProvider, ...rest }) =>\n    (\n        <FieldProvider { ...rest }>\n            { (props) =>  <EditField  { ...props }/> }\n        </FieldProvider>\n    );\n\nEditFieldProvider.propTypes = {\n    FieldProvider: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired\n};\n\nexport default EditFieldProvider;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer';\nimport { layoutMapper, formFieldsMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { mapperExtension } from '@redhat-cloud-services/frontend-components-sources';\n\nimport EditField from '../components/EditField/EditField';\n\nconst SourcesFormRenderer = props => (\n    <FormRenderer\n        layoutMapper={layoutMapper}\n        formFieldsMapper={{\n            ...formFieldsMapper,\n            ...mapperExtension,\n            'edit-field': EditField\n        }}\n        {...props}\n    />\n);\n\nexport default SourcesFormRenderer;\n","import { getSourcesApi } from './entities';\nimport { getCmValues } from './getCmValues';\n\nexport const doLoadSourceForEdit = (source) => Promise.all([\n    getSourcesApi().showSource(source.id),\n    getSourcesApi().listSourceEndpoints(source.id),\n    getSourcesApi().listSourceApplications(source.id),\n    getCmValues(source.id).catch(() => undefined)\n]).then(([sourceData, endpoints, applications, costManagement]) => {\n    const endpoint = endpoints && endpoints.data && endpoints.data[0];\n\n    let basicValues = {\n        source: {\n            ...source,\n            ...sourceData\n        },\n        applications: applications.data\n    };\n\n    if (costManagement) {\n        basicValues = {\n            ...basicValues,\n            billing_source: costManagement.billing_source,\n            credentials: costManagement.authentication.credentials\n        };\n    }\n\n    if (!endpoint) { // bail out\n        return basicValues;\n    }\n\n    return getSourcesApi().listEndpointAuthentications(endpoint.id).then(authentications => ({\n        ...basicValues,\n        endpoints: endpoints.data,\n        authentications: authentications.data\n    }));\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from '@patternfly/react-core/dist/js/components/Form/Form';\n\nconst HorizontalFormWrapper = ({ children, ...props }) => <Form {...props} isHorizontal>{children}</Form>;\n\nHorizontalFormWrapper.propTypes = {\n    children: PropTypes.node\n};\n\nexport default HorizontalFormWrapper;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\nimport { Title, TitleLevel } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst Header = () => (\n    <Grid>\n        <GridItem xs={12}>\n            <Title headingLevel={TitleLevel.h1} size=\"3xl\">\n                <FormattedMessage\n                    id=\"sources.editSource\"\n                    defaultMessage=\"Edit source\"\n                />\n            </Title>\n        </GridItem>\n        <GridItem xs={12}>\n            <FormattedMessage\n                id=\"sources.editSourceDescription\"\n                defaultMessage=\"You are editing a source.\"\n            />\n        </GridItem>\n    </Grid>\n);\n\nexport default Header;\n","import get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { endpointToUrl } from '../SourcesTable/formatters';\n\nexport const selectOnlyEditedValues = (values, editing) => {\n    const filteredValues = {};\n\n    Object.keys(editing)\n    .filter((key) => editing[key])\n    .forEach((key) => {\n        set(filteredValues, key, get(values, key));\n    });\n\n    return filteredValues;\n};\n\nexport const prepareInitialValues = ({ endpoints, authentications, ...rest }, sourceTypeName) => {\n    const auhenticationsFinal = {};\n\n    if (authentications && authentications.length > 0) {\n        authentications.forEach((auth) => {\n            auhenticationsFinal[`a${auth.id}`] = auth;\n        });\n    }\n\n    let endpoint;\n    let url;\n\n    if (endpoints && endpoints.length > 0) {\n        endpoint = endpoints[0];\n    }\n\n    if (endpoint) {\n        url = (endpoint.scheme || endpoint.host || endpoint.path || endpoint.port) ? endpointToUrl(endpoint) : undefined;\n    }\n\n    return ({\n        source_type: sourceTypeName,\n        endpoint,\n        authentications: auhenticationsFinal,\n        url,\n        ...rest\n    });\n};\n","import { selectOnlyEditedValues } from './helpers';\nimport { updateSource, loadEntities } from '../../redux/sources/actions';\nimport { routes } from '../../Routes';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nexport const onSubmit = (values, editing, dispatch, source, intl, push) => dispatch(updateSource(\n    source,\n    selectOnlyEditedValues(values, editing),\n    intl.formatMessage({\n        id: 'sources.modifiedNotificationTitle',\n        defaultMessage: `\"{ name }\" was modified successfully.`\n    }, { name: source.source.name }),\n    intl.formatMessage({\n        id: 'sources.modifiedNotificationDescription',\n        defaultMessage: 'The source was successfully modified.'\n    }),\n    {\n        authentication: intl.formatMessage({\n            id: 'sources.sourceEditAuthFailure',\n            defaultMessage: 'Authentication update failure.'\n        }),\n        source: intl.formatMessage({\n            id: 'sources.sourceEditFailure',\n            defaultMessage: 'Source update failure.'\n        }),\n        endpoint: intl.formatMessage({\n            id: 'sources.sourceEditEndpointFailure',\n            defaultMessage: 'Endpoint update failure.'\n        }),\n        costManagement: intl.formatMessage({\n            id: 'sources.sourceCostmanagementFailure',\n            defaultMessage: 'Cost Management update failure.'\n        })\n    }))\n.then(() => {\n    checkSourceStatus(source.source.id);\n    push(routes.sources.path);\n    dispatch(loadEntities());\n});\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { componentTypes } from '@data-driven-forms/react-form-renderer';\nimport { asyncValidator } from '@redhat-cloud-services/frontend-components-sources';\nimport { EDIT_FIELD_NAME } from '../../EditField/EditField';\n\nexport const genericInfo = (editing, setEdit, sourceId) => ([\n    {\n        name: 'source.name',\n        label: <FormattedMessage\n            id=\"sources.sourceName\"\n            defaultMessage=\"Source name\"\n        />,\n        component: editing['source.name'] ? componentTypes.TEXT_FIELD : EDIT_FIELD_NAME,\n        ...(editing['source.name'] ? {} : { setEdit }),\n        validate: [\n            (value) => asyncValidator(value, sourceId)\n        ],\n        isRequired: true\n    }, {\n        name: 'source_type',\n        label: <FormattedMessage\n            id=\"sources.sourceType\"\n            defaultMessage=\"Source type\"\n        />,\n        isReadOnly: true,\n        component: EDIT_FIELD_NAME\n    }\n]);\n","import { createContext } from 'react';\n\nconst sourceEditContext = createContext();\n\nexport default sourceEditContext;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Split } from '@patternfly/react-core/dist/js/layouts/Split/Split';\nimport { SplitItem } from '@patternfly/react-core/dist/js/layouts/Split/SplitItem';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack/Stack';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport sourceEditContext from '../sourceEditContext';\nimport { addMessage } from '../../../redux/sources/actions';\nimport { doDeleteAuthentication } from '../../../api/entities';\nimport { handleError } from '@redhat-cloud-services/frontend-components-sources';\n\nconst RemoveAuth = ({ onClose, appNames, schemaAuth, auth }) => {\n    const hasAttachedApp = appNames.length > 0;\n    let body;\n    let actions;\n\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    const { setState } = useContext(sourceEditContext);\n\n    const onRemove = () => {\n        setState({ type: 'removeAuthPending', authId: auth.id });\n        onClose();\n        return doDeleteAuthentication(auth.id).then(() => {\n            setState({ type: 'removeAuthFulfill', authId: auth.id });\n            dispatch(addMessage(\n                intl.formatMessage(\n                    { id: 'sources.authRemoveFullfil', defaultMessage: 'Authentication was deleted successfully.' }\n                ),\n                'success'\n            ));\n        })\n        .catch((error) => {\n            setState({ type: 'removeAuthRejected', authId: auth.id });\n            dispatch(addMessage(\n                intl.formatMessage(\n                    { id: 'sources.authRemoveRejected', defaultMessage: 'Authentication was not deleted successfully.' }\n                ),\n                'danger',\n                handleError(error)\n            ));\n        });\n    };\n\n    if (hasAttachedApp) {\n        body = (<FormattedMessage\n            id=\"sources.removeAuthWarningApps\"\n            defaultMessage=\"To remove this authentication you have to remove attached\n            {count, plural, one {application} other {applications}}: { appNames }.\"\n            values={{ appNames: appNames.join(', '), count: appNames.length }}\n        />);\n        actions = [<Button\n            id=\"deleteCancel\"\n            key=\"cancel\"\n            variant=\"link\"\n            type=\"button\"\n            onClick={ onClose }\n        >\n            <FormattedMessage\n                id=\"sources.close\"\n                defaultMessage=\"Close\"\n            />\n        </Button>];\n    } else {\n        body = (<FormattedMessage\n            id=\"sources.removeAuthWarning\"\n            defaultMessage=\"Do you really want to remove this authentication?\"\n        />);\n        actions = [<Button\n            id=\"deleteSubmit\"\n            key=\"submit\"\n            variant=\"danger\"\n            type=\"button\"\n            onClick={ onRemove }\n        >\n            <FormattedMessage\n                id=\"sources.deleteConfirm\"\n                defaultMessage=\"Delete this authentication\"\n            />\n        </Button>,\n        <Button\n            id=\"deleteCancel\"\n            key=\"cancel\"\n            variant=\"link\"\n            type=\"button\"\n            onClick={ onClose }\n        >\n            <FormattedMessage\n                id=\"sources.deleteCancel\"\n                defaultMessage=\"Do not delete this authentication\"\n            />\n        </Button>];\n    }\n\n    return (\n        <Modal\n            isOpen\n            className=\"ins-c-sources__dialog--warning\"\n            isFooterLeftAligned\n            onClose={onClose}\n            actions={actions}\n            isSmall\n            title={intl.formatMessage(\n                { id: 'sources.deleteAuthTitle', defaultMessage: 'Delete { name }' },\n                { name: schemaAuth.name })\n            }\n        >\n            <Split gutter=\"md\">\n                <SplitItem>\n                    <ExclamationTriangleIcon size=\"xl\" className=\"ins-m-alert ins-c-source__delete-icon\" />\n                </SplitItem>\n                <SplitItem isFilled>\n                    <Stack gutter=\"md\">\n                        <TextContent>\n                            <Text variant={TextVariants.p}>\n                                {body}\n                            </Text>\n                        </TextContent>\n                    </Stack>\n                </SplitItem>\n            </Split>\n        </Modal>\n    );\n};\n\nRemoveAuth.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    appNames: PropTypes.arrayOf(PropTypes.string),\n    schemaAuth: PropTypes.shape({\n        name: PropTypes.string.isRequired\n    }).isRequired,\n    auth: PropTypes.shape({\n        id: PropTypes.string.isRequired\n    }).isRequired\n};\n\nexport default RemoveAuth;\n","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport TrashIcon from '@patternfly/react-icons/dist/js/icons/trash-icon';\n\nimport RemoveAuth from './RemoveAuth';\nimport sourceEditContext from '../sourceEditContext';\nimport { FormattedMessage } from 'react-intl';\n\nconst AuthenticationManagement = ({ schemaAuth, auth, appTypes, isDeleting }) => {\n    const { source } = useContext(sourceEditContext);\n    const [isRemoving, setRemove] = useState(false);\n\n    const attachedAppTypes = source.source.applications.filter(\n        ({ authentications }) => authentications.find(({ id }) => id === auth.id)\n    );\n\n    const appNames = attachedAppTypes.map(\n        ({ application_type_id }) => application_type_id ? appTypes.find(({ id }) => id === application_type_id) : undefined\n    ).filter(Boolean).map(app => app.display_name);\n\n    return (\n        <React.Fragment>\n            {isRemoving && <RemoveAuth\n                auth={auth}\n                onClose={() => setRemove(false)}\n                appNames={ appNames }\n                schemaAuth={schemaAuth}/>\n            }\n            <GridItem sm={12}>\n                <Title size=\"xl\">{schemaAuth.name}&nbsp;\n                    {!isDeleting &&\n                    <Button variant=\"plain\" aria-label=\"Remove authentication\" onClick={() => setRemove(!isRemoving)}>\n                        <TrashIcon />\n                    </Button>\n                    }\n                </Title>\n                <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                        <FormattedMessage\n                            id=\"sources.removeAuthDescription\"\n                            defaultMessage=\"id: {authid} { appNames}\"\n                            values={{\n                                authid: auth.id,\n                                appNames: appNames.length > 0 ?\n                                    <FormattedMessage\n                                        id=\"sources.removeAuthWithApps\"\n                                        defaultMessage=\"used by {appNames}\"\n                                        values={{ appNames: appNames.join(', ') }}\n                                    />\n                                    : <FormattedMessage\n                                        id=\"sources.removeAuthNoApps\"\n                                        defaultMessage=\"not used by any app\"\n                                    />\n                            }}\n                        />&nbsp;\n                    </Text>\n                </TextContent>\n            </GridItem>\n        </React.Fragment>\n    );\n};\n\nAuthenticationManagement.propTypes = {\n    isDeleting: PropTypes.bool,\n    appTypes: PropTypes.arrayOf(PropTypes.object),\n    schemaAuth: PropTypes.shape({\n        name: PropTypes.string.isRequired\n    }).isRequired,\n    auth: PropTypes.shape({\n        id: PropTypes.string.isRequired\n    }).isRequired\n};\n\nexport default AuthenticationManagement;\n","import React from 'react';\n\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nconst RemoveAuthPlaceholder = () => (\n    <Grid>\n        <GridItem xs={12}>\n            <Bullseye>\n                <Spinner size=\"lg\"/>\n            </Bullseye>\n        </GridItem>\n        <GridItem xs={12}>\n            <Bullseye>\n                <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mt-md\">\n                        <FormattedMessage\n                            id=\"sources.removingAuthMessage\"\n                            defaultMessage=\"This authentication is being removed...\"\n                        />\n                    </Text>\n                </TextContent>\n            </Bullseye>\n        </GridItem>\n    </Grid>\n);\n\nexport default RemoveAuthPlaceholder;\n","import React from 'react';\nimport get from 'lodash/get';\nimport { componentTypes, validatorTypes } from '@data-driven-forms/react-form-renderer';\nimport { hardcodedSchemas } from '@redhat-cloud-services/frontend-components-sources';\nimport { FormattedMessage } from 'react-intl';\n\nimport { EDIT_FIELD_NAME } from '../../EditField/EditField';\nimport { unsupportedAuthTypeField } from './unsupportedAuthType';\nimport AuthenticationManagement from './AuthenticationManagement';\nimport RemoveAuthPlaceholder from './RemoveAuthPlaceholder';\n\nexport const createAuthFieldName = (fieldName, id) => `authentications.a${id}.${fieldName.replace('authentication.', '')}`;\n\nexport const getLastPartOfName = (fieldName) => fieldName.split('.').pop();\n\nexport const removeRequiredValidator = (validate = []) =>\n    validate.filter(validation => validation.type !== validatorTypes.REQUIRED);\n\nexport const getEnhancedAuthField = (sourceType, authtype, name) =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, 'generic', name], {});\n\nexport const getAdditionalAuthSteps = (sourceType, authtype) =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, 'generic', 'includeStepKeyFields'], []);\n\nexport const modifyAuthSchemas = (fields, id, editing, setEdit) => fields.map((field) => {\n    const editedName = field.name.startsWith('authentication') ? createAuthFieldName(field.name, id) : field.name;\n    const isEditing = editing[editedName];\n\n    const finalField = ({\n        ...field,\n        name: editedName,\n        component: isEditing ? field.component : EDIT_FIELD_NAME\n    });\n\n    if (!isEditing) {\n        finalField.setEdit = setEdit;\n    }\n\n    const isPassword = getLastPartOfName(finalField.name) === 'password';\n\n    if (isPassword) {\n        finalField.helperText = (<FormattedMessage\n            id=\"sources.passwordResetHelperText\"\n            defaultMessage={`Changing this resets your current { label }.`}\n            values={{\n                label: finalField.label\n            }}\n        />);\n        finalField.isRequired = false;\n        finalField.validate = removeRequiredValidator(finalField.validate);\n    }\n\n    return finalField;\n});\n\nexport const authenticationFields = (authentications, sourceType, editing, setEdit, appTypes) => {\n    if (!authentications || authentications.length === 0 || !sourceType.schema || !sourceType.schema.authentication) {\n        return [];\n    }\n\n    return authentications.map(({ isDeleting, ...auth }) => {\n        const schemaAuth = sourceType.schema.authentication.find(({ type }) => type === auth.authtype);\n\n        if (!schemaAuth) {\n            return unsupportedAuthTypeField(auth.authtype);\n        }\n\n        const additionalStepKeys = getAdditionalAuthSteps(sourceType.name, auth.authtype);\n\n        const enhancedFields = schemaAuth.fields\n        .filter(field => !field.stepKey || additionalStepKeys.includes(field.stepKey))\n        .map((field) => ({\n            ...field,\n            ...getEnhancedAuthField(sourceType.name, auth.authtype, field.name)\n        }));\n\n        return ({\n            component: componentTypes.SUB_FORM,\n            name: schemaAuth.name,\n            fields: [\n                {\n                    component: 'description',\n                    name: `${auth.id}-authentication-management`,\n                    Content: AuthenticationManagement,\n                    schemaAuth,\n                    appTypes,\n                    auth,\n                    isDeleting\n                },\n                isDeleting ?  {\n                    component: 'description',\n                    name: `${auth.id}-remove-spinner`,\n                    Content: RemoveAuthPlaceholder\n                } : modifyAuthSchemas(enhancedFields, auth.id, editing, setEdit)\n            ]\n        });\n    });\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nexport const unsupportedAuthTypeField = (type) => ({\n    component: 'description',\n    name: `${type}-unsupported`,\n    // eslint-disable-next-line react/display-name\n    Content: () => (\n        <TextContent>\n            <Text component={ TextVariants.p }>\n                <FormattedMessage\n                    id=\"sources.unsupportedAuthType\"\n                    defaultMessage={`Authentication type of { type } is no longer supported.`}\n                    values={{ type }}\n                />\n            </Text>\n        </TextContent>\n    )\n});\n","import { EDIT_FIELD_NAME } from '../../EditField/EditField';\nimport { componentTypes } from '@data-driven-forms/react-form-renderer';\n\nexport const NOT_CHANGING_COMPONENTS = [componentTypes.CHECKBOX, componentTypes.SWITCH];\n\nexport const modifyFields = (fields, editing, setEdit) => fields.map((field) => {\n    const isEditing = editing[field.name];\n\n    const finalField = ({\n        ...field,\n        component: isEditing || NOT_CHANGING_COMPONENTS.includes(field.component)  ? field.component : EDIT_FIELD_NAME\n    });\n\n    if (!isEditing && !NOT_CHANGING_COMPONENTS.includes(field.component)) {\n        finalField.setEdit = setEdit;\n    }\n\n    return finalField;\n});\n","import React from 'react';\nimport get from 'lodash/get';\nimport { FormattedMessage } from 'react-intl';\nimport { componentTypes } from '@data-driven-forms/react-form-renderer';\nimport { hardcodedSchemas } from '@redhat-cloud-services/frontend-components-sources';\nimport { modifyFields } from './helpers';\n\nexport const getEnhancedEndpointField = (sourceType, name) =>\n    get(hardcodedSchemas, [sourceType, 'endpoint', name], {});\n\nexport const endpointFields = (sourceType, editing, setEdit) => {\n    if (!sourceType.schema || !sourceType.schema.endpoint || sourceType.schema.endpoint.hidden) {\n        return undefined;\n    }\n\n    const schemaAuth = sourceType.schema.endpoint;\n\n    const enhancedFields = schemaAuth.fields.map((field) => ({\n        ...field,\n        ...getEnhancedEndpointField(sourceType.name, field.name)\n    }));\n\n    return ({\n        component: componentTypes.SUB_FORM,\n        title: <FormattedMessage\n            id=\"sources.endpoint\"\n            defaultMessage=\"Endpoint\"\n        />,\n        name: 'endpoint',\n        fields: modifyFields(enhancedFields, editing, setEdit)\n    });\n};\n","import React from 'react';\nimport get from 'lodash/get';\nimport { componentTypes, validatorTypes } from '@data-driven-forms/react-form-renderer';\nimport { hardcodedSchemas } from '@redhat-cloud-services/frontend-components-sources';\nimport { FormattedMessage } from 'react-intl';\nimport { modifyFields } from './helpers';\nimport { EDIT_FIELD_NAME } from '../../EditField/EditField';\n\nexport const APP_NAMES = {\n    COST_MANAGAMENT: '/insights/platform/cost-management'\n};\n\nexport const cmFieldsPrefixes = ['billing_source', 'credentials'];\n\nexport const isCMField = ({ name }) => cmFieldsPrefixes.some((prefix) => name.startsWith(prefix));\n\nexport const getCMFields = (authentication) =>\n    Object.keys(authentication)\n    .map((key) => authentication[key].fields.filter(isCMField))\n    .flatMap((x) => x);\n\nexport const getEnhancedCMField = (sourceType, name, authenticationsTypes) => {\n    let field = undefined;\n\n    authenticationsTypes.forEach((type) => {\n        const apps = field ? {} : get(hardcodedSchemas, [sourceType, 'authentication', type], {});\n\n        Object.keys(apps).find((key) => {\n            const hasAppField = get(hardcodedSchemas, [sourceType, 'authentication', type, key, name], undefined);\n            if (hasAppField) {\n                field = hasAppField;\n                return true;\n            }\n        });\n    });\n\n    return field ? field : {};\n};\n\nexport const appendClusterIdentifier = (editing, setEdit, sourceType) =>\n    sourceType.name === 'openshift' ? [{\n        name: 'source.source_ref',\n        label: <FormattedMessage\n            id=\"sources.clusterIdentifier\"\n            defaultMessage=\"Cluster identifier\"\n        />,\n        isRequired: true,\n        ...(editing['source.source_ref'] ? {} : { setEdit }),\n        validate: [{ type: validatorTypes.REQUIRED }],\n        component: editing['source.source_ref'] ? componentTypes.TEXT_FIELD : EDIT_FIELD_NAME\n    }] : [];\n\nexport const costManagementFields = (\n    applications = [],\n    sourceType,\n    editing,\n    setEdit,\n    appTypes,\n    source\n) => {\n    const costManagementApp = appTypes.find(({ name }) => name === APP_NAMES.COST_MANAGAMENT);\n\n    if (!costManagementApp) {\n        return undefined;\n    }\n\n    const hasCostManagement = applications.find(({ application_type_id }) => application_type_id === costManagementApp.id);\n\n    if (!hasCostManagement) {\n        return undefined;\n    }\n\n    const billingSourceFields = getCMFields(sourceType.schema.authentication);\n\n    const authenticationsTypes = source.authentications ? source.authentications.map(({ authtype }) => authtype) : [];\n\n    const enhandcedFields = billingSourceFields.map((field) => ({\n        ...field,\n        ...getEnhancedCMField(sourceType.name, field.name, authenticationsTypes)\n    }));\n\n    return ({\n        component: componentTypes.SUB_FORM,\n        title: costManagementApp.display_name,\n        name: costManagementApp.display_name,\n        fields: [\n            ...modifyFields(enhandcedFields, editing, setEdit),\n            ...appendClusterIdentifier(editing, setEdit, sourceType)\n        ]\n    });\n};\n\nexport const applicationsFields = (\n    applications,\n    sourceType,\n    editing,\n    setEdit,\n    appTypes,\n    source\n) => ([\n    costManagementFields(\n        applications,\n        sourceType,\n        editing,\n        setEdit,\n        appTypes,\n        source\n    )\n]);\n","import { genericInfo } from './genericInfo';\nimport { authenticationFields } from './authentication';\nimport { endpointFields } from './endpoint';\nimport { applicationsFields } from './application';\n\nexport const parseSourceToSchema = (source, editing, setEdit, sourceType, appTypes) => ({\n    fields: [\n        ...genericInfo(editing, setEdit, source.source.id),\n        ...authenticationFields(source.authentications, sourceType, editing, setEdit, appTypes),\n        ...applicationsFields(source.applications, sourceType, editing, setEdit, appTypes, source),\n        source.endpoints && source.endpoints.length > 0 ? endpointFields(sourceType, editing, setEdit) : false\n    ].filter(Boolean)\n});\n","import { parseSourceToSchema } from './parser/parseSourceToSchema';\nimport { prepareInitialValues } from './helpers';\n\nexport const initialState = {\n    loading: true,\n    editing: {},\n    source: undefined,\n    initialValues: {},\n    sourceType: undefined,\n    schema: undefined\n};\n\nconst reducer = (state, { type, source, name, sourceType, setEdit, appTypes, authId }) => {\n    switch (type) {\n        case 'createForm':\n            return {\n                ...state,\n                sourceType,\n                initialValues: prepareInitialValues(state.source, sourceType.product_name),\n                schema: parseSourceToSchema(state.source, state.editing, setEdit, sourceType, appTypes),\n                loading: false\n            };\n        case 'refreshSchema':\n            return {\n                ...state,\n                schema: parseSourceToSchema(state.source, state.editing, setEdit, state.sourceType, appTypes)\n            };\n        case 'setSource':\n            return {\n                ...state,\n                source\n            };\n        case 'reset':\n            return {\n                ...state,\n                editing: {}\n            };\n        case 'setEdit':\n            return {\n                ...state,\n                editing: {\n                    ...state.editing,\n                    [name]: !state.editing[name]\n                }\n            };\n        case 'removeAuthPending':\n            return {\n                ...state,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.map((auth) => auth.id === authId ? {\n                        ...auth, isDeleting: true\n                    } : auth)\n                }\n            };\n        case 'removeAuthRejected':\n            return {\n                ...state,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.map((auth) => auth.id === authId ? {\n                        ...auth, isDeleting: false\n                    } : auth)\n                }\n            };\n        case 'removeAuthFulfill':\n            return {\n                ...state,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.filter((auth) => auth.id !== authId)\n                }\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\n\nimport { layoutMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\n\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport { doLoadSourceForEdit } from '../../api/doLoadSourceForEdit';\nimport HorizontalFormWrapper from './HorizontalFormWrapper';\nimport Header from './Header';\nimport { onSubmit } from './onSubmit';\n\nimport { redirectWhenImported } from './importedRedirect';\nimport { routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport reducer, { initialState } from './reducer';\nimport sourceEditContext from './sourceEditContext';\n\nconst SourceEditModal = () => {\n    const [state, setState] = useReducer(reducer, initialState);\n    const history = useHistory();\n    const sourceRedux = useSource();\n    const isLoaded = useIsLoaded();\n\n    const { loading, editing, source, initialValues, schema } = state;\n\n    const intl = useIntl();\n\n    const {\n        sourceTypes,\n        appTypes,\n        sourceTypesLoaded,\n        appTypesLoaded\n    } = useSelector(({ sources }) => sources, shallowEqual);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (sourceRedux) {\n            doLoadSourceForEdit(sourceRedux).then((source) => {\n                if (source.source.imported) {\n                    redirectWhenImported(dispatch, intl, history, source.source.name);\n                }\n\n                setState({ type: 'setSource', source });\n            });\n        }\n    }, [sourceRedux, isLoaded]);\n\n    const setEdit = (name) => setState({ type: 'setEdit', name });\n\n    useEffect(() => {\n        if (source && appTypesLoaded && sourceTypesLoaded) {\n            const sourceType = sourceTypes.find(({ id }) => id === source.source.source_type_id);\n\n            setState({ type: 'createForm', sourceType, source, setEdit, appTypes });\n        }\n    }, [appTypesLoaded, source, sourceTypesLoaded]);\n\n    useEffect(() => {\n        if (source && !loading) {\n            setState({ type: 'refreshSchema', setEdit, appTypes });\n        }\n    }, [editing]);\n\n    const isLoading = !appTypesLoaded || !sourceTypesLoaded || loading;\n\n    const returnToSources = () => history.push(routes.sources.path);\n\n    if (isLoading) {\n        return (\n            <Modal\n                title={intl.formatMessage({\n                    id: 'sources.editSource',\n                    defaultMessage: 'Edit source.'\n                })}\n                header={<Header />}\n                isOpen={true}\n                isLarge\n                onClose={returnToSources}\n            >\n                <div className=\"ins-c-sources__dialog--spinnerContainer\">\n                    <Spinner />\n                </div>\n            </Modal>\n        );\n    }\n\n    return (\n        <Modal\n            title={intl.formatMessage({\n                id: 'sources.editSource',\n                defaultMessage: 'Edit source.'\n            })}\n            header={<Header />}\n            isOpen={true}\n            isLarge\n            onClose={returnToSources}\n        >\n            <sourceEditContext.Provider value={{ setState, source }}>\n                <SourcesFormRenderer\n                    onCancel={returnToSources}\n                    schema={schema}\n                    onSubmit={\n                        (values, formApi) =>\n                            onSubmit(values, formApi.getState().dirtyFields, dispatch, source, intl, history.push)\n                    }\n                    layoutMapper={{\n                        ...layoutMapper,\n                        FormWrapper: HorizontalFormWrapper\n                    }}\n                    clearedValue={null}\n                    canReset\n                    disableSubmit={['submitting']}\n                    onReset={() => setState({ type: 'reset' })}\n                    initialValues={initialValues}\n                    buttonsLabels={{ submitLabel: intl.formatMessage({\n                        id: 'sources.save',\n                        defaultMessage: 'Save'\n                    }) }}\n                />\n            </sourceEditContext.Provider>\n        </Modal>\n    );\n};\n\nexport default SourceEditModal;\n","import { axiosInstance } from './entities';\nimport { COST_MANAGEMENT_API_BASE } from './constants';\n\nexport const getCmValues = (id) => axiosInstance.get(`${COST_MANAGEMENT_API_BASE}/sources/${id}/`);\n","import { routes } from '../../Routes';\nimport { addMessage } from '../../redux/sources/actions';\n\nexport const redirectWhenImported = (dispatch, intl, history, name) => {\n    dispatch(addMessage(\n        intl.formatMessage({\n            id: 'sources.importSourceCannotEdited',\n            defaultMessage: 'Source { name } is imported.'\n        }, { name }),\n        'danger',\n        intl.formatMessage({\n            id: 'sources.importedSourcesCannotEdited',\n            defaultMessage: 'Imported sources cannot be edited.'\n        }),\n    ));\n    history.push(routes.sources.path);\n};\n"],"sourceRoot":""}