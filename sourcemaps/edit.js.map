{"version":3,"sources":["webpack:///./src/api/doUpdateSource.js","webpack:///./src/api/patchCmValues.js","webpack:///./src/components/Authentication.js","webpack:///./src/utilities/SourcesFormRenderer.js","webpack:///./src/api/doLoadSourceForEdit.js","webpack:///./src/api/getCmValues.js","webpack:///./src/components/SourceEditForm/Header.js","webpack:///./src/components/SourceEditForm/helpers.js","webpack:///./src/components/SourceEditForm/onSubmit.js","webpack:///./src/components/SourceEditForm/parser/AdditionalInfoBar.js","webpack:///./src/components/SourceEditForm/parser/EditAlert.js","webpack:///./src/components/SourceEditForm/parser/genericInfo.js","webpack:///./src/components/SourceEditForm/parser/endpoint.js","webpack:///./src/components/SourceEditForm/parser/AuthenticationId.js","webpack:///./src/components/SourceEditForm/sourceEditContext.js","webpack:///./src/components/SourceEditForm/parser/RemoveAuthPlaceholder.js","webpack:///./src/components/SourceEditForm/parser/GridLayout.js","webpack:///./src/components/SourceEditForm/parser/authentication.js","webpack:///./src/components/SourceEditForm/parser/application.js","webpack:///./src/components/SourceEditForm/parser/titleField.js","webpack:///./src/components/SourceEditForm/parser/parseSourceToSchema.js","webpack:///./src/components/SourceEditForm/reducer.js","webpack:///./src/components/ModalFormTemplate.js","webpack:///./src/components/SourceEditForm/WrapperModal.js","webpack:///./src/components/SourceEditForm/SubmittingModal.js","webpack:///./src/components/SourceEditForm/TimeoutedModal.js","webpack:///./src/components/SourceEditForm/ErroredModal.js","webpack:///./src/components/SourceEditForm/parser/RemoveAuth.js","webpack:///./src/components/SourceEditForm/SourceEditModal.js","webpack:///./src/components/SourceEditForm/importedRedirect.js"],"names":["urlOrHost","formData","url","scheme","host","port","path","u","URL","protocol","replace","hostname","defaultPort","pathname","error","parseUrl","endpoint","doUpdateSource","source","id","data","promises","push","getSourcesApi","updateSource","endPointPort","parseInt","endpointData","isNaN","undefined","updateEndpoint","endpoints","authentications","Object","keys","forEach","key","idWithoutPrefix","updateAuthentication","billing_source","credentials","cmDataOut","authentication","axiosInstance","patch","COST_MANAGEMENT_API_BASE","Promise","all","Authentication","rest","formOptions","useFormApi","values","getState","name","match","isEditing","isModified","get","useState","edited","setEdited","firstClick","useRef","mounted","useEffect","current","pristine","doNotRequirePassword","validate","filter","type","validatorTypes","REQUIRED","componentProps","resolveProps","validated","autoFocus","FormGroup","helperText","label","onFocus","isRequired","TextInput","aria-label","value","SourcesFormRenderer","props","FormTemplate","componentMapper","mapperExtension","componentTypes","SWITCH","validatorMapper","PATTERN","MIN_LENGTH","doLoadSourceForEdit","showSource","listSourceEndpoints","doLoadApplicationsForEdit","then","a","sourceData","applications","costManagement","apps","sources","basicValues","addToApp","appAuthenticationIds","app","auth","showAuthentication","length","appAuths","index","find","listEndpointAuthentications","includes","Header","intl","useIntl","Grid","GridItem","xs","Title","headingLevel","size","formatMessage","defaultMessage","propTypes","PropTypes","node","selectOnlyEditedValues","editing","filteredValues","set","prepareInitialValues","sourceTypeName","auhenticationsFinal","mergeAuths","reduce","acc","curr","endpointToUrl","source_type","onSubmit","dispatch","setState","checkSourceStatus","loadEntities","map","checkAppAvailability","statusResults","unavailableApp","availability_status","UNAVAILABLE","message","title","description","availability_status_error","variant","some","AdditionalInfoBar","sourceType","appTypes","useSelector","sourceAppsNames","application_type_id","display_name","TextContent","hasGutter","md","Text","component","TextVariants","h4","p","product_name","join","shape","string","arrayOf","EditAlert","Alert","isInline","genericInfo","sourceId","Content","condition","when","isNotEmpty","TEXT_FIELD","asyncValidatorDebounced","endpointFields","schema","hidden","modifiedFields","fields","field","hardcodedSchemas","getEnhancedEndpointField","subForm","SUB_FORM","validation","isEmpty","AuthenticationId","sourceEditContext","createContext","RemoveAuthPlaceholder","Bullseye","Spinner","small","className","GridLayout","renderForm","useContext","isDeleting","Flex","Button","onClick","removingAuth","array","getAdditionalFields","stepKey","modifyAuthSchemas","editedName","startsWith","fieldName","createAuthFieldName","finalField","split","pop","authenticationFields","appName","schemaAuth","authtype","additionalStepKeys","getAdditionalAuthStepsKeys","additionalStepsFields","getAdditionalAuthSteps","step","flatMap","x","enhancedFields","getEnhancedAuthField","APP_NAMES","createOneAppFields","appType","appendClusterIdentifier","unusedAuthsWarning","PLAIN_TEXT","applicationsFields","authenticationTypesFormGroups","appsLength","authenticationsInputs","auths","Boolean","unusedAuthentications","TABS","TitleAndDescription","titleField","hideField","parseSourceToSchema","initialState","loading","initialValues","isSubmitting","initialLoad","submitError","isTimeouted","reducer","state","authId","isAuthRemoving","CustomFormWrapper","Form","CustomButtons","onReset","onCancel","subscription","submitting","invalid","validating","ActionGroup","form","isDisabled","ModalFormTemplate","ModalProps","Modal","footer","showFormControls","FormWrapper","object","FakeFooter","history","useHistory","routes","WrapperModal","children","sourceRedux","useSource","header","isOpen","onClose","SubmittingModal","customText","TimeoutedModal","EmptyState","EmptyStateVariant","full","EmptyStateIcon","icon","WrenchIcon","color","newLine","ErroredModal","onRetry","secondaryActions","target","href","rel","returnButtonTitle","func","RemoveAuth","useDispatch","actions","doDeleteAuthentication","addMessage","handleError","SourceEditModal","useReducer","isLoaded","useIsLoaded","shallowEqual","sourceTypes","sourceTypesLoaded","appTypesLoaded","imported","redirectWhenImported","source_type_id","isLoading","returnToSources","Provider","formApi","dirtyFields","clearedValue"],"mappings":"4wBAIO,IA6BMA,EAAY,SAAAC,GAAQ,OAC7BA,EAASC,KAAwB,OAAjBD,EAASC,IA9BL,SAAAA,GACpB,GAAY,OAARA,EACA,MAAO,CACHC,OAAQ,KACRC,KAAM,KACNC,KAAM,KACNC,KAAM,MAId,IAAKJ,EACD,MAAQ,GAGZ,IACI,IAAMK,EAAI,IAAIC,IAAIN,GACZC,EAAUI,EAAEE,SAASC,QAAQ,KAAM,IAEzC,MAAO,CACHP,SACAC,KAAMG,EAAEI,SACRN,KAAiB,KAAXE,EAAEF,KAAcO,YAAYT,GAAUI,EAAEF,KAC9CC,KAAMC,EAAEM,UAEd,MAAOC,GACL,MAAQ,IAK4BC,CAASd,EAASC,KAAOD,EAASe,SAAWf,EAASe,SAAWf,GAEhGgB,EAAiB,SAACC,EAAQjB,GACnC,IClC0BkB,EAAIC,EDkCxBC,EAAW,GAMjB,GAJIpB,EAASiB,QACTG,EAASC,KAAKC,cAAgBC,aAAaN,EAAOA,OAAOC,GAAIlB,EAASiB,SAGtEjB,EAASe,UAAYf,EAASC,KAAwB,OAAjBD,EAASC,IAAc,OACvBF,EAAUC,GAAvCE,EADoD,EACpDA,OAAQC,EAD4C,EAC5CA,KAAMC,EADsC,EACtCA,KAAMC,EADgC,EAChCA,KACtBmB,EAAwB,OAATpB,EAAgB,KAAOqB,SAASrB,EAAM,IAErDsB,EAAe,EAAH,CACdxB,SACAC,OACAE,OACAD,KAAuB,OAAjBoB,EAAwB,KAAOG,MAAMH,QAAgBI,EAAYJ,GACpExB,EAASe,UAGhBK,EAASC,KAAKC,cAAgBO,eAAeZ,EAAOa,UAAU,GAAGZ,GAAIQ,IAWzE,GARI1B,EAAS+B,iBACTC,OAAOC,KAAKjC,EAAS+B,iBAAiBG,SAAQ,SAACC,GAC3C,IAAMC,EAAkBD,EAAI1B,QAAQ,IAAK,IAEzCW,EAASC,KAAKC,cAAgBe,qBAAqBD,EAAiBpC,EAAS+B,gBAAgBI,QAIjGnC,EAASsC,gBAAkBtC,EAASuC,YAAa,CACjD,IAAIC,EAAY,GAEZxC,EAASuC,cACTC,EAAY,CACRC,eAAgB,CACZF,YAAavC,EAASuC,eAK9BvC,EAASsC,iBACTE,EAAY,EAAH,KACFA,GADE,IAELF,eAAgBtC,EAASsC,kBAIjClB,EAASC,MCjFaH,EDiFMD,EAAOA,OAAOC,GCjFhBC,EDiFoBqB,ECjFXE,IAAcC,MAAd,UAAuBC,IAAvB,oBAA2D1B,EAA3D,KAAkEC,KDoFzG,OAAO0B,QAAQC,IAAI1B,K,u3BE5EvB,IA4De2B,EA5DQ,SAACC,GAAS,QACvBC,EAAcC,MACdC,EAASF,EAAYG,WAAWD,OAFT,GAIFH,SAAA,UAAAA,EAAMK,YAAN,eAAYC,MAAM,SAAU,GACjDC,EALuB,cAKK,UAAIJ,EAAOV,sBAAX,aAAI,EAAuBvB,IAGzDsC,EAAaC,IAAIN,EAAQH,EAAKK,MARL,EAUDK,oBAAUH,GAAaC,GAVtB,WAUtBG,EAVsB,KAUdC,EAVc,KAWvBC,EAAaC,kBAAO,GACpBC,EAAUD,kBAAO,GAEvBE,qBAAU,WACFD,EAAQE,WAGHJ,EAAWI,SAAWhB,EAAYG,WAAWc,WAE9CN,GAAU,GACVC,EAAWI,SAAU,GAGrBN,IACAE,EAAWI,SAAU,OAKjCD,qBAAU,WACND,EAAQE,SAAU,IACnB,IAEH,IAAME,EAAuBnB,EAAKoB,UAAYpB,EAAKoB,SAASC,QAAO,qBAAGC,OAAoBC,IAAeC,YAEnGC,EAAiB,EAAH,KACbzB,GACCO,EAAY,CACZa,SAAUD,EACVO,aAAcC,KACd,IAGR,OAAKhB,EAYD,kBAAC,IAAD,OAAgBc,EAAhB,CAAiCG,WAAW,KAXpC,kBAACC,EAAA,UAAD,CACJC,WAAYL,EAAeK,WAC3BC,MAAON,EAAeM,MACtBC,QAAS,kBAAMpB,GAAU,IACzBqB,YAAU,GAEV,kBAACC,EAAA,UAAD,CAAWC,aAAW,4BAA4BC,MAAM,oB,ikBC7BrDC,IAnBa,SAAAC,GAAK,OAC7B,kBAAC,IAAD,KACIC,aAAcA,IACdC,gBAAe,SACRA,KACAC,mBAFQ,IAGXhD,eAAgBM,EAChB,eAAgByC,IAAgBE,IAAeC,UAEnDC,gBAAiB,CACb,qBAAsBA,IAAgBrB,IAAeC,UACrD,oBAAqBoB,IAAgBrB,IAAesB,SACpD,uBAAwBD,IAAgBrB,IAAeuB,YACvD,gBAAiBF,IAAgBrB,IAAehE,OAEhD+E,M,qxBC1BL,IAAMS,EAAsB,SAAC9E,GAAD,OAAY4B,QAAQC,IAAI,CACvDxB,cAAgB0E,WAAW/E,EAAOC,IAClCI,cAAgB2E,oBAAoBhF,EAAOC,IAC3CgF,YAA0BjF,EAAOC,KCHTA,EDIZD,EAAOC,GCJYwB,IAAce,IAAd,UAAqBb,IAArB,oBAAyD1B,EAAzD,ODI/B,OAA6B,iBAC9BiF,KAL4C,+BAKvC,qDAAAC,EAAA,oEAAQC,EAAR,KAAoBvE,EAApB,KAA+BwE,EAA/B,KAA6CC,EAA7C,KACExF,EAAWe,GAAaA,EAAUX,MAAQW,EAAUX,KAAK,GAEzDqF,GAAOF,SAAA,UAAAA,EAAcG,QAAQ,UAAtB,eAA0BH,eAAgB,GAEnDI,EAAc,CACdzF,OAAQ,EAAF,KACCA,GACAoF,GAEPC,aAAcE,GAGdD,IACAG,EAAc,EAAH,KACJA,GADI,IAEPpE,eAAgBiE,EAAejE,eAC/BC,YAAagE,EAAe9D,eAAeF,eAI7CnB,EAAW,GAEXuF,EAAW,GACXC,EAAuB,GAE7BJ,EAAKtE,SAAQ,SAAC2E,GAAQ,MAClBA,SAAA,UAAAA,EAAK9E,uBAAL,SAAsBG,SAAQ,SAAC4E,IACvBA,aAAJ,EAAIA,EAAM5F,MACNE,EAASC,KAAKC,cAAgByF,mBAAmBD,EAAK5F,KACtDyF,EAAStF,KAAKwF,EAAI3F,IAClB0F,EAAqBvF,KAAKyF,EAAK5F,aAKvCE,EAAS4F,OAAS,GApClB,kCAqCiBnE,QAAQC,IAAI1B,GArC7B,QAqCA6F,EArCA,OAuCAN,EAASzE,SAAQ,SAAChB,EAAIgG,GAClBR,EAAYJ,aAAaa,MAAK,SAAAN,GAAG,OAAIA,EAAI3F,KAAOA,KAAIa,gBAAgBV,KAAK4F,EAASC,OAxCtF,WA4CCnG,EA5CD,0CA6CO2F,GA7CP,iCAgDGpF,cAAgB8F,4BAA4BrG,EAASG,IAAIiF,MAAK,SAAApE,GAAe,cAC7E2E,GAD6E,IAEhF5E,UAAWA,EAAUX,KACrBY,gBAAiBA,EAAgBZ,KAAKkD,QAAO,gBAAGnD,EAAH,EAAGA,GAAH,OAAa0F,EAAqBS,SAASnG,YAnDxF,4CALuC,uDCApB,IAACA,G,2CCKtBoG,EAAS,SAAC,GAAY,IAAVjE,EAAU,EAAVA,KACRkE,EAAOC,cAEb,OACI,kBAACC,EAAA,KAAD,KACI,kBAACC,EAAA,SAAD,CAAUC,GAAI,IACV,kBAACC,EAAA,MAAD,CAAOC,aAAa,KAAKC,KAAK,OACxBP,EAAKQ,cAAc,CACjB7G,GAAI,qBACJ8G,eAAgB,kBAI3B3E,GAAQ,kBAACqE,EAAA,SAAD,CAAUC,GAAI,IACjBJ,EAAKQ,cAAc,CACjB7G,GAAI,gCACJ8G,eAAgB,uEACjB,CAAE3E,KAAM,uBAAGlB,IAAI,KAAKkB,QAMvCiE,EAAOW,UAAY,CACf5E,KAAM6E,IAAUC,MAGLb,Q,sTC9BR,IAAMc,EAAyB,SAACjF,EAAQkF,GAC3C,IAAMC,EAAiB,GAQvB,OANAtG,OAAOC,KAAKoG,GACXhE,QAAO,SAAClC,GAAD,OAASkG,EAAQlG,MACxBD,SAAQ,SAACC,GACNoG,IAAID,EAAgBnG,EAAKsB,IAAIN,EAAQhB,OAGlCmG,GAGEE,EAAuB,SAAC,EAAuDC,GAAmB,IAcvG1H,EACAd,EAf+B6B,EAAwE,EAAxEA,UAAWC,EAA6D,EAA7DA,gBAAiBuE,EAA4C,EAA5CA,aAAiBtD,EAA2B,sDACrG0F,EAAsB,GAEtBC,EAAa,GAAH,WACR5G,GAAmB,IADX,KAERuE,aAAA,EAAAA,EAAcsC,QAAO,SAACC,EAAKC,GAAN,oBAAmBD,GAAnB,IAA2BC,EAAK/G,oBAAkB,MAAO,KAoBtF,OAjBI4G,EAAW3B,OAAS,GACpB2B,EAAWzG,SAAQ,SAAC4E,GAChB4B,EAAoB,IAAD,OAAK5B,EAAK5F,KAAQ4F,KAOzChF,GAAaA,EAAUkF,OAAS,IAChCjG,EAAWe,EAAU,IAGrBf,IACAd,EAAOc,EAASb,QAAUa,EAASZ,MAAQY,EAASV,MAAQU,EAASX,KAAQ2I,YAAchI,QAAYa,G,iWAG3G,EACIoH,YAAaP,EACb1H,WACAgB,gBAAiB2G,EACjBzI,OACG+C,I,0BCrCEiG,EAAQ,+BAAG,WAAO9F,EAAQkF,EAASa,EAAUjI,EAAQsG,EAAM4B,GAAhD,yBAAA/C,EAAA,6DACpB+C,EAAS,CAAE7E,KAAM,SAAUnB,SAAQkF,YADf,kBAIVrH,YAAeC,EAAQmH,EAAuBjF,EAAQkF,IAJ5C,8DAMhBc,EAAS,CAAE7E,KAAM,iBAND,kCAWpB8E,YAAkBnI,EAAOA,OAAOC,IAChCgI,EAASG,eAZW,UAgBKtD,EAAoB,CAAE7E,GAAID,EAAOA,OAAOC,KAhB7C,WAgBdmF,EAhBc,UAkBdjF,GAAW,UAAAH,EAAOqF,oBAAP,eAAqBgD,KAAI,gBAAGpI,EAAH,EAAGA,GAAH,OAAYqI,+BAAqBrI,QAAQ,IAGtE8F,OAAS,GArBF,4CAuBUnE,QAAQC,IAAI1B,GAvBtB,QAuBZoI,EAvBY,iEAyBZL,EAAS,CAAE7E,KAAM,iBAzBL,gCA8BVmF,EAAiBD,EAAcrC,MAAK,qBAAGuC,sBAAkDC,QA9B/E,wBAiCZC,EAAU,CACNC,MAAOtC,EAAKQ,cAAc,CACtB7G,GAAI,4BACJ8G,eAAgB,uBAEpB8B,YAAaL,EAAeM,0BAC5BC,QAAS,UAGbb,EAAS,CAAE7E,KAAM,iBAAkBrD,OAAQoF,EAAYuD,YA1C3C,+BA+CMJ,EAAcS,MAAK,qBAAGP,uBA/C5B,wBAkDZP,EAAS,CAAE7E,KAAM,qBAlDL,2BAwDpBsF,EAAU,CACNC,MAAOtC,EAAKQ,cAAc,CACtB7G,GAAI,+BACJ8G,eAAgB,4CACjB,CAAE3E,KAAMpC,EAAOA,OAAOoC,OACzB2G,QAAS,WAGbb,EAAS,CAAE7E,KAAM,iBAAkBrD,OAAQoF,EAAYuD,YAhEnC,iEAAH,gE,+HCDfM,GAAoB,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,WAAY7D,EAAmB,EAAnBA,aAC/BiB,EAAOC,cACP4C,EAAWC,uBAAY,qBAAG5D,QAAsB2D,YAEhDE,EAAkBhE,aAAH,EAAGA,EAAcgD,KAAI,kBAAGiB,EAAH,EAAGA,oBAAH,OACtCH,SADsC,UACtCA,EAAUjD,MAAK,qBAAGjG,KAAgBqJ,YADI,aACtC,EAAwDC,gBAG5D,OACI,kBAACC,GAAA,YAAD,KACI,kBAAC,QAAD,CAAMC,WAAS,GACX,kBAAC,YAAD,CAAUC,GAAI,GACV,kBAACC,GAAA,KAAD,CAAMC,UAAWC,gBAAaC,IACxBxD,EAAKQ,cAAc,CACjB7G,GAAI,qBACJ8G,eAAgB,iBAGxB,kBAAC4C,GAAA,KAAD,CAAMC,UAAWC,gBAAaE,EAAG9J,GAAG,oBAC9BiJ,EAAWc,eAGrB,kBAAC,YAAD,CAAUN,GAAI,GACV,kBAACC,GAAA,KAAD,CAAMC,UAAWC,gBAAaC,IACxBxD,EAAKQ,cAAc,CACjB7G,GAAI,eACJ8G,eAAgB,kBAGxB,kBAAC4C,GAAA,KAAD,CAAMC,UAAWC,gBAAaE,EAAG9J,GAAG,oBAC/BoJ,EAAgBtD,OAAS,EAAIsD,EAAgBY,KAAK,MAE3C3D,EAAKQ,cAAc,CACf7G,GAAI,eACJ8G,eAAgB,cAWpDkC,GAAkBjC,UAAY,CAC1BkC,WAAYjC,IAAUiD,MAAM,CACxBF,aAAc/C,IAAUkD,OAAOnG,aAEnCqB,aAAc4B,IAAUmD,QAAQnD,IAAUiD,MAAM,CAC5CZ,oBAAqBrC,IAAUkD,OAAOnG,eAI/BiF,U,+BC7CAoB,GAZG,WACd,IAEQ1B,EAFY1G,OAEYE,WAAWD,OAAnCyG,QAER,OACI,kBAAC2B,GAAA,MAAD,CAAOvB,QAASJ,aAAF,EAAEA,EAASI,QAASwB,UAAQ,EAAC3B,MAAOD,aAAF,EAAEA,EAASC,OACtDD,aADL,EACKA,EAASE,cCLT2B,GAAc,SAACC,EAAUnE,EAAM4C,EAAY7D,GAA7B,MAA+C,CACtE,CACIjD,KAAM,QACNwH,UAAW,cACXc,QAASL,GACTM,UAAW,CACPC,KAAM,UACNC,YAAY,IAGpB,CACIzI,KAAM,cACN0B,MAAOwC,EAAKQ,cAAc,CACtB7G,GAAI,qBACJ8G,eAAgB,gBAEpB6C,UAAWnF,KAAeqG,WAC1B3H,SAAU,CACN,SAACgB,GAAD,OAAW4G,mCAAwB5G,EAAOsG,EAAUnE,IACpD,CAAEjD,KAAMC,KAAeC,WAE3BS,YAAY,EACZP,aAAcC,MACf,CACCtB,KAAM,kBACNsI,QAASzB,GACTW,UAAW,cACXV,aACA7D,kB,0lBC/BD,IAGM2F,GAAiB,SAAC9B,GAC3B,GAAKA,EAAW+B,QAAW/B,EAAW+B,OAAOnL,WAAYoJ,EAAW+B,OAAOnL,SAASoL,OAApF,CAIA,IAOMC,EAPajC,EAAW+B,OAAOnL,SAEHsL,OAAO/C,KAAI,SAACgD,GAAD,UAAC,MACvCA,GAX6B,SAACnC,EAAY9G,GAAb,OACpCI,IAAI8I,KAAkB,CAACpC,EAAY,WAAY9G,GAAO,IAW/CmJ,CAAyBrC,EAAW9G,KAAMiJ,EAAMjJ,UAKjDoJ,EAAU,CACZ5B,UAAWnF,KAAegH,SAC1BrJ,KAAM,YAGV,GAAwB,kBAApB8G,EAAW9G,KAA0B,OAC/BpD,EAAMmM,EAAejF,MAAK,kBAAuB,QAAvB,EAAG9D,QAEnC,gBACOoJ,GADP,IAEIJ,OAAQ,CAAC,CACLxB,UAAWnF,KAAegH,SAC1BrJ,KAAM,sBACNuI,UAAW,CACPC,KAAM,yBACNC,YAAY,GAEhBO,OAAQ,CAAC,SACFpM,GADC,IAEJgF,YAAY,EACZb,SAAUnE,SAAF,UAAEA,EAAKmE,gBAAP,aAAE,EAAeC,QAAO,SAAAsI,GAAU,OAAIA,EAAWrI,OAASC,KAAeC,gBAEtF,CACCqG,UAAWnF,KAAegH,SAC1BrJ,KAAM,iBACNuI,UAAW,CACPC,KAAM,yBACNe,SAAS,GAEbP,OAAQD,MAKpB,gBACOK,GADP,IAEIJ,OAAQD,M,4DClDVS,GAAmB,SAAC,GAAW,IAAT3L,EAAS,EAATA,GAClBqG,EAAOC,cAEb,OAAQ,kBAAC3C,GAAA,UAAD,CACJE,MAAOwC,EAAKQ,cAAc,CAAE7G,GAAI,iBAAkB8G,eAAgB,uBAElE,kBAACyC,GAAA,YAAD,KACI,kBAACG,GAAA,KAAD,CAAMZ,QAAQ,KACT9I,MAMjB2L,GAAiB5E,UAAY,CACzB/G,GAAIgH,IAAUkD,OAAOnG,YAGV4H,UCtBAC,GAFWC,0B,SCmCXC,GA1Be,WAC1B,IAAMzF,EAAOC,cAEb,OACI,kBAAC,QAAD,KACI,kBAAC,YAAD,CAAUG,GAAI,IACV,kBAACsF,GAAA,SAAD,KACI,kBAACC,EAAA,QAAD,CAASpF,KAAK,SAGtB,kBAAC,YAAD,CAAUH,GAAI,IACV,kBAACsF,GAAA,SAAD,KACI,kBAACxC,GAAA,YAAD,KACI,kBAACG,GAAA,KAAD,CAAMC,UAAWC,gBAAaqC,MAAOC,UAAU,cACzC7F,EAAKQ,cAAc,CACjB7G,GAAI,8BACJ8G,eAAgB,kDCX1CqF,GAAa,SAAC,GAAmB,QAAjBnM,EAAiB,EAAjBA,GAAImL,EAAa,EAAbA,OAChB9E,EAAOC,cACL8F,EAAepK,OAAfoK,WAF2B,EAGNC,qBAAWT,IAAhC3D,EAH2B,EAG3BA,SAAUlI,EAHiB,EAGjBA,OASlB,OAFmBA,SAAH,UAAGA,EAAQc,uBAAX,iBAAG,EAAyBoF,MAAK,SAAAL,GAAI,OAAIA,EAAK5F,KAAOA,YAArD,aAAG,EAAuDsM,YAG/D,kBAAC,GAAD,MAGH,kBAAC/F,EAAA,KAAD,KACJ,kBAACC,EAAA,SAAD,CAAUiD,GAAI,GACV,kBAAC8C,GAAA,KAAD,KACI,kBAACA,GAAA,SAAD,CAAUL,UAAU,aAChB,kBAACM,GAAA,OAAD,CACI1D,QAAQ,QACR7E,aAAYoC,EAAKQ,cAAc,CAC3B7G,GAAI,8BACJ8G,eAAgB,sCACjB,CAAE9G,OACLyM,QArBI,kBAAMxE,EAAS,CACnC7E,KAAM,kBACNsJ,aAAc1M,MAoBE,kBAAC,KAAD,QAGR,kBAACuM,GAAA,KAAD,KACI,kBAAC,GAAD,CAAkBvM,GAAIA,OAIlC,kBAACwG,EAAA,SAAD,CAAUiD,GAAI,IACR2C,EAAWjB,MAKzBgB,GAAWpF,UAAY,CACnB/G,GAAIgH,IAAUkD,OAAOnG,WACrBoH,OAAQnE,IAAU2F,MAAM5I,YAGboI,U,qkBCzDR,IAgBMS,GAAsB,SAAChH,EAAMiH,GAAP,aAAmBjH,SAAA,UAAAA,EAAMuF,cAAN,eAAchI,QAAO,SAAAiI,GAAK,OAAIA,EAAMyB,UAAYA,OAAY,IAErGC,GAAoB,SAAC3B,EAAQnL,GAAT,OAAgBmL,EAAO/C,KAAI,SAACgD,GACzD,IAAM2B,EAAa3B,EAAMjJ,KAAK6K,WAAW,kBAnBV,SAACC,EAAWjN,GAAZ,iCAAuCA,EAAvC,YAA6CiN,EAAU1N,QAAQ,kBAAmB,KAmBpD2N,CAAoB9B,EAAMjJ,KAAMnC,GAAMoL,EAAMjJ,KAEnGgL,EAAa,GAAC,MACb/B,GADS,IAEZjJ,KAAM4K,IASV,MAN0D,aAArBI,EAAWhL,KAxBMiL,MAAM,KAAKC,QA2B7DF,EAAWxD,UAAY,kBAGpBwD,MAGEG,GAAuB,SAACzM,EAAiBoI,EAAYsE,GAC9D,OAAK1M,GAA8C,IAA3BA,EAAgBiF,QAAiBmD,EAAW+B,QAAW/B,EAAW+B,OAAOzJ,eAI1FV,EAAgBuH,KAAI,SAACxC,GAAS,UAC3B4H,EAAavE,SAAH,UAAGA,EAAY+B,cAAf,iBAAG,EAAoBzJ,sBAAvB,aAAG,EAAoC0E,MAAK,qBAAG7C,OAAoBwC,EAAK6H,YAExF,IAAKD,EACD,MAAO,GAGX,IAAME,EAlC4B,SAACzE,EAAYwE,GAAb,IAAuBF,EAAvB,uDAAiC,UAAjC,OACtChL,IAAI8I,KAAkB,CAACpC,EAAY,iBAAkBwE,EAAUF,EAAS,wBAAyB,IAiClEI,CAA2B1E,EAAW9G,KAAMyD,EAAK6H,SAAUF,GAChFK,EAAqB,UAtCG,SAAC3E,EAAYwE,GAAb,IAAuBF,EAAvB,uDAAiC,UAAjC,OAClChL,IAAI8I,KAAkB,CAACpC,EAAY,iBAAkBwE,EAAUF,EAAS,mBAAoB,IAqC1DM,CAAuB5E,EAAW9G,KAAMyD,EAAK6H,SAAUF,UAA1D,aAAG,EAC5BnF,KAAI,SAAA0F,GAAI,gBAAUA,GAAV,IAAgB3C,OAAQ,GAAF,WAAM2C,EAAK3C,QAAX,IAAsByB,GAAoBY,EAAYM,EAAK3L,aAC1FiG,KAAI,qBAAG+C,OAAoB/C,KAAI,qBAAGjG,WAAkB4L,SAAQ,SAAAC,GAAC,OAAIA,KAE5DC,EAAiBT,EAAWrC,OACjChI,QAAO,SAAAiI,GAAK,OAAIwC,EAAsBzH,SAASiF,EAAMjJ,QAClDiJ,EAAMyB,SACNzB,EAAMyB,SAAWa,EAAmBvH,SAASiF,EAAMyB,YAEtDzE,KAAI,SAACgD,GAAD,UAAC,MACCA,GAnDqB,SAACnC,EAAYwE,EAAUtL,GAAvB,IAA6BoL,EAA7B,uDAAuC,UAAvC,OAChChL,IAAI8I,KAAkB,CAACpC,EAAY,iBAAkBwE,EAAUF,EAASpL,GAAO,IAmDpE+L,CAAqBjF,EAAW9G,KAAMyD,EAAK6H,SAAUrC,EAAMjJ,KAAMoL,OAGxE,OAAKA,EAYET,GAAkBmB,EAAgBrI,EAAK5F,IAXlC,CACJ,CACImC,KAAM,kBAAF,OAAoByD,EAAK5F,IAC7B2J,UAAW,cACX3J,GAAI4F,EAAK5F,GACTyK,QAAS0B,GACThB,OAAQ2B,GAAkBmB,EAAgBrI,EAAK5F,SAhCpD,ICpCFmO,GACQ,qCAefC,GAAqB,SAACC,EAASpF,EAAYtD,GAAtB,0BACpB2H,GAAoB,UACnB3H,EAAI9E,uBADe,aACnB,EAAqBsC,QAAO,SAAAyC,GAAI,OAAI9E,OAAOC,KAAK6E,GAAME,OAAS,KAC/DmD,EACAoF,aAHmB,EAGnBA,EAASlM,OAJU,KAMnBkM,aAAA,EAAAA,EAASlM,QAASgM,GAlBa,SAAClF,GAAD,MACf,cAApBA,EAAW9G,KAAuB,CAAC,CAC/BA,KAAM,oBACN0B,MAAO,kBAAC,KAAD,CACH7D,GAAG,4BACH8G,eAAe,uBAEnB/C,YAAY,EACZb,SAAU,CAAC,CAAEE,KAAMC,KAAeC,WAClCqG,UAAWnF,KAAeqG,aACzB,GAQ6CyD,CAAwBrF,GAAc,MAGtFsF,GAAqB,SAACzI,GAAD,MAAa,CACpC6D,UAAWnF,KAAegK,WAC1BrM,KAAM,sBACN0B,MAAO,kBAAC,KAAD,CACH7D,GAAG,sBAEH8G,eAAe,uHACf7E,OAAQ,CAAE6D,cA+CL2I,GAAqB,SAC9BrJ,EACA6D,EACAC,EACArI,GAEA,IAAM6N,EAjDoB,SAAC7N,EAAiBoI,EAAY0F,GAAe,UACvE,IAAK9N,GAA8C,IAA3BA,EAAgBiF,OACpC,MAAO,GAGX,IAAI8I,EAAwB3F,SAAH,UAAGA,EAAY+B,cAAf,iBAAG,EAAoBzJ,sBAAvB,iBAAG,EAAoCmG,QAAO,SAACC,EAAD,GAAmB,IAAXvE,EAAW,EAAXA,KACrEyL,EAAQhO,EAAgBsC,QAAO,gBAAGsK,EAAH,EAAGA,SAAH,OAAkBrK,IAASqK,KAEhE,OAAIoB,aAAA,EAAAA,EAAO/I,QAAS,EAChB,cACO6B,GADP,IAEO2F,GAAqBuB,EAAO5F,KAIhCtB,IACR,WAXsB,aAAG,EAWpBxE,OAAO2L,SAwBf,OAnBIF,EAHmC,IAAfD,EAGI,CAAC,CACrBxD,OAAQ,CACJoD,GAAmBK,EAAsB9I,SADvC,WAEC8I,IAEPjG,MAAOM,EAAWc,aAClB5H,KAAM,qBAGc,CAAC,CACrBgJ,OAAQ,CACJoD,GAAmBK,EAAsB9I,SADvC,WAEC8I,IAEPjF,UAAWnF,KAAegH,SAC1BrJ,KAAM,uBAawB4M,CAAsBlO,EAAiBoI,EAAY7D,aAA9B,EAA8BA,EAAcU,QAEvG,GAAKV,GAAwC,IAAxBA,EAAaU,OAE3B,IAA4B,IAAxBV,EAAaU,QAAyD,IAAzC4I,EAA8B5I,OAAc,CAChF,IAAMuI,EAAUnF,EAASjD,MAAK,qBAAGjG,KAAgBoF,EAAa,GAAGiE,uBAEjE,OAAO+E,GAAmBC,EAASpF,EAAY7D,EAAa,IAE5D,MAAQ,CAAC,CACLuE,UAAWnF,KAAewK,KAC1B7M,KAAM,WACNgJ,OAAQ,GAAF,WACC/F,EAAagD,KAAI,SAACzC,GACjB,IAAM0I,EAAUnF,EAASjD,MAAK,qBAAGjG,KAAgB2F,EAAI0D,uBAErD,MAAQ,CACJlH,KAAMkM,aAAF,EAAEA,EAASrO,GACf2I,MAAO0F,aAAF,EAAEA,EAAS/E,aAChB6B,OAAQiD,GAAmBC,EAASpF,EAAYtD,QAPtD,IAUC+I,MAnBX,OAAOA,GCvFFO,GAAsB,SAAC,GAAD,IAAGtG,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAV,OAA6B,kBAACW,GAAA,YAAD,KAC5D,kBAAC7C,EAAA,MAAD,CAAOC,aAAa,KAAKuF,UAAU,aAAavD,GAC/CC,GAAe,kBAACc,GAAA,KAAD,CAAMZ,QAAQ,KAAKF,KAGvCqG,GAAoBlI,UAAY,CAC5B4B,MAAO3B,IAAUC,KAAKlD,WACtB6E,YAAa5B,IAAUC,MAG3B,IAoCeiI,GApCI,SAAC9J,EAAc6D,EAAYC,EAAU7C,EAAMxF,GAC1D,IAAI8H,EACAC,EAEJ,GAA4B,IAAxBxD,EAAaU,OACb6C,EAAQtC,EAAKQ,cAAc,CACvB7G,GAAI,wBACJ8G,eAAgB,sBACjB,CAAE1D,KAAM6F,aAAF,EAAEA,EAAYc,oBACpB,GAA4B,IAAxB3E,EAAaU,OAAc,CAClC,IAAMH,EAAMuD,EAASjD,MAAK,qBAAGjG,KAAgBoF,EAAa,GAAGiE,uBAC7DV,EAAQtC,EAAKQ,cAAc,CACvB7G,GAAI,yBACJ8G,eAAgB,8BACjB,CAAE1D,KAAM6F,aAAF,EAAEA,EAAYc,aAAcpE,IAAKA,aAAF,EAAEA,EAAK2D,oBAE/CX,EAAQtC,EAAKQ,cAAc,CACvB7G,GAAI,2BACJ8G,eAAgB,oCACjB,CAAE1D,KAAM6F,aAAF,EAAEA,EAAYc,eACvBnB,EAAcvC,EAAKQ,cAAc,CAC7B7G,GAAI,iCACJ8G,eAAgB,gFAIxB,MAAQ,CACJ6C,UAAW,cACXxH,KAAM,aACNsI,QAASwE,GACTtG,QACAC,cACAuG,UAAoC,KAAzB/J,aAAA,EAAAA,EAAcU,SAA4C,KAA5BjF,aAAA,EAAAA,EAAiBiF,UC5CrDsJ,GAAsB,SAACrP,EAAQkJ,EAAYC,EAAU7C,GAA/B,MAAyC,CACxE8E,OAAQ,cACDZ,GAAYxK,EAAOA,OAAOC,GAAIqG,EAAM4C,EAAYlJ,EAAOqF,eADtD,CAEJ8J,GAAWnP,EAAOqF,aAAc6D,EAAYC,EAAU7C,EAAMtG,EAAOc,kBAF/D,IAGD4N,GAAmB1O,EAAOqF,aAAc6D,EAAYC,EAAUnJ,EAAOc,kBAHpE,IAIJd,EAAOa,WAAab,EAAOa,UAAUkF,OAAS,IAAIiF,GAAe9B,KACnE9F,OAAO2L,W,qkBCRN,IAAMO,GAAe,CACxBC,SAAS,EACTvP,YAAQW,EACR6O,cAAe,GACftG,gBAAYvI,EACZsK,YAAQtK,EACR8O,cAAc,EACdC,aAAa,EACbC,aAAa,EACbC,aAAa,GA0FFC,GAvFC,SAACC,EAAD,GAAyG,IAA/FzM,EAA+F,EAA/FA,KAAMrD,EAAyF,EAAzFA,OAAQkJ,EAAiF,EAAjFA,WAAYC,EAAqE,EAArEA,SAAU7C,EAA2D,EAA3DA,KAAMqC,EAAqD,EAArDA,QAASzG,EAA4C,EAA5CA,OAAQkF,EAAoC,EAApCA,QAASuF,EAA2B,EAA3BA,aAAcoD,EAAa,EAAbA,OACxG,OAAQ1M,GACJ,IAAK,aACD,gBACOyM,GADP,IAEI5G,aACAsG,cAAejI,EAAqBuI,EAAM9P,OAAQkJ,EAAWc,cAC7DiB,OAAQoE,GAAoBS,EAAM9P,OAAQkJ,EAAYC,EAAU7C,GAChEiJ,SAAS,IAEjB,IAAK,YACD,gBACOO,GADP,IAEI9P,SACA0P,aAAa,IAErB,IAAK,SACD,gBACOI,GADP,IAEIL,cAAc,EACdE,aAAa,EACbzN,SACAkF,YAER,IAAK,iBACD,gBACO0I,GADP,IAEIL,cAAc,EACdzP,SACA2I,YAER,IAAK,eACD,gBACOmH,GADP,IAEIL,cAAc,EACdE,aAAa,IAErB,IAAK,mBACD,gBACOG,GADP,IAEIL,cAAc,EACdG,aAAa,IAErB,IAAK,oBACD,gBACOE,GADP,IAEIE,eAAgB,KAChBhQ,OAAQ,SACD8P,EAAM9P,QADP,IAEFc,gBAAiBgP,EAAM9P,OAAOc,gBAAgBuH,KAAI,SAACxC,GAAD,OAAUA,EAAK5F,KAAO8P,EAAZ,SACrDlK,GADqD,IAC/C0G,YAAY,IACrB1G,SAGhB,IAAK,qBACD,gBACOiK,GADP,IAEI9P,OAAQ,SACD8P,EAAM9P,QADP,IAEFc,gBAAiBgP,EAAM9P,OAAOc,gBAAgBuH,KAAI,SAACxC,GAAD,OAAUA,EAAK5F,KAAO8P,EAAZ,SACrDlK,GADqD,IAC/C0G,YAAY,IACrB1G,SAGhB,IAAK,oBACD,gBACOiK,GADP,IAEI9P,OAAQ,SACD8P,EAAM9P,QADP,IAEFc,gBAAiBgP,EAAM9P,OAAOc,gBAAgBsC,QAAO,SAACyC,GAAD,OAAUA,EAAK5F,KAAO8P,SAGvF,IAAK,kBACD,gBACOD,GADP,IAEIE,eAAgBrD,IAExB,IAAK,oBACD,gBACOmD,GADP,IAEIE,eAAgB,OAExB,QACI,OAAOF,I,uECrFbG,GAAoB,SAAC5L,GAAD,OAAW,kBAAC6L,GAAA,KAAD,OAAU7L,EAAV,CAAiBpE,GAAG,iBAEnDkQ,GAAgB,WAClB,IAAM7J,EAAOC,cADW,EAEMtE,OAAtBmO,EAFgB,EAEhBA,QAASC,EAFO,EAEPA,SAEjB,OAAQ,kBAAC,KAAD,CAASC,aAAc,CAAEC,YAAY,EAAMtN,UAAU,EAAMuN,SAAS,EAAMC,YAAY,KACzF,gBAAGxN,EAAH,EAAGA,SAAUuN,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,WAAYF,EAAlC,EAAkCA,WAAlC,OACG,yBAAKpE,UAAU,aACX,kBAACuE,GAAA,YAAD,CAAavE,UAAU,aACnB,kBAAC,UAAD,CACIpD,QAAQ,UACR4H,KAAK,aACLtN,KAAK,SACLuN,WAAY3N,GAAYwN,GAAcF,GAAcC,GAEnDlK,EAAKQ,cAAc,CAChB7G,GAAI,eACJ8G,eAAgB,UAGxB,kBAAC,UAAD,CAAQgC,QAAQ,YAAY6H,WAAY3N,EAAUyJ,QAAS0D,EAASnQ,GAAG,eAClEqG,EAAKQ,cAAc,CAChB7G,GAAI,gBACJ8G,eAAgB,WAGxB,kBAAC,UAAD,CAAQgC,QAAQ,OAAO2D,QAAS2D,EAAUpQ,GAAG,gBACxCqG,EAAKQ,cAAc,CAChB7G,GAAI,iBACJ8G,eAAgB,kBAStC8J,GAAoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAezM,EAAlB,6BACtB,kBAAC0M,EAAA,MAAD,OACQD,EADR,CAEIE,OAAQ,kBAAC,GAAD,QAER,kBAAC,KAAD,OAAkB3M,EAAlB,CAAyB4M,kBAAkB,EAAOC,YAAajB,QAIvEY,GAAkB7J,UAAY,CAC1B8J,WAAY7J,IAAUkK,QAGXN,U,qBCpDFO,GAAa,WACtB,IAAM9K,EAAOC,cACP8K,EAAUC,cAEhB,OAAQ,yBAAKnF,UAAU,aACnB,kBAACuE,GAAA,YAAD,CAAavE,UAAU,aACnB,kBAAC,UAAD,CAAQpD,QAAQ,UAAU6H,YAAU,GAC/BtK,EAAKQ,cAAc,CAChB7G,GAAI,eACJ8G,eAAgB,UAGxB,kBAAC,UAAD,CAAQgC,QAAQ,YAAY6H,YAAU,GACjCtK,EAAKQ,cAAc,CAChB7G,GAAI,gBACJ8G,eAAgB,WAGxB,kBAAC,UAAD,CAAQgC,QAAQ,OAAO2D,QAAS,kBAAM2E,EAAQjR,KAAKmR,IAAO/L,QAAQpG,QAC7DkH,EAAKQ,cAAc,CAChB7G,GAAI,iBACJ8G,eAAgB,eAO9ByK,GAAe,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SACdJ,EAAUC,cACVI,EAAcC,cACdrL,EAAOC,cAEb,OACI,kBAACwK,EAAA,MAAD,CACI7M,aAAYoC,EAAKQ,cAAc,CAC3B7G,GAAI,qBACJ8G,eAAgB,iBAEpB6K,OAAQ,kBAAC,EAAD,CAAQxP,KAAMsP,EAAYtP,OAClC2G,QAAQ,QACR8I,QAAQ,EACRC,QAAS,kBAAMT,EAAQjR,KAAKmR,IAAO/L,QAAQpG,OAC3C4R,OAAQ,kBAAC,GAAD,OAEPS,IAKbD,GAAaxK,UAAY,CACrByK,SAAUxK,IAAUC,KAAKlD,YAGdwN,UC3CAO,GAjBS,WACpB,IAAMzL,EAAOC,cAEb,OACI,kBAAC,GAAD,KACI,kBAAC,KAAD,CACIyL,WACI1L,EAAKQ,cAAc,CACf7G,GAAI,8BACJ8G,eAAgB,6C,mDCuBzBkL,GA3BQ,WACnB,IAAM3L,EAAOC,cAEb,OACI,kBAAC,GAAD,KACI,kBAACyF,GAAA,SAAD,KACI,kBAACkG,GAAA,WAAD,CAAYnJ,QAAUoJ,qBAAkBC,KAAOjG,UAAU,eACrD,kBAACkG,GAAA,eAAD,CAAgBC,KAAOC,KAAaC,MAAM,+BAA+BrG,UAAU,cACnF,kBAAC,SAAD,CAAOvF,aAAa,KAAKC,KAAK,KAAKsF,UAAU,cACxC7F,EAAKQ,cAAc,CAChB7G,GAAI,8BACJ8G,eAAgB,kCAGxB,kBAACmL,GAAA,eAAD,KACM5L,EAAKQ,cAAc,CACjB7G,GAAI,oCAEJ8G,eAAgB,uJACjB,CAAE0L,QAAS,wBAAIvR,IAAI,c,qBCrBxCwR,GAAe,SAAC,GAAgB,IAAdC,EAAc,EAAdA,QACdrM,EAAOC,cAEb,OACI,kBAAC,GAAD,KACI,kBAAC,KAAD,CACIuL,QAASa,EACTX,WACI1L,EAAKQ,cAAc,CACf7G,GAAI,+BAEJ8G,eAAgB,wHAGxB6L,iBACI,kBAACjJ,GAAA,KAAD,CACIC,UAAU,IACViJ,OAAO,SACPC,KAAK,+EACLC,IAAI,uBAEHzM,EAAKQ,cAAc,CAAE7G,GAAI,qBAAsB8G,eAAgB,yBAGxEiM,kBAAoB1M,EAAKQ,cAAc,CACnC7G,GAAI,oBACJ8G,eAAgB,cAOpC2L,GAAa1L,UAAY,CACrB2L,QAAS1L,IAAUgM,KAAKjP,YAGb0O,U,+BC5BTQ,GAAa,SAAC,GAAe,QAAbnD,EAAa,EAAbA,OAAa,EACUzD,qBAAWT,IAA5C3D,EADuB,EACvBA,SAAUlI,EADa,EACbA,OAAQkJ,EADK,EACLA,WAEpBuE,EAAavE,SAAH,UAAGA,EAAY+B,cAAf,iBAAG,EAAoBzJ,sBAAvB,aAAG,EAAoC0E,MACnD,6BAAG7C,QAAoBrD,SAAL,UAAKA,EAAQc,uBAAb,iBAAK,EAAyBoF,MAAK,SAAAL,GAAI,OAAIA,aAAA,EAAAA,EAAM5F,MAAO8P,YAAxD,aAAK,EAA4DrC,aAGjFzF,EAAWkL,wBACX7M,EAAOC,cAEPuL,EAAU,kBAAM5J,EAAS,CAAE7E,KAAM,uBA0BvC,OACI,kBAAC0N,EAAA,MAAD,CACIc,QAAM,EACN1F,UAAU,iCACV2F,QAASA,EACTsB,QAAS,CAAC,kBAAC3G,GAAA,OAAD,CACNxM,GAAG,eACHiB,IAAI,SACJ6H,QAAQ,SACR1F,KAAK,SACLqJ,QAlCK,WAGb,OAFAxE,EAAS,CAAE7E,KAAM,oBAAqB0M,WACtC+B,IACOuB,YAAuBtD,GAAQ7K,MAAK,WACvCgD,EAAS,CAAE7E,KAAM,oBAAqB0M,WACtC9H,EAASqL,YACLhN,EAAKQ,cACD,CAAE7G,GAAI,4BAA6B8G,eAAgB,6CAEvD,eAND,OASA,SAACnH,GACJsI,EAAS,CAAE7E,KAAM,qBAAsB0M,WACvC9H,EAASqL,YACLhN,EAAKQ,cACD,CAAE7G,GAAI,6BAA8B8G,eAAgB,iDAExD,SACAwM,uBAAY3T,UAiBV0G,EAAKQ,cAAc,CACjB7G,GAAI,wBACJ8G,eAAgB,2BAGxB,kBAAC0F,GAAA,OAAD,CACIxM,GAAG,eACHiB,IAAI,SACJ6H,QAAQ,OACR1F,KAAK,SACLqJ,QAAUoF,GAERxL,EAAKQ,cAAc,CACjB7G,GAAI,uBACJ8G,eAAgB,aAGxBgC,QAAQ,QACR7E,aACIoC,EAAKQ,cAAc,CACf7G,GAAI,0BACJ8G,eAAgB,2BAGxB6K,OACI,kBAACjL,EAAA,MAAD,CAAOC,aAAa,KAAKC,KAAK,OAC1B,kBAAC,KAAD,CAAyBA,KAAK,KAAKsF,UAAU,qDAC5C7F,EAAKQ,cAAc,CAChB7G,GAAI,yBACJ8G,eAAgB,6BAM5B,kBAACyC,GAAA,YAAD,KACI,kBAACG,GAAA,KAAD,CAAMZ,QAASc,gBAAaE,GACvBzD,EAAKQ,cAAc,CAChB7G,GAAI,4BACJ8G,eAAgB,gEACjB,CAAElB,KAAM,uBAAG3E,IAAI,KAAKuM,aAAZ,EAAYA,EAAYrL,YAOvD8Q,GAAWlM,UAAY,CACnB+I,OAAQ9I,IAAUkD,OAAOnG,YAGdkP,U,qkBC8BAM,UA3HS,WAAM,MACAC,qBAAW5D,GAASP,IADpB,WACnBQ,EADmB,KACZ5H,EADY,KAEpBmJ,EAAUC,cACVI,EAAcC,cACd+B,EAAWC,cAGbpE,EAaAO,EAbAP,QACAnI,EAYA0I,EAZA1I,QACApH,EAWA8P,EAXA9P,OACAwP,EAUAM,EAVAN,cACAvE,EASA6E,EATA7E,OACAwE,EAQAK,EARAL,aACAC,EAOAI,EAPAJ,YACA/G,EAMAmH,EANAnH,QACAgH,EAKAG,EALAH,YACAC,EAIAE,EAJAF,YACA1N,EAGA4N,EAHA5N,OACAgH,EAEA4G,EAFA5G,WACA8G,EACAF,EADAE,eAGE1J,EAAOC,cAtBa,EA6BtB6C,uBAAY,qBAAG5D,UAAuBoO,gBAJtCC,EAzBsB,EAyBtBA,YACA1K,EA1BsB,EA0BtBA,SACA2K,EA3BsB,EA2BtBA,kBACAC,EA5BsB,EA4BtBA,eAGE9L,EAAWkL,wBAEjBpQ,qBAAU,WACF2O,GAAehC,GACf5K,EAAoB4M,GAAaxM,MAAK,SAAClF,GAC/BA,EAAOA,OAAOgU,UC1DE,SAAC/L,EAAU3B,EAAM+K,EAASjP,GAC1D6F,EAASqL,YACLhN,EAAKQ,cAAc,CACf7G,GAAI,mCACJ8G,eAAgB,gCACjB,CAAE3E,SACL,SACAkE,EAAKQ,cAAc,CACf7G,GAAI,sCACJ8G,eAAgB,yCAGxBsK,EAAQjR,KAAKmR,IAAO/L,QAAQpG,MD+CZ6U,CAAqBhM,EAAU3B,EAAM+K,EAASrR,EAAOA,OAAOoC,MAGhE8F,EAAS,CAAE7E,KAAM,YAAarD,gBAGvC,CAAC0R,EAAagC,IAEjB3Q,qBAAU,WACN,GAAI/C,GAAU+T,GAAkBD,EAAmB,CAC/C,IAAM5K,EAAa2K,EAAY3N,MAAK,qBAAGjG,KAAgBD,EAAOA,OAAOkU,kBAErEhM,EAAS,CAAE7E,KAAM,aAAc6F,aAAYlJ,SAAQmJ,WAAU7C,YAElE,CAACyN,EAAgB/T,EAAQ8T,IAE5B,IAAMK,GAAaJ,IAAmBD,GAAqBvE,EAErD6E,EAAkB,kBAAM/C,EAAQjR,KAAKmR,IAAO/L,QAAQpG,OAE1D,OAAIwQ,EACO,kBAAC,GAAD,MAGPD,EACQ,kBAAC,GAAD,CACJgD,QAAS,kBAAM3K,EAAS9F,EAAQkF,EAASa,EAAUjI,EAAQsG,EAAM4B,MAIrEuH,EACO,kBAAC,GAAD,MAGP0E,EAEI,kBAACpD,EAAA,MAAD,CACI7M,aAAYoC,EAAKQ,cAAc,CAC3B7G,GAAI,qBACJ8G,eAAgB,iBAEpB6K,OAAQ,kBAAC,EAAD,MACRC,QAAM,EACN9I,QAAQ,QACR+I,QAASsC,GAET,yBAAKjI,UAAU,2CACX,kBAACF,EAAA,QAAD,QAOZ,kBAAC,GAAkBoI,SAAnB,CAA4BlQ,MAAO,CAAE+D,WAAUlI,SAAQkJ,eAClD8G,GAAkB,kBAAC,GAAD,CAAYD,OAAQC,IACvC,kBAAC5L,EAAA,EAAD,CACIiM,SAAU+D,EACVnJ,OAAQA,EACRjD,SACI,SAAC9F,EAAQoS,GAAT,OACItM,EAAS9F,EAAQoS,EAAQnS,WAAWoS,YAAatM,EAAUjI,EAAQsG,EAAM4B,IAEjF5D,aAAc,SAACD,GAAD,aAAY,kBAAC,GAAD,KACtByM,YAAU,WACL,aAAexK,EAAKQ,cAAc,CAC/B7G,GAAI,qBACJ8G,eAAgB,kBAHd,eAKE,kBAAC,EAAD,CAAQ3E,KAAMpC,EAAOA,OAAOoC,QAL9B,gBAMG,SANH,gBAOG4N,GAPH,gBAQGoE,GARH,IAUN/P,KAERmQ,aAAc,KACdhF,cAAa,SACNA,GADM,IAET7G","file":"js/edit.fe99d2d3a3487bea1c13.js","sourcesContent":["import { defaultPort } from '../components/SourcesTable/formatters';\nimport { getSourcesApi } from './entities';\nimport { patchCmValues } from './patchCmValues';\n\nexport const parseUrl = url => {\n    if (url === null) {\n        return {\n            scheme: null,\n            host: null,\n            port: null,\n            path: null\n        };\n    }\n\n    if (!url) {\n        return ({});\n    }\n\n    try {\n        const u = new URL(url);\n        const scheme =  u.protocol.replace(/:$/, '');\n\n        return {\n            scheme,\n            host: u.hostname,\n            port: u.port === '' ? defaultPort(scheme) : u.port,\n            path: u.pathname\n        };\n    } catch (error) {\n        return ({});\n    }\n};\n\nexport const urlOrHost = formData =>\n    formData.url || formData.url === null ? parseUrl(formData.url) : formData.endpoint ? formData.endpoint : formData;\n\nexport const doUpdateSource = (source, formData) => {\n    const promises = [];\n\n    if (formData.source) {\n        promises.push(getSourcesApi().updateSource(source.source.id, formData.source));\n    }\n\n    if (formData.endpoint || formData.url || formData.url === null) {\n        const { scheme, host, port, path } = urlOrHost(formData);\n        const endPointPort = port === null ? null : parseInt(port, 10);\n\n        const endpointData = {\n            scheme,\n            host,\n            path,\n            port: endPointPort === null ? null : isNaN(endPointPort) ? undefined : endPointPort,\n            ...formData.endpoint\n        };\n\n        promises.push(getSourcesApi().updateEndpoint(source.endpoints[0].id, endpointData));\n    }\n\n    if (formData.authentications) {\n        Object.keys(formData.authentications).forEach((key) => {\n            const idWithoutPrefix = key.replace('a', '');\n\n            promises.push(getSourcesApi().updateAuthentication(idWithoutPrefix, formData.authentications[key]));\n        });\n    }\n\n    if (formData.billing_source || formData.credentials) {\n        let cmDataOut = {};\n\n        if (formData.credentials) {\n            cmDataOut = {\n                authentication: {\n                    credentials: formData.credentials\n                }\n            };\n        }\n\n        if (formData.billing_source) {\n            cmDataOut = {\n                ...cmDataOut,\n                billing_source: formData.billing_source\n            };\n        }\n\n        promises.push(patchCmValues(source.source.id, cmDataOut));\n    }\n\n    return Promise.all(promises);\n};\n","import { axiosInstance } from './entities';\nimport { COST_MANAGEMENT_API_BASE } from './constants';\n\nexport const patchCmValues = (id, data) => axiosInstance.patch(`${COST_MANAGEMENT_API_BASE}/sources/${id}/`, data);\n","import React, { useState, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\n\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\n\nimport TextField from '@data-driven-forms/pf4-component-mapper/dist/cjs/text-field';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validated from '@redhat-cloud-services/frontend-components-sources/cjs/validated';\n\nconst Authentication = (rest) => {\n    const formOptions = useFormApi();\n    const values = formOptions.getState().values;\n\n    const [authenticationId] = rest?.name?.match(/\\d+/) || [];\n    const isEditing = authenticationId || values.authentication?.id;\n\n    // If there is any value, the field is modified (password is always empty on start)\n    let isModified = get(values, rest.name);\n\n    const [edited, setEdited] = useState(!isEditing || isModified);\n    const firstClick = useRef(true);\n    const mounted = useRef(false);\n\n    useEffect(() => {\n        if (mounted.current) {\n            // reset on restart\n            if (\n                !firstClick.current && formOptions.getState().pristine\n            ) {\n                setEdited(false);\n                firstClick.current = true;\n            }\n\n            if (edited) {\n                firstClick.current = false;\n            }\n        }\n    });\n\n    useEffect(() => {\n        mounted.current = true;\n    }, []);\n\n    const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n    const componentProps = {\n        ...rest,\n        ...(isEditing ? {\n            validate: doNotRequirePassword,\n            resolveProps: validated,\n        } : {})\n    };\n\n    if (!edited) {\n        return (<FormGroup\n            helperText={componentProps.helperText}\n            label={componentProps.label}\n            onFocus={() => setEdited(true)}\n            isRequired\n        >\n            <TextInput aria-label=\"pre-filled-authentication\" value=\"•••••••••••••\" />\n        </FormGroup>);\n    }\n\n    return (\n        <TextField { ...componentProps } autoFocus={true}/>\n    );\n};\n\nexport default Authentication;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer/dist/cjs/form-renderer';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validatorMapper from '@data-driven-forms/react-form-renderer/dist/cjs/validator-mapper';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/cjs/component-mapper';\n\nimport { mapperExtension } from '@redhat-cloud-services/frontend-components-sources/cjs/sourceFormRenderer';\n\nimport Authentication from '../components/Authentication';\n\nconst SourcesFormRenderer = props => (\n    <FormRenderer\n        FormTemplate={FormTemplate}\n        componentMapper={{\n            ...componentMapper,\n            ...mapperExtension,\n            authentication: Authentication,\n            'switch-field': componentMapper[componentTypes.SWITCH]\n        }}\n        validatorMapper={{\n            'required-validator': validatorMapper[validatorTypes.REQUIRED],\n            'pattern-validator': validatorMapper[validatorTypes.PATTERN],\n            'min-length-validator': validatorMapper[validatorTypes.MIN_LENGTH],\n            'url-validator': validatorMapper[validatorTypes.URL]\n        }}\n        {...props}\n    />\n);\n\nexport default SourcesFormRenderer;\n","import { getSourcesApi, doLoadApplicationsForEdit } from './entities';\nimport { getCmValues } from './getCmValues';\n\nexport const doLoadSourceForEdit = (source) => Promise.all([\n    getSourcesApi().showSource(source.id),\n    getSourcesApi().listSourceEndpoints(source.id),\n    doLoadApplicationsForEdit(source.id),\n    getCmValues(source.id).catch(() => undefined),\n]).then(async ([sourceData, endpoints, applications, costManagement]) => {\n    const endpoint = endpoints && endpoints.data && endpoints.data[0];\n\n    const apps = applications?.sources[0]?.applications || [];\n\n    let basicValues = {\n        source: {\n            ...source,\n            ...sourceData\n        },\n        applications: apps\n    };\n\n    if (costManagement) {\n        basicValues = {\n            ...basicValues,\n            billing_source: costManagement.billing_source,\n            credentials: costManagement.authentication.credentials\n        };\n    }\n\n    const promises = [];\n    let appAuths;\n    const addToApp = [];\n    const appAuthenticationIds = [];\n\n    apps.forEach((app) => {\n        app?.authentications?.forEach((auth) => {\n            if (auth?.id) {\n                promises.push(getSourcesApi().showAuthentication(auth.id));\n                addToApp.push(app.id);\n                appAuthenticationIds.push(auth.id);\n            }\n        });\n    });\n\n    if (promises.length > 0) {\n        appAuths = await Promise.all(promises);\n\n        addToApp.forEach((id, index) => {\n            basicValues.applications.find(app => app.id === id).authentications.push(appAuths[index]);\n        });\n    }\n\n    if (!endpoint) {\n        return basicValues;\n    }\n\n    return getSourcesApi().listEndpointAuthentications(endpoint.id).then(authentications => ({\n        ...basicValues,\n        endpoints: endpoints.data,\n        authentications: authentications.data.filter(({ id }) => !appAuthenticationIds.includes(id)),\n    }));\n});\n","import { axiosInstance } from './entities';\nimport { COST_MANAGEMENT_API_BASE } from './constants';\n\nexport const getCmValues = (id) => axiosInstance.get(`${COST_MANAGEMENT_API_BASE}/sources/${id}/`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst Header = ({ name }) =>{\n    const intl = useIntl();\n\n    return (\n        <Grid>\n            <GridItem xs={12}>\n                <Title headingLevel=\"h1\" size=\"3xl\">\n                    { intl.formatMessage({\n                        id: 'sources.editSource',\n                        defaultMessage: 'Edit source'\n                    }) }\n                </Title>\n            </GridItem>\n            {name && <GridItem xs={12}>\n                { intl.formatMessage({\n                    id: 'sources.editSourceDescription',\n                    defaultMessage: 'Use the form fields below to make desired changes to source {name}.'\n                }, { name: <b key=\"b\">{name}</b> }) }\n            </GridItem>}\n        </Grid>\n    );\n};\n\nHeader.propTypes = {\n    name: PropTypes.node\n};\n\nexport default Header;\n","import get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { endpointToUrl } from '../SourcesTable/formatters';\n\nexport const selectOnlyEditedValues = (values, editing) => {\n    const filteredValues = {};\n\n    Object.keys(editing)\n    .filter((key) => editing[key])\n    .forEach((key) => {\n        set(filteredValues, key, get(values, key));\n    });\n\n    return filteredValues;\n};\n\nexport const prepareInitialValues = ({ endpoints, authentications, applications, ...rest }, sourceTypeName) => {\n    const auhenticationsFinal = {};\n\n    const mergeAuths = [\n        ...(authentications || []),\n        ...(applications?.reduce((acc, curr) => [...acc, ...curr.authentications], []) || [])\n    ];\n\n    if (mergeAuths.length > 0) {\n        mergeAuths.forEach((auth) => {\n            auhenticationsFinal[`a${auth.id}`] = auth;\n        });\n    }\n\n    let endpoint;\n    let url;\n\n    if (endpoints && endpoints.length > 0) {\n        endpoint = endpoints[0];\n    }\n\n    if (endpoint) {\n        url = (endpoint.scheme || endpoint.host || endpoint.path || endpoint.port) ? endpointToUrl(endpoint) : undefined;\n    }\n\n    return ({\n        source_type: sourceTypeName,\n        endpoint,\n        authentications: auhenticationsFinal,\n        url,\n        ...rest\n    });\n};\n","import { checkAppAvailability } from '@redhat-cloud-services/frontend-components-sources/cjs/getApplicationStatus';\n\nimport { selectOnlyEditedValues } from './helpers';\nimport { loadEntities } from '../../redux/sources/actions';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\nimport { doLoadSourceForEdit } from '../../api/doLoadSourceForEdit';\nimport { doUpdateSource } from '../../api/doUpdateSource';\n\nimport { UNAVAILABLE } from '../SourcesTable/formatters';\n\nexport const onSubmit = async (values, editing, dispatch, source, intl, setState) => {\n    setState({ type: 'submit', values, editing });\n\n    try {\n        await doUpdateSource(source, selectOnlyEditedValues(values, editing));\n    } catch {\n        setState({ type: 'submitFailed' });\n\n        return;\n    }\n\n    checkSourceStatus(source.source.id);\n    dispatch(loadEntities());\n\n    let message;\n\n    const sourceData = await doLoadSourceForEdit({ id: source.source.id });\n\n    const promises = source.applications?.map(({ id }) => checkAppAvailability(id)) || [];\n\n    let statusResults;\n    if (promises.length > 0) {\n        try {\n            statusResults = await Promise.all(promises);\n        } catch (error) {\n            setState({ type: 'submitFailed' });\n\n            return;\n        }\n\n        const unavailableApp = statusResults.find(({ availability_status }) => availability_status === UNAVAILABLE);\n\n        if (unavailableApp) {\n            message = {\n                title: intl.formatMessage({\n                    id: 'wizard.failEditToastTitle',\n                    defaultMessage: 'Edit source failed'\n                }),\n                description: unavailableApp.availability_status_error,\n                variant: 'danger'\n            };\n\n            setState({ type: 'submitFinished', source: sourceData, message });\n\n            return;\n        }\n\n        const anyTimetouted = statusResults.some(({ availability_status }) => !availability_status);\n\n        if (anyTimetouted) {\n            setState({ type: 'submitTimetouted' });\n\n            return;\n        }\n    }\n\n    message = {\n        title: intl.formatMessage({\n            id: 'wizard.successEditToastTitle',\n            defaultMessage: 'Source ‘{name}’ was edited successfully.'\n        }, { name: source.source.name }),\n        variant: 'success'\n    };\n\n    setState({ type: 'submitFinished', source: sourceData, message });\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/index';\n\nconst AdditionalInfoBar = ({ sourceType, applications }) => {\n    const intl = useIntl();\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n\n    const sourceAppsNames = applications?.map(({ application_type_id }) =>\n        appTypes?.find(({ id }) => id === application_type_id)?.display_name\n    );\n\n    return (\n        <TextContent>\n            <Grid hasGutter>\n                <GridItem md={2}>\n                    <Text component={TextVariants.h4}>\n                        { intl.formatMessage({\n                            id: 'sources.sourceType',\n                            defaultMessage: 'Source type'\n                        }) }\n                    </Text>\n                    <Text component={TextVariants.p} id=\"source-edit-type\">\n                        { sourceType.product_name }\n                    </Text>\n                </GridItem>\n                <GridItem md={8}>\n                    <Text component={TextVariants.h4}>\n                        { intl.formatMessage({\n                            id: 'sources.apps',\n                            defaultMessage: 'Applications'\n                        }) }\n                    </Text>\n                    <Text component={TextVariants.p} id=\"source-edit-apps\">\n                        {sourceAppsNames.length > 0 ? sourceAppsNames.join(', ')\n                            : (\n                                intl.formatMessage({\n                                    id: 'sources.none',\n                                    defaultMessage: 'None'\n                                })\n                            )\n                        }\n                    </Text>\n                </GridItem>\n            </Grid>\n        </TextContent>\n    );\n};\n\nAdditionalInfoBar.propTypes = {\n    sourceType: PropTypes.shape({\n        product_name: PropTypes.string.isRequired\n    }),\n    applications: PropTypes.arrayOf(PropTypes.shape({\n        application_type_id: PropTypes.string.isRequired\n    }))\n};\n\nexport default AdditionalInfoBar;\n","import React from 'react';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nimport { Alert } from '@patternfly/react-core/dist/js/components/Alert/Alert';\n\nconst EditAlert = () => {\n    const formOptions = useFormApi();\n\n    const { message } = formOptions.getState().values;\n\n    return (\n        <Alert variant={message?.variant} isInline title={message?.title}>\n            {message?.description}\n        </Alert>\n    );\n};\n\nexport default EditAlert;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport { asyncValidatorDebounced } from '@redhat-cloud-services/frontend-components-sources/cjs/SourceAddSchema';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validated from '@redhat-cloud-services/frontend-components-sources/cjs/validated';\n\nimport AdditionalInfoBar from './AdditionalInfoBar';\nimport EditAlert from './EditAlert';\n\nexport const genericInfo = (sourceId, intl, sourceType, applications) => ([\n    {\n        name: 'alert',\n        component: 'description',\n        Content: EditAlert,\n        condition: {\n            when: 'message',\n            isNotEmpty: true\n        }\n    },\n    {\n        name: 'source.name',\n        label: intl.formatMessage({\n            id: 'sources.sourceName',\n            defaultMessage: 'Source name'\n        }),\n        component: componentTypes.TEXT_FIELD,\n        validate: [\n            (value) => asyncValidatorDebounced(value, sourceId, intl),\n            { type: validatorTypes.REQUIRED }\n        ],\n        isRequired: true,\n        resolveProps: validated\n    }, {\n        name: 'additional_info',\n        Content: AdditionalInfoBar,\n        component: 'description',\n        sourceType,\n        applications\n    }\n]);\n","import get from 'lodash/get';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport hardcodedSchemas from '@redhat-cloud-services/frontend-components-sources/cjs/hardcodedSchemas';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nexport const getEnhancedEndpointField = (sourceType, name) =>\n    get(hardcodedSchemas, [sourceType, 'endpoint', name], {});\n\nexport const endpointFields = (sourceType) => {\n    if (!sourceType.schema || !sourceType.schema.endpoint || sourceType.schema.endpoint.hidden) {\n        return undefined;\n    }\n\n    const schemaAuth = sourceType.schema.endpoint;\n\n    const enhancedFields = schemaAuth.fields.map((field) => ({\n        ...field,\n        ...getEnhancedEndpointField(sourceType.name, field.name)\n    }));\n\n    const modifiedFields = enhancedFields;\n\n    const subForm = {\n        component: componentTypes.SUB_FORM,\n        name: 'endpoint',\n    };\n\n    if (sourceType.name === 'ansible-tower') {\n        const url = modifiedFields.find(({ name }) => name === 'url');\n\n        return ({\n            ...subForm,\n            fields: [{\n                component: componentTypes.SUB_FORM,\n                name: 'receptor_node_group',\n                condition: {\n                    when: 'endpoint.receptor_node',\n                    isNotEmpty: true\n                },\n                fields: [{\n                    ...url,\n                    isRequired: false,\n                    validate: url?.validate?.filter(validation => validation.type !== validatorTypes.REQUIRED)\n                }]\n            }, {\n                component: componentTypes.SUB_FORM,\n                name: 'hostname_group',\n                condition: {\n                    when: 'endpoint.receptor_node',\n                    isEmpty: true\n                },\n                fields: modifiedFields\n            }]\n        });\n    }\n\n    return ({\n        ...subForm,\n        fields: modifiedFields\n    });\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nconst AuthenticationId = ({ id }) => {\n    const intl = useIntl();\n\n    return (<FormGroup\n        label={intl.formatMessage({ id: 'sources.authId', defaultMessage: 'Authentication ID' })}\n    >\n        <TextContent>\n            <Text variant=\"p\">\n                {id}\n            </Text>\n        </TextContent>\n    </FormGroup>);\n};\n\nAuthenticationId.propTypes = {\n    id: PropTypes.string.isRequired\n};\n\nexport default AuthenticationId;\n","import { createContext } from 'react';\n\nconst sourceEditContext = createContext();\n\nexport default sourceEditContext;\n","import React from 'react';\n\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\n\nimport { useIntl } from 'react-intl';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nconst RemoveAuthPlaceholder = () => {\n    const intl = useIntl();\n\n    return (\n        <Grid>\n            <GridItem xs={12}>\n                <Bullseye>\n                    <Spinner size=\"lg\"/>\n                </Bullseye>\n            </GridItem>\n            <GridItem xs={12}>\n                <Bullseye>\n                    <TextContent>\n                        <Text component={TextVariants.small} className=\"pf-u-mt-md\">\n                            { intl.formatMessage({\n                                id: 'sources.removingAuthMessage',\n                                defaultMessage: 'This authentication is being removed...'\n                            }) }\n                        </Text>\n                    </TextContent>\n                </Bullseye>\n            </GridItem>\n        </Grid>\n    );\n};\n\nexport default RemoveAuthPlaceholder;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/js/layouts/Flex';\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport TrashIcon from '@patternfly/react-icons/dist/js/icons/trash-icon';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nimport AuthenticationId from './AuthenticationId';\nimport sourceEditContext from '../sourceEditContext';\nimport RemoveAuthPlaceholder from './RemoveAuthPlaceholder';\n\nconst GridLayout = ({ id, fields }) => {\n    const intl = useIntl();\n    const { renderForm } = useFormApi();\n    const { setState, source } = useContext(sourceEditContext);\n\n    const setAuthRemoving = () => setState({\n        type: 'setAuthRemoving',\n        removingAuth: id,\n    });\n\n    const isDeleting = source?.authentications?.find(auth => auth.id === id)?.isDeleting;\n\n    if (isDeleting) {\n        return <RemoveAuthPlaceholder />;\n    }\n\n    return (<Grid>\n        <GridItem md={2}>\n            <Flex>\n                <FlexItem className=\"pf-u-mr-0\">\n                    <Button\n                        variant=\"plain\"\n                        aria-label={intl.formatMessage({\n                            id: 'sources.removeAuthAriaLabel',\n                            defaultMessage: 'Remove authentication with id {id}'\n                        }, { id })}\n                        onClick={setAuthRemoving}>\n                        <TrashIcon />\n                    </Button>\n                </FlexItem>\n                <Flex>\n                    <AuthenticationId id={id} />\n                </Flex>\n            </Flex>\n        </GridItem>\n        <GridItem md={10}>\n            { renderForm(fields) }\n        </GridItem>\n    </Grid>);\n};\n\nGridLayout.propTypes = {\n    id: PropTypes.string.isRequired,\n    fields: PropTypes.array.isRequired\n};\n\nexport default GridLayout;\n","import get from 'lodash/get';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport hardcodedSchemas from '@redhat-cloud-services/frontend-components-sources/cjs/hardcodedSchemas';\nimport GridLayout from './GridLayout';\n\nexport const createAuthFieldName = (fieldName, id) => `authentications.a${id}.${fieldName.replace('authentication.', '')}`;\n\nexport const getLastPartOfName = (fieldName) => fieldName.split('.').pop();\n\nexport const removeRequiredValidator = (validate = []) =>\n    validate.filter(validation => validation.type !== validatorTypes.REQUIRED && validation.type !== 'required-validator');\n\nexport const getEnhancedAuthField = (sourceType, authtype, name, appName = 'generic') =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, appName, name], {});\n\nexport const getAdditionalAuthSteps = (sourceType, authtype, appName = 'generic') =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, appName, 'additionalSteps'], []);\n\nexport const getAdditionalAuthStepsKeys = (sourceType, authtype, appName = 'generic') =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, appName, 'includeStepKeyFields'], []);\n\nexport const getAdditionalFields = (auth, stepKey) => auth?.fields?.filter(field => field.stepKey === stepKey) || [];\n\nexport const modifyAuthSchemas = (fields, id) => fields.map((field) => {\n    const editedName = field.name.startsWith('authentication') ? createAuthFieldName(field.name, id) : field.name;\n\n    const finalField = ({\n        ...field,\n        name: editedName,\n    });\n\n    const isPassword = getLastPartOfName(finalField.name) === 'password';\n\n    if (isPassword) {\n        finalField.component = 'authentication';\n    }\n\n    return finalField;\n});\n\nexport const authenticationFields = (authentications, sourceType, appName) => {\n    if (!authentications || authentications.length === 0 || !sourceType.schema || !sourceType.schema.authentication) {\n        return [];\n    }\n\n    return authentications.map((auth) => {\n        const schemaAuth = sourceType?.schema?.authentication?.find(({ type }) => type === auth.authtype);\n\n        if (!schemaAuth) {\n            return [];\n        }\n\n        const additionalStepKeys = getAdditionalAuthStepsKeys(sourceType.name, auth.authtype, appName);\n        const additionalStepsFields = getAdditionalAuthSteps(sourceType.name, auth.authtype, appName)\n        ?.map(step => ({ ...step, fields: [...step.fields, ...getAdditionalFields(schemaAuth, step.name)] }))\n        .map(({ fields }) => fields.map(({ name }) => name)).flatMap(x => x);\n\n        const enhancedFields = schemaAuth.fields\n        .filter(field => additionalStepsFields.includes(field.name)\n        || !field.stepKey\n        || (field.stepKey && additionalStepKeys.includes(field.stepKey))\n        )\n        .map((field) => ({\n            ...field,\n            ...getEnhancedAuthField(sourceType.name, auth.authtype, field.name, appName)\n        }));\n\n        if (!appName) {\n            return ([\n                {\n                    name: `authentication-${auth.id}`,\n                    component: 'description',\n                    id: auth.id,\n                    Content: GridLayout,\n                    fields: modifyAuthSchemas(enhancedFields, auth.id)\n                },\n            ]);\n        }\n\n        return modifyAuthSchemas(enhancedFields, auth.id);\n    });\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport { FormattedMessage } from 'react-intl';\nimport { authenticationFields } from './authentication';\n\nexport const APP_NAMES = {\n    COST_MANAGAMENT: '/insights/platform/cost-management'\n};\n\nexport const appendClusterIdentifier = (sourceType) =>\n    sourceType.name === 'openshift' ? [{\n        name: 'source.source_ref',\n        label: <FormattedMessage\n            id=\"sources.clusterIdentifier\"\n            defaultMessage=\"Cluster identifier\"\n        />,\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n        component: componentTypes.TEXT_FIELD,\n    }] : [];\n\nconst createOneAppFields = (appType, sourceType, app) => ([\n    ...authenticationFields(\n        app.authentications?.filter(auth => Object.keys(auth).length > 1),\n        sourceType,\n        appType?.name\n    ),\n    ...(appType?.name === APP_NAMES.COST_MANAGAMENT ? appendClusterIdentifier(sourceType) : [])\n]);\n\nconst unusedAuthsWarning = (length) => ({\n    component: componentTypes.PLAIN_TEXT,\n    name: 'unused-auth-warning',\n    label: <FormattedMessage\n        id='sources.authNotUsed'\n        // eslint-disable-next-line max-len\n        defaultMessage='The following {length, plural, one {authentication is not} other {authentications are not}} used by any application.'\n        values={{ length }}\n    />\n});\n\nconst unusedAuthentications = (authentications, sourceType, appsLength) => {\n    if (!authentications || authentications.length === 0) {\n        return [];\n    }\n\n    let authenticationsInputs = sourceType?.schema?.authentication?.reduce((acc, { type }) => {\n        const auths = authentications.filter(({ authtype }) => type === authtype);\n\n        if (auths?.length > 0) {\n            return ([\n                ...acc,\n                ...authenticationFields(auths, sourceType)\n            ]);\n        }\n\n        return acc;\n    }, [])?.filter(Boolean);\n\n    const transformToTabs = appsLength !== 0;\n\n    if (transformToTabs) {\n        authenticationsInputs = [{\n            fields: [\n                unusedAuthsWarning(authenticationsInputs.length),\n                ...authenticationsInputs\n            ],\n            title: sourceType.product_name,\n            name: 'unused-auths-tab'\n        }];\n    } else {\n        authenticationsInputs = [{\n            fields: [\n                unusedAuthsWarning(authenticationsInputs.length),\n                ...authenticationsInputs\n            ],\n            component: componentTypes.SUB_FORM,\n            name: 'unused-auths-group'\n        }];\n    }\n\n    return authenticationsInputs;\n};\n\nexport const applicationsFields = (\n    applications,\n    sourceType,\n    appTypes,\n    authentications\n) => {\n    const authenticationTypesFormGroups = unusedAuthentications(authentications, sourceType, applications?.length);\n\n    if (!applications || applications.length === 0) {\n        return authenticationTypesFormGroups;\n    } else if (applications.length === 1 && authenticationTypesFormGroups.length === 0) {\n        const appType = appTypes.find(({ id }) => id === applications[0].application_type_id);\n\n        return createOneAppFields(appType, sourceType, applications[0]);\n    } else {\n        return ([{\n            component: componentTypes.TABS,\n            name: 'app-tabs',\n            fields: [\n                ...applications.map((app) => {\n                    const appType = appTypes.find(({ id }) => id === app.application_type_id);\n\n                    return ({\n                        name: appType?.id,\n                        title: appType?.display_name,\n                        fields: createOneAppFields(appType, sourceType, app)\n                    });\n                }),\n                ...authenticationTypesFormGroups\n            ]\n        }]);\n    }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nexport const TitleAndDescription = ({ title, description }) => (<TextContent>\n    <Title headingLevel=\"h2\" className=\"pf-u-mb-0\">{title}</Title>\n    {description && <Text variant=\"p\">{description}</Text>}\n</TextContent>);\n\nTitleAndDescription.propTypes = {\n    title: PropTypes.node.isRequired,\n    description: PropTypes.node\n};\n\nconst titleField = (applications, sourceType, appTypes, intl, authentications) => {\n    let title;\n    let description;\n\n    if (applications.length === 0) {\n        title = intl.formatMessage({\n            id: 'source.editTitleNoApp',\n            defaultMessage: '{type} credentials'\n        }, { type: sourceType?.product_name });\n    } else if (applications.length === 1) {\n        const app = appTypes.find(({ id }) => id === applications[0].application_type_id);\n        title = intl.formatMessage({\n            id: 'source.editTitleOneApp',\n            defaultMessage: '{type} & {app} credentials'\n        }, { type: sourceType?.product_name, app: app?.display_name  });\n    } else {\n        title = intl.formatMessage({\n            id: 'source.editTitleMoreApps',\n            defaultMessage: '{type} & application credentials'\n        }, { type: sourceType?.product_name });\n        description = intl.formatMessage({\n            id: 'source.editDescriptionMoreApps',\n            defaultMessage: 'Use the tabs below to view and edit credentials for connected applications.'\n        });\n    }\n\n    return ({\n        component: 'description',\n        name: 'edit-title',\n        Content: TitleAndDescription,\n        title,\n        description,\n        hideField: applications?.length === 0 && authentications?.length === 0\n    });\n};\n\nexport default titleField;\n","import { genericInfo } from './genericInfo';\nimport { endpointFields } from './endpoint';\nimport { applicationsFields } from './application';\nimport titleField from './titleField';\n\nexport const parseSourceToSchema = (source, sourceType, appTypes, intl) => ({\n    fields: [\n        ...genericInfo(source.source.id, intl, sourceType, source.applications),\n        titleField(source.applications, sourceType, appTypes, intl, source.authentications),\n        ...applicationsFields(source.applications, sourceType, appTypes, source.authentications),\n        source.endpoints && source.endpoints.length > 0 ? endpointFields(sourceType) : false\n    ].filter(Boolean)\n});\n","import { parseSourceToSchema } from './parser/parseSourceToSchema';\nimport { prepareInitialValues } from './helpers';\n\nexport const initialState = {\n    loading: true,\n    source: undefined,\n    initialValues: {},\n    sourceType: undefined,\n    schema: undefined,\n    isSubmitting: false,\n    initialLoad: true,\n    submitError: false,\n    isTimeouted: false\n};\n\nconst reducer = (state, { type, source, sourceType, appTypes, intl, message, values, editing, removingAuth, authId }) => {\n    switch (type) {\n        case 'createForm':\n            return {\n                ...state,\n                sourceType,\n                initialValues: prepareInitialValues(state.source, sourceType.product_name),\n                schema: parseSourceToSchema(state.source, sourceType, appTypes, intl),\n                loading: false\n            };\n        case 'setSource':\n            return {\n                ...state,\n                source,\n                initialLoad: false\n            };\n        case 'submit':\n            return {\n                ...state,\n                isSubmitting: true,\n                submitError: false,\n                values,\n                editing\n            };\n        case 'submitFinished':\n            return {\n                ...state,\n                isSubmitting: false,\n                source,\n                message\n            };\n        case 'submitFailed':\n            return {\n                ...state,\n                isSubmitting: false,\n                submitError: true\n            };\n        case 'submitTimetouted':\n            return {\n                ...state,\n                isSubmitting: false,\n                isTimeouted: true\n            };\n        case 'removeAuthPending':\n            return {\n                ...state,\n                isAuthRemoving: null,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.map((auth) => auth.id === authId ? {\n                        ...auth, isDeleting: true\n                    } : auth)\n                }\n            };\n        case 'removeAuthRejected':\n            return {\n                ...state,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.map((auth) => auth.id === authId ? {\n                        ...auth, isDeleting: false\n                    } : auth)\n                }\n            };\n        case 'removeAuthFulfill':\n            return {\n                ...state,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.filter((auth) => auth.id !== authId)\n                }\n            };\n        case 'setAuthRemoving':\n            return {\n                ...state,\n                isAuthRemoving: removingAuth\n            };\n        case 'closeAuthRemoving':\n            return {\n                ...state,\n                isAuthRemoving: null\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport FormSpy from '@data-driven-forms/react-form-renderer/dist/cjs/form-spy';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\nimport { ActionGroup } from '@patternfly/react-core/dist/js/components/Form/ActionGroup';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport { Form } from '@patternfly/react-core/dist/js/components/Form/Form';\n\nconst CustomFormWrapper = (props) => <Form {...props} id=\"modal-form\" />;\n\nconst CustomButtons = () => {\n    const intl = useIntl();\n    const { onReset, onCancel } = useFormApi();\n\n    return (<FormSpy subscription={{ submitting: true, pristine: true, invalid: true, validating: true }}>\n        {({ pristine, invalid, validating, submitting }) => (\n            <div className=\"pf-c-form\">\n                <ActionGroup className=\"pf-u-mt-0\">\n                    <Button\n                        variant=\"primary\"\n                        form=\"modal-form\"\n                        type=\"submit\"\n                        isDisabled={pristine || validating || submitting || invalid}\n                    >\n                        {intl.formatMessage({\n                            id: 'sources.save',\n                            defaultMessage: 'Save'\n                        })}\n                    </Button>\n                    <Button variant=\"secondary\" isDisabled={pristine} onClick={onReset} id=\"reset-modal\">\n                        {intl.formatMessage({\n                            id: 'sources.reset',\n                            defaultMessage: 'Reset'\n                        })}\n                    </Button>\n                    <Button variant=\"link\" onClick={onCancel} id=\"cancel-modal\">\n                        {intl.formatMessage({\n                            id: 'sources.cancel',\n                            defaultMessage: 'Cancel'\n                        })}\n                    </Button>\n                </ActionGroup>\n            </div>\n        )}\n    </FormSpy>);\n};\n\nconst ModalFormTemplate = ({ ModalProps, ...props }) => (\n    <Modal\n        {...ModalProps}\n        footer={<CustomButtons/>}\n    >\n        <FormTemplate {...props} showFormControls={false} FormWrapper={CustomFormWrapper}/>\n    </Modal>\n);\n\nModalFormTemplate.propTypes = {\n    ModalProps: PropTypes.object\n};\n\nexport default ModalFormTemplate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { useSource } from '../../hooks/useSource';\n\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\nimport { ActionGroup } from '@patternfly/react-core/dist/js/components/Form/ActionGroup';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\n\nimport { routes } from '../../Routes';\nimport Header from './Header';\n\nexport const FakeFooter = () => {\n    const intl = useIntl();\n    const history = useHistory();\n\n    return (<div className=\"pf-c-form\">\n        <ActionGroup className=\"pf-u-mt-0\">\n            <Button variant=\"primary\" isDisabled>\n                {intl.formatMessage({\n                    id: 'sources.save',\n                    defaultMessage: 'Save'\n                })}\n            </Button>\n            <Button variant=\"secondary\" isDisabled>\n                {intl.formatMessage({\n                    id: 'sources.reset',\n                    defaultMessage: 'Reset'\n                })}\n            </Button>\n            <Button variant=\"link\" onClick={() => history.push(routes.sources.path)}>\n                {intl.formatMessage({\n                    id: 'sources.cancel',\n                    defaultMessage: 'Cancel'\n                })}\n            </Button>\n        </ActionGroup>\n    </div>);\n};\n\nconst WrapperModal = ({ children }) => {\n    const history = useHistory();\n    const sourceRedux = useSource();\n    const intl = useIntl();\n\n    return (\n        <Modal\n            aria-label={intl.formatMessage({\n                id: 'sources.editSource',\n                defaultMessage: 'Edit source.'\n            })}\n            header={<Header name={sourceRedux.name} />}\n            variant=\"large\"\n            isOpen={true}\n            onClose={() => history.push(routes.sources.path)}\n            footer={<FakeFooter />}\n        >\n            {children}\n        </Modal>\n    );\n};\n\nWrapperModal.propTypes = {\n    children: PropTypes.node.isRequired\n};\n\nexport default WrapperModal;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport LoadingStep from '@redhat-cloud-services/frontend-components-sources/cjs/LoadingStep';\n\nimport WrapperModal from './WrapperModal';\n\nconst SubmittingModal = () => {\n    const intl = useIntl();\n\n    return (\n        <WrapperModal>\n            <LoadingStep\n                customText={\n                    intl.formatMessage({\n                        id: 'sources.editSubmittingTitle',\n                        defaultMessage: 'Validating edited source credentials'\n                    })\n                }\n            />\n        </WrapperModal>\n    );\n};\n\nexport default SubmittingModal;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Title } from '@patternfly/react-core/dist/js/components/Title';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { EmptyState, EmptyStateVariant, EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\n\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\n\nimport WrapperModal from './WrapperModal';\n\nconst TimeoutedModal = () => {\n    const intl = useIntl();\n\n    return (\n        <WrapperModal>\n            <Bullseye>\n                <EmptyState variant={ EmptyStateVariant.full } className=\"pf-u-mt-4xl\" >\n                    <EmptyStateIcon icon={ WrenchIcon } color=\"var(--pf-global--Color--200)\" className=\"pf-u-mb-0\"/>\n                    <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n                        {intl.formatMessage({\n                            id: 'sources.editTimetoutedTitle',\n                            defaultMessage: 'Edit source not yet complete'\n                        })}\n                    </Title>\n                    <EmptyStateBody>\n                        { intl.formatMessage({\n                            id: 'sources.editTimetoutedDescription',\n                            // eslint-disable-next-line max-len\n                            defaultMessage: 'We are still working to confirm your updated credentials and app settings.{newLine}To track progress, check the Status column in the Sources table.'\n                        }, { newLine: <br key=\"br\"/> }) }\n                    </EmptyStateBody>\n                </EmptyState>\n            </Bullseye>\n        </WrapperModal>\n    );\n};\n\nexport default TimeoutedModal;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Text } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nimport ErroredStep from '@redhat-cloud-services/frontend-components-sources/cjs/ErroredStep';\n\nimport WrapperModal from './WrapperModal';\n\nconst ErroredModal = ({ onRetry }) => {\n    const intl = useIntl();\n\n    return (\n        <WrapperModal>\n            <ErroredStep\n                onClose={onRetry}\n                customText={\n                    intl.formatMessage({\n                        id: 'sources.editErrorDescription',\n                        // eslint-disable-next-line max-len\n                        defaultMessage: 'There was a problem while trying to edit your source. Please try again. If the error persists, open a support case.'\n                    })\n                }\n                secondaryActions={\n                    <Text\n                        component='a'\n                        target=\"_blank\"\n                        href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {intl.formatMessage({ id: 'sources.openTicket', defaultMessage: 'Open a support case' })}\n                    </Text>\n                }\n                returnButtonTitle={ intl.formatMessage({\n                    id: 'sources.retryText',\n                    defaultMessage: 'Retry'\n                })}\n            />\n        </WrapperModal>\n    );\n};\n\nErroredModal.propTypes = {\n    onRetry: PropTypes.func.isRequired\n};\n\nexport default ErroredModal;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport sourceEditContext from '../sourceEditContext';\nimport { addMessage } from '../../../redux/sources/actions';\nimport { doDeleteAuthentication } from '../../../api/entities';\nimport { handleError } from '@redhat-cloud-services/frontend-components-sources/cjs/handleError';\n\nconst RemoveAuth = ({ authId }) => {\n    const { setState, source, sourceType } = useContext(sourceEditContext);\n\n    const schemaAuth = sourceType?.schema?.authentication?.find(\n        ({ type }) => type === source?.authentications?.find(auth => auth?.id === authId)?.authtype\n    );\n\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    const onClose = () => setState({ type: 'closeAuthRemoving' });\n\n    const onRemove = () => {\n        setState({ type: 'removeAuthPending', authId });\n        onClose();\n        return doDeleteAuthentication(authId).then(() => {\n            setState({ type: 'removeAuthFulfill', authId });\n            dispatch(addMessage(\n                intl.formatMessage(\n                    { id: 'sources.authRemoveFullfil', defaultMessage: 'Authentication was deleted successfully.' }\n                ),\n                'success'\n            ));\n        })\n        .catch((error) => {\n            setState({ type: 'removeAuthRejected', authId });\n            dispatch(addMessage(\n                intl.formatMessage(\n                    { id: 'sources.authRemoveRejected', defaultMessage: 'Authentication was not deleted successfully.' }\n                ),\n                'danger',\n                handleError(error)\n            ));\n        });\n    };\n\n    return (\n        <Modal\n            isOpen\n            className=\"ins-c-sources__dialog--warning\"\n            onClose={onClose}\n            actions={[<Button\n                id=\"deleteSubmit\"\n                key=\"submit\"\n                variant=\"danger\"\n                type=\"button\"\n                onClick={ onRemove }\n            >\n                { intl.formatMessage({\n                    id: 'sources.deleteConfirm',\n                    defaultMessage: 'Remove authentication'\n                }) }\n            </Button>,\n            <Button\n                id=\"deleteCancel\"\n                key=\"cancel\"\n                variant=\"link\"\n                type=\"button\"\n                onClick={ onClose }\n            >\n                { intl.formatMessage({\n                    id: 'sources.deleteCancel',\n                    defaultMessage: 'Cancel'\n                }) }\n            </Button>]}\n            variant=\"small\"\n            aria-label={\n                intl.formatMessage({\n                    id: 'sources.deleteAuthTitle',\n                    defaultMessage: 'Remove authentication?',\n                })\n            }\n            header={\n                <Title headingLevel=\"h1\" size=\"2xl\">\n                    <ExclamationTriangleIcon size=\"sm\" className=\"ins-m-alert ins-c-source__delete-icon pf-u-mr-sm\" />\n                    {intl.formatMessage({\n                        id: 'sources.deleteAppTitle',\n                        defaultMessage: 'Remove authentication?',\n                    })}\n                </Title>\n            }\n        >\n\n            <TextContent>\n                <Text variant={TextVariants.p}>\n                    {intl.formatMessage({\n                        id: 'sources.removeAuthWarning',\n                        defaultMessage: 'This action will permanently remove {auth} from this source.'\n                    }, { auth: <b key=\"b\">{schemaAuth?.name}</b> })}\n                </Text>\n            </TextContent>\n        </Modal>\n    );\n};\n\nRemoveAuth.propTypes = {\n    authId: PropTypes.string.isRequired\n};\n\nexport default RemoveAuth;\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\n\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\n\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport { doLoadSourceForEdit } from '../../api/doLoadSourceForEdit';\nimport Header from './Header';\nimport { onSubmit } from './onSubmit';\n\nimport { redirectWhenImported } from './importedRedirect';\nimport { routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport reducer, { initialState } from './reducer';\nimport sourceEditContext from './sourceEditContext';\nimport ModalFormTemplate from '../ModalFormTemplate';\nimport SubmittingModal from './SubmittingModal';\nimport TimeoutedModal from './TimeoutedModal';\nimport ErroredModal from './ErroredModal';\nimport RemoveAuth from './parser/RemoveAuth';\n\nconst SourceEditModal = () => {\n    const [state, setState] = useReducer(reducer, initialState);\n    const history = useHistory();\n    const sourceRedux = useSource();\n    const isLoaded = useIsLoaded();\n\n    const {\n        loading,\n        editing,\n        source,\n        initialValues,\n        schema,\n        isSubmitting,\n        initialLoad,\n        message,\n        submitError,\n        isTimeouted,\n        values,\n        sourceType,\n        isAuthRemoving\n    } = state;\n\n    const intl = useIntl();\n\n    const {\n        sourceTypes,\n        appTypes,\n        sourceTypesLoaded,\n        appTypesLoaded\n    } = useSelector(({ sources }) => sources, shallowEqual);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (sourceRedux && initialLoad) {\n            doLoadSourceForEdit(sourceRedux).then((source) => {\n                if (source.source.imported) {\n                    redirectWhenImported(dispatch, intl, history, source.source.name);\n                }\n\n                setState({ type: 'setSource', source });\n            });\n        }\n    }, [sourceRedux, isLoaded]);\n\n    useEffect(() => {\n        if (source && appTypesLoaded && sourceTypesLoaded) {\n            const sourceType = sourceTypes.find(({ id }) => id === source.source.source_type_id);\n\n            setState({ type: 'createForm', sourceType, source, appTypes, intl });\n        }\n    }, [appTypesLoaded, source, sourceTypesLoaded]);\n\n    const isLoading = !appTypesLoaded || !sourceTypesLoaded || loading;\n\n    const returnToSources = () => history.push(routes.sources.path);\n\n    if (isTimeouted) {\n        return <TimeoutedModal />;\n    }\n\n    if (submitError) {\n        return (<ErroredModal\n            onRetry={() => onSubmit(values, editing, dispatch, source, intl, setState)}\n        />);\n    }\n\n    if (isSubmitting) {\n        return <SubmittingModal />;\n    }\n\n    if (isLoading) {\n        return (\n            <Modal\n                aria-label={intl.formatMessage({\n                    id: 'sources.editSource',\n                    defaultMessage: 'Edit source.'\n                })}\n                header={<Header />}\n                isOpen\n                variant=\"large\"\n                onClose={returnToSources}\n            >\n                <div className=\"ins-c-sources__dialog--spinnerContainer\">\n                    <Spinner />\n                </div>\n            </Modal>\n        );\n    }\n\n    return (\n        <sourceEditContext.Provider value={{ setState, source, sourceType }}>\n            {isAuthRemoving && <RemoveAuth authId={isAuthRemoving} />}\n            <SourcesFormRenderer\n                onCancel={returnToSources}\n                schema={schema}\n                onSubmit={\n                    (values, formApi) =>\n                        onSubmit(values, formApi.getState().dirtyFields, dispatch, source, intl, setState)\n                }\n                FormTemplate={(props) => (<ModalFormTemplate\n                    ModalProps={{\n                        ['aria-label']: intl.formatMessage({\n                            id: 'sources.editSource',\n                            defaultMessage: 'Edit source.'\n                        }),\n                        header: <Header name={source.source.name} />,\n                        variant: 'large',\n                        isOpen: !isAuthRemoving,\n                        onClose: returnToSources\n                    }}\n                    {...props}\n                />)}\n                clearedValue={null}\n                initialValues={{\n                    ...initialValues,\n                    message\n                }}\n            />\n        </sourceEditContext.Provider>\n    );\n};\n\nexport default SourceEditModal;\n","import { routes } from '../../Routes';\nimport { addMessage } from '../../redux/sources/actions';\n\nexport const redirectWhenImported = (dispatch, intl, history, name) => {\n    dispatch(addMessage(\n        intl.formatMessage({\n            id: 'sources.importSourceCannotEdited',\n            defaultMessage: 'Source { name } is imported.'\n        }, { name }),\n        'danger',\n        intl.formatMessage({\n            id: 'sources.importedSourcesCannotEdited',\n            defaultMessage: 'Imported sources cannot be edited.'\n        }),\n    ));\n    history.push(routes.sources.path);\n};\n"],"sourceRoot":""}