{"version":3,"sources":["webpack:///./src/components/AddApplication/removeAppSubmit.js","webpack:///./src/components/Authentication.js","webpack:///./src/components/AddApplication/RemoveAppModal.js","webpack:///./src/components/AddApplication/ApplicationSelect.js","webpack:///./src/utilities/SourcesFormRenderer.js","webpack:///./src/api/doUpdateSource.js","webpack:///./src/api/patchCmValues.js","webpack:///./src/api/doLoadSourceForEdit.js","webpack:///./src/api/getCmValues.js","webpack:///./src/components/SourceEditForm/Header.js","webpack:///./src/components/SourceEditForm/helpers.js","webpack:///./src/components/SourceEditForm/onSubmit.js","webpack:///./src/components/SourceEditForm/parser/AdditionalInfoBar.js","webpack:///./src/components/SourceEditForm/parser/EditAlert.js","webpack:///./src/components/SourceEditForm/parser/genericInfo.js","webpack:///./src/components/SourceEditForm/parser/endpoint.js","webpack:///./src/components/SourceEditForm/parser/AuthenticationId.js","webpack:///./src/components/SourceEditForm/sourceEditContext.js","webpack:///./src/components/SourceEditForm/parser/RemoveAuthPlaceholder.js","webpack:///./src/components/SourceEditForm/parser/GridLayout.js","webpack:///./src/components/SourceEditForm/parser/authentication.js","webpack:///./src/components/SourceEditForm/parser/application.js","webpack:///./src/components/SourceEditForm/parser/titleField.js","webpack:///./src/components/SourceEditForm/parser/parseSourceToSchema.js","webpack:///./src/components/SourceEditForm/reducer.js","webpack:///./src/components/ModalFormTemplate.js","webpack:///./src/components/SourceEditForm/WrapperModal.js","webpack:///./src/components/SourceEditForm/SubmittingModal.js","webpack:///./src/components/SourceEditForm/TimeoutedModal.js","webpack:///./src/components/SourceEditForm/ErroredModal.js","webpack:///./src/components/SourceEditForm/parser/RemoveAuth.js","webpack:///./src/components/SourceEditForm/SourceEditModal.js","webpack:///./src/components/SourceEditForm/importedRedirect.js"],"names":["removeAppSubmit","app","intl","onCancel","dispatch","source","titleSuccess","formatMessage","id","defaultMessage","name","display_name","titleError","removeApplication","Authentication","rest","formOptions","useFormApi","values","getState","match","isEditing","authentication","isModified","get","useState","edited","setEdited","firstClick","useRef","mounted","useEffect","current","pristine","doNotRequirePassword","validate","filter","type","validatorTypes","REQUIRED","componentProps","resolveProps","validated","autoFocus","FormGroup","helperText","label","onFocus","isRequired","TextInput","aria-label","value","RemoveAppModal","container","useIntl","appTypes","useSelector","sources","useSource","useDispatch","hidden","dependentApps","dependent_applications","map","appName","appType","find","sourceAppsNames","includes","undefined","x","Modal","className","isOpen","onClose","variant","header","Title","headingLevel","size","actions","key","onClick","TextContent","Text","component","TextVariants","p","length","apps","propTypes","PropTypes","shape","string","arrayOf","func","instanceOf","Element","RemoveRadio","option","setApplicationToRemove","Button","htmlFor","application_type_id","ApplicationSelect","props","useFieldApi","options","input","onChange","removingApp","applications","isCurrentlyRemoving","isDeleting","appIds","reduce","acc","Radio","isChecked","isDisabled","SourcesFormRenderer","FormTemplate","componentMapper","mapperExtension","componentTypes","SWITCH","validatorMapper","PATTERN","MIN_LENGTH","URL","urlOrHost","formData","url","scheme","host","port","path","u","protocol","replace","hostname","defaultPort","pathname","error","parseUrl","endpoint","doUpdateSource","data","promises","push","getSourcesApi","updateSource","endPointPort","parseInt","endpointData","isNaN","updateEndpoint","endpoints","authentications","Object","keys","forEach","idWithoutPrefix","updateAuthentication","billing_source","credentials","cmDataOut","axiosInstance","patch","COST_MANAGEMENT_API_BASE","Promise","all","doLoadSourceForEdit","showSource","listSourceEndpoints","doLoadApplicationsForEdit","then","a","sourceData","costManagement","basicValues","addToApp","appAuthenticationIds","auth","showAuthentication","appAuths","index","listEndpointAuthentications","Header","Grid","GridItem","xs","node","selectOnlyEditedValues","editing","filteredValues","set","prepareInitialValues","sourceTypeName","auhenticationsFinal","mergeAuths","curr","endpointToUrl","source_type","onSubmit","setState","checkSourceStatus","loadEntities","checkAppAvailability","statusResults","unavailableApp","availability_status","UNAVAILABLE","message","title","description","availability_status_error","some","AdditionalInfoBar","sourceType","hasGutter","md","h4","product_name","join","EditAlert","Alert","isInline","genericInfo","sourceId","Content","condition","when","isNotEmpty","TEXT_FIELD","asyncValidatorDebounced","endpointFields","schema","modifiedFields","fields","field","hardcodedSchemas","getEnhancedEndpointField","subForm","SUB_FORM","validation","isEmpty","AuthenticationId","sourceEditContext","createContext","RemoveAuthPlaceholder","Bullseye","Spinner","small","GridLayout","renderForm","useContext","Flex","removingAuth","array","getLastPartOfName","fieldName","split","pop","getAdditionalFields","stepKey","modifyAuthSchemas","editedName","startsWith","createAuthFieldName","finalField","authenticationFields","schemaAuth","authtype","additionalStepKeys","getAdditionalAuthStepsKeys","additionalStepsFields","getAdditionalAuthSteps","step","flatMap","enhancedFields","getEnhancedAuthField","specialModifierAWS","APP_NAMES","createOneAppFields","appendClusterIdentifier","unusedAuthsWarning","PLAIN_TEXT","applicationsFields","authenticationTypesFormGroups","appsLength","authenticationsInputs","auths","Boolean","unusedAuthentications","TABS","isBox","TitleAndDescription","titleField","hideField","parseSourceToSchema","initialState","loading","initialValues","isSubmitting","initialLoad","submitError","isTimeouted","reducer","state","authId","isAuthRemoving","CustomFormWrapper","Form","CustomButtons","onReset","subscription","submitting","invalid","validating","ActionGroup","form","ModalFormTemplate","ModalProps","footer","showFormControls","FormWrapper","object","FakeFooter","history","useHistory","routes","WrapperModal","children","sourceRedux","SubmittingModal","customText","TimeoutedModal","EmptyState","EmptyStateVariant","full","EmptyStateIcon","icon","WrenchIcon","color","newLine","ErroredModal","onRetry","secondaryActions","target","href","rel","returnButtonTitle","RemoveAuth","doDeleteAuthentication","addMessage","handleError","SourceEditModal","useReducer","isLoaded","useIsLoaded","shallowEqual","sourceTypes","sourceTypesLoaded","appTypesLoaded","imported","redirectWhenImported","source_type_id","isLoading","returnToSources","Provider","formApi","dirtyFields","clearedValue"],"mappings":"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","file":"js/edit.3e81a4ecb5b025c8f406.js","sourcesContent":["import { removeApplication } from '../../redux/sources/actions';\n\nconst removeAppSubmit = (app, intl, onCancel, dispatch, source) => {\n    const titleSuccess = intl.formatMessage({\n        id: 'sources.removeAppWarning',\n        defaultMessage: `{ name } was removed from this source.`\n    },\n    {\n        name: app.display_name\n    });\n    const titleError = intl.formatMessage({\n        id: 'sources.removeAppError',\n        defaultMessage: `Removing of { name } application from this source was unsuccessful.`\n    }, {\n        name: app.display_name\n    });\n    onCancel && onCancel();\n    return dispatch(removeApplication(app.id, source.id, titleSuccess, titleError));\n};\n\nexport default removeAppSubmit;\n","import React, { useState, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\n\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput/TextInput';\n\nimport TextField from '@data-driven-forms/pf4-component-mapper/dist/cjs/text-field';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validated from '@redhat-cloud-services/frontend-components-sources/cjs/validated';\n\nconst Authentication = (rest) => {\n    const formOptions = useFormApi();\n    const values = formOptions.getState().values;\n\n    const [authenticationId] = rest?.name?.match(/\\d+/) || [];\n    const isEditing = authenticationId || values.authentication?.id;\n\n    // If there is any value, the field is modified (password is always empty on start)\n    let isModified = get(values, rest.name);\n\n    const [edited, setEdited] = useState(!isEditing || isModified);\n    const firstClick = useRef(true);\n    const mounted = useRef(false);\n\n    useEffect(() => {\n        if (mounted.current) {\n            // reset on restart\n            if (\n                !firstClick.current && formOptions.getState().pristine\n            ) {\n                setEdited(false);\n                firstClick.current = true;\n            }\n\n            if (edited) {\n                firstClick.current = false;\n            }\n        }\n    });\n\n    useEffect(() => {\n        mounted.current = true;\n    }, []);\n\n    const doNotRequirePassword = rest.validate && rest.validate.filter(({ type }) => type !== validatorTypes.REQUIRED);\n\n    const componentProps = {\n        ...rest,\n        ...(isEditing ? {\n            validate: doNotRequirePassword,\n            resolveProps: validated,\n        } : {})\n    };\n\n    if (!edited) {\n        return (<FormGroup\n            helperText={componentProps.helperText}\n            label={componentProps.label}\n            onFocus={() => setEdited(true)}\n            isRequired\n        >\n            <TextInput aria-label=\"pre-filled-authentication\" value=\"•••••••••••••\" />\n        </FormGroup>);\n    }\n\n    return (\n        <TextField { ...componentProps } autoFocus={true}/>\n    );\n};\n\nexport default Authentication;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { useSource } from '../../hooks/useSource';\n\nimport removeAppSubmit from './removeAppSubmit';\n\nconst RemoveAppModal = ({ app, onCancel, container }) => {\n    const intl = useIntl();\n\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const onSubmit = () => removeAppSubmit(app, intl, onCancel, dispatch, source);\n\n    useEffect(() => {\n        if (container) {\n            container.hidden = true;\n        }\n    }, []);\n\n    const dependentApps = app.dependent_applications.map(appName => {\n        const appType = appTypes.find(({ name }) => name === appName);\n\n        return appType ? app.sourceAppsNames.includes(appType.display_name) ? appType.display_name : undefined : undefined;\n    }).filter(x => x);\n\n    return (\n        <Modal\n            className=\"ins-c-sources__dialog--warning\"\n            isOpen={true}\n            onClose={onCancel}\n            variant=\"small\"\n            aria-label={\n                intl.formatMessage({\n                    id: 'sources.deleteAppTitle',\n                    defaultMessage: 'Remove application?',\n                })\n            }\n            header={\n                <Title headingLevel=\"h1\" size=\"2xl\">\n                    <ExclamationTriangleIcon size=\"sm\" className=\"ins-m-alert ins-c-source__delete-icon pf-u-mr-sm\" />\n                    {intl.formatMessage({\n                        id: 'sources.deleteAppTitle',\n                        defaultMessage: 'Remove application?',\n                    })}\n                </Title>\n            }\n            actions={[\n                <Button\n                    id=\"deleteSubmit\" key=\"submit\" variant=\"danger\" type=\"button\" onClick={ onSubmit }\n                >\n                    { intl.formatMessage({\n                        id: 'sources.remove',\n                        defaultMessage: 'Remove'\n                    }) }\n                </Button>,\n                <Button id=\"deleteCancel\" key=\"cancel\" variant=\"link\" type=\"button\" onClick={ onCancel }>\n                    { intl.formatMessage({\n                        id: 'sources.cancel',\n                        defaultMessage: 'Cancel'\n                    }) }\n                </Button>\n            ]}\n        >\n            <TextContent>\n                <Text component={TextVariants.p}>\n                    { intl.formatMessage({\n                        id: 'sources.deleteAppWarning',\n                        defaultMessage: '{ appName } will be disconnected from this source.'\n                    }, { appName: <b key=\"b\">{app.display_name}</b> }) }\n                </Text>\n                {dependentApps.length > 0 && <Text component={TextVariants.p}>\n                    { intl.formatMessage({\n                        id: 'sources.deleteAppDetails',\n                        defaultMessage: 'This change will affect these applications: { apps }.'\n                    }, { apps: dependentApps }) }\n                </Text>}\n            </TextContent>\n        </Modal>\n    );\n};\n\nRemoveAppModal.propTypes = {\n    app: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        display_name: PropTypes.string.isRequired,\n        dependent_applications: PropTypes.arrayOf(PropTypes.string),\n        sourceAppsNames: PropTypes.arrayOf(PropTypes.string)\n    }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    container: PropTypes.instanceOf(Element)\n};\n\nexport default RemoveAppModal;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport { Radio } from '@patternfly/react-core/dist/js/components/Radio/Radio';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport TrashIcon from '@patternfly/react-icons/dist/js/icons/trash-icon';\n\nimport useFieldApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-field-api';\n\nimport { useSource } from '../../hooks/useSource';\n\nimport RemoveAppModal from './RemoveAppModal';\n\nconst RemoveRadio = ({ option, setApplicationToRemove, sourceAppsNames, app, appType }) => {\n    const intl = useIntl();\n\n    const onClick = () => setApplicationToRemove({\n        id: app?.id,\n        display_name: appType?.display_name,\n        dependent_applications: appType?.dependent_applications,\n        sourceAppsNames\n    });\n\n    return (<div className=\"pf-c-radio pf-u-mb-md\">\n        <Button\n            id={`remove-app-${option.value}`}\n            variant=\"plain\"\n            aria-label={intl.formatMessage({\n                id: 'source.removeAppAria',\n                defaultMessage: 'Remove application {app} from this source'\n            }, { app: option.label })}\n            className=\"pf-u-p-0\"\n            onClick={onClick}\n        >\n            <TrashIcon variant=\"small\" />\n        </Button>\n        <label className=\"pf-c-radio__label\" htmlFor={`remove-app-${option.value}`}>\n            {option.label}\n        </label>\n    </div>);\n};\n\nRemoveRadio.propTypes = {\n    option: PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        value: PropTypes.string.isRequired\n    }),\n    setApplicationToRemove: PropTypes.func.isRequired,\n    sourceAppsNames: PropTypes.arrayOf(PropTypes.string),\n    appType: PropTypes.shape({\n        display_name: PropTypes.string.isRequired,\n        dependent_applications: PropTypes.arrayOf(PropTypes.string)\n    }),\n    app: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        application_type_id: PropTypes.string.isRequired\n    })\n};\n\nconst ApplicationSelect = (props) => {\n    const { options, input: { onChange, value, name }, container } = useFieldApi(props);\n\n    const [removingApp, setApplicationToRemove] = useState({});\n\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const sourceAppsNames = source.applications\n    .map(({ application_type_id }) => {\n        const appType = appTypes.find(({ id }) => id === application_type_id);\n        return appType ? appType.display_name : undefined;\n    });\n\n    const appType = (value) => appTypes?.find(appType =>\n        appType.id === value\n    );\n    const app = (value) => source.applications.find(app => app.application_type_id === value);\n\n    const isCurrentlyRemoving = (value) => app(value)?.isDeleting;\n\n    const appIds = source.applications.filter(({ isDeleting }) => !isDeleting)\n    .reduce((acc, app) => [...acc, app.application_type_id], []);\n\n    return (\n        <div>\n            {removingApp.id && <RemoveAppModal\n                app={removingApp}\n                onCancel={() => {\n                    if (container) {\n                        container.hidden = false;\n                    }\n\n                    return setApplicationToRemove({});\n                }}\n                container={container}\n            />}\n            {options.map((option) => (!appIds.includes(option.value) ? (<Radio\n                className=\"pf-u-mb-md\"\n                key={option.value}\n                onChange={() => onChange(option.value)}\n                label={option.label}\n                id={`${name}-${option.value}`}\n                name={name}\n                isChecked={value === option.value }\n                isDisabled={isCurrentlyRemoving(option.value)}\n            />) : (<RemoveRadio\n                key={option.value}\n                option={option}\n                setApplicationToRemove={setApplicationToRemove}\n                sourceAppsNames={sourceAppsNames}\n                app={app(option.value)}\n                appType={appType(option.value)}\n            />)))}\n        </div>\n    );\n};\n\nexport default ApplicationSelect;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer/dist/cjs/form-renderer';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validatorMapper from '@data-driven-forms/react-form-renderer/dist/cjs/validator-mapper';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/cjs/component-mapper';\n\nimport { mapperExtension } from '@redhat-cloud-services/frontend-components-sources/cjs/sourceFormRenderer';\n\nimport Authentication from '../components/Authentication';\n\nimport ApplicationSelect from '../components/AddApplication/ApplicationSelect';\n\nconst SourcesFormRenderer = props => (\n    <FormRenderer\n        FormTemplate={FormTemplate}\n        componentMapper={{\n            ...componentMapper,\n            ...mapperExtension,\n            authentication: Authentication,\n            'switch-field': componentMapper[componentTypes.SWITCH],\n            'application-select': ApplicationSelect\n        }}\n        validatorMapper={{\n            'required-validator': validatorMapper[validatorTypes.REQUIRED],\n            'pattern-validator': validatorMapper[validatorTypes.PATTERN],\n            'min-length-validator': validatorMapper[validatorTypes.MIN_LENGTH],\n            'url-validator': validatorMapper[validatorTypes.URL]\n        }}\n        {...props}\n    />\n);\n\nexport default SourcesFormRenderer;\n","import { defaultPort } from '../components/SourcesTable/formatters';\nimport { getSourcesApi } from './entities';\nimport { patchCmValues } from './patchCmValues';\n\nexport const parseUrl = url => {\n    if (url === null) {\n        return {\n            scheme: null,\n            host: null,\n            port: null,\n            path: null\n        };\n    }\n\n    if (!url) {\n        return ({});\n    }\n\n    try {\n        const u = new URL(url);\n        const scheme =  u.protocol.replace(/:$/, '');\n\n        return {\n            scheme,\n            host: u.hostname,\n            port: u.port === '' ? defaultPort(scheme) : u.port,\n            path: u.pathname\n        };\n    } catch (error) {\n        return ({});\n    }\n};\n\nexport const urlOrHost = formData =>\n    formData.url || formData.url === null ? parseUrl(formData.url) : formData.endpoint ? formData.endpoint : formData;\n\nexport const doUpdateSource = (source, formData) => {\n    const promises = [];\n\n    if (formData.source) {\n        promises.push(getSourcesApi().updateSource(source.source.id, formData.source));\n    }\n\n    if (formData.endpoint || formData.url || formData.url === null) {\n        const { scheme, host, port, path } = urlOrHost(formData);\n        const endPointPort = port === null ? null : parseInt(port, 10);\n\n        const endpointData = {\n            scheme,\n            host,\n            path,\n            port: endPointPort === null ? null : isNaN(endPointPort) ? undefined : endPointPort,\n            ...formData.endpoint\n        };\n\n        promises.push(getSourcesApi().updateEndpoint(source.endpoints[0].id, endpointData));\n    }\n\n    if (formData.authentications) {\n        Object.keys(formData.authentications).forEach((key) => {\n            const idWithoutPrefix = key.replace('a', '');\n\n            promises.push(getSourcesApi().updateAuthentication(idWithoutPrefix, formData.authentications[key]));\n        });\n    }\n\n    if (formData.billing_source || formData.credentials) {\n        let cmDataOut = {};\n\n        if (formData.credentials) {\n            cmDataOut = {\n                authentication: {\n                    credentials: formData.credentials\n                }\n            };\n        }\n\n        if (formData.billing_source) {\n            cmDataOut = {\n                ...cmDataOut,\n                billing_source: formData.billing_source\n            };\n        }\n\n        promises.push(patchCmValues(source.source.id, cmDataOut));\n    }\n\n    return Promise.all(promises);\n};\n","import { axiosInstance } from './entities';\nimport { COST_MANAGEMENT_API_BASE } from './constants';\n\nexport const patchCmValues = (id, data) => axiosInstance.patch(`${COST_MANAGEMENT_API_BASE}/sources/${id}/`, data);\n","import { getSourcesApi, doLoadApplicationsForEdit } from './entities';\nimport { getCmValues } from './getCmValues';\n\nexport const doLoadSourceForEdit = (source) => Promise.all([\n    getSourcesApi().showSource(source.id),\n    getSourcesApi().listSourceEndpoints(source.id),\n    doLoadApplicationsForEdit(source.id),\n    getCmValues(source.id).catch(() => undefined),\n]).then(async ([sourceData, endpoints, applications, costManagement]) => {\n    const endpoint = endpoints && endpoints.data && endpoints.data[0];\n\n    const apps = applications?.sources[0]?.applications || [];\n\n    let basicValues = {\n        source: {\n            ...source,\n            ...sourceData\n        },\n        applications: apps\n    };\n\n    if (costManagement) {\n        basicValues = {\n            ...basicValues,\n            billing_source: costManagement.billing_source,\n            credentials: costManagement.authentication.credentials\n        };\n    }\n\n    const promises = [];\n    let appAuths;\n    const addToApp = [];\n    const appAuthenticationIds = [];\n\n    apps.forEach((app) => {\n        app?.authentications?.forEach((auth) => {\n            if (auth?.id) {\n                promises.push(getSourcesApi().showAuthentication(auth.id));\n                addToApp.push(app.id);\n                appAuthenticationIds.push(auth.id);\n            }\n        });\n    });\n\n    if (promises.length > 0) {\n        appAuths = await Promise.all(promises);\n\n        addToApp.forEach((id, index) => {\n            basicValues.applications.find(app => app.id === id).authentications.push(appAuths[index]);\n        });\n    }\n\n    if (!endpoint) {\n        return basicValues;\n    }\n\n    return getSourcesApi().listEndpointAuthentications(endpoint.id).then(authentications => ({\n        ...basicValues,\n        endpoints: endpoints.data,\n        authentications: authentications.data.filter(({ id }) => !appAuthenticationIds.includes(id)),\n    }));\n});\n","import { axiosInstance } from './entities';\nimport { COST_MANAGEMENT_API_BASE } from './constants';\n\nexport const getCmValues = (id) => axiosInstance.get(`${COST_MANAGEMENT_API_BASE}/sources/${id}/`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst Header = ({ name }) =>{\n    const intl = useIntl();\n\n    return (\n        <Grid>\n            <GridItem xs={12}>\n                <Title headingLevel=\"h1\" size=\"3xl\">\n                    { intl.formatMessage({\n                        id: 'sources.editSource',\n                        defaultMessage: 'Edit source'\n                    }) }\n                </Title>\n            </GridItem>\n            {name && <GridItem xs={12}>\n                { intl.formatMessage({\n                    id: 'sources.editSourceDescription',\n                    defaultMessage: 'Use the form fields below to make desired changes to source {name}.'\n                }, { name: <b key=\"b\">{name}</b> }) }\n            </GridItem>}\n        </Grid>\n    );\n};\n\nHeader.propTypes = {\n    name: PropTypes.node\n};\n\nexport default Header;\n","import get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { endpointToUrl } from '../SourcesTable/formatters';\n\nexport const selectOnlyEditedValues = (values, editing) => {\n    const filteredValues = {};\n\n    Object.keys(editing)\n    .filter((key) => editing[key])\n    .forEach((key) => {\n        set(filteredValues, key, get(values, key));\n    });\n\n    return filteredValues;\n};\n\nexport const prepareInitialValues = ({ endpoints, authentications, applications, ...rest }, sourceTypeName) => {\n    const auhenticationsFinal = {};\n\n    const mergeAuths = [\n        ...(authentications || []),\n        ...(applications?.reduce((acc, curr) => [...acc, ...curr.authentications], []) || [])\n    ];\n\n    if (mergeAuths.length > 0) {\n        mergeAuths.forEach((auth) => {\n            auhenticationsFinal[`a${auth.id}`] = auth;\n        });\n    }\n\n    let endpoint;\n    let url;\n\n    if (endpoints && endpoints.length > 0) {\n        endpoint = endpoints[0];\n    }\n\n    if (endpoint) {\n        url = (endpoint.scheme || endpoint.host || endpoint.path || endpoint.port) ? endpointToUrl(endpoint) : undefined;\n    }\n\n    return ({\n        source_type: sourceTypeName,\n        endpoint,\n        authentications: auhenticationsFinal,\n        url,\n        ...rest\n    });\n};\n","import { checkAppAvailability } from '@redhat-cloud-services/frontend-components-sources/cjs/getApplicationStatus';\n\nimport { selectOnlyEditedValues } from './helpers';\nimport { loadEntities } from '../../redux/sources/actions';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\nimport { doLoadSourceForEdit } from '../../api/doLoadSourceForEdit';\nimport { doUpdateSource } from '../../api/doUpdateSource';\n\nimport { UNAVAILABLE } from '../SourcesTable/formatters';\n\nexport const onSubmit = async (values, editing, dispatch, source, intl, setState) => {\n    setState({ type: 'submit', values, editing });\n\n    try {\n        await doUpdateSource(source, selectOnlyEditedValues(values, editing));\n    } catch {\n        setState({ type: 'submitFailed' });\n\n        return;\n    }\n\n    checkSourceStatus(source.source.id);\n    dispatch(loadEntities());\n\n    let message;\n\n    const sourceData = await doLoadSourceForEdit({ id: source.source.id });\n\n    const promises = source.applications?.map(({ id }) => checkAppAvailability(id)) || [];\n\n    let statusResults;\n    if (promises.length > 0) {\n        try {\n            statusResults = await Promise.all(promises);\n        } catch (error) {\n            setState({ type: 'submitFailed' });\n\n            return;\n        }\n\n        const unavailableApp = statusResults.find(({ availability_status }) => availability_status === UNAVAILABLE);\n\n        if (unavailableApp) {\n            message = {\n                title: intl.formatMessage({\n                    id: 'wizard.failEditToastTitle',\n                    defaultMessage: 'Edit source failed'\n                }),\n                description: unavailableApp.availability_status_error,\n                variant: 'danger'\n            };\n\n            setState({ type: 'submitFinished', source: sourceData, message });\n\n            return;\n        }\n\n        const anyTimetouted = statusResults.some(({ availability_status }) => !availability_status);\n\n        if (anyTimetouted) {\n            setState({ type: 'submitTimetouted' });\n\n            return;\n        }\n    }\n\n    message = {\n        title: intl.formatMessage({\n            id: 'wizard.successEditToastTitle',\n            defaultMessage: 'Source ‘{name}’ was edited successfully.'\n        }, { name: source.source.name }),\n        variant: 'success'\n    };\n\n    setState({ type: 'submitFinished', source: sourceData, message });\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/index';\n\nconst AdditionalInfoBar = ({ sourceType, applications }) => {\n    const intl = useIntl();\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n\n    const sourceAppsNames = applications?.map(({ application_type_id }) =>\n        appTypes?.find(({ id }) => id === application_type_id)?.display_name\n    );\n\n    return (\n        <TextContent>\n            <Grid hasGutter>\n                <GridItem md={2}>\n                    <Text component={TextVariants.h4}>\n                        { intl.formatMessage({\n                            id: 'sources.sourceType',\n                            defaultMessage: 'Source type'\n                        }) }\n                    </Text>\n                    <Text component={TextVariants.p} id=\"source-edit-type\">\n                        { sourceType.product_name }\n                    </Text>\n                </GridItem>\n                <GridItem md={8}>\n                    <Text component={TextVariants.h4}>\n                        { intl.formatMessage({\n                            id: 'sources.apps',\n                            defaultMessage: 'Applications'\n                        }) }\n                    </Text>\n                    <Text component={TextVariants.p} id=\"source-edit-apps\">\n                        {sourceAppsNames.length > 0 ? sourceAppsNames.join(', ')\n                            : (\n                                intl.formatMessage({\n                                    id: 'sources.none',\n                                    defaultMessage: 'None'\n                                })\n                            )\n                        }\n                    </Text>\n                </GridItem>\n            </Grid>\n        </TextContent>\n    );\n};\n\nAdditionalInfoBar.propTypes = {\n    sourceType: PropTypes.shape({\n        product_name: PropTypes.string.isRequired\n    }),\n    applications: PropTypes.arrayOf(PropTypes.shape({\n        application_type_id: PropTypes.string.isRequired\n    }))\n};\n\nexport default AdditionalInfoBar;\n","import React from 'react';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nimport { Alert } from '@patternfly/react-core/dist/js/components/Alert/Alert';\n\nconst EditAlert = () => {\n    const formOptions = useFormApi();\n\n    const { message } = formOptions.getState().values;\n\n    return (\n        <Alert variant={message?.variant} isInline title={message?.title}>\n            {message?.description}\n        </Alert>\n    );\n};\n\nexport default EditAlert;\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport { asyncValidatorDebounced } from '@redhat-cloud-services/frontend-components-sources/cjs/SourceAddSchema';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport validated from '@redhat-cloud-services/frontend-components-sources/cjs/validated';\n\nimport AdditionalInfoBar from './AdditionalInfoBar';\nimport EditAlert from './EditAlert';\n\nexport const genericInfo = (sourceId, intl, sourceType, applications) => ([\n    {\n        name: 'alert',\n        component: 'description',\n        Content: EditAlert,\n        condition: {\n            when: 'message',\n            isNotEmpty: true\n        }\n    },\n    {\n        name: 'source.name',\n        label: intl.formatMessage({\n            id: 'sources.sourceName',\n            defaultMessage: 'Source name'\n        }),\n        component: componentTypes.TEXT_FIELD,\n        validate: [\n            (value) => asyncValidatorDebounced(value, sourceId, intl),\n            { type: validatorTypes.REQUIRED }\n        ],\n        isRequired: true,\n        resolveProps: validated\n    }, {\n        name: 'additional_info',\n        Content: AdditionalInfoBar,\n        component: 'description',\n        sourceType,\n        applications\n    }\n]);\n","import get from 'lodash/get';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport hardcodedSchemas from '@redhat-cloud-services/frontend-components-sources/cjs/hardcodedSchemas';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\n\nexport const getEnhancedEndpointField = (sourceType, name) =>\n    get(hardcodedSchemas, [sourceType, 'endpoint', name], {});\n\nexport const endpointFields = (sourceType) => {\n    if (!sourceType.schema || !sourceType.schema.endpoint || sourceType.schema.endpoint.hidden) {\n        return undefined;\n    }\n\n    const schemaAuth = sourceType.schema.endpoint;\n\n    const enhancedFields = schemaAuth.fields.map((field) => ({\n        ...field,\n        ...getEnhancedEndpointField(sourceType.name, field.name)\n    }));\n\n    const modifiedFields = enhancedFields;\n\n    const subForm = {\n        component: componentTypes.SUB_FORM,\n        name: 'endpoint',\n    };\n\n    if (sourceType.name === 'ansible-tower') {\n        const url = modifiedFields.find(({ name }) => name === 'url');\n\n        return ({\n            ...subForm,\n            fields: [{\n                component: componentTypes.SUB_FORM,\n                name: 'receptor_node_group',\n                condition: {\n                    when: 'endpoint.receptor_node',\n                    isNotEmpty: true\n                },\n                fields: [{\n                    ...url,\n                    isRequired: false,\n                    validate: url?.validate?.filter(validation => validation.type !== validatorTypes.REQUIRED)\n                }]\n            }, {\n                component: componentTypes.SUB_FORM,\n                name: 'hostname_group',\n                condition: {\n                    when: 'endpoint.receptor_node',\n                    isEmpty: true\n                },\n                fields: modifiedFields\n            }]\n        });\n    }\n\n    return ({\n        ...subForm,\n        fields: modifiedFields\n    });\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nconst AuthenticationId = ({ id }) => {\n    const intl = useIntl();\n\n    return (<FormGroup\n        label={intl.formatMessage({ id: 'sources.authId', defaultMessage: 'Authentication ID' })}\n    >\n        <TextContent>\n            <Text variant=\"p\">\n                {id}\n            </Text>\n        </TextContent>\n    </FormGroup>);\n};\n\nAuthenticationId.propTypes = {\n    id: PropTypes.string.isRequired\n};\n\nexport default AuthenticationId;\n","import { createContext } from 'react';\n\nconst sourceEditContext = createContext();\n\nexport default sourceEditContext;\n","import React from 'react';\n\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/js/layouts/Grid';\n\nimport { useIntl } from 'react-intl';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nconst RemoveAuthPlaceholder = () => {\n    const intl = useIntl();\n\n    return (\n        <Grid>\n            <GridItem xs={12}>\n                <Bullseye>\n                    <Spinner size=\"lg\"/>\n                </Bullseye>\n            </GridItem>\n            <GridItem xs={12}>\n                <Bullseye>\n                    <TextContent>\n                        <Text component={TextVariants.small} className=\"pf-u-mt-md\">\n                            { intl.formatMessage({\n                                id: 'sources.removingAuthMessage',\n                                defaultMessage: 'This authentication is being removed...'\n                            }) }\n                        </Text>\n                    </TextContent>\n                </Bullseye>\n            </GridItem>\n        </Grid>\n    );\n};\n\nexport default RemoveAuthPlaceholder;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/js/layouts/Flex';\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport TrashIcon from '@patternfly/react-icons/dist/js/icons/trash-icon';\n\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nimport AuthenticationId from './AuthenticationId';\nimport sourceEditContext from '../sourceEditContext';\nimport RemoveAuthPlaceholder from './RemoveAuthPlaceholder';\n\nconst GridLayout = ({ id, fields }) => {\n    const intl = useIntl();\n    const { renderForm } = useFormApi();\n    const { setState, source } = useContext(sourceEditContext);\n\n    const setAuthRemoving = () => setState({\n        type: 'setAuthRemoving',\n        removingAuth: id,\n    });\n\n    const isDeleting = source?.authentications?.find(auth => auth.id === id)?.isDeleting;\n\n    if (isDeleting) {\n        return <RemoveAuthPlaceholder />;\n    }\n\n    return (<Grid>\n        <GridItem md={2}>\n            <Flex>\n                <FlexItem className=\"pf-u-mr-0\">\n                    <Button\n                        variant=\"plain\"\n                        aria-label={intl.formatMessage({\n                            id: 'sources.removeAuthAriaLabel',\n                            defaultMessage: 'Remove authentication with id {id}'\n                        }, { id })}\n                        onClick={setAuthRemoving}>\n                        <TrashIcon />\n                    </Button>\n                </FlexItem>\n                <Flex>\n                    <AuthenticationId id={id} />\n                </Flex>\n            </Flex>\n        </GridItem>\n        <GridItem md={10}>\n            { renderForm(fields) }\n        </GridItem>\n    </Grid>);\n};\n\nGridLayout.propTypes = {\n    id: PropTypes.string.isRequired,\n    fields: PropTypes.array.isRequired\n};\n\nexport default GridLayout;\n","import get from 'lodash/get';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport hardcodedSchemas from '@redhat-cloud-services/frontend-components-sources/cjs/hardcodedSchemas';\nimport GridLayout from './GridLayout';\n\nexport const createAuthFieldName = (fieldName, id) => `authentications.a${id}.${fieldName.replace('authentication.', '')}`;\n\nexport const getLastPartOfName = (fieldName) => fieldName.split('.').pop();\n\nexport const removeRequiredValidator = (validate = []) =>\n    validate.filter(validation => validation.type !== validatorTypes.REQUIRED && validation.type !== 'required-validator');\n\nexport const getEnhancedAuthField = (sourceType, authtype, name, appName = 'generic') =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, appName, name], {});\n\nexport const getAdditionalAuthSteps = (sourceType, authtype, appName = 'generic') =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, appName, 'additionalSteps'], []);\n\nexport const getAdditionalAuthStepsKeys = (sourceType, authtype, appName = 'generic') =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, appName, 'includeStepKeyFields'], []);\n\nexport const getAdditionalFields = (auth, stepKey) => auth?.fields?.filter(field => field.stepKey === stepKey) || [];\n\nexport const modifyAuthSchemas = (fields, id) => fields.map((field) => {\n    const editedName = field.name.startsWith('authentication') ? createAuthFieldName(field.name, id) : field.name;\n\n    const finalField = ({\n        ...field,\n        name: editedName,\n    });\n\n    const isPassword = getLastPartOfName(finalField.name) === 'password';\n\n    if (isPassword) {\n        finalField.component = 'authentication';\n    }\n\n    return finalField;\n});\n\nconst specialModifierAWS = (field, authtype) => {\n    if (getLastPartOfName(field.name) !== 'password') {\n        return field;\n    }\n\n    if (authtype === 'arn') {\n        return ({\n            ...field,\n            label: 'Cost Management ARN'\n        });\n    }\n\n    if (authtype === 'cloud-meter-arn') {\n        return ({\n            ...field,\n            label: 'Subscription Watch ARN'\n        });\n    }\n\n    return field;\n};\n\nexport const authenticationFields = (authentications, sourceType, appName) => {\n    if (!authentications || authentications.length === 0 || !sourceType.schema || !sourceType.schema.authentication) {\n        return [];\n    }\n\n    return authentications.map((auth) => {\n        const schemaAuth = sourceType?.schema?.authentication?.find(({ type }) => type === auth.authtype);\n\n        if (!schemaAuth) {\n            return [];\n        }\n\n        const additionalStepKeys = getAdditionalAuthStepsKeys(sourceType.name, auth.authtype, appName);\n        const additionalStepsFields = getAdditionalAuthSteps(sourceType.name, auth.authtype, appName)\n        ?.map(step => ({ ...step, fields: [...step.fields, ...getAdditionalFields(schemaAuth, step.name)] }))\n        .map(({ fields }) => fields.map(({ name }) => name)).flatMap(x => x);\n\n        let enhancedFields = schemaAuth.fields\n        .filter(field => additionalStepsFields.includes(field.name)\n        || !field.stepKey\n        || (field.stepKey && additionalStepKeys.includes(field.stepKey))\n        )\n        .map((field) => ({\n            ...field,\n            ...getEnhancedAuthField(sourceType.name, auth.authtype, field.name, appName)\n        }));\n\n        if (!appName && sourceType.name === 'amazon') {\n            enhancedFields = enhancedFields.map(field => specialModifierAWS(field, auth.authtype));\n        }\n\n        if (!appName) {\n            return ([\n                {\n                    name: `authentication-${auth.id}`,\n                    component: 'description',\n                    id: auth.id,\n                    Content: GridLayout,\n                    fields: modifyAuthSchemas(enhancedFields, auth.id)\n                },\n            ]);\n        }\n\n        return modifyAuthSchemas(enhancedFields, auth.id);\n    });\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport { FormattedMessage } from 'react-intl';\nimport { authenticationFields } from './authentication';\n\nexport const APP_NAMES = {\n    COST_MANAGAMENT: '/insights/platform/cost-management'\n};\n\nexport const appendClusterIdentifier = (sourceType) =>\n    sourceType.name === 'openshift' ? [{\n        name: 'source.source_ref',\n        label: <FormattedMessage\n            id=\"sources.clusterIdentifier\"\n            defaultMessage=\"Cluster identifier\"\n        />,\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n        component: componentTypes.TEXT_FIELD,\n    }] : [];\n\nconst createOneAppFields = (appType, sourceType, app) => ([\n    ...authenticationFields(\n        app.authentications?.filter(auth => Object.keys(auth).length > 1),\n        sourceType,\n        appType?.name\n    ),\n    ...(appType?.name === APP_NAMES.COST_MANAGAMENT ? appendClusterIdentifier(sourceType) : [])\n]);\n\nconst unusedAuthsWarning = (length) => ({\n    component: componentTypes.PLAIN_TEXT,\n    name: 'unused-auth-warning',\n    label: <FormattedMessage\n        id='sources.authNotUsed'\n        // eslint-disable-next-line max-len\n        defaultMessage='The following {length, plural, one {authentication is not} other {authentications are not}} used by any application.'\n        values={{ length }}\n    />\n});\n\nconst unusedAuthentications = (authentications, sourceType, appsLength) => {\n    if (!authentications || authentications.length === 0) {\n        return [];\n    }\n\n    let authenticationsInputs = sourceType?.schema?.authentication?.reduce((acc, { type }) => {\n        const auths = authentications.filter(({ authtype }) => type === authtype);\n\n        if (auths?.length > 0) {\n            return ([\n                ...acc,\n                ...authenticationFields(auths, sourceType)\n            ]);\n        }\n\n        return acc;\n    }, [])?.filter(Boolean);\n\n    const transformToTabs = appsLength !== 0;\n\n    if (transformToTabs) {\n        authenticationsInputs = [{\n            fields: [\n                unusedAuthsWarning(authenticationsInputs.length),\n                ...authenticationsInputs\n            ],\n            title: sourceType.product_name,\n            name: 'unused-auths-tab'\n        }];\n    } else {\n        authenticationsInputs = [{\n            fields: [\n                unusedAuthsWarning(authenticationsInputs.length),\n                ...authenticationsInputs\n            ],\n            component: componentTypes.SUB_FORM,\n            name: 'unused-auths-group'\n        }];\n    }\n\n    return authenticationsInputs;\n};\n\nexport const applicationsFields = (\n    applications,\n    sourceType,\n    appTypes,\n    authentications\n) => {\n    const authenticationTypesFormGroups = unusedAuthentications(authentications, sourceType, applications?.length);\n\n    if (!applications || applications.length === 0) {\n        return authenticationTypesFormGroups;\n    } else if (applications.length === 1 && authenticationTypesFormGroups.length === 0) {\n        const appType = appTypes.find(({ id }) => id === applications[0].application_type_id);\n\n        return createOneAppFields(appType, sourceType, applications[0]);\n    } else {\n        return ([{\n            component: componentTypes.TABS,\n            name: 'app-tabs',\n            isBox: true,\n            fields: [\n                ...applications.map((app) => {\n                    const appType = appTypes.find(({ id }) => id === app.application_type_id);\n\n                    return ({\n                        name: appType?.id,\n                        title: appType?.display_name,\n                        fields: createOneAppFields(appType, sourceType, app)\n                    });\n                }),\n                ...authenticationTypesFormGroups\n            ]\n        }]);\n    }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nexport const TitleAndDescription = ({ title, description }) => (<TextContent>\n    <Title headingLevel=\"h2\" className=\"pf-u-mb-0\">{title}</Title>\n    {description && <Text variant=\"p\">{description}</Text>}\n</TextContent>);\n\nTitleAndDescription.propTypes = {\n    title: PropTypes.node.isRequired,\n    description: PropTypes.node\n};\n\nconst titleField = (applications, sourceType, appTypes, intl, authentications) => {\n    let title;\n    let description;\n\n    if (applications.length === 0) {\n        title = intl.formatMessage({\n            id: 'source.editTitleNoApp',\n            defaultMessage: '{type} credentials'\n        }, { type: sourceType?.product_name });\n    } else if (applications.length === 1) {\n        const app = appTypes.find(({ id }) => id === applications[0].application_type_id);\n        title = intl.formatMessage({\n            id: 'source.editTitleOneApp',\n            defaultMessage: '{type} & {app} credentials'\n        }, { type: sourceType?.product_name, app: app?.display_name  });\n    } else {\n        title = intl.formatMessage({\n            id: 'source.editTitleMoreApps',\n            defaultMessage: '{type} & application credentials'\n        }, { type: sourceType?.product_name });\n        description = intl.formatMessage({\n            id: 'source.editDescriptionMoreApps',\n            defaultMessage: 'Use the tabs below to view and edit credentials for connected applications.'\n        });\n    }\n\n    return ({\n        component: 'description',\n        name: 'edit-title',\n        Content: TitleAndDescription,\n        title,\n        description,\n        hideField: applications?.length === 0 && authentications?.length === 0\n    });\n};\n\nexport default titleField;\n","import { genericInfo } from './genericInfo';\nimport { endpointFields } from './endpoint';\nimport { applicationsFields } from './application';\nimport titleField from './titleField';\n\nexport const parseSourceToSchema = (source, sourceType, appTypes, intl) => ({\n    fields: [\n        ...genericInfo(source.source.id, intl, sourceType, source.applications),\n        titleField(source.applications, sourceType, appTypes, intl, source.authentications),\n        ...applicationsFields(source.applications, sourceType, appTypes, source.authentications),\n        source.endpoints && source.endpoints.length > 0 ? endpointFields(sourceType) : false\n    ].filter(Boolean)\n});\n","import { parseSourceToSchema } from './parser/parseSourceToSchema';\nimport { prepareInitialValues } from './helpers';\n\nexport const initialState = {\n    loading: true,\n    source: undefined,\n    initialValues: {},\n    sourceType: undefined,\n    schema: undefined,\n    isSubmitting: false,\n    initialLoad: true,\n    submitError: false,\n    isTimeouted: false\n};\n\nconst reducer = (state, { type, source, sourceType, appTypes, intl, message, values, editing, removingAuth, authId }) => {\n    switch (type) {\n        case 'createForm':\n            return {\n                ...state,\n                sourceType,\n                initialValues: prepareInitialValues(state.source, sourceType.product_name),\n                schema: parseSourceToSchema(state.source, sourceType, appTypes, intl),\n                loading: false\n            };\n        case 'setSource':\n            return {\n                ...state,\n                source,\n                initialLoad: false\n            };\n        case 'submit':\n            return {\n                ...state,\n                isSubmitting: true,\n                submitError: false,\n                values,\n                editing\n            };\n        case 'submitFinished':\n            return {\n                ...state,\n                isSubmitting: false,\n                source,\n                message\n            };\n        case 'submitFailed':\n            return {\n                ...state,\n                isSubmitting: false,\n                submitError: true\n            };\n        case 'submitTimetouted':\n            return {\n                ...state,\n                isSubmitting: false,\n                isTimeouted: true\n            };\n        case 'removeAuthPending':\n            return {\n                ...state,\n                isAuthRemoving: null,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.map((auth) => auth.id === authId ? {\n                        ...auth, isDeleting: true\n                    } : auth)\n                }\n            };\n        case 'removeAuthRejected':\n            return {\n                ...state,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.map((auth) => auth.id === authId ? {\n                        ...auth, isDeleting: false\n                    } : auth)\n                }\n            };\n        case 'removeAuthFulfill':\n            return {\n                ...state,\n                source: {\n                    ...state.source,\n                    authentications: state.source.authentications.filter((auth) => auth.id !== authId)\n                }\n            };\n        case 'setAuthRemoving':\n            return {\n                ...state,\n                isAuthRemoving: removingAuth\n            };\n        case 'closeAuthRemoving':\n            return {\n                ...state,\n                isAuthRemoving: null\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport FormSpy from '@data-driven-forms/react-form-renderer/dist/cjs/form-spy';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport useFormApi from '@data-driven-forms/react-form-renderer/dist/cjs/use-form-api';\n\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\nimport { ActionGroup } from '@patternfly/react-core/dist/js/components/Form/ActionGroup';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\nimport { Form } from '@patternfly/react-core/dist/js/components/Form/Form';\n\nconst CustomFormWrapper = (props) => <Form {...props} id=\"modal-form\" />;\n\nconst CustomButtons = () => {\n    const intl = useIntl();\n    const { onReset, onCancel } = useFormApi();\n\n    return (<FormSpy subscription={{ submitting: true, pristine: true, invalid: true, validating: true }}>\n        {({ pristine, invalid, validating, submitting }) => (\n            <div className=\"pf-c-form\">\n                <ActionGroup className=\"pf-u-mt-0\">\n                    <Button\n                        variant=\"primary\"\n                        form=\"modal-form\"\n                        type=\"submit\"\n                        isDisabled={pristine || validating || submitting || invalid}\n                    >\n                        {intl.formatMessage({\n                            id: 'sources.save',\n                            defaultMessage: 'Save'\n                        })}\n                    </Button>\n                    <Button variant=\"secondary\" isDisabled={pristine} onClick={onReset} id=\"reset-modal\">\n                        {intl.formatMessage({\n                            id: 'sources.reset',\n                            defaultMessage: 'Reset'\n                        })}\n                    </Button>\n                    <Button variant=\"link\" onClick={onCancel} id=\"cancel-modal\">\n                        {intl.formatMessage({\n                            id: 'sources.cancel',\n                            defaultMessage: 'Cancel'\n                        })}\n                    </Button>\n                </ActionGroup>\n            </div>\n        )}\n    </FormSpy>);\n};\n\nconst ModalFormTemplate = ({ ModalProps, ...props }) => (\n    <Modal\n        {...ModalProps}\n        footer={<CustomButtons/>}\n    >\n        <FormTemplate {...props} showFormControls={false} FormWrapper={CustomFormWrapper}/>\n    </Modal>\n);\n\nModalFormTemplate.propTypes = {\n    ModalProps: PropTypes.object\n};\n\nexport default ModalFormTemplate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { useSource } from '../../hooks/useSource';\n\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\nimport { ActionGroup } from '@patternfly/react-core/dist/js/components/Form/ActionGroup';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button';\n\nimport { routes } from '../../Routes';\nimport Header from './Header';\n\nexport const FakeFooter = () => {\n    const intl = useIntl();\n    const history = useHistory();\n\n    return (<div className=\"pf-c-form\">\n        <ActionGroup className=\"pf-u-mt-0\">\n            <Button variant=\"primary\" isDisabled>\n                {intl.formatMessage({\n                    id: 'sources.save',\n                    defaultMessage: 'Save'\n                })}\n            </Button>\n            <Button variant=\"secondary\" isDisabled>\n                {intl.formatMessage({\n                    id: 'sources.reset',\n                    defaultMessage: 'Reset'\n                })}\n            </Button>\n            <Button variant=\"link\" onClick={() => history.push(routes.sources.path)}>\n                {intl.formatMessage({\n                    id: 'sources.cancel',\n                    defaultMessage: 'Cancel'\n                })}\n            </Button>\n        </ActionGroup>\n    </div>);\n};\n\nconst WrapperModal = ({ children }) => {\n    const history = useHistory();\n    const sourceRedux = useSource();\n    const intl = useIntl();\n\n    return (\n        <Modal\n            aria-label={intl.formatMessage({\n                id: 'sources.editSource',\n                defaultMessage: 'Edit source.'\n            })}\n            header={<Header name={sourceRedux.name} />}\n            variant=\"large\"\n            isOpen={true}\n            onClose={() => history.push(routes.sources.path)}\n            footer={<FakeFooter />}\n        >\n            {children}\n        </Modal>\n    );\n};\n\nWrapperModal.propTypes = {\n    children: PropTypes.node.isRequired\n};\n\nexport default WrapperModal;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport LoadingStep from '@redhat-cloud-services/frontend-components-sources/cjs/LoadingStep';\n\nimport WrapperModal from './WrapperModal';\n\nconst SubmittingModal = () => {\n    const intl = useIntl();\n\n    return (\n        <WrapperModal>\n            <LoadingStep\n                customText={\n                    intl.formatMessage({\n                        id: 'sources.editSubmittingTitle',\n                        defaultMessage: 'Validating edited source credentials'\n                    })\n                }\n            />\n        </WrapperModal>\n    );\n};\n\nexport default SubmittingModal;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Title } from '@patternfly/react-core/dist/js/components/Title';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\nimport { EmptyState, EmptyStateVariant, EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\n\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\n\nimport WrapperModal from './WrapperModal';\n\nconst TimeoutedModal = () => {\n    const intl = useIntl();\n\n    return (\n        <WrapperModal>\n            <Bullseye>\n                <EmptyState variant={ EmptyStateVariant.full } className=\"pf-u-mt-4xl\" >\n                    <EmptyStateIcon icon={ WrenchIcon } color=\"var(--pf-global--Color--200)\" className=\"pf-u-mb-0\"/>\n                    <Title headingLevel=\"h2\" size=\"xl\" className=\"pf-u-mt-xl\">\n                        {intl.formatMessage({\n                            id: 'sources.editTimetoutedTitle',\n                            defaultMessage: 'Edit source not yet complete'\n                        })}\n                    </Title>\n                    <EmptyStateBody>\n                        { intl.formatMessage({\n                            id: 'sources.editTimetoutedDescription',\n                            // eslint-disable-next-line max-len\n                            defaultMessage: 'We are still working to confirm your updated credentials and app settings.{newLine}To track progress, check the Status column in the Sources table.'\n                        }, { newLine: <br key=\"br\"/> }) }\n                    </EmptyStateBody>\n                </EmptyState>\n            </Bullseye>\n        </WrapperModal>\n    );\n};\n\nexport default TimeoutedModal;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Text } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nimport ErroredStep from '@redhat-cloud-services/frontend-components-sources/cjs/ErroredStep';\n\nimport WrapperModal from './WrapperModal';\n\nconst ErroredModal = ({ onRetry }) => {\n    const intl = useIntl();\n\n    return (\n        <WrapperModal>\n            <ErroredStep\n                onClose={onRetry}\n                customText={\n                    intl.formatMessage({\n                        id: 'sources.editErrorDescription',\n                        // eslint-disable-next-line max-len\n                        defaultMessage: 'There was a problem while trying to edit your source. Please try again. If the error persists, open a support case.'\n                    })\n                }\n                secondaryActions={\n                    <Text\n                        component='a'\n                        target=\"_blank\"\n                        href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {intl.formatMessage({ id: 'sources.openTicket', defaultMessage: 'Open a support case' })}\n                    </Text>\n                }\n                returnButtonTitle={ intl.formatMessage({\n                    id: 'sources.retryText',\n                    defaultMessage: 'Retry'\n                })}\n            />\n        </WrapperModal>\n    );\n};\n\nErroredModal.propTypes = {\n    onRetry: PropTypes.func.isRequired\n};\n\nexport default ErroredModal;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport sourceEditContext from '../sourceEditContext';\nimport { addMessage } from '../../../redux/sources/actions';\nimport { doDeleteAuthentication } from '../../../api/entities';\nimport { handleError } from '@redhat-cloud-services/frontend-components-sources/cjs/handleError';\n\nconst RemoveAuth = ({ authId }) => {\n    const { setState, source, sourceType } = useContext(sourceEditContext);\n\n    const schemaAuth = sourceType?.schema?.authentication?.find(\n        ({ type }) => type === source?.authentications?.find(auth => auth?.id === authId)?.authtype\n    );\n\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    const onClose = () => setState({ type: 'closeAuthRemoving' });\n\n    const onRemove = () => {\n        setState({ type: 'removeAuthPending', authId });\n        onClose();\n        return doDeleteAuthentication(authId).then(() => {\n            setState({ type: 'removeAuthFulfill', authId });\n            dispatch(addMessage(\n                intl.formatMessage(\n                    { id: 'sources.authRemoveFullfil', defaultMessage: 'Authentication was deleted successfully.' }\n                ),\n                'success'\n            ));\n        })\n        .catch((error) => {\n            setState({ type: 'removeAuthRejected', authId });\n            dispatch(addMessage(\n                intl.formatMessage(\n                    { id: 'sources.authRemoveRejected', defaultMessage: 'Authentication was not deleted successfully.' }\n                ),\n                'danger',\n                handleError(error)\n            ));\n        });\n    };\n\n    return (\n        <Modal\n            isOpen\n            className=\"ins-c-sources__dialog--warning\"\n            onClose={onClose}\n            actions={[<Button\n                id=\"deleteSubmit\"\n                key=\"submit\"\n                variant=\"danger\"\n                type=\"button\"\n                onClick={ onRemove }\n            >\n                { intl.formatMessage({\n                    id: 'sources.deleteConfirm',\n                    defaultMessage: 'Remove authentication'\n                }) }\n            </Button>,\n            <Button\n                id=\"deleteCancel\"\n                key=\"cancel\"\n                variant=\"link\"\n                type=\"button\"\n                onClick={ onClose }\n            >\n                { intl.formatMessage({\n                    id: 'sources.deleteCancel',\n                    defaultMessage: 'Cancel'\n                }) }\n            </Button>]}\n            variant=\"small\"\n            aria-label={\n                intl.formatMessage({\n                    id: 'sources.deleteAuthTitle',\n                    defaultMessage: 'Remove authentication?',\n                })\n            }\n            header={\n                <Title headingLevel=\"h1\" size=\"2xl\">\n                    <ExclamationTriangleIcon size=\"sm\" className=\"ins-m-alert ins-c-source__delete-icon pf-u-mr-sm\" />\n                    {intl.formatMessage({\n                        id: 'sources.deleteAppTitle',\n                        defaultMessage: 'Remove authentication?',\n                    })}\n                </Title>\n            }\n        >\n\n            <TextContent>\n                <Text variant={TextVariants.p}>\n                    {intl.formatMessage({\n                        id: 'sources.removeAuthWarning',\n                        defaultMessage: 'This action will permanently remove {auth} from this source.'\n                    }, { auth: <b key=\"b\">{schemaAuth?.name}</b> })}\n                </Text>\n            </TextContent>\n        </Modal>\n    );\n};\n\nRemoveAuth.propTypes = {\n    authId: PropTypes.string.isRequired\n};\n\nexport default RemoveAuth;\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\n\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal';\n\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport { doLoadSourceForEdit } from '../../api/doLoadSourceForEdit';\nimport Header from './Header';\nimport { onSubmit } from './onSubmit';\n\nimport { redirectWhenImported } from './importedRedirect';\nimport { routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport reducer, { initialState } from './reducer';\nimport sourceEditContext from './sourceEditContext';\nimport ModalFormTemplate from '../ModalFormTemplate';\nimport SubmittingModal from './SubmittingModal';\nimport TimeoutedModal from './TimeoutedModal';\nimport ErroredModal from './ErroredModal';\nimport RemoveAuth from './parser/RemoveAuth';\n\nconst SourceEditModal = () => {\n    const [state, setState] = useReducer(reducer, initialState);\n    const history = useHistory();\n    const sourceRedux = useSource();\n    const isLoaded = useIsLoaded();\n\n    const {\n        loading,\n        editing,\n        source,\n        initialValues,\n        schema,\n        isSubmitting,\n        initialLoad,\n        message,\n        submitError,\n        isTimeouted,\n        values,\n        sourceType,\n        isAuthRemoving\n    } = state;\n\n    const intl = useIntl();\n\n    const {\n        sourceTypes,\n        appTypes,\n        sourceTypesLoaded,\n        appTypesLoaded\n    } = useSelector(({ sources }) => sources, shallowEqual);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (sourceRedux && initialLoad) {\n            doLoadSourceForEdit(sourceRedux).then((source) => {\n                if (source.source.imported) {\n                    redirectWhenImported(dispatch, intl, history, source.source.name);\n                }\n\n                setState({ type: 'setSource', source });\n            });\n        }\n    }, [sourceRedux, isLoaded]);\n\n    useEffect(() => {\n        if (source && appTypesLoaded && sourceTypesLoaded) {\n            const sourceType = sourceTypes.find(({ id }) => id === source.source.source_type_id);\n\n            setState({ type: 'createForm', sourceType, source, appTypes, intl });\n        }\n    }, [appTypesLoaded, source, sourceTypesLoaded]);\n\n    const isLoading = !appTypesLoaded || !sourceTypesLoaded || loading;\n\n    const returnToSources = () => history.push(routes.sources.path);\n\n    if (isTimeouted) {\n        return <TimeoutedModal />;\n    }\n\n    if (submitError) {\n        return (<ErroredModal\n            onRetry={() => onSubmit(values, editing, dispatch, source, intl, setState)}\n        />);\n    }\n\n    if (isSubmitting) {\n        return <SubmittingModal />;\n    }\n\n    if (isLoading) {\n        return (\n            <Modal\n                aria-label={intl.formatMessage({\n                    id: 'sources.editSource',\n                    defaultMessage: 'Edit source.'\n                })}\n                header={<Header />}\n                isOpen\n                variant=\"large\"\n                onClose={returnToSources}\n            >\n                <div className=\"ins-c-sources__dialog--spinnerContainer\">\n                    <Spinner />\n                </div>\n            </Modal>\n        );\n    }\n\n    return (\n        <sourceEditContext.Provider value={{ setState, source, sourceType }}>\n            {isAuthRemoving && <RemoveAuth authId={isAuthRemoving} />}\n            <SourcesFormRenderer\n                onCancel={returnToSources}\n                schema={schema}\n                onSubmit={\n                    (values, formApi) =>\n                        onSubmit(values, formApi.getState().dirtyFields, dispatch, source, intl, setState)\n                }\n                FormTemplate={(props) => (<ModalFormTemplate\n                    ModalProps={{\n                        ['aria-label']: intl.formatMessage({\n                            id: 'sources.editSource',\n                            defaultMessage: 'Edit source.'\n                        }),\n                        header: <Header name={source.source.name} />,\n                        variant: 'large',\n                        isOpen: !isAuthRemoving,\n                        onClose: returnToSources\n                    }}\n                    {...props}\n                />)}\n                clearedValue={null}\n                initialValues={{\n                    ...initialValues,\n                    message\n                }}\n            />\n        </sourceEditContext.Provider>\n    );\n};\n\nexport default SourceEditModal;\n","import { routes } from '../../Routes';\nimport { addMessage } from '../../redux/sources/actions';\n\nexport const redirectWhenImported = (dispatch, intl, history, name) => {\n    dispatch(addMessage(\n        intl.formatMessage({\n            id: 'sources.importSourceCannotEdited',\n            defaultMessage: 'Source { name } is imported.'\n        }, { name }),\n        'danger',\n        intl.formatMessage({\n            id: 'sources.importedSourcesCannotEdited',\n            defaultMessage: 'Imported sources cannot be edited.'\n        }),\n    ));\n    history.push(routes.sources.path);\n};\n"],"sourceRoot":""}