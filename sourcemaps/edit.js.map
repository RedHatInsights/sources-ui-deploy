{"version":3,"sources":["webpack:///./src/components/editField/EditField.js","webpack:///./src/Utilities/SourcesFormRenderer.js","webpack:///./node_modules/lodash/set.js","webpack:///./node_modules/lodash/_baseSet.js","webpack:///./src/components/SourceEditForm/parser/genericInfo.js","webpack:///./src/components/SourceEditForm/parser/authentication.js","webpack:///./src/components/SourceEditForm/parser/unsupportedAuthType.js","webpack:///./src/components/SourceEditForm/parser/helpers.js","webpack:///./src/components/SourceEditForm/parser/endpoint.js","webpack:///./src/components/SourceEditForm/parser/application.js","webpack:///./src/components/SourceEditForm/parser/parseSourceToSchema.js","webpack:///./src/api/doLoadSourceForEdit.js","webpack:///./src/components/SourceEditForm/HorizontalFormWrapper.js","webpack:///./src/components/SourceEditForm/Header.js","webpack:///./src/components/SourceEditForm/helpers.js","webpack:///./src/components/SourceEditForm/onSubmit.js","webpack:///./src/components/SourceEditForm/SourceEditModal.js","webpack:///./src/api/getCmValues.js","webpack:///./src/components/SourceEditForm/importedRedirect.js"],"names":["EDIT_FIELD_NAME","EditField","isRequired","label","helperText","hideLabel","meta","input","type","setEdit","error","showError","touched","value","emptyText","name","includes","fieldId","isValid","helperTextInvalid","onClick","undefined","tabIndex","onKeyPress","e","charCode","preventDefault","className","propTypes","PropTypes","string","bool","object","FieldProvider","oneOfType","node","func","shape","any","EditFieldProvider","rest","props","SourcesFormRenderer","layoutMapper","formFieldsMapper","mapperExtension","baseSet","module","exports","path","assignValue","castPath","isIndex","isObject","toKey","customizer","index","length","lastIndex","nested","key","newValue","objValue","genericInfo","editing","sourceId","id","defaultMessage","component","componentTypes","TEXT_FIELD","validate","asyncValidator","isReadOnly","modifyAuthSchemas","fields","map","field","editedName","startsWith","fieldName","replace","createAuthFieldName","isEditing","finalField","split","pop","values","filter","validation","validatorTypes","REQUIRED","removeRequiredValidator","authenticationFields","authentications","sourceType","schema","authentication","auth","schemaAuth","find","authtype","Content","TextContent","Text","TextVariants","p","additionalStepKeys","get","hardcodedSchemas","getAdditionalAuthSteps","enhancedFields","stepKey","getEnhancedAuthField","SUB_FORM","title","NOT_CHANGING_COMPONENTS","CHECKBOX","SWITCH","modifyFields","endpointFields","endpoint","hidden","getEnhancedEndpointField","APP_NAMES","cmFieldsPrefixes","isCMField","some","prefix","getCMFields","Object","keys","flatMap","x","getEnhancedCMField","authenticationsTypes","forEach","apps","hasAppField","appendClusterIdentifier","costManagementFields","applications","appTypes","source","costManagementApp","hasCostManagement","application_type_id","billingSourceFields","enhandcedFields","display_name","applicationsFields","parseSourceToSchema","endpoints","Boolean","HorizontalFormWrapper","children","Form","isHorizontal","Header","Grid","GridItem","xs","Title","headingLevel","TitleLevel","h1","size","prepareInitialValues","sourceTypeName","url","auhenticationsFinal","scheme","host","port","endpointToUrl","source_type","onSubmit","dispatch","intl","push","updateSource","filteredValues","set","selectOnlyEditedValues","formatMessage","costManagement","then","routes","sources","loadEntities","initialState","loading","initialValues","reducer","state","payload","SourceEditModal","useReducer","setState","useParams","history","useHistory","useIntl","useSelector","shallowEqual","sourceTypes","sourceTypesLoaded","appTypesLoaded","useDispatch","useEffect","Promise","all","getSourcesApi","showSource","listSourceEndpoints","listSourceApplications","axiosInstance","COST_MANAGEMENT_API_BASE","sourceData","data","basicValues","billing_source","credentials","listEndpointAuthentications","doLoadSourceForEdit","imported","addMessage","redirectWhenImported","source_type_id","product_name","returnToSources","Modal","header","isOpen","isLarge","onClose","Spinner","onCancel","formApi","getState","dirtyFields","FormWrapper","clearedValue","canReset","disableSubmit","onReset","buttonsLabels","submitLabel"],"mappings":"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","file":"js/edit.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport PencilAltIcon from '@patternfly/react-icons/dist/js/icons/pencil-alt-icon';\n\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form/FormGroup';\n\nexport const EDIT_FIELD_NAME = 'edit-field';\n\nconst EditField = ({ isRequired, label, helperText, hideLabel, meta, input, type, setEdit }) => {\n    const { error, touched } = meta;\n    const showError = touched && error;\n\n    let value = input.value;\n\n    if (typeof value === 'boolean') {\n        value = value ? 'True' : 'False';\n    }\n\n    const isPassword = type === 'password' || input.name.includes('password');\n    const emptyText = isPassword ? 'Click to edit' : 'Click to add';\n\n    return (\n        <FormGroup\n            isRequired={ isRequired }\n            label={ !hideLabel && label }\n            fieldId={ input.name }\n            isValid={ !showError }\n            helperText={ helperText }\n            helperTextInvalid={ error }\n            onClick={setEdit ? () => setEdit(input.name) : undefined}\n            tabIndex={0}\n            onKeyPress={(e) => {\n                if (e.charCode === 32 && setEdit) {\n                    e.preventDefault();\n                    setEdit(input.name);\n                }\n            }}\n        >\n            <div className={`pf-c-form__horizontal-group ins-c-sources__edit-field-group ${setEdit ? 'clickable' : ''}`}>\n                <TextContent className={`ins-c-sources__edit-field-group-text-content ${setEdit ? 'clickable' : ''}`}>\n                    <span className=\"ins-c-sources__edit-field-value pf-u-mr-sm\">\n                        {value ? value : setEdit ? emptyText : ''}\n                    </span>\n                    {setEdit && <PencilAltIcon />}\n                </TextContent>\n            </div>\n        </FormGroup>\n    );\n};\n\nEditField.propTypes = {\n    label: PropTypes.string,\n    isRequired: PropTypes.bool,\n    helperText: PropTypes.string,\n    meta: PropTypes.object.isRequired,\n    FieldProvider: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    input: PropTypes.shape({\n        value: PropTypes.any,\n        name: PropTypes.string.isRequired\n    }).isRequired,\n    hideLabel: PropTypes.bool,\n    setEdit: PropTypes.func,\n    type: PropTypes.string\n};\n\nconst EditFieldProvider = ({ FieldProvider, ...rest }) =>\n    (\n        <FieldProvider { ...rest }>\n            { (props) =>  <EditField  { ...props }/> }\n        </FieldProvider>\n    );\n\nEditFieldProvider.propTypes = {\n    FieldProvider: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired\n};\n\nexport default EditFieldProvider;\n","import React from 'react';\n\nimport FormRenderer from '@data-driven-forms/react-form-renderer';\nimport { layoutMapper, formFieldsMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { mapperExtension } from '@redhat-cloud-services/frontend-components-sources';\n\nimport EditField from '../components/editField/EditField';\n\nconst SourcesFormRenderer = props => (\n    <FormRenderer\n        layoutMapper={layoutMapper}\n        formFieldsMapper={{\n            ...formFieldsMapper,\n            ...mapperExtension,\n            'edit-field': EditField\n        }}\n        {...props}\n    />\n);\n\nexport default SourcesFormRenderer;\n","var baseSet = require('./_baseSet');\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nmodule.exports = set;\n","var assignValue = require('./_assignValue'),\n    castPath = require('./_castPath'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = baseSet;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { componentTypes } from '@data-driven-forms/react-form-renderer';\nimport { asyncValidator } from '@redhat-cloud-services/frontend-components-sources';\nimport { EDIT_FIELD_NAME } from '../../editField/EditField';\n\nexport const genericInfo = (editing, setEdit, sourceId) => ([\n    {\n        name: 'source.name',\n        label: <FormattedMessage\n            id=\"sources.sourceName\"\n            defaultMessage=\"Source name\"\n        />,\n        component: editing['source.name'] ? componentTypes.TEXT_FIELD : EDIT_FIELD_NAME,\n        setEdit: editing['source.name'] ? undefined : setEdit,\n        validate: [\n            (value) => asyncValidator(value, sourceId)\n        ],\n        isRequired: true\n    }, {\n        name: 'source_type',\n        label: <FormattedMessage\n            id=\"sources.sourceType\"\n            defaultMessage=\"Source type\"\n        />,\n        isReadOnly: true,\n        component: EDIT_FIELD_NAME\n    }\n]);\n","import React from 'react';\nimport get from 'lodash/get';\nimport { componentTypes, validatorTypes } from '@data-driven-forms/react-form-renderer';\nimport { hardcodedSchemas } from '@redhat-cloud-services/frontend-components-sources';\nimport { FormattedMessage } from 'react-intl';\n\nimport { EDIT_FIELD_NAME } from '../../editField/EditField';\nimport { unsupportedAuthTypeField } from './unsupportedAuthType';\n\nexport const createAuthFieldName = (fieldName, id) => `authentications.a${id}.${fieldName.replace('authentication.', '')}`;\n\nexport const getLastPartOfName = (fieldName) => fieldName.split('.').pop();\n\nexport const removeRequiredValidator = (validate = []) =>\n    validate.filter(validation => validation.type !== validatorTypes.REQUIRED);\n\nexport const getEnhancedAuthField = (sourceType, authtype, name) =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, 'generic', name], {});\n\nexport const getAdditionalAuthSteps = (sourceType, authtype) =>\n    get(hardcodedSchemas, [sourceType, 'authentication', authtype, 'generic', 'includeStepKeyFields'], []);\n\nexport const modifyAuthSchemas = (fields, id, editing, setEdit) => fields.map((field) => {\n    const editedName = field.name.startsWith('authentication') ? createAuthFieldName(field.name, id) : field.name;\n    const isEditing = editing[editedName];\n\n    const finalField = ({\n        ...field,\n        name: editedName,\n        component: isEditing ? field.component : EDIT_FIELD_NAME\n    });\n\n    if (!isEditing) {\n        finalField.setEdit = setEdit;\n    }\n\n    const isPassword = getLastPartOfName(finalField.name) === 'password';\n\n    if (isPassword) {\n        finalField.helperText = (<FormattedMessage\n            id=\"sources.passwordResetHelperText\"\n            defaultMessage={`Changing this resets your current { label }.`}\n            values={{\n                label: finalField.label\n            }}\n        />);\n        finalField.isRequired = false;\n        finalField.validate = removeRequiredValidator(finalField.validate);\n    }\n\n    return finalField;\n});\n\nexport const authenticationFields = (authentications, sourceType, editing, setEdit) => {\n    if (!authentications || authentications.length === 0 || !sourceType.schema || !sourceType.schema.authentication) {\n        return [];\n    }\n\n    return authentications.map((auth) => {\n        const schemaAuth = sourceType.schema.authentication.find(({ type }) => type === auth.authtype);\n\n        if (!schemaAuth) {\n            return unsupportedAuthTypeField(auth.authtype);\n        }\n\n        const additionalStepKeys = getAdditionalAuthSteps(sourceType.name, auth.authtype);\n\n        const enhancedFields = schemaAuth.fields\n        .filter(field => !field.stepKey || additionalStepKeys.includes(field.stepKey))\n        .map((field) => ({\n            ...field,\n            ...getEnhancedAuthField(sourceType.name, auth.authtype, field.name)\n        }));\n\n        return ({\n            component: componentTypes.SUB_FORM,\n            title: schemaAuth.name,\n            name: schemaAuth.name,\n            fields: [\n                modifyAuthSchemas(enhancedFields, auth.id, editing, setEdit)\n            ]\n        });\n    });\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\n\nexport const unsupportedAuthTypeField = (type) => ({\n    component: 'description',\n    name: `${type}-unsupported`,\n    // eslint-disable-next-line react/display-name\n    Content: () => (\n        <TextContent>\n            <Text component={ TextVariants.p }>\n                <FormattedMessage\n                    id=\"sources.unsupportedAuthType\"\n                    defaultMessage={`Authentication type of { type } is no longer supported.`}\n                    values={{ type }}\n                />\n            </Text>\n        </TextContent>\n    )\n});\n","import { EDIT_FIELD_NAME } from '../../editField/EditField';\nimport { componentTypes } from '@data-driven-forms/react-form-renderer';\n\nexport const NOT_CHANGING_COMPONENTS = [componentTypes.CHECKBOX, componentTypes.SWITCH];\n\nexport const modifyFields = (fields, editing, setEdit) => fields.map((field) => {\n    const isEditing = editing[field.name];\n\n    const finalField = ({\n        ...field,\n        component: isEditing || NOT_CHANGING_COMPONENTS.includes(field.component)  ? field.component : EDIT_FIELD_NAME\n    });\n\n    if (!isEditing && !NOT_CHANGING_COMPONENTS.includes(field.component)) {\n        finalField.setEdit = setEdit;\n    }\n\n    return finalField;\n});\n","import React from 'react';\nimport get from 'lodash/get';\nimport { FormattedMessage } from 'react-intl';\nimport { componentTypes } from '@data-driven-forms/react-form-renderer';\nimport { hardcodedSchemas } from '@redhat-cloud-services/frontend-components-sources';\nimport { modifyFields } from './helpers';\n\nexport const getEnhancedEndpointField = (sourceType, name) =>\n    get(hardcodedSchemas, [sourceType, 'endpoint', name], {});\n\nexport const endpointFields = (sourceType, editing, setEdit) => {\n    if (!sourceType.schema || !sourceType.schema.endpoint || sourceType.schema.endpoint.hidden) {\n        return undefined;\n    }\n\n    const schemaAuth = sourceType.schema.endpoint;\n\n    const enhancedFields = schemaAuth.fields.map((field) => ({\n        ...field,\n        ...getEnhancedEndpointField(sourceType.name, field.name)\n    }));\n\n    return ({\n        component: componentTypes.SUB_FORM,\n        title: <FormattedMessage\n            id=\"sources.endpoint\"\n            defaultMessage=\"Endpoint\"\n        />,\n        name: 'endpoint',\n        fields: modifyFields(enhancedFields, editing, setEdit)\n    });\n};\n","import React from 'react';\nimport get from 'lodash/get';\nimport { componentTypes, validatorTypes } from '@data-driven-forms/react-form-renderer';\nimport { hardcodedSchemas } from '@redhat-cloud-services/frontend-components-sources';\nimport { FormattedMessage } from 'react-intl';\nimport { modifyFields } from './helpers';\nimport { EDIT_FIELD_NAME } from '../../editField/EditField';\n\nexport const APP_NAMES = {\n    COST_MANAGAMENT: '/insights/platform/cost-management'\n};\n\nexport const cmFieldsPrefixes = ['billing_source', 'credentials'];\n\nexport const isCMField = ({ name }) => cmFieldsPrefixes.some((prefix) => name.startsWith(prefix));\n\nexport const getCMFields = (authentication) =>\n    Object.keys(authentication)\n    .map((key) => authentication[key].fields.filter(isCMField))\n    .flatMap((x) => x);\n\nexport const getEnhancedCMField = (sourceType, name, authenticationsTypes) => {\n    let field = undefined;\n\n    authenticationsTypes.forEach((type) => {\n        const apps = field ? {} : get(hardcodedSchemas, [sourceType, 'authentication', type], {});\n\n        Object.keys(apps).find((key) => {\n            const hasAppField = get(hardcodedSchemas, [sourceType, 'authentication', type, key, name], undefined);\n            if (hasAppField) {\n                field = hasAppField;\n                return true;\n            }\n        });\n    });\n\n    return field ? field : {};\n};\n\nexport const appendClusterIdentifier = (editing, setEdit, sourceType) =>\n    sourceType.name === 'openshift' ? [{\n        name: 'source.source_ref',\n        label: <FormattedMessage\n            id=\"sources.clusterIdentifier\"\n            defaultMessage=\"Cluster identifier\"\n        />,\n        isRequired: true,\n        setEdit: editing['source.source_ref'] ? undefined : setEdit,\n        validate: [{ type: validatorTypes.REQUIRED }],\n        component: editing['source.source_ref'] ? componentTypes.TEXT_FIELD : EDIT_FIELD_NAME\n    }] : [];\n\nexport const costManagementFields = (\n    applications = [],\n    sourceType,\n    editing,\n    setEdit,\n    appTypes,\n    source\n) => {\n    const costManagementApp = appTypes.find(({ name }) => name === APP_NAMES.COST_MANAGAMENT);\n\n    if (!costManagementApp) {\n        return undefined;\n    }\n\n    const hasCostManagement = applications.find(({ application_type_id }) => application_type_id === costManagementApp.id);\n\n    if (!hasCostManagement) {\n        return undefined;\n    }\n\n    const billingSourceFields = getCMFields(sourceType.schema.authentication);\n\n    const authenticationsTypes = source.authentications ? source.authentications.map(({ authtype }) => authtype) : [];\n\n    const enhandcedFields = billingSourceFields.map((field) => ({\n        ...field,\n        ...getEnhancedCMField(sourceType.name, field.name, authenticationsTypes)\n    }));\n\n    return ({\n        component: componentTypes.SUB_FORM,\n        title: costManagementApp.display_name,\n        name: costManagementApp.display_name,\n        fields: [\n            ...modifyFields(enhandcedFields, editing, setEdit),\n            ...appendClusterIdentifier(editing, setEdit, sourceType)\n        ]\n    });\n};\n\nexport const applicationsFields = (\n    applications,\n    sourceType,\n    editing,\n    setEdit,\n    appTypes,\n    source\n) => ([\n    costManagementFields(\n        applications,\n        sourceType,\n        editing,\n        setEdit,\n        appTypes,\n        source\n    )\n]);\n","import { genericInfo } from './genericInfo';\nimport { authenticationFields } from './authentication';\nimport { endpointFields } from './endpoint';\nimport { applicationsFields } from './application';\n\nexport const parseSourceToSchema = (source, editing, setEdit, sourceType, appTypes) => ({\n    fields: [\n        ...genericInfo(editing, setEdit, source.source.id),\n        ...authenticationFields(source.authentications, sourceType, editing, setEdit),\n        ...applicationsFields(source.applications, sourceType, editing, setEdit, appTypes, source),\n        source.endpoints && source.endpoints.length > 0 ? endpointFields(sourceType, editing, setEdit) : false\n    ].filter(Boolean)\n});\n","import { getSourcesApi } from './entities';\nimport { getCmValues } from './getCmValues';\n\nexport const doLoadSourceForEdit = sourceId => Promise.all([\n    getSourcesApi().showSource(sourceId),\n    getSourcesApi().listSourceEndpoints(sourceId),\n    getSourcesApi().listSourceApplications(sourceId),\n    getCmValues(sourceId).catch(() => undefined)\n]).then(([sourceData, endpoints, applications, costManagement]) => {\n    const endpoint = endpoints && endpoints.data && endpoints.data[0];\n\n    let basicValues = {\n        source: sourceData,\n        applications: applications.data\n    };\n\n    if (costManagement) {\n        basicValues = {\n            ...basicValues,\n            billing_source: costManagement.billing_source,\n            credentials: costManagement.authentication.credentials\n        };\n    }\n\n    if (!endpoint) { // bail out\n        return basicValues;\n    }\n\n    return getSourcesApi().listEndpointAuthentications(endpoint.id).then(authentications => ({\n        ...basicValues,\n        endpoints: endpoints.data,\n        authentications: authentications.data\n    }));\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from '@patternfly/react-core/dist/js/components/Form/Form';\n\nconst HorizontalFormWrapper = ({ children, ...props }) => <Form {...props} isHorizontal>{children}</Form>;\n\nHorizontalFormWrapper.propTypes = {\n    children: PropTypes.node\n};\n\nexport default HorizontalFormWrapper;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\nimport { Title, TitleLevel } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nconst Header = () => (\n    <Grid>\n        <GridItem xs={12}>\n            <Title headingLevel={TitleLevel.h1} size=\"3xl\">\n                <FormattedMessage\n                    id=\"sources.editSource\"\n                    defaultMessage=\"Edit source\"\n                />\n            </Title>\n        </GridItem>\n        <GridItem xs={12}>\n            <FormattedMessage\n                id=\"sources.editSourceDescription\"\n                defaultMessage=\"You are editing a source.\"\n            />\n        </GridItem>\n    </Grid>\n);\n\nexport default Header;\n","import get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { endpointToUrl } from '../SourcesSimpleView/formatters';\n\nexport const selectOnlyEditedValues = (values, editing) => {\n    const filteredValues = {};\n\n    Object.keys(editing)\n    .filter((key) => editing[key])\n    .forEach((key) => {\n        set(filteredValues, key, get(values, key));\n    });\n\n    return filteredValues;\n};\n\nexport const prepareInitialValues = ({ endpoints, authentications, ...rest }, sourceTypeName) => {\n    const auhenticationsFinal = {};\n\n    if (authentications && authentications.length > 0) {\n        authentications.forEach((auth) => {\n            auhenticationsFinal[`a${auth.id}`] = auth;\n        });\n    }\n\n    let endpoint;\n    let url;\n\n    if (endpoints && endpoints.length > 0) {\n        endpoint = endpoints[0];\n    }\n\n    if (endpoint) {\n        url = (endpoint.scheme || endpoint.host || endpoint.path || endpoint.port) ? endpointToUrl(endpoint) : undefined;\n    }\n\n    return ({\n        source_type: sourceTypeName,\n        endpoint,\n        authentications: auhenticationsFinal,\n        url,\n        ...rest\n    });\n};\n","import { selectOnlyEditedValues } from './helpers';\nimport { updateSource, loadEntities } from '../../redux/sources/actions';\nimport { routes } from '../../Routes';\n\nexport const onSubmit = (values, editing, dispatch, source, intl, push) => dispatch(updateSource(\n    source,\n    selectOnlyEditedValues(values, editing),\n    intl.formatMessage({\n        id: 'sources.modifiedNotificationTitle',\n        defaultMessage: `\"{ name }\" was modified successfully.`\n    }, { name: source.source.name }),\n    intl.formatMessage({\n        id: 'sources.modifiedNotificationDescription',\n        defaultMessage: 'The source was successfully modified.'\n    }),\n    {\n        authentication: intl.formatMessage({\n            id: 'sources.sourceEditAuthFailure',\n            defaultMessage: 'Authentication update failure.'\n        }),\n        source: intl.formatMessage({\n            id: 'sources.sourceEditFailure',\n            defaultMessage: 'Source update failure.'\n        }),\n        endpoint: intl.formatMessage({\n            id: 'sources.sourceEditEndpointFailure',\n            defaultMessage: 'Endpoint update failure.'\n        }),\n        costManagement: intl.formatMessage({\n            id: 'sources.sourceCostmanagementFailure',\n            defaultMessage: 'Cost Management update failure.'\n        })\n    }))\n.then(() => {\n    push(routes.sources.path);\n    dispatch(loadEntities());\n});\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/components/Spinner';\n\nimport { layoutMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\n\nimport SourcesFormRenderer from '../../Utilities/SourcesFormRenderer';\nimport { parseSourceToSchema } from './parser/parseSourceToSchema';\nimport { doLoadSourceForEdit } from '../../api/doLoadSourceForEdit';\nimport HorizontalFormWrapper from './HorizontalFormWrapper';\nimport Header from './Header';\nimport { prepareInitialValues } from './helpers';\nimport { onSubmit } from './onSubmit';\n\nimport { redirectWhenImported } from './importedRedirect';\nimport { routes } from '../../Routes';\n\nconst initialState = {\n    loading: true,\n    editing: {},\n    source: undefined,\n    initialValues: {},\n    sourceType: undefined,\n    schema: undefined\n};\n\nconst reducer = (state, payload) => ({ ...state, ...payload });\n\nconst SourceEditModal = () => {\n    const [state, setState] = useReducer(reducer, initialState);\n    const { id } = useParams();\n    const history = useHistory();\n\n    const { loading, editing, source, initialValues, sourceType, schema } = state;\n\n    const intl = useIntl();\n\n    const {\n        sourceTypes,\n        appTypes,\n        sourceTypesLoaded,\n        appTypesLoaded\n    } = useSelector(({ sources }) => sources, shallowEqual);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        doLoadSourceForEdit(id).then((source) => {\n            if (source.source.imported) {\n                redirectWhenImported(dispatch, intl, history, source.source.name);\n            }\n\n            setState({ source });\n        });\n    }, []);\n\n    const setEdit = (name) => setState({\n        editing: {\n            ...editing,\n            [name]: !editing[name]\n        }\n    });\n\n    useEffect(() => {\n        if (source && appTypesLoaded && sourceTypesLoaded) {\n            const sourceType = sourceTypes.find(({ id }) => id === source.source.source_type_id);\n\n            setState({\n                sourceType,\n                initialValues: prepareInitialValues(source, sourceType.product_name),\n                schema: parseSourceToSchema(source, editing, setEdit, sourceType, appTypes),\n                loading: false\n            });\n        }\n    }, [appTypesLoaded, source, sourceTypesLoaded]);\n\n    useEffect(() => {\n        if (source && !loading) {\n            setState({\n                schema: parseSourceToSchema(source, editing, setEdit, sourceType, appTypes)\n            });\n        }\n    }, [editing]);\n\n    const isLoading = !appTypesLoaded || !sourceTypesLoaded || loading;\n\n    const returnToSources = () => history.push(routes.sources.path);\n\n    if (isLoading) {\n        return (\n            <Modal\n                title={intl.formatMessage({\n                    id: 'sources.editSource',\n                    defaultMessage: 'Edit source.'\n                })}\n                header={<Header />}\n                isOpen={true}\n                isLarge\n                onClose={returnToSources}\n            >\n                <div className=\"ins-c-sources__dialog--spinnerContainer\">\n                    <Spinner />\n                </div>\n            </Modal>\n        );\n    }\n\n    return (\n        <Modal\n            title={intl.formatMessage({\n                id: 'sources.editSource',\n                defaultMessage: 'Edit source.'\n            })}\n            header={<Header />}\n            isOpen={true}\n            isLarge\n            onClose={returnToSources}\n        >\n            <SourcesFormRenderer\n                onCancel={returnToSources}\n                schema={schema}\n                onSubmit={\n                    (values, formApi) => onSubmit(values, formApi.getState().dirtyFields, dispatch, source, intl, history.push)\n                }\n                layoutMapper={{\n                    ...layoutMapper,\n                    FormWrapper: HorizontalFormWrapper\n                }}\n                clearedValue={null}\n                canReset\n                disableSubmit={['submitting']}\n                onReset={() => setState({ editing: {} })}\n                initialValues={initialValues}\n                buttonsLabels={{ submitLabel: intl.formatMessage({\n                    id: 'sources.save',\n                    defaultMessage: 'Save'\n                }) }}\n            />\n        </Modal>\n    );\n};\n\nexport default SourceEditModal;\n","import { axiosInstance } from './entities';\nimport { COST_MANAGEMENT_API_BASE } from './constants';\n\nexport const getCmValues = (id) => axiosInstance.get(`${COST_MANAGEMENT_API_BASE}/sources/${id}/`);\n","import { routes } from '../../Routes';\nimport { addMessage } from '../../redux/sources/actions';\n\nexport const redirectWhenImported = (dispatch, intl, history, name) => {\n    dispatch(addMessage(\n        intl.formatMessage({\n            id: 'sources.importSourceCannotEdited',\n            defaultMessage: 'Source { name } is imported.'\n        }, { name }),\n        'danger',\n        intl.formatMessage({\n            id: 'sources.importedSourcesCannotEdited',\n            defaultMessage: 'Imported sources cannot be edited.'\n        }),\n    ));\n    history.push(routes.sources.path);\n};\n"],"sourceRoot":""}