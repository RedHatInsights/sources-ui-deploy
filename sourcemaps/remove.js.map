{"version":3,"sources":["webpack:///./src/components/ApplicationsList/ApplicationList.js","webpack:///./src/components/AddApplication/RemoveAppModal.js","webpack:///./src/components/SourceRemoveModal.js"],"names":["ApplicationList","setApplicationToRemove","breakpoints","namePrefix","appTypes","useSelector","sources","source","useSource","sourceAppsNames","applications","map","application_type_id","appType","find","id","display_name","undefined","filter","app","isDeleting","type","dependent_applications","sort","a","b","localeCompare","key","md","component","TextVariants","p","style","marginBottom","remove","className","variant","ButtonVariant","link","isInline","onClick","defaultMessage","propTypes","PropTypes","func","isRequired","shape","number","node","defaultProps","RemoveAppModal","onCancel","intl","useIntl","dispatch","useDispatch","dependentApps","appName","name","includes","x","title","isOpen","isSmall","onClose","isFooterLeftAligned","actions","titleSuccess","formatMessage","titleError","removeApplication","gutter","size","isFilled","values","length","apps","string","arrayOf","SourceRemoveModal","push","useHistory","useState","acknowledge","setAcknowledge","removingApp","returnToSources","routes","path","sourceHasActiveApp","some","removeSource","isDisabled","body","Fragment","_ev","replaceRouteId","sourceManageApps","label","onChange","value","aria-label","isChecked"],"mappings":"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","file":"js/remove.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button, ButtonVariant } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Grid } from '@patternfly/react-core/dist/js/layouts/Grid/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/js/layouts/Grid/GridItem';\n\nimport { useSource } from '../../hooks/useSource';\n\nconst ApplicationList = ({ setApplicationToRemove, breakpoints, namePrefix }) => {\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const sourceAppsNames = source.applications\n    .map(({ application_type_id }) => {\n        const appType = appTypes.find(({ id }) => id === application_type_id);\n        return appType ? appType.display_name : undefined;\n    });\n\n    return source.applications\n    .filter((app) => !app.isDeleting)\n    .map((app) => {\n        const type = appTypes.find((appType) => appType.id === app.application_type_id);\n\n        if (type) {\n            return {\n                display_name: type.display_name,\n                id: app.id,\n                dependent_applications: type.dependent_applications\n            };\n        }\n    })\n    .sort((a, b) => a.display_name.localeCompare(b.display_name))\n    .map(({ display_name, id, dependent_applications }) => (\n        <TextContent key={id}>\n            <Grid>\n                <GridItem md={breakpoints.display_name || 4}>\n                    <Text component={TextVariants.p} style={{ marginBottom: 0 }}>\n                        { namePrefix }{ display_name }\n                    </Text>\n                </GridItem>\n                <GridItem md={breakpoints.remove || 8} className=\"ins-c-sources__remove-app\">\n                    <Button\n                        variant={ButtonVariant.link}\n                        isInline\n                        onClick={() => setApplicationToRemove({ id, display_name, dependent_applications, sourceAppsNames })}\n                    >\n                        <FormattedMessage\n                            id=\"sources.remove\"\n                            defaultMessage=\"Remove\"\n                        />\n                    </Button>\n                </GridItem>\n            </Grid>\n        </TextContent>\n    ));\n};\n\nApplicationList.propTypes = {\n    setApplicationToRemove: PropTypes.func.isRequired,\n    breakpoints: PropTypes.shape({\n        display_name: PropTypes.number,\n        remove: PropTypes.number\n    }),\n    namePrefix: PropTypes.node\n};\n\nApplicationList.defaultProps = {\n    breakpoints: {}\n};\n\nexport default ApplicationList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useIntl, FormattedMessage } from 'react-intl';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Split } from '@patternfly/react-core/dist/js/layouts/Split/Split';\nimport { SplitItem } from '@patternfly/react-core/dist/js/layouts/Split/SplitItem';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack/Stack';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\n\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\n\nimport { removeApplication } from '../../redux/sources/actions';\nimport { useSource } from '../../hooks/useSource';\n\nconst RemoveAppModal = ({ app, onCancel }) => {\n    const intl = useIntl();\n\n    const appTypes = useSelector(({ sources }) => sources.appTypes);\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const dependentApps = app.dependent_applications.map(appName => {\n        const appType = appTypes.find(({ name }) => name === appName);\n\n        return appType ? app.sourceAppsNames.includes(appType.display_name) ? appType.display_name : undefined : undefined;\n    }).filter(x => x);\n\n    const onSubmit = () => {\n        const titleSuccess = intl.formatMessage({\n            id: 'sources.removeAppWarning',\n            defaultMessage: `{ name } was removed from this source.`\n        },\n        {\n            name: app.display_name\n        });\n        const titleError = intl.formatMessage({\n            id: 'sources.removeAppError',\n            defaultMessage: `Removing of { name } application from this source was unsuccessful.`\n        }, {\n            name: app.display_name\n        });\n        onCancel();\n        return dispatch(removeApplication(app.id, source.id, titleSuccess, titleError));\n    };\n\n    return (\n        <Modal\n            className=\"ins-c-sources__dialog--warning\"\n            title={`Remove ${app.display_name} application`}\n            isOpen={true}\n            isSmall\n            onClose={onCancel}\n            isFooterLeftAligned\n            actions={[\n                <Button\n                    id=\"deleteSubmit\" key=\"submit\" variant=\"danger\" type=\"button\" onClick={ onSubmit }\n                >\n                    <FormattedMessage\n                        id=\"sources.remove\"\n                        defaultMessage=\"Remove\"\n                    />\n                </Button>,\n                <Button id=\"deleteCancel\" key=\"cancel\" variant=\"link\" type=\"button\" onClick={ onCancel }>\n                    <FormattedMessage\n                        id=\"sources.cancel\"\n                        defaultMessage=\"Cancel\"\n                    />\n                </Button>\n            ]}\n        >\n            <Split gutter=\"md\">\n                <SplitItem><ExclamationTriangleIcon size=\"xl\" className=\"ins-m-alert ins-c-source__delete-icon\" /></SplitItem>\n                <SplitItem isFilled>\n                    <Stack gutter=\"md\">\n                        <TextContent>\n                            <Text component={TextVariants.p}>\n                                <FormattedMessage\n                                    id=\"sources.deleteAppWarning\"\n                                    defaultMessage={`Are you sure to remove { appName } from this source?`}\n                                    values={{\n                                        appName: app.display_name\n                                    }}\n                                />\n                            </Text>\n                            {dependentApps.length > 0 && <Text component={TextVariants.p}>\n                                <FormattedMessage\n                                    id=\"sources.deleteAppDetails\"\n                                    defaultMessage={`This change will affect these applications: { apps }.`}\n                                    values={{\n                                        apps: dependentApps\n                                    }}\n                                />\n                            </Text>}\n                        </TextContent>\n                    </Stack>\n                </SplitItem>\n            </Split>\n        </Modal>\n    );\n};\n\nRemoveAppModal.propTypes = {\n    app: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        display_name: PropTypes.string.isRequired,\n        dependent_applications: PropTypes.arrayOf(PropTypes.string),\n        sourceAppsNames: PropTypes.arrayOf(PropTypes.string)\n    }).isRequired,\n    onCancel: PropTypes.func.isRequired\n};\n\nexport default RemoveAppModal;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { Split } from '@patternfly/react-core/dist/js/layouts/Split/Split';\nimport { SplitItem } from '@patternfly/react-core/dist/js/layouts/Split/SplitItem';\nimport { Stack } from '@patternfly/react-core/dist/js/layouts/Stack/Stack';\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport { Checkbox } from '@patternfly/react-core/dist/js/components/Checkbox/Checkbox';\nimport { TextList } from '@patternfly/react-core/dist/js/components/Text/TextList';\nimport { TextListItem } from '@patternfly/react-core/dist/js/components/Text/TextListItem';\n\nimport { removeSource } from '../redux/sources/actions';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport ApplicationList from './ApplicationsList/ApplicationList';\nimport RemoveAppModal from './AddApplication/RemoveAppModal';\nimport { useSource } from '../hooks/useSource';\nimport { routes, replaceRouteId } from '../Routes';\n\nconst SourceRemoveModal = () => {\n    const { push } = useHistory();\n\n    const [acknowledge, setAcknowledge] = useState(false);\n    const [removingApp, setApplicationToRemove] = useState({});\n\n    const intl = useIntl();\n    const source = useSource();\n\n    const dispatch = useDispatch();\n\n    const returnToSources = () => push(routes.sources.path);\n\n    const onSubmit = () => {\n        returnToSources();\n        dispatch(removeSource(source.id, intl.formatMessage({\n            id: 'sources.notificationDeleteMessage',\n            defaultMessage: `{title} was deleted successfully.`\n        }, { title: source.name })));\n    };\n\n    const sourceHasActiveApp = source.applications.some((app) => !app.isDeleting);\n\n    const actions = source.applications.length > 0 ? [\n        <Button id=\"deleteCancel\" key=\"cancel\" variant=\"link\" type=\"button\" onClick={ returnToSources }>\n            <FormattedMessage\n                id=\"sources.close\"\n                defaultMessage=\"Close\"\n            />\n        </Button>\n    ] : [\n        <Button\n            id=\"deleteSubmit\" key=\"submit\" variant=\"danger\" type=\"button\" onClick={ onSubmit } isDisabled={!acknowledge}\n        >\n            <FormattedMessage\n                id=\"sources.deleteConfirm\"\n                defaultMessage=\"Delete this source and its data\"\n            />\n        </Button>,\n        <Button id=\"deleteCancel\" key=\"cancel\" variant=\"link\" type=\"button\" onClick={ returnToSources }>\n            <FormattedMessage\n                id=\"sources.deleteCancel\"\n                defaultMessage=\"Do not delete this source\"\n            />\n        </Button>\n    ];\n\n    const body = source.applications.length > 0 ? (\n        <React.Fragment>\n            <Text component={ TextVariants.p }>\n                <FormattedMessage\n                    id=\"sources.deleteTextBodyWithApp\"\n                    defaultMessage=\"This action cannot be enacted until all assigned\n                    applications have been removed from this source.\"\n                />\n            </Text>\n            <Button\n                variant=\"link\"\n                isInline\n                onClick={ (_ev) => push(replaceRouteId(routes.sourceManageApps.path, source.id))}\n            >\n                <Text component={ TextVariants.p } style={{ marginBottom: 0 }}>\n                    <FormattedMessage\n                        id=\"sources.connectedApps\"\n                        defaultMessage=\"Connected applications:\"\n                    />\n                </Text>\n            </Button>\n            {\n                sourceHasActiveApp ? <ApplicationList\n                    breakpoints={{ display_name: 8, remove: 4 }}\n                    setApplicationToRemove={setApplicationToRemove}\n                    namePrefix='- '\n                /> : <Text component={ TextVariants.p }>\n                    <FormattedMessage\n                        id=\"sources.connectedApps\"\n                        defaultMessage=\"Connected applications are being removed.\"\n                    />\n                </Text>\n            }\n        </React.Fragment>\n    ) : (\n        <React.Fragment>\n            <Text component={ TextVariants.p }>\n                <FormattedMessage\n                    id=\"sources.deleteTextBody\"\n                    defaultMessage={`Are you sure that you want to delete \"{ name }\"?`}\n                    values={{\n                        name: source.name\n                    }}\n                />\n            </Text>\n            <Text component={ TextVariants.p }>\n                <FormattedMessage\n                    id=\"sources.delete-text-body-2\"\n                    defaultMessage=\"Deleting this source will permanently delete:\"\n                />\n            </Text>\n            <TextList>\n                <TextListItem>\n                    <FormattedMessage\n                        id=\"sources.deleteTextBody3\"\n                        defaultMessage=\"All data collected\"\n                    />\n                </TextListItem>\n                <TextListItem>\n                    <FormattedMessage\n                        id=\"sources.deleteTextBody4\"\n                        defaultMessage=\"Any and all historical data\"\n                    />\n                </TextListItem>\n            </TextList>\n            <Checkbox\n                label={intl.formatMessage({\n                    id: 'sources.deleteCheckboxTitle',\n                    defaultMessage: `I acknowledge that this action cannot be undone.`\n                })}\n                onChange={() => setAcknowledge((value) => !value)}\n                aria-label={\n                    intl.formatMessage({\n                        id: 'sources.deleteCheckboxTitle',\n                        defaultMessage: `I acknowledge that this action cannot be undone.`\n                    })\n                }\n                id=\"acknowledgeDelete\"\n                name=\"acknowledgeDelete\"\n                isChecked={acknowledge}\n            />\n        </React.Fragment>\n    );\n\n    return (\n        <Modal className=\"ins-c-sources__dialog--warning\"\n            title={\n                intl.formatMessage({\n                    id: 'sources.deleteTitle',\n                    defaultMessage: `Delete {title}`\n                }, { title: source.name })\n            }\n            isOpen\n            isSmall\n            onClose={ returnToSources }\n            actions={ actions }\n            isFooterLeftAligned\n        >\n            {removingApp.id && <RemoveAppModal\n                app={removingApp}\n                onCancel={() => setApplicationToRemove({})}\n            />}\n            <Split gutter=\"md\">\n                <SplitItem><ExclamationTriangleIcon size=\"xl\" className=\"ins-m-alert ins-c-source__delete-icon\" /></SplitItem>\n                <SplitItem isFilled>\n                    <Stack gutter=\"md\">\n                        <TextContent>\n                            { body }\n                        </TextContent>\n                    </Stack>\n                </SplitItem>\n            </Split>\n        </Modal>\n    );\n};\n\nexport default SourceRemoveModal;\n"],"sourceRoot":""}