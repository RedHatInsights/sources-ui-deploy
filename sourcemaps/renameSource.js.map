{"version":3,"sources":["webpack:///./src/components/SourceDetail/SourceRenameModal.js"],"names":["SourceRenameModal","source","useSource","intl","useIntl","dispatch","useDispatch","push","useHistory","returnToSource","replaceRouteId","routes","sourcesDetail","path","id","title","formatMessage","defaultMessage","description","onClose","isOpen","variant","FormTemplate","props","disableSubmit","submitLabel","onSubmit","name","renameSource","onCancel","schema","fields","label","component","componentTypes","TEXT_FIELD","validate","value","asyncValidatorDebounced","type","validatorTypes","REQUIRED","isRequired","resolveProps","validated","initialValue"],"mappings":"0RA0EeA,UAzDW,WACxB,IAAMC,EAASC,cACTC,EAAOC,cACPC,EAAWC,wBACTC,EAASC,cAATD,KAEFE,EAAiB,kBAAMF,EAAKG,YAAeC,IAAOC,cAAcC,KAAMZ,EAAOa,MAEnF,OACE,kBAAC,QAAD,CACEC,MAAOZ,EAAKa,cAAc,CAAEF,GAAI,sBAAuBG,eAAgB,kBACvEC,YAAaf,EAAKa,cAAc,CAAEF,GAAI,4BAA6BG,eAAgB,sCACnFE,QAASV,EACTW,QAAM,EACNC,QAAQ,UAER,kBAAC,IAAD,CACEC,aAAc,SAACC,GAAD,OACZ,kBAAC,IAAD,OACMA,EADN,CAEEC,cAAe,CAAC,WAAY,aAAc,WAC1CC,YAAatB,EAAKa,cAAc,CAAEF,GAAI,eAAgBG,eAAgB,aAG1ES,SAAU,YAAc,IAAXC,EAAW,EAAXA,KAGX,OAFAlB,IAEOJ,EACLuB,YACE3B,EAAOa,GACPa,EACAxB,EAAKa,cAAc,CAAEF,GAAI,sBAAuBG,eAAgB,iCAItEY,SAAUpB,EACVqB,OAAQ,CACNC,OAAQ,CACN,CACEJ,KAAM,OACNK,MAAO7B,EAAKa,cAAc,CACxBF,GAAI,eACJG,eAAgB,SAElBgB,UAAWC,IAAeC,WAC1BC,SAAU,CAAC,SAACC,GAAD,OAAWC,kCAAwBD,EAAOpC,EAAOa,GAAIX,IAAO,CAAEoC,KAAMC,IAAeC,WAC9FC,YAAY,EACZC,aAAcC,IACdC,aAAc5C,EAAO0B","file":"js/renameSource.18eae26539e06664872d.js","sourcesContent":["import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { Modal } from '@patternfly/react-core/dist/js/components/Modal/Modal';\nimport componentTypes from '@data-driven-forms/react-form-renderer/dist/cjs/component-types';\nimport { asyncValidatorDebounced } from '@redhat-cloud-services/frontend-components-sources/cjs/SourceAddSchema';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/dist/cjs/validator-types';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/cjs/form-template';\nimport validated from '@redhat-cloud-services/frontend-components-sources/cjs/validated';\n\nimport { useSource } from '../../hooks/useSource';\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport { replaceRouteId, routes } from '../../Routes';\nimport { renameSource } from '../../redux/sources/actions';\n\nconst SourceRenameModal = () => {\n  const source = useSource();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n\n  const returnToSource = () => push(replaceRouteId(routes.sourcesDetail.path, source.id));\n\n  return (\n    <Modal\n      title={intl.formatMessage({ id: 'sources.renameTitle', defaultMessage: 'Rename source' })}\n      description={intl.formatMessage({ id: 'sources.renameDescription', defaultMessage: 'Enter a new name for your source.' })}\n      onClose={returnToSource}\n      isOpen\n      variant=\"medium\"\n    >\n      <SourcesFormRenderer\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            disableSubmit={['pristine', 'validating', 'invalid']}\n            submitLabel={intl.formatMessage({ id: 'sources.save', defaultMessage: 'Save' })}\n          />\n        )}\n        onSubmit={({ name }) => {\n          returnToSource();\n\n          return dispatch(\n            renameSource(\n              source.id,\n              name,\n              intl.formatMessage({ id: 'sources.renameError', defaultMessage: 'Renaming was unsuccessful' })\n            )\n          );\n        }}\n        onCancel={returnToSource}\n        schema={{\n          fields: [\n            {\n              name: 'name',\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              component: componentTypes.TEXT_FIELD,\n              validate: [(value) => asyncValidatorDebounced(value, source.id, intl), { type: validatorTypes.REQUIRED }],\n              isRequired: true,\n              resolveProps: validated,\n              initialValue: source.name,\n            },\n          ],\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport default SourceRenameModal;\n"],"sourceRoot":""}