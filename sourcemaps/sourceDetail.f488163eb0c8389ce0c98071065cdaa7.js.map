{"version":3,"file":"js/sourceDetail.ec496cd615cf4f2f71c8.js","mappings":"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","sources":["webpack:///./src/api/doUpdateSource.js","webpack:///./src/components/SourceDetail/AvailabilityChecker.js","webpack:///./src/components/SourceDetail/SourceSummaryCard.js","webpack:///./src/components/SourceDetail/ApplicationKebab.js","webpack:///./src/components/SourceDetail/ApplicationsCard.js","webpack:///./src/components/SourceDetail/NoApplications.js","webpack:///./src/components/SourceDetail/NoPermissions.js","webpack:///./src/api/doLoadSourceForEdit.js","webpack:///./src/utilities/alerts.js","webpack:///./src/components/SourceEditForm/helpers.js","webpack:///./src/components/SourceEditForm/onSubmit.js","webpack:///./src/components/SourceEditForm/parser/parseSourceToSchema.js","webpack:///./src/components/SourceEditForm/reducer.js","webpack:///./src/components/SourceEditForm/SubmittingModal.js","webpack:///./src/components/SourceEditForm/ErroredModal.js","webpack:///./src/components/SourceEditForm/SourceEditModal.js","webpack:///./src/components/SourceDetail/ApplicationResourcesCard.js","webpack:///./src/components/SourceDetail/Breadcrumbs.js","webpack:///./src/components/SourceDetail/SourceKebab.js","webpack:///./src/components/SourceDetail/DetailHeader.js","webpack:///./src/components/SourceDetail/ResourcesTable.js","webpack:///./src/components/SourceDetail/PauseAlert.js","webpack:///./src/pages/Detail.js"],"sourcesContent":["import { defaultPort } from '../views/formatters';\nimport { getSourcesApi } from './entities';\n\nexport const parseUrl = (url) => {\n  if (url === null) {\n    return {\n      scheme: null,\n      host: null,\n      port: null,\n      path: null,\n    };\n  }\n\n  if (!url) {\n    return {};\n  }\n\n  try {\n    const u = new URL(url);\n    const scheme = u.protocol.replace(/:$/, '');\n\n    return {\n      scheme,\n      host: u.hostname,\n      port: u.port === '' ? defaultPort(scheme) : u.port,\n      path: u.pathname,\n    };\n  } catch (error) {\n    return {};\n  }\n};\n\nexport const urlOrHost = (formData) =>\n  formData.url || formData.url === null ? parseUrl(formData.url) : formData.endpoint ? formData.endpoint : formData;\n\nexport const doUpdateSource = (source, formData, values) => {\n  const promises = [];\n\n  if (formData.source) {\n    promises.push(getSourcesApi().updateSource(source.source.id, formData.source));\n  }\n\n  if (formData.endpoint || formData.url || formData.url === null) {\n    const { scheme, host, port, path } = urlOrHost(formData);\n    const endPointPort = port === null ? null : parseInt(port, 10);\n\n    const endpointData = {\n      scheme,\n      host,\n      path,\n      port: endPointPort === null ? null : isNaN(endPointPort) ? undefined : endPointPort,\n      ...formData.endpoint,\n    };\n\n    promises.push(getSourcesApi().updateEndpoint(source.endpoints[0].id, endpointData));\n  }\n\n  if (formData.authentications) {\n    Object.keys(formData.authentications).forEach((key) => {\n      const idWithoutPrefix = key.replace('a', '');\n\n      promises.push(getSourcesApi().updateAuthentication(idWithoutPrefix, formData.authentications[key]));\n    });\n  }\n\n  if (formData.applications) {\n    Object.keys(formData.applications).forEach((key) => {\n      const idWithoutPrefix = key.replace('a', '');\n\n      promises.push(getSourcesApi().updateApplication(idWithoutPrefix, { extra: values.applications[key].extra }));\n    });\n  }\n\n  return Promise.all(promises);\n};\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport RedoIcon from '@patternfly/react-icons/dist/esm/icons/redo-icon';\nimport { Button, Spinner } from '@patternfly/react-core';\n\nimport { useSource } from '../../hooks/useSource';\nimport checkSourceStatus from '../../api/checkSourceStatus';\nimport { addMessage } from '../../redux/sources/actions';\n\nconst AvailabilityChecker = () => {\n  const source = useSource();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n\n  return (\n    <Button\n      variant=\"plain\"\n      aria-label={intl.formatMessage({ id: 'sources.checkavailability', defaultMessage: 'Check source availability' })}\n      onClick={async () => {\n        setLoading(true);\n        await checkSourceStatus(source.id);\n        setLoading(false);\n        dispatch(\n          addMessage({\n            title: intl.formatMessage({\n              id: 'sources.checkavailability.notificationTitle',\n              defaultMessage: 'Request to check source status was sent',\n            }),\n            variant: 'info',\n            description: intl.formatMessage({\n              id: 'sources.checkavailability.notificationDescription',\n              defaultMessage: 'Check this page later for updates',\n            }),\n          })\n        );\n      }}\n      isDisabled={loading}\n    >\n      {!loading && <RedoIcon />}\n      {loading && <Spinner size=\"md\" />}\n    </Button>\n  );\n};\n\nexport default AvailabilityChecker;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  DescriptionList,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  DescriptionListDescription,\n} from '@patternfly/react-core';\n\nimport { useSource } from '../../hooks/useSource';\nimport { configurationModeFormatter, dateFormatter, sourceTypeFormatter } from '../../views/formatters';\nimport AvailabilityChecker from './AvailabilityChecker';\n\nconst DescriptionListItem = ({ term, description }) => (\n  <DescriptionListGroup>\n    <DescriptionListTerm>{term}</DescriptionListTerm>\n    <DescriptionListDescription>{description}</DescriptionListDescription>\n  </DescriptionListGroup>\n);\n\nDescriptionListItem.propTypes = {\n  term: PropTypes.node,\n  description: PropTypes.node,\n};\n\nconst SourceSummaryCard = () => {\n  const intl = useIntl();\n  const source = useSource();\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n  const type = sourceTypes.find((type) => type.id === source.source_type_id);\n\n  let awsAccountNumber;\n\n  if (type.name === 'amazon') {\n    const arnType = source.authentications?.find(({ authtype }) => authtype.includes('arn'));\n\n    if (arnType?.username) {\n      awsAccountNumber = arnType.username.match(/:\\d+/)?.[0]?.replace(/:/g, '');\n    }\n  }\n\n  return (\n    <Card className=\"pf-m-selectable pf-m-selected src-c-card-summary pf-u-m-lg pf-u-mr-sm-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'detail.summary.title',\n          defaultMessage: 'Source summary',\n        })}\n      </CardTitle>\n      <CardBody>\n        <DescriptionList\n          columnModifier={{\n            default: '2Col',\n          }}\n        >\n          <DescriptionListItem\n            term={intl.formatMessage({\n              id: 'detail.summary.type',\n              defaultMessage: 'Source type',\n            })}\n            description={sourceTypeFormatter(source.source_type_id, undefined, { sourceTypes })}\n          />\n          <DescriptionListItem\n            term={intl.formatMessage({\n              id: 'detail.summary.lastChecked',\n              defaultMessage: 'Last availability check',\n            })}\n            description={\n              <React.Fragment>\n                {source.last_checked_at || source.last_available_at\n                  ? dateFormatter(source.last_checked_at || source.last_available_at)\n                  : intl.formatMessage({\n                      id: 'detail.summary.notChecked',\n                      defaultMessage: 'Not checked yet',\n                    })}\n                <AvailabilityChecker />\n              </React.Fragment>\n            }\n          />\n          <DescriptionListItem\n            term={intl.formatMessage({\n              id: 'detail.summary.dateAdded',\n              defaultMessage: 'Date added',\n            })}\n            description={dateFormatter(source.created_at)}\n          />\n          <DescriptionListItem\n            term={intl.formatMessage({\n              id: 'detail.summary.lastModified',\n              defaultMessage: 'Last modified',\n            })}\n            description={dateFormatter(source.updated_at)}\n          />\n          {source.app_creation_workflow && (\n            <DescriptionListItem\n              term={intl.formatMessage({\n                id: 'detail.summary.configurationMode',\n                defaultMessage: 'Configuration mode',\n              })}\n              description={configurationModeFormatter(source.app_creation_workflow, source, { intl, sourceType: type })}\n            />\n          )}\n          {awsAccountNumber && (\n            <DescriptionListItem\n              term={intl.formatMessage({\n                id: 'detail.summary.awsAccountNumber',\n                defaultMessage: 'AWS account number',\n              })}\n              description={awsAccountNumber}\n            />\n          )}\n        </DescriptionList>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default SourceSummaryCard;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\n\nimport { KebabToggle, Dropdown, DropdownItem } from '@patternfly/react-core';\n\nimport { replaceRouteId, routes } from '../../Routes';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { useSource } from '../../hooks/useSource';\nimport disabledTooltipProps from '../../utilities/disabledTooltipProps';\n\nconst ApplicationKebab = ({ app, removeApp, addApp }) => {\n  const [isOpen, setOpen] = useState(false);\n  const intl = useIntl();\n  const source = useSource();\n  const { push } = useHistory();\n  const hasRightAccess = useHasWritePermissions();\n\n  const wrappedFunction = (func) => () => {\n    setOpen(false);\n    func();\n  };\n\n  const disabledProps = disabledTooltipProps(intl);\n\n  const pausedTooltip = intl.formatMessage({\n    id: 'sources.pausedSourceAction',\n    defaultMessage: 'You cannot perform this action on a paused source.',\n  });\n\n  const pausedProps = {\n    ...disabledProps,\n    tooltip: pausedTooltip,\n  };\n\n  const pausedButton = app.paused_at ? (\n    <DropdownItem\n      {...(source.paused_at && pausedProps)}\n      {...(!hasRightAccess && disabledProps)}\n      key=\"resume\"\n      description={intl.formatMessage({\n        id: 'app.kebab.resume.title',\n        defaultMessage: 'Resume data collection for this application.',\n      })}\n      onClick={wrappedFunction(addApp)}\n    >\n      {intl.formatMessage({\n        id: 'app.kebab.resume.button',\n        defaultMessage: 'Resume',\n      })}\n    </DropdownItem>\n  ) : (\n    <DropdownItem\n      {...(source.paused_at && pausedProps)}\n      {...(!hasRightAccess && disabledProps)}\n      key=\"pause\"\n      description={intl.formatMessage({\n        id: 'app.kebab.pause.title',\n        defaultMessage: 'Temporarily stop this application from collecting data.',\n      })}\n      onClick={wrappedFunction(removeApp)}\n    >\n      {intl.formatMessage({\n        id: 'app.kebab.pause.button',\n        defaultMessage: 'Pause',\n      })}\n    </DropdownItem>\n  );\n  const removedButton = (\n    <DropdownItem\n      {...(source.paused_at && pausedProps)}\n      {...(!hasRightAccess && disabledProps)}\n      key=\"remove\"\n      description={intl.formatMessage({\n        id: 'app.kebab.remove.title',\n        defaultMessage: 'Permanently stop data collection for this application.',\n      })}\n      onClick={wrappedFunction(() =>\n        push(replaceRouteId(routes.sourcesDetailRemoveApp.path, source.id).replace(':app_id', app.id))\n      )}\n    >\n      {intl.formatMessage({\n        id: 'app.kebab.pause.button',\n        defaultMessage: 'Remove',\n      })}\n    </DropdownItem>\n  );\n\n  return (\n    <Dropdown\n      isPlain\n      isOpen={isOpen}\n      position=\"right\"\n      dropdownItems={[pausedButton, removedButton]}\n      className=\"src-c-dropdown__application_kebab\"\n      toggle={<KebabToggle onToggle={() => setOpen((open) => !open)} />}\n    />\n  );\n};\n\nApplicationKebab.propTypes = {\n  app: PropTypes.shape({\n    id: PropTypes.string,\n    paused_at: PropTypes.string,\n  }).isRequired,\n  removeApp: PropTypes.func,\n  addApp: PropTypes.func,\n};\n\nexport default ApplicationKebab;\n","import React, { useReducer } from 'react';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { Card, CardBody, CardTitle, Switch, FormGroup } from '@patternfly/react-core';\n\nimport PauseIcon from '@patternfly/react-icons/dist/esm/icons/pause-icon';\nimport PlayIcon from '@patternfly/react-icons/dist/esm/icons/play-icon';\n\nimport { useSource } from '../../hooks/useSource';\nimport { replaceRouteId, routes } from '../../Routes';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport isSuperKey from '../../utilities/isSuperKey';\nimport { getSourcesApi, doCreateApplication } from '../../api/entities';\nimport { addMessage, loadEntities } from '../../redux/sources/actions';\nimport { APP_NAMES } from '../SourceEditForm/parser/application';\nimport filterApps from '../../utilities/filterApps';\nimport ApplicationKebab from './ApplicationKebab';\nimport { ApplicationLabel } from '../../views/formatters';\nimport handleError from '../../api/handleError';\nimport tryAgainMessage from '../../utilities/tryAgainMessage';\nimport { disabledMessage } from '../../utilities/disabledTooltipProps';\n\nconst initialState = {\n  selectedApps: {},\n};\n\nconst reducer = (state, { type, id }) => {\n  switch (type) {\n    case 'addApp':\n      return { ...state, selectedApps: { ...state.selectedApps, [id]: true } };\n    case 'removeApp':\n      return { ...state, selectedApps: { ...state.selectedApps, [id]: false } };\n    case 'clean':\n      return { ...state, selectedApps: { ...state.selectedApps, [id]: undefined } };\n  }\n};\n\nconst descriptionMapper = (name, intl) =>\n  ({\n    [APP_NAMES.COST_MANAGAMENT]: intl.formatMessage({\n      id: 'cost.app.description',\n      defaultMessage: 'Analyze, forecast, and optimize your Red Hat OpenShift cluster costs in hybrid cloud environments.',\n    }),\n    [APP_NAMES.CLOUD_METER]: intl.formatMessage({\n      id: 'cost.app.description',\n      defaultMessage: 'Includes access to Red Hat gold images, high precision subscription watch data, and autoregistration.',\n    }),\n  }[name]);\n\nconst addResumeNotification = (typeId, dispatch, intl, appTypes) => {\n  const appName = appTypes.find((type) => type.id === typeId)?.display_name;\n\n  dispatch(\n    addMessage({\n      title: intl.formatMessage(\n        {\n          id: 'detail.applications.resumed.alert.title',\n          defaultMessage: '{appName} connection resumed',\n        },\n        { appName }\n      ),\n      variant: 'default',\n      customIcon: <PlayIcon />,\n    })\n  );\n};\n\nconst addPausedNotification = (typeId, dispatch, intl, appTypes) => {\n  const appName = appTypes.find((type) => type.id === typeId)?.display_name;\n\n  dispatch(\n    addMessage({\n      title: intl.formatMessage(\n        {\n          id: 'detail.applications.paused.alert.title',\n          defaultMessage: '{appName} connection paused',\n        },\n        { appName }\n      ),\n      description: intl.formatMessage(\n        {\n          id: 'detail.applications.paused.alert.description',\n          defaultMessage: 'Your application will not reflect the most recent data until {appName} connection is resumed',\n        },\n        { appName }\n      ),\n      variant: 'default',\n      customIcon: <PauseIcon />,\n    })\n  );\n};\n\nconst addErrorNotification = (dispatch, intl, action, error) => {\n  const title = {\n    create: intl.formatMessage({\n      id: 'detail.applications.add.error',\n      defaultMessage: 'Application create failed',\n    }),\n    pause: intl.formatMessage({\n      id: 'detail.applications.pause.error',\n      defaultMessage: 'Application pause failed',\n    }),\n    resume: intl.formatMessage({\n      id: 'detail.applications.resume.error',\n      defaultMessage: 'Application resume failed',\n    }),\n  }[action];\n\n  dispatch(\n    addMessage({\n      title,\n      description: tryAgainMessage(intl, handleError(error)),\n      variant: 'danger',\n    })\n  );\n};\n\nconst ApplicationsCard = () => {\n  const intl = useIntl();\n  const source = useSource();\n  const { push } = useHistory();\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n  const appTypes = useSelector(({ sources }) => sources.appTypes, shallowEqual);\n  const hasRightAccess = useHasWritePermissions();\n  const dispatch = useDispatch();\n  const [{ selectedApps }, stateDispatch] = useReducer(reducer, initialState);\n\n  const sourceType = sourceTypes.find((type) => type.id === source.source_type_id);\n  const sourceTypeName = sourceType?.name;\n  const filteredAppTypes = appTypes.filter((type) => type.supported_source_types.includes(sourceTypeName)).filter(filterApps);\n\n  let addApp = async (id, isPaused) => {\n    if (!isPaused) {\n      push(replaceRouteId(routes.sourcesDetailAddApp.path, source.id).replace(':app_type_id', id));\n    } else {\n      if (typeof selectedApps[id] !== 'boolean') {\n        stateDispatch({ type: 'addApp', id });\n\n        try {\n          await getSourcesApi().unpauseApplication(isPaused);\n          addResumeNotification(id, dispatch, intl, appTypes);\n          await dispatch(loadEntities());\n        } catch (e) {\n          addErrorNotification(dispatch, intl, 'resume', e);\n        }\n\n        stateDispatch({ type: 'clean', id });\n      }\n    }\n  };\n\n  const removeApp = async (id, typeId) => {\n    if (typeof selectedApps[typeId] !== 'boolean') {\n      stateDispatch({ type: 'removeApp', id: typeId });\n      try {\n        await getSourcesApi().pauseApplication(id);\n        addPausedNotification(typeId, dispatch, intl, appTypes);\n        await dispatch(loadEntities());\n      } catch (e) {\n        addErrorNotification(dispatch, intl, 'pause', e);\n      }\n\n      stateDispatch({ type: 'clean', id: typeId });\n    }\n  };\n\n  if (isSuperKey(source)) {\n    addApp = async (id, isPaused) => {\n      if (typeof selectedApps[id] !== 'boolean') {\n        stateDispatch({ type: 'addApp', id });\n\n        if (isPaused) {\n          try {\n            await getSourcesApi().unpauseApplication(isPaused);\n            addResumeNotification(id, dispatch, intl, appTypes);\n            await dispatch(loadEntities());\n          } catch (e) {\n            addErrorNotification(dispatch, intl, 'resume', e);\n          }\n        } else {\n          try {\n            await doCreateApplication({ source_id: source.id, application_type_id: id });\n            await dispatch(loadEntities());\n          } catch (e) {\n            addErrorNotification(dispatch, intl, 'create', e);\n          }\n        }\n\n        stateDispatch({ type: 'clean', id });\n      }\n    };\n  }\n\n  return (\n    <Card className=\"src-c-card-applications pf-u-p-lg pf-u-pl-sm-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'detail.applications.title',\n          defaultMessage: 'Applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        {!hasRightAccess && (\n          <div className=\"pf-u-mb-md\" id=\"no-permissions-applications\">\n            {disabledMessage(intl)}\n          </div>\n        )}\n        <div className=\"pf-c-form\">\n          {filteredAppTypes.map((app) => {\n            const connectedApp = source.applications.find((connectedApp) => connectedApp.application_type_id === app.id);\n            const description = descriptionMapper(app.name, intl);\n\n            const appExist = Boolean(connectedApp);\n            const isPaused = Boolean(connectedApp?.paused_at);\n\n            const pausedApp = isPaused ? false : appExist;\n\n            const isChecked = typeof selectedApps[app.id] === 'boolean' ? selectedApps[app.id] : pausedApp;\n\n            return (\n              <FormGroup key={app.id}>\n                <div className=\"src-c-application_flex\">\n                  <div>\n                    <Switch\n                      id={`app-switch-${app.id}`}\n                      label={app.display_name}\n                      isChecked={isChecked}\n                      isDisabled={connectedApp?.isDeleting || !hasRightAccess || Boolean(source.paused_at)}\n                      onChange={(value) => (!value ? removeApp(connectedApp.id, app.id) : addApp(app.id, connectedApp?.id))}\n                    />\n                    {Boolean(connectedApp) && (\n                      <ApplicationLabel className=\"pf-u-ml-sm src-m-clickable\" app={connectedApp} showStatusText />\n                    )}\n                    {description && (\n                      <div className=\"pf-c-switch pf-u-mt-sm src-c-application_fake_switch\">\n                        <span className=\"pf-c-switch__toggle src-m-hide-me\" />\n                        <div className=\"pf-c-switch__label src-c-switch__description\">{description}</div>\n                      </div>\n                    )}\n                  </div>\n                  {(isPaused || appExist) && (\n                    <ApplicationKebab\n                      app={connectedApp}\n                      removeApp={() => removeApp(connectedApp.id, app.id)}\n                      addApp={() => addApp(app.id, connectedApp.id)}\n                    />\n                  )}\n                </div>\n              </FormGroup>\n            );\n          })}\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ApplicationsCard;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { EmptyState, EmptyStateIcon, EmptyStateBody, Title } from '@patternfly/react-core';\nimport PlusCircleIcon from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\n\nconst NoApplications = () => {\n  const intl = useIntl();\n\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {intl.formatMessage({\n          id: 'detail.noapplications.title',\n          defaultMessage: 'No connected applications',\n        })}\n      </Title>\n      <EmptyStateBody className=\"src-c-empty-state__body\">\n        {intl.formatMessage({\n          id: 'detail.noapplications.description',\n          defaultMessage: 'You have not connected any applications to this source. Use the switches above to add applications.',\n        })}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nexport default NoApplications;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { EmptyState, EmptyStateIcon, EmptyStateBody, Title } from '@patternfly/react-core';\nimport PrivateIcon from '@patternfly/react-icons/dist/esm/icons/private-icon';\nimport { disabledMessage } from '../../utilities/disabledTooltipProps';\n\nconst NoPermissions = () => {\n  const intl = useIntl();\n\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={PrivateIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {intl.formatMessage({\n          id: 'detail.nopermissions.title',\n          defaultMessage: 'Missing permissions',\n        })}\n      </Title>\n      <EmptyStateBody className=\"src-c-empty-state__body\">{disabledMessage(intl)}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nexport default NoPermissions;\n","import { getSourcesApi, doLoadApplicationsForEdit } from './entities';\n\nexport const doLoadSourceForEdit = (source, appTypes, sourceTypes) =>\n  Promise.all([\n    getSourcesApi().showSource(source.id),\n    getSourcesApi().listSourceEndpoints(source.id),\n    doLoadApplicationsForEdit(source.id, appTypes, sourceTypes),\n  ]).then(async ([sourceData, endpoints, applications]) => {\n    const endpoint = endpoints && endpoints.data && endpoints.data[0];\n\n    const apps = applications?.sources[0]?.applications || [];\n\n    let basicValues = {\n      source: {\n        ...source,\n        ...sourceData,\n      },\n      applications: apps,\n    };\n\n    const promises = [];\n    let appAuths;\n    const addToApp = [];\n    const appAuthenticationIds = [];\n\n    apps.forEach((app) => {\n      app?.authentications?.forEach((auth) => {\n        if (auth?.id) {\n          promises.push(getSourcesApi().showAuthentication(auth.id));\n          addToApp.push(app.id);\n          appAuthenticationIds.push(auth.id);\n        }\n      });\n    });\n\n    if (promises.length > 0) {\n      appAuths = await Promise.all(promises);\n\n      addToApp.forEach((id, index) => {\n        basicValues.applications.find((app) => app.id === id).authentications.push(appAuths[index]);\n      });\n    }\n\n    if (!endpoint) {\n      return basicValues;\n    }\n\n    return getSourcesApi()\n      .listEndpointAuthentications(endpoint.id)\n      .then((authentications) => ({\n        ...basicValues,\n        endpoints: endpoints.data,\n        authentications: authentications.data.filter(({ id }) => !appAuthenticationIds.includes(id)),\n      }));\n  });\n","import React from 'react';\nimport PauseIcon from '@patternfly/react-icons/dist/esm/icons/pause-icon';\nimport { bold } from './intlShared';\n\nexport const pausedAppAlert = (intl, application) => ({\n  title: intl.formatMessage(\n    {\n      id: 'wizard.pausedApplication',\n      defaultMessage: '{application} is paused',\n    },\n    { application }\n  ),\n  description: intl.formatMessage(\n    {\n      id: 'wizard.pausedApplicationDescription',\n      defaultMessage:\n        'To resume data collection for this application, switch {application} on in the <b>Applications</b> section of this page.',\n    },\n    { application, b: bold }\n  ),\n  variant: 'default',\n  customIcon: <PauseIcon />,\n});\n","import get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { endpointToUrl, UNAVAILABLE } from '../../views/formatters';\nimport { pausedAppAlert } from '../../utilities/alerts';\n\nexport const CHECK_ENDPOINT_COMMAND = 'check-endpoint';\n\nexport const selectOnlyEditedValues = (values, editing) => {\n  const filteredValues = {};\n\n  Object.keys(editing)\n    .filter((key) => editing[key])\n    .forEach((key) => {\n      set(filteredValues, key, get(values, key));\n    });\n\n  return filteredValues;\n};\n\nexport const prepareInitialValues = ({ endpoints, authentications, applications, ...rest }, sourceTypeName) => {\n  const auhenticationsFinal = {};\n\n  const mergeAuths = [\n    ...(authentications || []),\n    ...(applications?.reduce((acc, curr) => [...acc, ...curr.authentications], []) || []),\n  ];\n\n  if (mergeAuths.length > 0) {\n    mergeAuths.forEach((auth) => {\n      auhenticationsFinal[`a${auth.id}`] = auth;\n    });\n  }\n\n  let endpoint;\n  let url;\n\n  if (endpoints && endpoints.length > 0) {\n    endpoint = endpoints[0];\n  }\n\n  if (endpoint) {\n    url = endpoint.scheme || endpoint.host || endpoint.path || endpoint.port ? endpointToUrl(endpoint) : undefined;\n  }\n\n  const applicationsFinal = {};\n  if (applications?.length > 0) {\n    applications.forEach((app) => {\n      if (app.extra && Object.keys(app.extra).length > 0) {\n        applicationsFinal[`a${app.id}`] = { extra: app.extra };\n      }\n    });\n  }\n\n  return {\n    source_type: sourceTypeName,\n    endpoint,\n    authentications: auhenticationsFinal,\n    url,\n    ...(Object.keys(applicationsFinal).length && {\n      applications: applicationsFinal,\n    }),\n    ...rest,\n  };\n};\n\nconst addIfUnique = (array, item) => !array.includes(item) && array.push(item);\n\nexport const getEditedApplications = (source, editing) => {\n  const editedApplications = [];\n\n  const editedFields = Object.keys(editing);\n\n  editedFields.forEach((key) => {\n    if (editing[key]) {\n      const editedId = key.match(/.a\\d+/)?.[0]?.replace('.a', '');\n\n      if (key.startsWith('applications')) {\n        addIfUnique(editedApplications, editedId);\n      }\n\n      if (key.startsWith('authentications')) {\n        source.applications.forEach((app) =>\n          app.authentications.forEach(\n            ({ id, resource_type }) =>\n              resource_type &&\n              id === editedId &&\n              addIfUnique(editedApplications, resource_type === 'Application' ? app.id : `${CHECK_ENDPOINT_COMMAND}-${app.id}`)\n          )\n        );\n      }\n\n      if (key.startsWith('url') || key.startsWith('endpoint')) {\n        source.applications.forEach((app) =>\n          app.authentications.forEach(\n            ({ resource_type }) =>\n              resource_type === 'Endpoint' && addIfUnique(editedApplications, `${CHECK_ENDPOINT_COMMAND}-${app.id}`)\n          )\n        );\n      }\n    }\n  });\n\n  return editedApplications.filter(Boolean);\n};\n\nexport const prepareMessages = (source, intl, appTypes) => {\n  const messages = {};\n\n  source.applications.forEach(({ id, application_type_id, availability_status_error, availability_status, paused_at }) => {\n    if (paused_at) {\n      const application = appTypes.find((type) => type.id === application_type_id)?.display_name || id;\n      messages[id] = pausedAppAlert(intl, application);\n    } else if (availability_status === UNAVAILABLE) {\n      messages[id] = {\n        title: intl.formatMessage({\n          id: 'wizard.failEditToastTitleBeforeEdit',\n          defaultMessage: 'This application is unavailable',\n        }),\n        description: availability_status_error,\n        variant: 'danger',\n      };\n    }\n  });\n\n  if (source.endpoints?.[0]?.availability_status_error) {\n    const applicationsUsingEndpoint = source.applications\n      .map((app) =>\n        app.authentications.find(({ resource_type }) => !app.paused_at && resource_type === 'Endpoint') ? app.id : undefined\n      )\n      .filter(Boolean);\n\n    applicationsUsingEndpoint.forEach((id) => {\n      messages[id] = {\n        title: intl.formatMessage({\n          id: 'wizard.failEditToastTitleBeforeEdit',\n          defaultMessage: 'This application is unavailable',\n        }),\n        description: source.endpoints?.[0]?.availability_status_error,\n        variant: 'danger',\n      };\n    });\n  }\n\n  return messages;\n};\n","import { CHECK_ENDPOINT_COMMAND, getEditedApplications, selectOnlyEditedValues } from './helpers';\nimport { loadEntities } from '../../redux/sources/actions';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\nimport { doUpdateSource } from '../../api/doUpdateSource';\nimport { checkAppAvailability } from '../../api/getApplicationStatus';\n\nimport { AVAILABLE, IN_PROGRESS, UNAVAILABLE } from '../../views/formatters';\n\nexport const onSubmit = async (values, editing, dispatch, source, intl, setState) => {\n  setState({ type: 'submit', values, editing });\n\n  const startDate = new Date();\n\n  try {\n    await doUpdateSource(source, selectOnlyEditedValues(values, editing), values);\n  } catch {\n    await dispatch(loadEntities());\n    setState({ type: 'submitFailed' });\n\n    return;\n  }\n\n  checkSourceStatus(source.source.id);\n\n  let messages = {};\n\n  const checkApplications = getEditedApplications(source, editing);\n\n  const promises = [];\n\n  checkApplications.forEach((checkInfo) => {\n    if (checkInfo.includes(CHECK_ENDPOINT_COMMAND)) {\n      promises.push(\n        checkAppAvailability(source.endpoints[0].id, undefined, undefined, 'getEndpoint', startDate).then((data) => ({\n          ...data,\n          id: checkInfo.replace(`${CHECK_ENDPOINT_COMMAND}-`, ''),\n        }))\n      );\n    } else {\n      promises.push(checkAppAvailability(checkInfo, undefined, undefined, undefined, startDate));\n    }\n  });\n\n  let statusResults;\n  if (promises.length > 0) {\n    try {\n      statusResults = await Promise.all(promises);\n    } catch (error) {\n      await dispatch(loadEntities());\n      setState({ type: 'submitFailed' });\n      return;\n    }\n\n    statusResults.forEach(({ availability_status, availability_status_error, id }) => {\n      if (availability_status === AVAILABLE) {\n        messages[id] = {\n          title: intl.formatMessage({\n            id: 'wizard.successEditToastTitle',\n            defaultMessage: 'Application credentials were edited successfully.',\n          }),\n          description: availability_status_error,\n          variant: 'success',\n        };\n      }\n\n      if (availability_status === UNAVAILABLE) {\n        messages[id] = {\n          title: intl.formatMessage({\n            id: 'wizard.failEditToastTitle',\n            defaultMessage: 'Edit application credentials failed.',\n          }),\n          description: availability_status_error,\n          variant: 'danger',\n        };\n      }\n\n      if (!availability_status || availability_status === IN_PROGRESS) {\n        messages[id] = {\n          title: intl.formatMessage({\n            id: 'wizard.timeoutEditToastTitle',\n            defaultMessage: 'Edit in progress',\n          }),\n          description: intl.formatMessage({\n            id: 'wizard.timeoutEditToastDescription',\n            defaultMessage:\n              'We are still working to confirm your updated credentials. Changes will be reflected in this table when complete.',\n          }),\n          variant: 'warning',\n        };\n      }\n    });\n  }\n\n  await dispatch(loadEntities());\n  setState({ type: 'submitFinished', messages });\n};\n","import { applicationsFields } from './application';\n\nexport const parseSourceToSchema = (source, sourceType, appTypes, intl) => ({\n  description: intl.formatMessage({\n    id: 'sources.editFormDescripiton',\n    defaultMessage: 'Use the form fields to edit application credentials.',\n  }),\n  fields: applicationsFields(source.applications, sourceType, appTypes),\n});\n","import { parseSourceToSchema } from './parser/parseSourceToSchema';\nimport { prepareInitialValues } from './helpers';\n\nexport const initialState = {\n  loading: true,\n  source: undefined,\n  initialValues: {},\n  sourceType: undefined,\n  schema: undefined,\n  isSubmitting: false,\n  initialLoad: true,\n  submitError: false,\n  submitMessages: undefined,\n};\n\nconst reducer = (state, { type, source, sourceType, appTypes, intl, values, editing, messages }) => {\n  switch (type) {\n    case 'createForm':\n      return {\n        ...state,\n        sourceType,\n        initialValues: prepareInitialValues(state.source, sourceType.product_name),\n        schema: parseSourceToSchema(state.source, sourceType, appTypes, intl),\n        loading: false,\n      };\n    case 'setSource':\n      return {\n        ...state,\n        messages: {\n          ...messages,\n          ...state.submitMessages,\n        },\n        source,\n        initialLoad: false,\n        submitMessages: undefined,\n      };\n    case 'submit':\n      return {\n        ...state,\n        isSubmitting: true,\n        submitError: false,\n        values,\n        editing,\n      };\n    case 'submitFinished':\n      return {\n        ...state,\n        isSubmitting: false,\n        source,\n        submitMessages: messages,\n      };\n    case 'submitFailed':\n      return {\n        ...state,\n        isSubmitting: false,\n        submitError: true,\n        messages: undefined,\n      };\n    case 'sourceChanged':\n      return {\n        ...state,\n        initialLoad: true,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport LoadingStep from '../steps/LoadingStep';\n\nconst SubmittingModal = () => {\n  const intl = useIntl();\n\n  return (\n    <LoadingStep\n      customText={intl.formatMessage({\n        id: 'sources.editSubmittingTitle',\n        defaultMessage: 'Validating edited source credentials',\n      })}\n    />\n  );\n};\n\nexport default SubmittingModal;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Text } from '@patternfly/react-core';\n\nimport ErroredStep from '../steps/ErroredStep';\n\nconst ErroredModal = ({ onRetry }) => {\n  const intl = useIntl();\n\n  return (\n    <ErroredStep\n      onClose={onRetry}\n      customText={intl.formatMessage({\n        id: 'sources.editErrorDescription',\n        defaultMessage:\n          'There was a problem while trying to edit your source. Please try again. If the error persists, open a support case.',\n      })}\n      secondaryActions={\n        <Text\n          component=\"a\"\n          target=\"_blank\"\n          href=\"https://access.redhat.com/support/cases/#/case/new/open-case?caseCreate=true\"\n          rel=\"noopener noreferrer\"\n        >\n          {intl.formatMessage({\n            id: 'sources.openTicket',\n            defaultMessage: 'Open a support case',\n          })}\n        </Text>\n      }\n      returnButtonTitle={intl.formatMessage({\n        id: 'sources.retryText',\n        defaultMessage: 'Retry',\n      })}\n    />\n  );\n};\n\nErroredModal.propTypes = {\n  onRetry: PropTypes.func.isRequired,\n};\n\nexport default ErroredModal;\n","import React, { useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\n\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\n\nimport SourcesFormRenderer from '../../utilities/SourcesFormRenderer';\nimport { doLoadSourceForEdit } from '../../api/doLoadSourceForEdit';\nimport { onSubmit } from './onSubmit';\n\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport reducer, { initialState } from './reducer';\nimport SubmittingModal from './SubmittingModal';\nimport ErroredModal from './ErroredModal';\nimport { prepareMessages } from './helpers';\n\nconst SourceEditModal = () => {\n  const [state, setState] = useReducer(reducer, initialState);\n  const sourceRedux = useSource();\n  const isLoaded = useIsLoaded();\n\n  const { loading, editing, source, initialValues, schema, isSubmitting, initialLoad, message, messages, submitError, values } =\n    state;\n\n  const intl = useIntl();\n\n  const { sourceTypes, appTypes, sourceTypesLoaded, appTypesLoaded } = useSelector(({ sources }) => sources, shallowEqual);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!initialLoad) {\n      setState({ type: 'sourceChanged' });\n    }\n  }, [sourceRedux, sourceRedux?.applications?.length]);\n\n  useEffect(() => {\n    if (sourceRedux && initialLoad && appTypesLoaded) {\n      doLoadSourceForEdit(sourceRedux, appTypes, sourceTypes).then((source) => {\n        const messages = prepareMessages(source, intl, appTypes);\n\n        setState({ type: 'setSource', source, messages });\n      });\n    }\n  }, [sourceRedux, isLoaded, appTypesLoaded, initialLoad]);\n\n  useEffect(() => {\n    if (source && appTypesLoaded && sourceTypesLoaded) {\n      const sourceType = sourceTypes.find(({ id }) => id === source.source.source_type_id);\n\n      setState({ type: 'createForm', sourceType, source, appTypes, intl });\n    }\n  }, [appTypesLoaded, source, sourceTypesLoaded]);\n\n  const isLoading = !appTypesLoaded || !sourceTypesLoaded || loading;\n\n  if (submitError) {\n    return <ErroredModal onRetry={() => onSubmit(values, editing, dispatch, source, intl, setState)} />;\n  }\n\n  if (isSubmitting) {\n    return <SubmittingModal />;\n  }\n\n  if (isLoading) {\n    return (\n      <Bullseye className=\"pf-u-m-2xl\">\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  const hideFormControls = source.source.paused_at || source.applications.every(({ paused_at }) => paused_at);\n\n  return (\n    <SourcesFormRenderer\n      schema={schema}\n      onSubmit={(values, formApi) => onSubmit(values, formApi.getState().dirtyFields, dispatch, source, intl, setState)}\n      FormTemplate={(props) => (\n        <FormTemplate\n          canReset\n          showFormControls={!hideFormControls}\n          submitLabel=\"Save changes\"\n          disableSubmit={['pristine', 'invalid']}\n          {...props}\n        />\n      )}\n      clearedValue={null}\n      initialValues={{\n        ...initialValues,\n        ...(!sourceRedux.paused_at && { message }),\n        ...(!sourceRedux.paused_at && { messages }),\n      }}\n    />\n  );\n};\n\nexport default SourceEditModal;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Card, CardBody, CardTitle } from '@patternfly/react-core';\n\nimport NoApplications from './NoApplications';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { useSource } from '../../hooks/useSource';\nimport NoPermissions from './NoPermissions';\nimport SourceEditModal from '../SourceEditForm/SourceEditModal';\n\nconst ApplicationResourcesCard = () => {\n  const intl = useIntl();\n  const source = useSource();\n  const hasRightAccess = useHasWritePermissions();\n\n  return (\n    <Card className=\"card pf-u-m-lg pf-u-mt-0\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'detail.resources.title',\n          defaultMessage: 'Manage connected applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        {!hasRightAccess && <NoPermissions />}\n        {hasRightAccess && source.applications.length === 0 && <NoApplications />}\n        {hasRightAccess && source.applications.length > 0 && <SourceEditModal />}\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ApplicationResourcesCard;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\n\nconst Breadcrumbs = () => {\n  const intl = useIntl();\n  const source = useSource();\n\n  return (\n    <Breadcrumb>\n      <BreadcrumbItem component={({ href, ...props }) => <Link to={href} {...props} />} to={routes.sources.path}>\n        {intl.formatMessage({\n          id: 'sources.sources',\n          defaultMessage: 'Sources',\n        })}\n      </BreadcrumbItem>\n      <BreadcrumbItem isActive>{source.name}</BreadcrumbItem>\n    </Breadcrumb>\n  );\n};\n\nexport default Breadcrumbs;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\n\nimport { replaceRouteId, routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { pauseSource, resumeSource } from '../../redux/sources/actions';\nimport disabledTooltipProps from '../../utilities/disabledTooltipProps';\n\nconst SourceKebab = () => {\n  const [isOpen, setOpen] = useState(false);\n  const intl = useIntl();\n  const { push } = useHistory();\n  const source = useSource();\n  const hasRightAccess = useHasWritePermissions();\n  const dispatch = useDispatch();\n\n  const wrappedFunction = (func) => () => {\n    setOpen(false);\n    func();\n  };\n\n  const pausedTooltip = intl.formatMessage({\n    id: 'sources.pausedSourceAction',\n    defaultMessage: 'You cannot perform this action on a paused source.',\n  });\n\n  const disabledProps = disabledTooltipProps(intl);\n\n  const pausedProps = {\n    ...disabledProps,\n    tooltip: pausedTooltip,\n  };\n\n  return (\n    <Dropdown\n      toggle={<KebabToggle onToggle={() => setOpen(!isOpen)} id=\"toggle-id-6\" />}\n      isOpen={isOpen}\n      isPlain\n      position=\"right\"\n      dropdownItems={[\n        source.paused_at ? (\n          <DropdownItem\n            {...(!hasRightAccess && disabledProps)}\n            key=\"unpause\"\n            onClick={wrappedFunction(() => dispatch(resumeSource(source.id, source.name, intl)))}\n            description={intl.formatMessage({\n              id: 'detail.resume.description',\n              defaultMessage: 'Unpause data collection for this source',\n            })}\n          >\n            {intl.formatMessage({\n              id: 'detail.resume.button',\n              defaultMessage: 'Resume',\n            })}\n          </DropdownItem>\n        ) : (\n          <DropdownItem\n            {...(!hasRightAccess && disabledProps)}\n            key=\"pause\"\n            onClick={wrappedFunction(() => dispatch(pauseSource(source.id, source.name, intl)))}\n            description={intl.formatMessage({\n              id: 'detail.pause.description',\n              defaultMessage: 'Temporarily disable data collection',\n            })}\n          >\n            {intl.formatMessage({\n              id: 'detail.pause.button',\n              defaultMessage: 'Pause',\n            })}\n          </DropdownItem>\n        ),\n        <DropdownItem\n          {...(!hasRightAccess && disabledProps)}\n          key=\"remove\"\n          onClick={() => push(replaceRouteId(routes.sourcesDetailRemove.path, source.id))}\n          description={intl.formatMessage({\n            id: 'detail.remove.description',\n            defaultMessage: 'Permanently delete this source and all collected data',\n          })}\n        >\n          {intl.formatMessage({\n            id: 'detail.remove.button',\n            defaultMessage: 'Remove',\n          })}\n        </DropdownItem>,\n        <DropdownItem\n          {...(!hasRightAccess && disabledProps)}\n          {...(source.paused_at && pausedProps)}\n          key=\"rename\"\n          onClick={() => push(replaceRouteId(routes.sourcesDetailRename.path, source.id))}\n        >\n          {intl.formatMessage({\n            id: 'detail.rename.button',\n            defaultMessage: 'Rename',\n          })}\n        </DropdownItem>,\n      ]}\n    />\n  );\n};\n\nexport default SourceKebab;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useSelector } from 'react-redux';\n\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Title, TextContent, Text, Flex, FlexItem } from '@patternfly/react-core';\n\nimport Breadcrumbs from './Breadcrumbs';\nimport { useSource } from '../../hooks/useSource';\nimport { availabilityFormatter } from '../../views/formatters';\nimport SourceKebab from './SourceKebab';\n\nconst DetailHeader = () => {\n  const intl = useIntl();\n  const source = useSource();\n  const appTypes = useSelector(({ sources }) => sources.appTypes, shallowEqual);\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n\n  return (\n    <PageHeader>\n      <Breadcrumbs />\n      <Flex className=\"pf-u-mb-sm\">\n        <FlexItem>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {source.name}\n          </Title>\n        </FlexItem>\n        <FlexItem>{availabilityFormatter(undefined, source, { appTypes, sourceTypes })}</FlexItem>\n        <FlexItem align={{ default: 'alignRight' }}>\n          <SourceKebab />\n        </FlexItem>\n      </Flex>\n      <TextContent>\n        <Text>\n          {intl.formatMessage({\n            id: 'detail.description',\n            defaultMessage: 'View details and manage connections for this source.',\n          })}\n        </Text>\n      </TextContent>\n    </PageHeader>\n  );\n};\n\nexport default DetailHeader;\n","import React, { useEffect, useReducer } from 'react';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport get from 'lodash/get';\n\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nimport { Card, CardBody, CardTitle, Text, Spinner, Bullseye, Tabs, Tab, TabTitleText, Alert } from '@patternfly/react-core';\n\nimport NoApplications from './NoApplications';\nimport { useSource } from '../../hooks/useSource';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { doLoadSourceForEdit } from '../../api/doLoadSourceForEdit';\nimport { authenticationFields } from '../SourceEditForm/parser/authentication';\nimport { prepareInitialValues } from '../SourceEditForm/helpers';\nimport ResourcesEmptyState from './ResourcesEmptyState';\nimport { pausedAppAlert } from '../../utilities/alerts';\n\nconst createColumns = (intl) => [\n  intl.formatMessage({ id: 'resourceTable.resourceType', defaultMessage: 'Resource type' }),\n  intl.formatMessage({ id: 'resourceTable.resourceValue', defaultMessage: 'Value' }),\n];\n\nconst convertFieldsToRows = (fields, initialValues) =>\n  fields\n    .flatMap((x) => x)\n    .map(\n      (field) => !field.hideField && [<React.Fragment key=\"label\">{field.label}</React.Fragment>, get(initialValues, field.name)]\n    )\n    .filter(Boolean);\n\nconst createRows = (source, appTypes, sourceType) => {\n  const applicationsRows = source.applications.reduce((acc, app) => {\n    const appType = appTypes.find(({ id }) => id === app.application_type_id);\n\n    const applicationFieldsSchema = authenticationFields(\n      app.authentications?.filter((auth) => Object.keys(auth).length > 1),\n      sourceType,\n      appType?.name,\n      app.id\n    );\n\n    const initialValues = prepareInitialValues(source, sourceType.product_name);\n    const applicationRows = convertFieldsToRows(applicationFieldsSchema, initialValues);\n\n    return { ...acc, [app.id]: applicationRows };\n  }, {});\n\n  return applicationsRows;\n};\n\nconst initialValues = (source) => ({\n  loading: Boolean(source.applications?.length),\n  columns: [],\n  applicationsRows: {},\n  activeTab: 0,\n});\n\nconst reducer = (state, { type, intl, source, activeTab, appTypes, sourceType }) => {\n  switch (type) {\n    case 'loaded':\n      return {\n        ...state,\n        columns: createColumns(intl),\n        applicationsRows: createRows(source, appTypes, sourceType),\n        loading: false,\n        activeTab: source.applications[0].id,\n      };\n    case 'switchTab':\n      return {\n        ...state,\n        activeTab,\n      };\n    case 'setLoading':\n      return {\n        ...state,\n        loading: true,\n      };\n  }\n};\n\nconst ResourcesTable = () => {\n  const intl = useIntl();\n  const source = useSource();\n  const isLoaded = useIsLoaded();\n\n  const { sourceTypes, appTypes, sourceTypesLoaded, appTypesLoaded } = useSelector(({ sources }) => sources, shallowEqual);\n\n  const [{ activeTab, loading, columns, applicationsRows }, dispatch] = useReducer(reducer, initialValues(source));\n\n  useEffect(() => {\n    if (source && isLoaded && appTypesLoaded && sourceTypesLoaded && source?.applications?.length) {\n      dispatch({ type: 'setLoading' });\n\n      doLoadSourceForEdit(source, appTypes, sourceTypes).then((source) => {\n        const sourceType = sourceTypes.find(({ id }) => id === source.source.source_type_id);\n\n        dispatch({ type: 'loaded', source, intl, sourceType, appTypes });\n      });\n    }\n  }, [source?.applications?.length, isLoaded, appTypesLoaded, sourceTypesLoaded]);\n\n  return (\n    <Card className=\"pf-u-m-lg pf-u-mt-0\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'resourceTable.title',\n          defaultMessage: 'Connected application resources',\n        })}\n      </CardTitle>\n      <CardBody>\n        {loading && (\n          <Bullseye className=\"pf-u-m-2xl\">\n            <Spinner />\n          </Bullseye>\n        )}\n        {!loading && !source.applications.length && <NoApplications />}\n        {!loading && source.applications.length > 0 && (\n          <React.Fragment>\n            <Text className=\"pf-u-mb-md\">\n              {intl.formatMessage({\n                id: 'resourceTable.description',\n                defaultMessage: 'View resources for your connected applications.',\n              })}\n            </Text>\n            <Tabs isBox activeKey={activeTab} onSelect={(_e, activeTab) => dispatch({ type: 'switchTab', activeTab })}>\n              {source.applications.map((app) => {\n                const appName =\n                  appTypes.find(({ id }) => id === app.application_type_id)?.display_name || app.application_type_id;\n\n                const { description, ...alertProps } = app.paused_at ? pausedAppAlert(intl, appName) : {};\n\n                return (\n                  <Tab eventKey={app.id} key={app.id} title={<TabTitleText>{appName}</TabTitleText>}>\n                    {app.paused_at && !source.paused_at && (\n                      <Alert isInline className=\"pf-u-mt-lg\" {...alertProps}>\n                        {description}\n                      </Alert>\n                    )}\n                    {applicationsRows[app.id]?.length ? (\n                      <Table\n                        aria-label={intl.formatMessage({\n                          id: 'resourceTable.title',\n                          defaultMessage: 'Connected application resources',\n                        })}\n                        variant=\"compact\"\n                        cells={columns}\n                        rows={applicationsRows[app.id]}\n                        className=\"pf-u-mt-md\"\n                      >\n                        <TableHeader />\n                        <TableBody />\n                      </Table>\n                    ) : (\n                      <ResourcesEmptyState applicationName={appName} />\n                    )}\n                  </Tab>\n                );\n              })}\n            </Tabs>\n          </React.Fragment>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ResourcesTable;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { useSource } from '../../hooks/useSource';\n\nimport { Alert, AlertActionLink, GridItem, Tooltip } from '@patternfly/react-core';\nimport PauseIcon from '@patternfly/react-icons/dist/esm/icons/pause-icon';\n\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { resumeSource } from '../../redux/sources/actions';\nimport { disabledMessage } from '../../utilities/disabledTooltipProps';\n\nconst PauseAlert = () => {\n  const intl = useIntl();\n  const writePermissions = useHasWritePermissions();\n  const dispatch = useDispatch();\n  const source = useSource();\n\n  return (\n    <GridItem md={12} className=\"pf-u-m-lg pf-u-mb-0\">\n      <Alert\n        customIcon={<PauseIcon />}\n        variant=\"default\"\n        isInline\n        title={intl.formatMessage({\n          id: 'source.detail.pausedTitle',\n          defaultMessage: 'Source paused',\n        })}\n        actionLinks={\n          writePermissions ? (\n            <AlertActionLink onClick={() => dispatch(resumeSource(source.id, source.name, intl))}>\n              {intl.formatMessage({\n                id: 'source.detail.resumeConnection',\n                defaultMessage: 'Resume connection',\n              })}\n            </AlertActionLink>\n          ) : (\n            <Tooltip content={disabledMessage(intl)}>\n              <AlertActionLink isDisabled>\n                {intl.formatMessage({\n                  id: 'source.detail.resumeConnection',\n                  defaultMessage: 'Resume connection',\n                })}\n              </AlertActionLink>\n            </Tooltip>\n          )\n        }\n      >\n        {intl.formatMessage({\n          id: 'source.detail.pausedDescription',\n          defaultMessage:\n            'No data is being collected for this source. Turn the source back on to reestablish connection and data collection. Previous credentials will be restored and application connections will continue as seen on this page.',\n        })}\n      </Alert>\n    </GridItem>\n  );\n};\n\nexport default PauseAlert;\n","import React, { lazy, Suspense } from 'react';\n\nimport { Grid, GridItem } from '@patternfly/react-core';\n\nimport SourceSummaryCard from '../components/SourceDetail/SourceSummaryCard';\nimport ApplicationsCard from '../components/SourceDetail/ApplicationsCard';\nimport ApplicationResourcesCard from '../components/SourceDetail/ApplicationResourcesCard';\nimport RedirectNoId from '../components/RedirectNoId/RedirectNoId';\nimport { useSource } from '../hooks/useSource';\nimport { DetailLoader } from '../components/SourcesTable/loaders';\nimport CustomRoute from '../components/CustomRoute/CustomRoute';\nimport { replaceRouteId, routes } from '../Routes';\nimport DetailHeader from '../components/SourceDetail/DetailHeader';\nimport isSuperKey from '../utilities/isSuperKey';\nimport ResourcesTable from '../components/SourceDetail/ResourcesTable';\nimport PauseAlert from '../components/SourceDetail/PauseAlert';\n\nconst SourceRemoveModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"removeSource\" */\n    '../components/SourceRemoveModal/SourceRemoveModal'\n  )\n);\n\nconst AddApplication = lazy(() =>\n  import(\n    /* webpackChunkName: \"addApplication\" */\n    '../components/AddApplication/AddApplication'\n  )\n);\n\nconst RemoveAppModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"removeApplication\" */\n    '../components/AddApplication/RemoveAppModal'\n  )\n);\n\nconst SourceRenameModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"renameSource\" */\n    '../components/SourceDetail/SourceRenameModal'\n  )\n);\n\nconst EditCredentials = lazy(() =>\n  import(\n    /* webpackChunkName: \"credentialsForm\" */\n    '../components/CredentialsForm/CredentialsForm'\n  )\n);\n\nconst Detail = () => {\n  const source = useSource();\n\n  if (!source) {\n    return (\n      <React.Fragment>\n        <DetailLoader />\n        <RedirectNoId />\n      </React.Fragment>\n    );\n  }\n\n  const superKey = isSuperKey(source);\n\n  return (\n    <div className=\"src-c-detail-page\">\n      <Suspense fallback={null}>\n        <CustomRoute\n          exact\n          route={routes.sourcesDetailRemove}\n          Component={SourceRemoveModal}\n          componentProps={{ backPath: replaceRouteId(routes.sourcesDetail.path, source.id) }}\n        />\n        <CustomRoute exact route={routes.sourcesDetailAddApp} Component={AddApplication} />\n        <CustomRoute exact route={routes.sourcesDetailRemoveApp} Component={RemoveAppModal} />\n        <CustomRoute exact route={routes.sourcesDetailRename} Component={SourceRenameModal} />\n        <CustomRoute exact route={routes.sourcesDetailEditCredentials} Component={EditCredentials} />\n      </Suspense>\n      <DetailHeader />\n      {source.paused_at && <PauseAlert />}\n      <Grid>\n        <GridItem md=\"6\">\n          <SourceSummaryCard />\n        </GridItem>\n        <GridItem md=\"6\">\n          <ApplicationsCard />\n        </GridItem>\n        <GridItem md=\"12\">{superKey ? <ResourcesTable /> : <ApplicationResourcesCard />}</GridItem>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Detail;\n"],"names":["urlOrHost","formData","url","scheme","host","port","path","u","URL","protocol","replace","hostname","defaultPort","pathname","error","parseUrl","endpoint","doUpdateSource","source","values","promises","push","getSourcesApi","updateSource","id","endPointPort","parseInt","endpointData","isNaN","undefined","updateEndpoint","endpoints","authentications","Object","keys","forEach","key","idWithoutPrefix","updateAuthentication","applications","updateApplication","extra","Promise","all","useSource","intl","useIntl","dispatch","useDispatch","useState","loading","setLoading","Button","variant","formatMessage","defaultMessage","onClick","checkSourceStatus","addMessage","title","description","isDisabled","Spinner","size","DescriptionListItem","term","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","propTypes","PropTypes","awsAccountNumber","sourceTypes","useSelector","sources","shallowEqual","type","find","source_type_id","name","arnType","authtype","includes","username","match","Card","className","CardTitle","CardBody","DescriptionList","columnModifier","default","sourceTypeFormatter","last_checked_at","last_available_at","dateFormatter","created_at","updated_at","app_creation_workflow","configurationModeFormatter","sourceType","ApplicationKebab","app","removeApp","addApp","isOpen","setOpen","useHistory","hasRightAccess","useHasWritePermissions","wrappedFunction","func","disabledProps","disabledTooltipProps","pausedTooltip","pausedProps","tooltip","pausedButton","paused_at","DropdownItem","removedButton","replaceRouteId","routes","Dropdown","isPlain","position","dropdownItems","toggle","KebabToggle","onToggle","open","isRequired","initialState","selectedApps","reducer","state","addResumeNotification","typeId","appTypes","appName","display_name","customIcon","addPausedNotification","addErrorNotification","action","create","pause","resume","tryAgainMessage","handleError","useReducer","stateDispatch","sourceTypeName","filteredAppTypes","filter","supported_source_types","filterApps","isPaused","unpauseApplication","loadEntities","pauseApplication","isSuperKey","doCreateApplication","source_id","application_type_id","disabledMessage","map","connectedApp","APP_NAMES","descriptionMapper","appExist","Boolean","pausedApp","isChecked","FormGroup","Switch","label","isDeleting","onChange","value","showStatusText","EmptyState","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","EmptyStateBody","PrivateIcon","doLoadSourceForEdit","showSource","listSourceEndpoints","doLoadApplicationsForEdit","then","sourceData","data","apps","basicValues","addToApp","appAuthenticationIds","auth","showAuthentication","length","appAuths","index","listEndpointAuthentications","pausedAppAlert","application","b","bold","CHECK_ENDPOINT_COMMAND","selectOnlyEditedValues","editing","filteredValues","set","get","prepareInitialValues","rest","auhenticationsFinal","mergeAuths","reduce","acc","curr","endpointToUrl","applicationsFinal","source_type","addIfUnique","array","item","getEditedApplications","editedApplications","editedId","startsWith","resource_type","onSubmit","setState","startDate","Date","messages","checkApplications","checkInfo","checkAppAvailability","statusResults","availability_status","availability_status_error","AVAILABLE","UNAVAILABLE","IN_PROGRESS","parseSourceToSchema","fields","applicationsFields","initialValues","schema","isSubmitting","initialLoad","submitError","submitMessages","product_name","LoadingStep","customText","ErroredModal","onRetry","ErroredStep","onClose","secondaryActions","Text","component","target","href","rel","returnButtonTitle","sourceRedux","isLoaded","useIsLoaded","message","sourceTypesLoaded","appTypesLoaded","useEffect","prepareMessages","isLoading","Bullseye","hideFormControls","every","SourcesFormRenderer","formApi","getState","dirtyFields","FormTemplate","props","canReset","showFormControls","submitLabel","disableSubmit","clearedValue","Breadcrumb","BreadcrumbItem","Link","to","isActive","resumeSource","pauseSource","PageHeader","Flex","FlexItem","availabilityFormatter","align","TextContent","createColumns","createRows","appType","applicationRows","authenticationFields","flatMap","x","field","hideField","activeTab","columns","applicationsRows","Tabs","isBox","activeKey","onSelect","_e","alertProps","Tab","eventKey","TabTitleText","Alert","isInline","Table","cells","rows","TableHeader","TableBody","ResourcesEmptyState","applicationName","writePermissions","GridItem","md","actionLinks","AlertActionLink","Tooltip","content","SourceRemoveModal","lazy","AddApplication","RemoveAppModal","SourceRenameModal","EditCredentials","RedirectNoId","superKey","Suspense","fallback","CustomRoute","exact","route","Component","componentProps","backPath","Grid"],"sourceRoot":""}