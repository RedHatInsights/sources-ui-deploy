{"version":3,"sources":["webpack:///./src/components/SourcesTable/EmptyStateTable.js","webpack:///./src/hooks/useIsOrgAdmin.js","webpack:///./src/components/SourcesTable/SourcesTable.js","webpack:///./src/components/SourcesEmptyState.js","webpack:///./src/components/SourcesErrorState.js","webpack:///./src/pages/Sources/helpers.js","webpack:///./src/components/RedirectNotAdmin/RedirectNotAdmin.js","webpack:///./src/components/RedirectNoId/RedirectNoId.js","webpack:///./src/components/CustomRoute/CustomRoute.js","webpack:///./src/pages/Sources.js","webpack:///./src/hooks/useSource.js","webpack:///./src/components/SourcesTable/formatters.js","webpack:///./src/hooks/useIsLoaded.js","webpack:///./src/api/checkSourceStatus.js"],"names":["EmptyStateTable","intl","useIntl","dispatch","useDispatch","Bullseye","EmptyState","variant","EmptyStateVariant","small","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","formatMessage","id","defaultMessage","EmptyStateBody","Button","onClick","clearFilters","useIsOrgAdmin","useSelector","user","isOrgAdmin","itemToCells","item","columns","sourceTypes","appTypes","filter","column","title","hidden","map","col","formatter","formatters","value","renderSources","entities","reduce","acc","isOpen","expanded","cells","disableActions","isDeleting","prepareColumnsCells","sortable","transforms","wrappable","reducer","state","payload","actionResolver","push","rowData","disabledProps","tooltip","isDisabled","className","actions","_ev","_i","replaceRouteId","routes","sourceManageApps","path","component","sourcesRemove","imported","splice","sourcesEdit","insertEditAction","SourcesTable","useHistory","loaded","useIsLoaded","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","sortBy","sortDirection","numberOfEntities","reduxDispatch","notSortable","useReducer","sourcesColumns","rows","isLoaded","refreshSources","useEffect","refreshColumns","shownRows","heightAuto","props","colSpan","COLUMN_COUNT","Table","gridBreakPoint","aria-label","onSort","_event","key","direction","sortEntities","index","cell","indexOf","undefined","rowWrapper","RowWrapperLoader","SourcesEmptyState","WrenchIcon","Fragment","to","sourcesNew","SourcesErrorState","ExclamationCircleIcon","color","a","chunks","Text","href","target","rel","window","location","debouncedFiltering","awesomeDebounce","refresh","afterSuccessLoadParameters","pageNumber","prepareSourceTypeSelection","label","product_name","sort","b","localeCompare","prepareApplicationTypeSelection","display_name","setFilter","filterSources","prepareChips","filterValue","Object","keys","length","name","source_type_id","category","chips","sourceType","find","type","applications","appType","chipsFormatters","Boolean","loadedTypes","types","RedirectNotAdmin","description","addMessage","RedirectNoId","useParams","useState","applicationIsLoaded","setIsApplicationLoaded","doLoadSource","then","source","addHiddenSource","CustomRouteInternal","route","children","redirectNoId","useSource","writeAccess","propTypes","PropTypes","shape","string","isRequired","bool","node","CustomRoute","componentProps","Component","any","oneOfType","func","object","SourceEditModal","lazy","SourceRemoveModal","AddApplication","AddSourceWizard","module","default","SourcesPage","showEmptyState","setShowEmptyState","checkEmptyState","setCheckEmptyState","setFilterValue","loadingError","setLoadingError","history","useLocation","pageSize","fetchingError","paginationClicked","Promise","all","loadSourceTypes","loadAppTypes","loadEntities","parseQuery","error","hasSomeFilter","entries","updateQuery","onSetPage","_e","page","pageAndSize","maximumPageNumber","Math","ceil","max","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","isErrored","fallback","exact","applicationTypes","onClose","afterSuccess","checkSourceStatus","hideSourcesButton","PageHeader","Section","PrimaryToolbar","pagination","actionsConfig","Tooltip","content","tabIndex","filterConfig","items","filterValues","onChange","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips","defaultPort","scheme","http","https","endpointToUrl","endpoint","onlyTrueEndpointValues","host","port","url","schema","String","schemaToPort","applicationFormatter","apps","_item","filteredApplications","app","application","application_type_id","sourceTypeFormatter","dateFormatter","str","style","marginBottom","TextVariants","p","date","nameFormatter","sourceIsOpenShift","endpoints","formatURL","importedFormatter","text","cfme","toLowerCase","importsTexts","isRead","UNAVAILABLE","getStatusColor","status","UnknownError","formatAvailibilityErrors","errors","values","authentications","count","getStatusTooltipText","availabilityFormatter","_status","meta","availability_status","availability_status_error","statusesCount","errorsCount","auth","authtype","getAllErrors","bodyContent","getStatusText","defaultFormatter","getSourcesApi","checkAvailabilitySource"],"mappings":"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","file":"js/sourcePage.ec2935a9629ad7c41979.js","sourcesContent":["import React from 'react';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.small}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundTitle',\n            defaultMessage: 'No sources found',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundDescription',\n            defaultMessage: 'No sources match the filter criteria. Remove all filters or clear all filters to show sources.',\n          })}\n        </EmptyStateBody>\n        <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n          {intl.formatMessage({\n            id: 'sources.clearAllFilters',\n            defaultMessage: 'Clear all filters',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default EmptyStateTable;\n","import { useSelector } from 'react-redux';\n\nexport const useIsOrgAdmin = () => {\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n  return isOrgAdmin;\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, sortable, wrappable } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\n\nimport { sortEntities } from '../../redux/sources/actions';\nimport { formatters } from './formatters';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { sourcesColumns, COLUMN_COUNT } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useIsOrgAdmin } from '../../hooks/useIsOrgAdmin';\nimport { replaceRouteId, routes } from '../../Routes';\n\nconst itemToCells = (item, columns, sourceTypes, appTypes) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((col) => ({\n      title: col.formatter\n        ? formatters(col.formatter)(item[col.value], item, {\n            sourceTypes,\n            appTypes,\n          })\n        : item[col.value] || '',\n    }));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes) =>\n  entities\n    .filter(({ hidden }) => !hidden)\n    .reduce(\n      (acc, item) => [\n        ...acc,\n        {\n          ...item,\n          isOpen: !!item.expanded,\n          cells: itemToCells(item, columns, sourceTypes, appTypes),\n          disableActions: !!item.isDeleting,\n        },\n      ],\n      []\n    );\n\nexport const prepareColumnsCells = (columns) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((column) => ({\n      title: column.title || '',\n      value: column.value,\n      hidden: column.hidden,\n      ...(column.sortable && { transforms: [sortable, wrappable] }),\n    }));\n\nconst reducer = (state, payload) => ({ ...state, ...payload });\n\nconst initialState = (columns) => ({\n  rows: [],\n  sortBy: {},\n  isLoaded: false,\n  cells: prepareColumnsCells(columns),\n});\n\nexport const insertEditAction = (actions, intl, push, isOrgAdmin, disabledProps) =>\n  actions.splice(1, 0, {\n    title: intl.formatMessage({\n      id: 'sources.edit',\n      defaultMessage: 'Edit',\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesEdit.path, id)),\n    ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n  });\n\nexport const actionResolver = (intl, push, isOrgAdmin) => (rowData) => {\n  const tooltip = intl.formatMessage({\n    id: 'sources.notAdminButton',\n    defaultMessage: 'You must be an Organization Administrator to perform this action.',\n  });\n\n  const disabledProps = {\n    tooltip,\n    isDisabled: true,\n    className: 'ins-c-sources__disabled-drodpown-item',\n  };\n\n  const actions = [\n    {\n      title: intl.formatMessage({\n        id: 'sources.manageApps',\n        defaultMessage: 'Manage applications',\n      }),\n      onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourceManageApps.path, id)),\n      ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n    },\n    {\n      title: intl.formatMessage({\n        id: 'sources.remove',\n        defaultMessage: 'Remove',\n      }),\n      onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesRemove.path, id)),\n      ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n    },\n  ];\n\n  const isSourceEditable = !rowData.imported;\n\n  if (isSourceEditable) {\n    insertEditAction(actions, intl, push, isOrgAdmin, disabledProps);\n  }\n\n  return actions;\n};\n\nconst SourcesTable = () => {\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const loaded = useIsLoaded();\n  const isOrgAdmin = useIsOrgAdmin();\n\n  const {\n    appTypes,\n    entities,\n    sourceTypes,\n    sourceTypesLoaded,\n    appTypesLoaded,\n    sortBy,\n    sortDirection,\n    numberOfEntities,\n  } = useSelector(({ sources }) => sources, shallowEqual);\n  const reduxDispatch = useDispatch();\n\n  const notSortable = numberOfEntities === 0 || !loaded;\n\n  const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n  const refreshColumns = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  const refreshSources = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      rows: renderSources(entities, columns, sourceTypes, appTypes),\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  useEffect(() => {\n    if (loaded && sourceTypesLoaded && appTypesLoaded) {\n      dispatch({ isLoaded: true });\n      refreshSources();\n    } else {\n      dispatch({ isLoaded: false });\n      refreshColumns();\n    }\n  }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n  useEffect(() => {\n    if (state.isLoaded) {\n      refreshSources();\n    }\n  }, [entities]);\n\n  let shownRows = state.rows;\n  if (numberOfEntities === 0 && state.isLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: COLUMN_COUNT },\n            title: <EmptyStateTable />,\n          },\n        ],\n      },\n    ];\n  } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: {\n              colSpan: COLUMN_COUNT,\n              className: 'sources-placeholder-row',\n            },\n            title: <PlaceHolderTable />,\n          },\n        ],\n      },\n    ];\n  }\n\n  return (\n    <Table\n      gridBreakPoint=\"grid-lg\"\n      aria-label={intl.formatMessage({\n        id: 'sources.list',\n        defaultMessage: 'List of Sources',\n      })}\n      onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n      sortBy={{\n        index: state.cells.map((cell) => (cell.hidden ? 'hidden' : cell.value)).indexOf(sortBy),\n        direction: sortDirection,\n      }}\n      rows={shownRows}\n      cells={state.cells}\n      actionResolver={loaded && numberOfEntities > 0 ? actionResolver(intl, push, isOrgAdmin) : undefined}\n      rowWrapper={RowWrapperLoader}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default SourcesTable;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\n\nimport { Link } from 'react-router-dom';\nimport { routes } from '../Routes';\nimport { useIsOrgAdmin } from '../hooks/useIsOrgAdmin';\n\nconst SourcesEmptyState = () => {\n  const isOrgAdmin = useIsOrgAdmin();\n  const intl = useIntl();\n\n  return (\n    <Bullseye>\n      <EmptyState className=\"ins-c-sources__empty-state\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.emptyStateTitle',\n            defaultMessage: 'No sources',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {isOrgAdmin &&\n            intl.formatMessage({\n              id: 'sources.emptyStateBody',\n              defaultMessage: 'No sources have been defined. To start define a source.',\n            })}\n          {!isOrgAdmin && (\n            <React.Fragment>\n              <br />\n              {intl.formatMessage({\n                id: 'sources.emptyStateBodyNotAdmin',\n                defaultMessage: 'You must be an Organization Administrator to add a source.',\n              })}\n            </React.Fragment>\n          )}\n        </EmptyStateBody>\n        {isOrgAdmin ? (\n          <Link to={routes.sourcesNew.path}>\n            <Button className=\"pf-u-mt-xl\" variant=\"primary\">\n              {intl.formatMessage({\n                id: 'sources.emptyStateButton',\n                defaultMessage: 'Add source',\n              })}\n            </Button>\n          </Link>\n        ) : (\n          <Button variant=\"primary\" isDisabled>\n            {intl.formatMessage({\n              id: 'sources.emptyStateButton',\n              defaultMessage: 'Add source',\n            })}\n          </Button>\n        )}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default SourcesEmptyState;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\n\nconst SourcesErrorState = () => {\n  const intl = useIntl();\n\n  return (\n    <Bullseye>\n      <EmptyState className=\"ins-c-sources__empty-state\">\n        <EmptyStateIcon icon={ExclamationCircleIcon} color=\"var(--pf-global--danger-color--100)\" />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.errorStateTitle',\n            defaultMessage: 'Something went wrong',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage(\n            {\n              id: 'sources.errorStateBody',\n              defaultMessage:\n                'There was a problem processing the request. Try refreshing the page. If the problem persists, contact <a>Red Hat support.</a>',\n            },\n            {\n              // eslint-disable-next-line react/display-name\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href=\"https://access.redhat.com/support\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            }\n          )}\n        </EmptyStateBody>\n        <Button className=\"pf-u-mt-xl\" variant=\"primary\" component=\"a\" href={window.location.href}>\n          {intl.formatMessage({\n            id: 'sources.retry',\n            defaultMessage: 'Retry',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default SourcesErrorState;\n","import awesomeDebounce from 'awesome-debounce-promise';\nimport { loadEntities, filterSources } from '../../redux/sources/actions';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = {\n  pageNumber: 1,\n  sortBy: 'created_at',\n  sortDirection: 'desc',\n};\n\nexport const afterSuccess = (dispatch, source) => {\n  source?.id && checkSourceStatus(source.id);\n  dispatch(loadEntities(afterSuccessLoadParameters));\n};\n\nexport const prepareSourceTypeSelection = (sourceTypes) =>\n  sourceTypes.map(({ id, product_name }) => ({ label: product_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const prepareApplicationTypeSelection = (appTypes) =>\n  appTypes.map(({ id, display_name }) => ({ label: display_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) =>\n  dispatch(\n    filterSources({\n      [column]: value,\n    })\n  );\n\nexport const chipsFormatters = (key, filterValue, sourceTypes, appTypes) =>\n  ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n      category: 'Source Type',\n      key,\n      chips: filterValue[key].map((id) => {\n        const sourceType = sourceTypes.find((type) => type.id === id);\n\n        return { name: sourceType ? sourceType.product_name : id, value: id };\n      }),\n    }),\n    applications: () => ({\n      category: 'Application',\n      key,\n      chips: filterValue[key].map((id) => {\n        const appType = appTypes.find((type) => type.id === id);\n\n        return { name: appType ? appType.display_name : id, value: id };\n      }),\n    }),\n  }[key] || (() => ({ name: key })));\n\nexport const prepareChips = (filterValue, sourceTypes, appTypes) =>\n  Object.keys(filterValue)\n    .map((key) =>\n      filterValue[key] && filterValue[key].length > 0 ? chipsFormatters(key, filterValue, sourceTypes, appTypes)() : undefined\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n  if (deleteAll) {\n    return Object.keys(filterValue).reduce(\n      (acc, curr) => ({\n        ...acc,\n        [curr]: undefined,\n      }),\n      {}\n    );\n  }\n\n  const chip = chips[0];\n\n  return {\n    ...filterValue,\n    [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined,\n  };\n};\n\nexport const loadedTypes = (types, loaded) => (loaded && types.length > 0 ? types : undefined);\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage } from '../../redux/sources/actions';\nimport { useIsOrgAdmin } from '../../hooks/useIsOrgAdmin';\nimport { routes } from '../../Routes';\n\nconst RedirectNotAdmin = () => {\n  const intl = useIntl();\n\n  const isOrgAdmin = useIsOrgAdmin();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isOrgAdmin === false) {\n      const title = intl.formatMessage({\n        id: 'sources.insufficietnPerms',\n        defaultMessage: 'Insufficient permissions',\n      });\n      const description = intl.formatMessage({\n        id: 'sources.notAdminButton',\n        defaultMessage: 'You must be an Organization Administrator to perform this action.',\n      });\n\n      dispatch(addMessage(title, 'danger', description));\n    }\n  }, []);\n\n  if (isOrgAdmin === false) {\n    return <Redirect to={routes.sources.path} />;\n  }\n\n  return null;\n};\n\nexport default RedirectNotAdmin;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useParams, Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage, addHiddenSource } from '../../redux/sources/actions';\nimport { doLoadSource } from '../../api/entities';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { routes } from '../../Routes';\n\nconst RedirectNoId = () => {\n  const { id } = useParams();\n  const intl = useIntl();\n\n  const loaded = useIsLoaded();\n\n  const { appTypesLoaded, sourceTypesLoaded } = useSelector(({ sources }) => sources, shallowEqual);\n  const dispatch = useDispatch();\n\n  const [applicationIsLoaded, setIsApplicationLoaded] = useState(false);\n\n  useEffect(() => {\n    if (loaded && appTypesLoaded && sourceTypesLoaded) {\n      doLoadSource(id)\n        .then(({ sources: [source] }) => dispatch(addHiddenSource(source)))\n        .then(() => {\n          dispatch(\n            addMessage(\n              intl.formatMessage({\n                id: 'sources.sourceNotFoundTitle',\n                defaultMessage: 'Requested source was not found',\n              }),\n              'danger',\n              intl.formatMessage(\n                {\n                  id: 'sources.sourceNotFoundTitleDescription',\n                  defaultMessage: 'Source with { id } was not found. Try it again later.',\n                },\n                { id }\n              )\n            )\n          );\n          setIsApplicationLoaded(true);\n        });\n    }\n  }, [loaded, appTypesLoaded, sourceTypesLoaded]);\n\n  if (applicationIsLoaded) {\n    return <Redirect to={routes.sources.path} />;\n  }\n\n  return null;\n};\n\nexport default RedirectNoId;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport RedirectNotAdmin from '../RedirectNotAdmin/RedirectNotAdmin';\nimport { useSource } from '../../hooks/useSource';\nimport RedirectNoId from '../RedirectNoId/RedirectNoId';\n\nconst CustomRouteInternal = ({ route, children }) => {\n  const source = route.redirectNoId && useSource();\n\n  if (!source && route.redirectNoId) {\n    return <RedirectNoId />;\n  }\n\n  return (\n    <React.Fragment>\n      {route.writeAccess && <RedirectNotAdmin />}\n      {children}\n    </React.Fragment>\n  );\n};\n\nCustomRouteInternal.propTypes = {\n  route: PropTypes.shape({\n    path: PropTypes.string.isRequired,\n    redirectNoId: PropTypes.bool,\n    writeAccess: PropTypes.bool,\n  }).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst CustomRoute = ({ route, componentProps, Component, ...props }) => (\n  <Route {...props} path={route.path}>\n    <CustomRouteInternal route={route}>\n      <Component {...componentProps} />\n    </CustomRouteInternal>\n  </Route>\n);\n\nCustomRoute.propTypes = {\n  route: PropTypes.shape({\n    path: PropTypes.string.isRequired,\n    redirectNoId: PropTypes.bool,\n    writeAccess: PropTypes.bool,\n  }).isRequired,\n  componentProps: PropTypes.any,\n  Component: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n};\n\nexport default CustomRoute;\n","import React, { useEffect, useState, lazy, Suspense } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { useIntl } from 'react-intl';\n\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/components/cjs/PageHeader';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\n\nimport { loadAppTypes, loadEntities, loadSourceTypes, filterSources, pageAndSize } from '../redux/sources/actions';\nimport SourcesTable from '../components/SourcesTable/SourcesTable';\nimport SourcesEmptyState from '../components/SourcesEmptyState';\nimport SourcesErrorState from '../components/SourcesErrorState';\nimport { routes } from '../Routes';\n\nconst SourceEditModal = lazy(() => import(/* webpackChunkName: \"edit\" */ '../components/SourceEditForm/SourceEditModal'));\nconst SourceRemoveModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"remove\" */\n    '../components/SourceRemoveModal/SourceRemoveModal'\n  )\n);\nconst AddApplication = lazy(() => import(/* webpackChunkName: \"addApp\" */ '../components/AddApplication/AddApplication'));\nconst AddSourceWizard = lazy(() =>\n  import(\n    /* webpackChunkName: \"addSource\" */ '@redhat-cloud-services/frontend-components-sources/cjs/addSourceWizard'\n  ).then((module) => ({ default: module.AddSourceWizard }))\n);\n\nimport {\n  prepareChips,\n  removeChips,\n  setFilter,\n  debouncedFiltering,\n  prepareSourceTypeSelection,\n  afterSuccess,\n  loadedTypes,\n  prepareApplicationTypeSelection,\n} from './Sources/helpers';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport { useIsOrgAdmin } from '../hooks/useIsOrgAdmin';\nimport CustomRoute from '../components/CustomRoute/CustomRoute';\nimport { updateQuery, parseQuery } from '../utilities/urlQuery';\nimport { Tooltip } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { PaginationLoader } from '../components/SourcesTable/loaders';\n\nconst SourcesPage = () => {\n  const [showEmptyState, setShowEmptyState] = useState(false);\n  const [checkEmptyState, setCheckEmptyState] = useState(false);\n  const [filter, setFilterValue] = useState();\n  const [loadingError, setLoadingError] = useState();\n\n  const loaded = useIsLoaded();\n  const isOrgAdmin = useIsOrgAdmin();\n\n  const history = useHistory();\n  const location = useLocation();\n  const intl = useIntl();\n\n  const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n  const {\n    filterValue,\n    numberOfEntities,\n    appTypes,\n    pageSize,\n    pageNumber,\n    fetchingError,\n    sourceTypes,\n    paginationClicked,\n    appTypesLoaded,\n    sourceTypesLoaded,\n  } = sources;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    Promise.all([dispatch(loadSourceTypes()), dispatch(loadAppTypes()), dispatch(loadEntities(parseQuery()))])\n      .then(() => setCheckEmptyState(true))\n      .catch((error) => setLoadingError(error));\n  }, []);\n\n  const hasSomeFilter =\n    Object.entries(filterValue)\n      .map(([_key, value]) => value)\n      .filter(Boolean).length > 0;\n\n  useEffect(() => {\n    if (checkEmptyState) {\n      setShowEmptyState(loaded && numberOfEntities === 0 && !hasSomeFilter);\n      updateQuery(sources);\n    }\n  }, [location, checkEmptyState]);\n\n  useEffect(() => {\n    if (filter !== filterValue.name) {\n      setFilterValue(filterValue.name);\n    }\n  }, [filterValue.name]);\n\n  useEffect(() => {\n    if (checkEmptyState && loaded) {\n      setShowEmptyState(numberOfEntities === 0 && !hasSomeFilter);\n    }\n  }, [loaded]);\n\n  const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n  const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n  const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n  useEffect(() => {\n    if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n      onSetPage({}, maximumPageNumber);\n    }\n  });\n\n  const paginationConfig = {\n    itemCount: numberOfEntities,\n    page: pageNumber,\n    perPage: pageSize,\n    onSetPage,\n    onPerPageSelect,\n    className: 'top-pagination',\n  };\n\n  const paginationConfigBottom = {\n    ...paginationConfig,\n    dropDirection: 'up',\n    variant: 'bottom',\n    isCompact: false,\n    className: 'bottom-pagination',\n  };\n\n  const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n  const mainContent = () => (\n    <React.Fragment>\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n        actionsConfig={\n          isOrgAdmin\n            ? {\n                actions: [\n                  <Link to={routes.sourcesNew.path} key=\"addSourceButton\">\n                    <Button variant=\"primary\" id=\"addSourceButton\">\n                      {intl.formatMessage({\n                        id: 'sources.addSource',\n                        defaultMessage: 'Add source',\n                      })}\n                    </Button>\n                  </Link>,\n                ],\n              }\n            : {\n                actions: [\n                  <Tooltip\n                    content={intl.formatMessage({\n                      id: 'sources.notAdminAddButton',\n                      defaultMessage: 'You must be an Organization Administrator to add a source.',\n                    })}\n                    key=\"addSourceButton\"\n                  >\n                    <span tabIndex=\"0\">\n                      <Button variant=\"primary\" isDisabled id=\"addSourceButton\">\n                        {intl.formatMessage({\n                          id: 'sources.addSource',\n                          defaultMessage: 'Add source',\n                        })}\n                      </Button>\n                    </span>\n                  </Tooltip>,\n                ],\n              }\n        }\n        filterConfig={{\n          items: [\n            {\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              filterValues: {\n                'aria-label': intl.formatMessage({\n                  id: 'sources.filterByName',\n                  defaultMessage: 'Filter by name',\n                }),\n                onChange: (_event, value) => {\n                  setFilterValue(value);\n                  debouncedFiltering(() => setFilter('name', value, dispatch));\n                },\n                value: filter,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.type',\n                defaultMessage: 'Type',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('source_type_id', value, dispatch),\n                items: prepareSourceTypeSelection(sourceTypes || []),\n                value: filterValue.source_type_id,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.application',\n                defaultMessage: 'Application',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('applications', value, dispatch),\n                items: prepareApplicationTypeSelection(appTypes || []),\n                value: filterValue.applications,\n              },\n            },\n          ],\n        }}\n        activeFiltersConfig={{\n          filters: prepareChips(filterValue, sourceTypes, appTypes),\n          onDelete: (_event, chips, deleteAll) => dispatch(filterSources(removeChips(chips, filterValue, deleteAll))),\n        }}\n      />\n      <SourcesTable />\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfigBottom : undefined}\n      />\n    </React.Fragment>\n  );\n\n  const isErrored = loadingError || fetchingError;\n\n  return (\n    <React.Fragment>\n      <Suspense fallback={null}>\n        <CustomRoute exact route={routes.sourceManageApps} Component={AddApplication} />\n        <CustomRoute exact route={routes.sourcesRemove} Component={SourceRemoveModal} />\n        <CustomRoute\n          exact\n          route={routes.sourcesNew}\n          Component={AddSourceWizard}\n          componentProps={{\n            sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n            applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n            isOpen: true,\n            onClose: () => history.push(routes.sources.path),\n            afterSuccess: (source) => afterSuccess(dispatch, source),\n            hideSourcesButton: true,\n          }}\n        />\n        <CustomRoute exact route={routes.sourcesEdit} Component={SourceEditModal} />\n      </Suspense>\n      <PageHeader>\n        <PageHeaderTitle\n          title={intl.formatMessage({\n            id: 'sources.sources',\n            defaultMessage: 'Sources',\n          })}\n        />\n      </PageHeader>\n      <Section type=\"content\">\n        {showEmptyState && <SourcesEmptyState />}\n        {isErrored && <SourcesErrorState />}\n        {!showEmptyState && !isErrored && mainContent()}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nexport default SourcesPage;\n","import { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nexport const useSource = () => {\n  const { id } = useParams();\n  const source = useSelector(({ sources }) => sources.entities.find((source) => source.id === id));\n\n  return source;\n};\n","import React from 'react';\n\nimport { Text, TextVariants } from '@patternfly/react-core/dist/js/components/Text/Text';\nimport { TextContent } from '@patternfly/react-core/dist/js/components/Text/TextContent';\nimport { Badge } from '@patternfly/react-core/dist/js/components/Badge/Badge';\nimport { Popover } from '@patternfly/react-core/dist/js/components/Popover/Popover';\nimport { Tooltip } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { Label } from '@patternfly/react-core/dist/js/components/Label/Label';\n\nimport { FormattedMessage } from 'react-intl';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\n\nexport const defaultPort = (scheme) =>\n  ({\n    http: '80',\n    https: '443',\n  }[scheme]);\n\nexport const importsTexts = (value) =>\n  ({\n    cfme: (\n      <FormattedMessage\n        id=\"sources.cloudformImportTooltip\"\n        defaultMessage=\"This source can be managed from your connected CloudForms application.\"\n      />\n    ),\n  }[value.toLowerCase()]);\n\nexport const schemaToPort = (schema, port) => (port && String(port) !== defaultPort(schema) ? `:${port}` : '');\n\nexport const endpointToUrl = (endpoint) => {\n  const onlyTrueEndpointValues = Object.keys(endpoint).reduce((acc, curr) => ({ ...acc, [curr]: endpoint[curr] || '' }), {});\n\n  const { scheme = '', host = '', path = '', port = '' } = onlyTrueEndpointValues;\n\n  const url = `${scheme}://${host}${schemaToPort(scheme, port)}${path}`;\n\n  if (url === '://') {\n    return;\n  }\n\n  return url;\n};\n\nexport const sourceIsOpenShift = (source, sourceTypes) => {\n  const type = sourceTypes.find((type) => type.id === source.source_type_id);\n  return type && type.name === 'openshift';\n};\n\nexport const formatURL = (source) => source.endpoints && source.endpoints[0] && endpointToUrl(source.endpoints[0]);\n\nexport const applicationFormatter = (apps, _item, { appTypes }) => {\n  const applications = apps.map((app) => {\n    const application = appTypes.find((type) => type.id === app.application_type_id);\n\n    if (application) {\n      return application.display_name;\n    }\n  });\n\n  const filteredApplications = applications.filter((app) => typeof app !== 'undefined');\n\n  return (\n    <TextContent>\n      {filteredApplications.length > 0\n        ? filteredApplications\n            .sort((a, b) => a.localeCompare(b))\n            .map((app, index) => (\n              <Text key={app} className=\"pf-u-mb-0-on-sm\">\n                {app}\n                {index < filteredApplications.length - 1 && <br key={index} />}\n              </Text>\n            ))\n        : '--'}\n    </TextContent>\n  );\n};\n\nexport const sourceTypeFormatter = (sourceType, _item, { sourceTypes }) => {\n  const type = sourceTypes.find((type) => type.id === sourceType);\n  return (type && type.product_name) || sourceType || '';\n};\n\nexport const dateFormatter = (str) => (\n  <Text style={{ marginBottom: 0 }} component={TextVariants.p} className=\"ins-c-sources__help-cursor\">\n    <DateFormat type=\"relative\" date={str} />\n  </Text>\n);\n\nexport const nameFormatter = (name, source, { sourceTypes }) => (\n  <TextContent>\n    {name}\n    <br key={`${source.id}-br`} />\n    <Text key={source.id} component={TextVariants.small}>\n      {sourceIsOpenShift(source, sourceTypes) && formatURL(source)}\n    </Text>\n  </TextContent>\n);\n\nexport const defaultFormatter = (name) => (value) => `undefined ${name} formatter of value: ${value}`;\n\nexport const importedFormatter = (value) => {\n  if (!value) {\n    return null;\n  }\n\n  const text = importsTexts(value);\n\n  if (text) {\n    return (\n      <Tooltip content={text}>\n        <Badge isRead className=\"ins-c-sources__help-cursor\">\n          <FormattedMessage id=\"sources.imported\" defaultMessage=\"imported\" />\n        </Badge>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Badge isRead>\n      <FormattedMessage id=\"sources.imported\" defaultMessage=\"imported\" />\n    </Badge>\n  );\n};\n\nexport const AVAILABLE = 'available';\nexport const UNAVAILABLE = 'unavailable';\nexport const UNKNOWN = 'unknown';\nexport const PARTIALLY_UNAVAILABLE = 'partially_available';\n\nexport const getStatusColor = (status) =>\n  ({\n    [UNAVAILABLE]: 'red',\n    [AVAILABLE]: 'green',\n    [PARTIALLY_UNAVAILABLE]: 'orange',\n  }[status] || 'grey');\n\nexport const getStatusText = (status) =>\n  ({\n    [UNAVAILABLE]: <FormattedMessage id=\"sources.unavailable\" defaultMessage=\"Unavailable\" />,\n    [AVAILABLE]: <FormattedMessage id=\"sources.available\" defaultMessage=\"Available\" />,\n    [PARTIALLY_UNAVAILABLE]: <FormattedMessage id=\"sources.partiallyAvailable\" defaultMessage=\"Partially available\" />,\n  }[status] || <FormattedMessage id=\"sources.unknown\" defaultMessage=\"Unknown\" />);\n\nexport const UnknownError = () => <FormattedMessage id=\"sources.unknownError\" defaultMessage=\"unavailable\" />;\n\nexport const formatAvailibilityErrors = (appTypes, errors) => (\n  <React.Fragment>\n    {errors.source && (\n      <React.Fragment>\n        <FormattedMessage\n          id=\"sources.sourceError\"\n          defaultMessage=\"Source's status: { error }\"\n          values={{ error: errors.source }}\n        />\n        <br />\n      </React.Fragment>\n    )}\n    {errors.endpoint && (\n      <React.Fragment>\n        <FormattedMessage\n          id=\"sources.endpointError\"\n          defaultMessage=\"Endpoint error: { error }\"\n          values={{ error: errors.endpoint }}\n        />\n        <br />\n      </React.Fragment>\n    )}\n    {errors.authentications && (\n      <FormattedMessage\n        id=\"sources.authErrors\"\n        defaultMessage=\"Authentication {count, plural, one {status} other {statuses}} : { errors }\"\n        values={{\n          count: errors.authentications.length,\n          errors: errors.authentications.map(({ error, type }) => (\n            <React.Fragment key={type}>\n              <FormattedMessage id=\"sources.errorAuthTemplate\" defaultMessage=\"{ type }: { error }\" values={{ error, type }} />\n              <br />\n            </React.Fragment>\n          )),\n        }}\n      />\n    )}\n    {errors.applications && (\n      <FormattedMessage\n        id=\"sources.appErrors\"\n        defaultMessage=\"Application {count, plural, one {status} other {statutes}}: { errors }\"\n        values={{\n          count: errors.applications.length,\n          errors: errors.applications.map(({ error, id }) => (\n            <React.Fragment key={id}>\n              <FormattedMessage\n                id=\"sources.errorAppTemplate\"\n                defaultMessage=\"{ app }: { error }\"\n                values={{\n                  error,\n                  app: appTypes.find((app) => app.id === id)?.display_name || id,\n                }}\n              />\n              <br />\n            </React.Fragment>\n          )),\n        }}\n      />\n    )}\n  </React.Fragment>\n);\n\nexport const getStatusTooltipText = (status, appTypes, errors = {}) =>\n  ({\n    [UNAVAILABLE]: (\n      <React.Fragment>\n        <FormattedMessage\n          id=\"sources.appStatusPartiallyOK\"\n          defaultMessage=\"We found {count, plural, one {this error} other {these errors}}.\"\n          values={{ count: Object.keys(errors).length }}\n        />\n        <hr />\n        {formatAvailibilityErrors(appTypes, errors)}\n      </React.Fragment>\n    ),\n    [AVAILABLE]: <FormattedMessage id=\"sources.appStatusOK\" defaultMessage=\"Everything works fine.\" />,\n    [PARTIALLY_UNAVAILABLE]: (\n      <React.Fragment>\n        <FormattedMessage\n          id=\"sources.appStatusPartiallyOK\"\n          defaultMessage=\"We found {count, plural, one {this error} other {these errors}}.\"\n          values={{ count: Object.keys(errors).length }}\n        />\n        <hr />\n        {formatAvailibilityErrors(appTypes, errors)}\n      </React.Fragment>\n    ),\n  }[status] || <FormattedMessage id=\"sources.appStatusUnknown\" defaultMessage=\"Status has not been verified.\" />);\n\nexport const getAllErrors = ({\n  availability_status,\n  availability_status_error,\n  applications = [],\n  endpoints: [endpoint] = [],\n}) => {\n  let errors = {};\n  let statusesCount = 0;\n  let errorsCount = 0;\n\n  if (availability_status === UNAVAILABLE) {\n    errors = {\n      ...errors,\n      source: availability_status_error || <UnknownError />,\n    };\n    statusesCount++;\n    errorsCount++;\n  } else if (availability_status === AVAILABLE) {\n    statusesCount++;\n  }\n\n  applications.map((app) => {\n    if (app.availability_status === UNAVAILABLE) {\n      errors = {\n        ...errors,\n        applications: [\n          ...(errors.applications ? errors.applications : []),\n          {\n            id: app.application_type_id,\n            error: app.availability_status_error || <UnknownError />,\n          },\n        ],\n      };\n      statusesCount++;\n      errorsCount++;\n    } else if (app.availability_status === AVAILABLE) {\n      statusesCount++;\n    }\n  });\n\n  if (endpoint?.availability_status === UNAVAILABLE) {\n    errors = {\n      ...errors,\n      endpoint: endpoint.availability_status_error || <UnknownError />,\n    };\n    statusesCount++;\n    errorsCount++;\n  } else if (endpoint?.availability_status === AVAILABLE) {\n    statusesCount++;\n  }\n\n  if (endpoint?.authentications) {\n    endpoint.authentications.map((auth) => {\n      if (auth.availability_status === UNAVAILABLE) {\n        errors = {\n          ...errors,\n          authentications: [\n            ...(errors.authentications ? errors.authentications : []),\n            {\n              type: auth.authtype,\n              error: auth.availability_status_error || <UnknownError />,\n            },\n          ],\n        };\n        statusesCount++;\n        errorsCount++;\n      } else if (auth.availability_status === AVAILABLE) {\n        statusesCount++;\n      }\n    });\n  }\n\n  return {\n    errors,\n    status:\n      errorsCount === 0\n        ? statusesCount === 0\n          ? UNKNOWN\n          : AVAILABLE\n        : errorsCount === statusesCount\n        ? UNAVAILABLE\n        : PARTIALLY_UNAVAILABLE,\n  };\n};\n\nexport const availabilityFormatter = (_status, source, { appTypes }) => {\n  const meta = getAllErrors(source);\n  const status = meta.status;\n\n  return (\n    <TextContent className=\"clickable\">\n      <Text key={status} component={TextVariants.p}>\n        <Popover aria-label={`${status} popover`} bodyContent={<h1>{getStatusTooltipText(status, appTypes, meta.errors)}</h1>}>\n          <Label color={getStatusColor(status)}>{getStatusText(status)}</Label>\n        </Popover>\n      </Text>\n    </TextContent>\n  );\n};\n\nexport const formatters = (name) =>\n  ({\n    nameFormatter,\n    dateFormatter,\n    applicationFormatter,\n    sourceTypeFormatter,\n    importedFormatter,\n    availabilityFormatter,\n  }[name] || defaultFormatter(name));\n","import { useSelector } from 'react-redux';\n\nexport const useIsLoaded = () => {\n  const isLoaded = useSelector(({ sources }) => sources.loaded);\n\n  return isLoaded <= 0;\n};\n","import { getSourcesApi } from './entities';\n\nexport const checkSourceStatus = (id) =>\n  getSourcesApi()\n    .checkAvailabilitySource(id)\n    .catch(() => {});\n"],"sourceRoot":""}