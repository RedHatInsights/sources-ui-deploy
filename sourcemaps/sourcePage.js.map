{"version":3,"sources":["webpack:///./src/components/SourcesSimpleView/loaders.js","webpack:///./src/components/SourcesSimpleView/EmptyStateTable.js","webpack:///./src/hooks/useIsOrgAdmin.js","webpack:///./src/components/SourcesSimpleView/SourcesSimpleView.js","webpack:///./src/components/SourcesEmptyState.js","webpack:///./src/pages/SourcesPage/helpers.js","webpack:///./src/api/checkSourceStatus.js","webpack:///./src/pages/SourcesPage/PaginationLoader.js","webpack:///./src/components/RedirectNotAdmin/RedirectNotAdmin.js","webpack:///./src/components/RedirectNoId/RedirectNoId.js","webpack:///./src/components/CustomRoute/CustomRoute.js","webpack:///./src/pages/SourcesPage.js","webpack:///./src/hooks/useSource.js","webpack:///./src/hooks/useIsLoaded.js","webpack:///./src/components/UndoButton/UndoButtonAdd.js","webpack:///./src/components/UndoButton/refreshPage.js"],"names":["PlaceHolderTable","Bullseye","className","Spinner","size","RowWrapperLoader","row","isDeleting","initialProps","colSpan","COLUMN_COUNT","RowWrapper","propTypes","PropTypes","object","isRequired","EmptyStateTable","dispatch","useDispatch","EmptyState","variant","EmptyStateVariant","small","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","defaultMessage","id","EmptyStateBody","Button","onClick","clearFilters","useIsOrgAdmin","useSelector","user","isOrgAdmin","itemToCells","item","columns","sourceTypes","appTypes","filter","column","title","hidden","map","col","formatter","formatters","value","renderSources","entities","reduce","acc","isOpen","expanded","cells","disableActions","prepareColumnsCells","sortable","transforms","reducer","state","payload","actionResolver","intl","push","rowData","actions","formatMessage","_ev","_i","replaceRouteId","routes","sourceManageApps","path","component","style","color","sourcesRemove","imported","splice","sourcesEdit","insertEditAction","SourcesSimpleView","useHistory","useIntl","loaded","useIsLoaded","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","sortBy","sortDirection","numberOfEntities","reduxDispatch","notSortable","useReducer","sourcesColumns","rows","isLoaded","refreshSources","useEffect","refreshColumns","shownRows","heightAuto","props","Table","gridBreakPoint","aria-label","onSort","_event","key","direction","sortEntities","index","cell","indexOf","undefined","rowWrapper","SourcesEmptyState","body","Card","CardBody","WrenchIcon","Fragment","to","sourcesNew","marginTop","node","debouncedFiltering","awesomeDebounce","refresh","afterSuccessLoadParameters","pageNumber","afterSuccess","source","getSourcesApi","checkAvailabilitySource","clearAddSource","loadEntities","prepareSourceTypeSelection","label","product_name","sort","a","b","localeCompare","setFilter","filterSources","prepareChips","filterValue","Object","keys","length","name","source_type_id","category","chips","sourceType","find","type","chipsFormatters","Boolean","loadedTypes","types","PaginationLoader","height","width","speed","primaryColor","secondaryColor","x","y","rx","ry","RedirectNotAdmin","description","addMessage","RedirectNoId","useParams","useState","applicationIsLoaded","setIsApplicationLoaded","doLoadSource","then","addHiddenSource","CustomRouteInternal","route","children","redirectNoId","useSource","writeAccess","shape","string","bool","CustomRoute","componentProps","Component","any","oneOfType","func","SourceEditModal","lazy","SourceRemoveModal","AddApplication","AddSourceWizard","module","default","SourcesPage","showEmptyState","setShowEmptyState","checkEmptyState","setCheckEmptyState","setFilterValue","history","location","useLocation","pageSize","fetchingError","undoValues","paginationClicked","Promise","all","loadSourceTypes","loadAppTypes","parseQuery","hasSomeFilter","entries","updateQuery","onSetPage","_e","page","pageAndSize","maximumPageNumber","Math","ceil","max","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","fallback","exact","applicationTypes","onClose","values","isEmpty","messageId","Date","now","undo","UndoButtonAdd","onCloseAddSourceWizard","hideSourcesButton","initialValues","PageHeader","Section","detail","PrimaryToolbar","pagination","actionsConfig","filterConfig","items","filterValues","onChange","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips","UndoButton","notifications","isInline","notification","customId","removeMessage","pathname","goBack","refreshPage","number","defaultProps"],"mappings":"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","file":"js/sourcePage.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { RowWrapper } from '@patternfly/react-table';\nimport { RowLoader } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport { COLUMN_COUNT } from '../../views/sourcesViewDefinition';\nimport { Spinner } from '@patternfly/react-core/dist/js/components/Spinner';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye';\n\nexport const PlaceHolderTable = () => (\n    <Bullseye className=\"ins-c-sources__sources-placeholder-loader\">\n        <Spinner size=\"xl\"/>\n    </Bullseye>\n);\n\nexport const RowWrapperLoader = ({ row: { isDeleting, ...row }, ...initialProps }) => (isDeleting ?\n    <tr><td colSpan={COLUMN_COUNT}><RowLoader /></td></tr> :\n    <RowWrapper {...initialProps} row={row} className='ins-c-sources__row-vertical-centered'/>\n);\n\nRowWrapperLoader.propTypes = {\n    row: PropTypes.object.isRequired\n};\n","import React from 'react';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { FormattedMessage } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n    const dispatch = useDispatch();\n\n    return (\n        <Bullseye>\n            <EmptyState variant={EmptyStateVariant.small}>\n                <EmptyStateIcon icon={SearchIcon} />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    <FormattedMessage\n                        defaultMessage=\"No sources found\"\n                        id=\"sources.noResultsFoundTitle\"\n                    />\n                </Title>\n                <EmptyStateBody>\n                    <FormattedMessage\n                        defaultMessage=\"No sources match the filter criteria. Remove\n                    all filters or clear all filters to show sources.\"\n                        id=\"sources.noResultsFoundDescription\"\n                    />\n                </EmptyStateBody>\n                <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n                    <FormattedMessage\n                        defaultMessage=\"Clear all filters\"\n                        id=\"sources.clearAllFilters\"\n                    />\n                </Button>\n            </EmptyState>\n        </Bullseye>\n    );};\n\nexport default EmptyStateTable;\n","import { useSelector } from 'react-redux';\n\nexport const useIsOrgAdmin = () => {\n    const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n    return isOrgAdmin;\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, sortable } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\n\nimport { sortEntities } from '../../redux/sources/actions';\nimport { formatters } from './formatters';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { sourcesColumns, COLUMN_COUNT } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useIsOrgAdmin } from '../../hooks/useIsOrgAdmin';\nimport { replaceRouteId, routes } from '../../Routes';\n\nconst itemToCells = (item, columns, sourceTypes, appTypes) => columns.filter(column => column.title || column.hidden)\n.map(col => ({\n    title: col.formatter ? formatters(col.formatter)(item[col.value], item, { sourceTypes, appTypes }) : item[col.value] || ''\n}));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes) =>\n    entities.filter(({ hidden }) => !hidden).reduce((acc, item) => ([\n        ...acc,\n        {\n            ...item,\n            isOpen: !!item.expanded,\n            cells: itemToCells(item, columns, sourceTypes, appTypes),\n            disableActions: !!item.isDeleting\n        }\n    ]), []);\n\nexport const prepareColumnsCells = columns => columns.filter(column => column.title || column.hidden).map(column => ({\n    title: column.title || '',\n    value: column.value,\n    ...(column.sortable && { transforms: [sortable] })\n}));\n\nconst reducer = (state, payload) => ({ ...state, ...payload });\n\nconst initialState = (columns) => ({\n    rows: [],\n    sortBy: {},\n    isLoaded: false,\n    cells: prepareColumnsCells(columns)\n});\n\nexport const insertEditAction = (actions, intl, push) => actions.splice(1, 0, {\n    title: intl.formatMessage({\n        id: 'sources.edit',\n        defaultMessage: 'Edit'\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesEdit.path, id)),\n    component: 'button'\n});\n\nexport const actionResolver = (intl, push) => (rowData) => {\n    const actions = [{\n        title: intl.formatMessage({\n            id: 'sources.manageApps',\n            defaultMessage: 'Manage applications'\n        }),\n        onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourceManageApps.path, id)),\n        component: 'button'\n    },\n    {\n        style: { color: 'var(--pf-global--danger-color--100)' },\n        title: intl.formatMessage({\n            id: 'sources.delete',\n            defaultMessage: 'Delete'\n        }),\n        onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesRemove.path, id)),\n        component: 'button'\n    }];\n\n    const isSourceEditable = !rowData.imported;\n\n    if (isSourceEditable) {\n        insertEditAction(actions, intl, push);\n    }\n\n    return actions;\n};\n\nconst SourcesSimpleView = () => {\n    const { push } = useHistory();\n    const intl = useIntl();\n\n    const loaded = useIsLoaded();\n    const isOrgAdmin = useIsOrgAdmin();\n\n    const {\n        appTypes,\n        entities,\n        sourceTypes,\n        sourceTypesLoaded,\n        appTypesLoaded,\n        sortBy,\n        sortDirection,\n        numberOfEntities\n    } = useSelector(({ sources }) => sources, shallowEqual);\n    const reduxDispatch = useDispatch();\n\n    const notSortable = numberOfEntities === 0 || !loaded;\n\n    const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n    const refreshColumns = () => {\n        const columns = sourcesColumns(intl, notSortable);\n\n        return dispatch({\n            cells: prepareColumnsCells(columns)\n        });\n    };\n\n    const refreshSources = () => {\n        const columns = sourcesColumns(intl, notSortable);\n\n        return dispatch({\n            rows: renderSources(entities, columns, sourceTypes, appTypes),\n            cells: prepareColumnsCells(columns)\n        });\n    };\n\n    useEffect(() => {\n        if (loaded && sourceTypesLoaded && appTypesLoaded) {\n            dispatch({ isLoaded: true });\n            refreshSources();\n        } else {\n            dispatch({ isLoaded: false });\n            refreshColumns();\n        }\n    }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n    useEffect(() => {\n        if (state.isLoaded) {\n            refreshSources();\n        }\n    }, [entities]);\n\n    let shownRows = state.rows;\n    if (numberOfEntities === 0 && state.isLoaded) {\n        shownRows = [{\n            heightAuto: true,\n            cells: [{\n                props: { colSpan: COLUMN_COUNT },\n                title: <EmptyStateTable />\n            }]\n        }];\n    } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n        shownRows = [{\n            heightAuto: true,\n            cells: [{\n                props: { colSpan: COLUMN_COUNT, className: 'sources-placeholder-row' },\n                title: <PlaceHolderTable />\n            }]\n        }];\n    }\n\n    return (\n        <Table\n            gridBreakPoint='grid-lg'\n            aria-label={intl.formatMessage({\n                id: 'sources.list',\n                defaultMessage: 'List of Sources'\n            })}\n            onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n            sortBy={{\n                index: state.cells.map(cell => cell.value).indexOf(sortBy),\n                direction: sortDirection\n            }}\n            rows={shownRows}\n            cells={state.cells}\n            actionResolver={loaded && isOrgAdmin && numberOfEntities > 0 ? actionResolver(intl, push) : undefined}\n            rowWrapper={RowWrapperLoader}\n        >\n            <TableHeader />\n            <TableBody />\n        </Table>\n    );\n};\n\nexport default SourcesSimpleView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\n\nimport { Link } from 'react-router-dom';\nimport { routes } from '../Routes';\nimport { useIsOrgAdmin } from '../hooks/useIsOrgAdmin';\n\nconst SourcesEmptyState = ({ title, body }) => {\n    const isOrgAdmin = useIsOrgAdmin();\n\n    return (\n        <Card>\n            <CardBody>\n                <Bullseye>\n                    <EmptyState>\n                        <EmptyStateIcon icon={WrenchIcon} />\n                        <Title headingLevel=\"h5\" size=\"lg\">\n                            {title ? title :\n                                <FormattedMessage\n                                    id=\"sources.emptyStateTitle\"\n                                    defaultMessage=\"No sources\"\n                                />\n                            }\n                        </Title>\n                        <EmptyStateBody>\n                            {body ? body :\n                                isOrgAdmin && <FormattedMessage\n                                    id=\"sources.emptyStateBody\"\n                                    defaultMessage=\"No sources have been defined. To start define a source.\"\n                                />}\n                            {!isOrgAdmin && <React.Fragment>\n                                <br />\n                                <FormattedMessage\n                                    id=\"sources.emptyStateBodyNotAdmin\"\n                                    defaultMessage=\"To define a source, you have to be an organisation admin.\"\n                                />\n                            </React.Fragment>}\n                        </EmptyStateBody>\n                        {isOrgAdmin && <Link to={routes.sourcesNew.path}>\n                            <Button style={{ marginTop: 'var(--pf-c-empty-state--c-button--MarginTop)' }}\n                                variant=\"primary\">\n                                <FormattedMessage\n                                    id=\"sources.emptyStateButton\"\n                                    defaultMessage=\"Add source\"\n                                />\n                            </Button>\n                        </Link>}\n                    </EmptyState>\n                </Bullseye>\n            </CardBody>\n        </Card>\n    );\n};\n\nSourcesEmptyState.propTypes = {\n    title: PropTypes.node,\n    body: PropTypes.node\n};\n\nexport default SourcesEmptyState;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport awesomeDebounce from 'awesome-debounce-promise';\nimport isEmpty from 'lodash/isEmpty';\n\nimport {\n    loadEntities,\n    clearAddSource,\n    filterSources,\n    addMessage\n} from '../../redux/sources/actions';\nimport UndoButtonAdd from '../../components/UndoButton/UndoButtonAdd';\nimport { routes } from '../../Routes';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nexport const onCloseAddSourceWizard = ({ values, dispatch, history, intl }) => {\n    if (values && !isEmpty(values)) {\n        const messageId = Date.now();\n        dispatch(addMessage(\n            intl.formatMessage({\n                id: 'sources.addWizardCanceled',\n                defaultMessage: 'Adding a source was cancelled'\n            }),\n            'success',\n            <FormattedMessage\n                id=\"sources.undoMistake\"\n                defaultMessage={ `{undo} if this was a mistake.` }\n                values={ { undo: <UndoButtonAdd messageId={messageId} values={values} /> } }\n            />,\n            messageId\n        ));\n    }\n\n    dispatch(clearAddSource());\n    history.push(routes.sources.path);\n};\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = { pageNumber: 1, sortBy: 'created_at', sortDirection: 'desc' };\n\nexport const afterSuccess = (dispatch, source) => {\n    checkSourceStatus(source.id);\n    dispatch(clearAddSource());\n    dispatch(loadEntities(afterSuccessLoadParameters));\n};\n\nexport const prepareSourceTypeSelection = (sourceTypes) =>\n    sourceTypes.map(({ id, product_name }) => ({ label: product_name, value: id }))\n    .sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) => dispatch(filterSources({\n    [column]: value\n}));\n\nexport const chipsFormatters = (key, filterValue, sourceTypes) => ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n        category: 'Source Type',\n        key,\n        chips: filterValue[key].map(id => {\n            const sourceType = sourceTypes.find((type) => type.id === id);\n\n            return ({ name: sourceType ? sourceType.product_name : id, value: id });\n        })\n    })\n}[key] || (() => ({ name: key })));\n\nexport const prepareChips = (filterValue, sourceTypes) =>\n    Object.keys(filterValue)\n    .map((key) =>\n        filterValue[key] && filterValue[key].length > 0 ? chipsFormatters(key, filterValue, sourceTypes)() : undefined\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n    if (deleteAll) {\n        return (\n            Object.keys(filterValue).reduce((acc, curr) => ({\n                ...acc,\n                [curr]: undefined\n            }), {})\n        );\n    }\n\n    const chip = chips[0];\n\n    return ({\n        ...filterValue,\n        [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined\n    });\n};\n\nexport const loadedTypes = (types, loaded) => loaded && types.length > 0 ? types : undefined;\n","import { getSourcesApi } from './entities';\n\nexport const checkSourceStatus = (id) => getSourcesApi().checkAvailabilitySource(id).catch(() => {});\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst PaginationLoader = () => (\n    <div className=\"ins-c-sources__pagination-loader-wrapper\">\n        <ContentLoader\n            height={30}\n            width={200}\n            speed={2}\n            primaryColor=\"#f3f3f3\"\n            secondaryColor=\"#ecebeb\"\n        >\n            <rect x=\"0\" y=\"0\" rx=\"6\" ry=\"6\" width=\"200\" height=\"30\" />\n        </ContentLoader>\n    </div>\n);\n\nexport default PaginationLoader;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage } from '../../redux/sources/actions';\nimport { useIsOrgAdmin } from '../../hooks/useIsOrgAdmin';\nimport { routes } from '../../Routes';\n\nconst RedirectNotAdmin = () => {\n    const intl = useIntl();\n\n    const isOrgAdmin = useIsOrgAdmin();\n\n    const dispatch = useDispatch();\n\n    if (isOrgAdmin === false) {\n        const title = intl.formatMessage({\n            id: 'sources.insufficietnPerms',\n            defaultMessage: 'Insufficient permissions'\n        });\n        const description = intl.formatMessage({\n            id: 'sources.insufficietnPermsDesc',\n            defaultMessage: 'You have to be an organisation admin to be able to do this action'\n        });\n\n        dispatch(addMessage(\n            title,\n            'danger',\n            description\n        ));\n        return <Redirect to={routes.sources.path} />;\n    }\n\n    return null;\n};\n\nexport default RedirectNotAdmin;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useParams, Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage, addHiddenSource } from '../../redux/sources/actions';\nimport { doLoadSource } from '../../api/entities';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { routes } from '../../Routes';\n\nconst RedirectNoId = () => {\n    const { id } = useParams();\n    const intl = useIntl();\n\n    const loaded = useIsLoaded();\n\n    const { appTypesLoaded, sourceTypesLoaded } = useSelector(({ sources }) => sources, shallowEqual);\n    const dispatch = useDispatch();\n\n    const [applicationIsLoaded, setIsApplicationLoaded] = useState(false);\n\n    useEffect(() => {\n        if (loaded && appTypesLoaded && sourceTypesLoaded) {\n            doLoadSource(id).then(({ sources: [source] }) => dispatch(addHiddenSource(source)))\n            .then(() => {\n                setIsApplicationLoaded(true);\n            });\n        }\n    }, [loaded, appTypesLoaded, sourceTypesLoaded]);\n\n    if (applicationIsLoaded) {\n        dispatch(addMessage(\n            intl.formatMessage({\n                id: 'sources.sourceNotFoundTitle',\n                defaultMessage: 'Requested source was not found'\n            }),\n            'danger',\n            intl.formatMessage({\n                id: 'sources.sourceNotFoundTitleDescription',\n                defaultMessage: 'Source with { id } was not found. Try it again later.'\n            }, { id })\n        ));\n        return <Redirect to={routes.sources.path} />;\n    }\n\n    return null;\n};\n\nexport default RedirectNoId;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport RedirectNotAdmin from '../RedirectNotAdmin/RedirectNotAdmin';\nimport { useSource } from '../../hooks/useSource';\nimport RedirectNoId from '../RedirectNoId/RedirectNoId';\n\nconst CustomRouteInternal = ({ route, children }) => {\n    const source = route.redirectNoId ? useSource() : undefined;\n\n    if (!source && route.redirectNoId) {\n        return <RedirectNoId />;\n    }\n\n    return (\n        <React.Fragment>\n            {route.writeAccess && <RedirectNotAdmin />}\n            {children}\n        </React.Fragment>\n    );\n};\n\nCustomRouteInternal.propTypes = {\n    route: PropTypes.shape({\n        path: PropTypes.string.isRequired,\n        redirectNoId: PropTypes.bool,\n        writeAccess: PropTypes.bool\n    }).isRequired,\n    children: PropTypes.node.isRequired\n};\n\nconst CustomRoute = ({ route, componentProps, Component, ...props }) =>  (\n    <Route {...props} path={route.path}>\n        <CustomRouteInternal route={route}>\n            <Component  {...componentProps}/>\n        </CustomRouteInternal>\n    </Route>\n);\n\nCustomRoute.propTypes = {\n    route: PropTypes.shape({\n        path: PropTypes.string.isRequired,\n        redirectNoId: PropTypes.bool,\n        writeAccess: PropTypes.bool\n    }).isRequired,\n    componentProps: PropTypes.any,\n    Component: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n};\n\nexport default CustomRoute;\n","import React, { useEffect, useState, lazy, Suspense } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport {\n    loadAppTypes,\n    loadEntities,\n    loadSourceTypes,\n    filterSources\n} from '../redux/sources/actions';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/PrimaryToolbar';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/components/PageHeader';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/Section';\n\nimport SourcesSimpleView from '../components/SourcesSimpleView/SourcesSimpleView';\nimport SourcesEmptyState from '../components/SourcesEmptyState';\nimport { pageAndSize } from '../redux/sources/actions';\nimport { routes } from '../Routes';\n\nconst SourceEditModal = lazy(() => import(/* webpackChunkName: \"edit\" */ '../components/SourceEditForm/SourceEditModal'));\nconst SourceRemoveModal = lazy(() => import(/* webpackChunkName: \"remove\" */ '../components/SourceRemoveModal'));\nconst AddApplication = lazy(() => import(/* webpackChunkName: \"addApp\" */ '../components/AddApplication/AddApplication'));\nconst AddSourceWizard = lazy(() => import(\n    /* webpackChunkName: \"addSource\" */ '@redhat-cloud-services/frontend-components-sources'\n).then(module => ({ default: module.AddSourceWizard })));\n\nimport {\n    prepareChips,\n    removeChips,\n    setFilter,\n    debouncedFiltering,\n    prepareSourceTypeSelection,\n    afterSuccess,\n    onCloseAddSourceWizard,\n    loadedTypes\n} from './SourcesPage/helpers';\nimport PaginationLoader from './SourcesPage/PaginationLoader';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport { useIsOrgAdmin } from '../hooks/useIsOrgAdmin';\nimport CustomRoute from '../components/CustomRoute/CustomRoute';\nimport { updateQuery, parseQuery } from '../Utilities/urlQuery';\n\nconst SourcesPage = () => {\n    const [showEmptyState, setShowEmptyState] = useState(false);\n    const [checkEmptyState, setCheckEmptyState] = useState(false);\n    const [filter, setFilterValue] = useState();\n\n    const loaded = useIsLoaded();\n    const isOrgAdmin = useIsOrgAdmin();\n\n    const history = useHistory();\n    const location = useLocation();\n    const intl = useIntl();\n\n    const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n    const {\n        filterValue,\n        numberOfEntities,\n        appTypes,\n        pageSize,\n        pageNumber,\n        fetchingError,\n        undoValues,\n        sourceTypes,\n        paginationClicked,\n        appTypesLoaded,\n        sourceTypesLoaded\n    } = sources;\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        Promise.all([dispatch(loadSourceTypes()), dispatch(loadAppTypes()), dispatch(loadEntities(parseQuery()))])\n        .then(() => setCheckEmptyState(true));\n    }, []);\n\n    const hasSomeFilter = Object.entries(filterValue).map(([_key, value]) => value).filter(Boolean).length > 0;\n\n    useEffect(() => {\n        if (checkEmptyState) {\n            setShowEmptyState(loaded && numberOfEntities === 0 && !hasSomeFilter);\n            updateQuery(sources);\n        }\n    }, [location, checkEmptyState]);\n\n    useEffect(() => {\n        if (filter !== filterValue.name) {\n            setFilterValue(filterValue.name);\n        }\n    }, [filterValue.name]);\n\n    useEffect(() => {\n        if (checkEmptyState && loaded) {\n            setShowEmptyState(numberOfEntities === 0 && !hasSomeFilter);\n        }\n    }, [loaded]);\n\n    const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n    const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n    const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n    if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n        onSetPage({}, maximumPageNumber);\n    }\n\n    const paginationConfig = {\n        itemCount: numberOfEntities,\n        page: pageNumber,\n        perPage: pageSize,\n        onSetPage,\n        onPerPageSelect\n    };\n\n    const paginationConfigBottom = {\n        ...paginationConfig,\n        dropDirection: 'up',\n        variant: 'bottom',\n        isCompact: false\n    };\n\n    const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n    const mainContent = () => (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n                actionsConfig={isOrgAdmin ? {\n                    actions: [\n                        <Link to={routes.sourcesNew.path} key=\"addSourceButton\">\n                            <Button variant='primary'>\n                                <FormattedMessage\n                                    id=\"sources.addSource\"\n                                    defaultMessage=\"Add source\"\n                                />\n                            </Button>\n                        </Link>\n                    ]\n                } : undefined}\n                filterConfig={{\n                    items: [{\n                        label: intl.formatMessage({\n                            id: 'sources.name',\n                            defaultMessage: 'Name'\n                        }),\n                        filterValues: {\n                            'aria-label': intl.formatMessage({\n                                id: 'sources.filterByName',\n                                defaultMessage: 'Filter by name'\n                            }),\n                            onChange: (_event, value) => {\n                                setFilterValue(value);\n                                debouncedFiltering(() => setFilter('name', value, dispatch));\n                            },\n                            value: filter\n                        }\n                    }, {\n                        label: intl.formatMessage({\n                            id: 'sources.type',\n                            defaultMessage: 'Type'\n                        }),\n                        type: 'checkbox',\n                        filterValues: {\n                            onChange: (_event, value) =>\n                                setFilter('source_type_id', value, dispatch),\n                            items: prepareSourceTypeSelection(sourceTypes || []),\n                            value: filterValue.source_type_id\n                        }\n                    }]\n                }}\n                activeFiltersConfig={{\n                    filters: prepareChips(filterValue, sourceTypes),\n                    onDelete: (_event, chips, deleteAll) =>\n                        dispatch(filterSources(removeChips(chips, filterValue, deleteAll)))\n                }}\n            />\n            <SourcesSimpleView />\n            <PrimaryToolbar\n                pagination={\n                    showPaginationLoader ? <PaginationLoader />\n                        : numberOfEntities > 0 ? paginationConfigBottom : undefined\n                }\n            />\n        </React.Fragment>\n    );\n\n    return (\n        <React.Fragment>\n            <Suspense fallback={null}>\n                <CustomRoute exact route={routes.sourceManageApps} Component={AddApplication}/>\n                <CustomRoute exact route={routes.sourcesRemove} Component={SourceRemoveModal}/>\n                <CustomRoute\n                    exact\n                    route={routes.sourcesNew}\n                    Component={AddSourceWizard}\n                    componentProps={{\n                        sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n                        applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n                        isOpen: true,\n                        onClose: (values) => onCloseAddSourceWizard({ values, dispatch, history, intl }),\n                        afterSuccess: (source) => afterSuccess(dispatch, source),\n                        hideSourcesButton: true,\n                        initialValues: undoValues\n                    }}\n                />\n                <CustomRoute exact route={routes.sourcesEdit} Component={SourceEditModal}/>\n            </Suspense>\n            <PageHeader>\n                <PageHeaderTitle title={intl.formatMessage({\n                    id: 'sources.sources',\n                    defaultMessage: 'Sources'\n                })}/>\n            </PageHeader>\n            <Section type='content'>\n                { (showEmptyState || fetchingError) ?\n                    <SourcesEmptyState\n                        title={fetchingError ? fetchingError.title : undefined}\n                        body={fetchingError ? fetchingError.detail : undefined}\n                    />\n                    :\n                    mainContent()}\n            </Section>\n        </React.Fragment>\n    );\n};\n\nexport default SourcesPage;\n","import { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nexport const useSource = () => {\n    const { id } = useParams();\n    const source = useSelector(({ sources }) => sources.entities.find(source => source.id === id));\n\n    return source;\n};\n","import { useSelector } from 'react-redux';\n\nexport const useIsLoaded = () => {\n    const isLoaded = useSelector(({ sources }) => sources.loaded);\n\n    return isLoaded <= 0;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\n\nimport { removeMessage, undoValues } from '../../redux/sources/actions';\nimport { routes } from '../../Routes';\nimport { refreshPage } from './refreshPage';\n\nconst UndoButton = ({ messageId, values, path }) => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const notifications = useSelector(({ notifications }) => notifications);\n\n    return (\n        <Button variant=\"link\" isInline onClick={() => {\n            const notification = notifications.find(({ customId }) => customId === messageId);\n\n            if (notification) {\n                dispatch(removeMessage(notification.id));\n            }\n\n            dispatch(undoValues(values));\n\n            const isOnWizard = history.location.pathname === path;\n\n            if (isOnWizard) {\n                refreshPage(history);\n            } else {\n                history.push(path);\n            }\n        }}>\n            <FormattedMessage\n                id=\"sources.undo\"\n                defaultMessage=\"Undo\"\n            />\n        </Button>\n    );};\n\nUndoButton.propTypes = {\n    messageId: PropTypes.number.isRequired,\n    values: PropTypes.object.isRequired,\n    path: PropTypes.string\n};\n\nUndoButton.defaultProps = {\n    path: routes.sourcesNew.path\n};\n\nexport default UndoButton;\n","import { routes } from '../../Routes';\n\nexport const refreshPage = history => {\n    history.push(routes.sources.path);\n    history.goBack();\n};\n"],"sourceRoot":""}