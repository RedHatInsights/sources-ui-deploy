{"version":3,"sources":["webpack:///./src/components/SourcesTable/EmptyStateTable.js","webpack:///./src/hooks/useIsOrgAdmin.js","webpack:///./src/components/SourcesTable/SourcesTable.js","webpack:///./src/components/SourcesEmptyState.js","webpack:///./src/pages/Sources/helpers.js","webpack:///./src/components/RedirectNotAdmin/RedirectNotAdmin.js","webpack:///./src/components/RedirectNoId/RedirectNoId.js","webpack:///./src/components/CustomRoute/CustomRoute.js","webpack:///./src/pages/Sources.js","webpack:///./src/hooks/useSource.js","webpack:///./src/hooks/useIsLoaded.js","webpack:///./src/api/checkSourceStatus.js"],"names":["EmptyStateTable","dispatch","useDispatch","Bullseye","EmptyState","variant","EmptyStateVariant","small","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","defaultMessage","id","EmptyStateBody","Button","onClick","clearFilters","useIsOrgAdmin","useSelector","user","isOrgAdmin","itemToCells","item","columns","sourceTypes","appTypes","filter","column","title","hidden","map","col","formatter","formatters","value","renderSources","entities","reduce","acc","isOpen","expanded","cells","disableActions","isDeleting","prepareColumnsCells","sortable","transforms","reducer","state","payload","actionResolver","intl","push","rowData","disabledProps","tooltip","formatMessage","isDisabled","className","actions","_ev","_i","replaceRouteId","routes","sourceManageApps","path","component","sourcesRemove","imported","splice","sourcesEdit","insertEditAction","SourcesTable","useHistory","useIntl","loaded","useIsLoaded","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","sortBy","sortDirection","numberOfEntities","reduxDispatch","notSortable","useReducer","sourcesColumns","rows","isLoaded","refreshSources","useEffect","refreshColumns","shownRows","heightAuto","props","colSpan","COLUMN_COUNT","Table","gridBreakPoint","aria-label","onSort","_event","key","direction","sortEntities","index","cell","indexOf","undefined","rowWrapper","RowWrapperLoader","SourcesEmptyState","body","WrenchIcon","Fragment","to","sourcesNew","style","marginTop","propTypes","PropTypes","node","debouncedFiltering","awesomeDebounce","refresh","afterSuccessLoadParameters","pageNumber","prepareSourceTypeSelection","label","product_name","sort","a","b","localeCompare","prepareApplicationTypeSelection","display_name","setFilter","filterSources","prepareChips","filterValue","Object","keys","length","name","source_type_id","category","chips","sourceType","find","type","applications","appType","chipsFormatters","Boolean","loadedTypes","types","RedirectNotAdmin","description","addMessage","RedirectNoId","useParams","useState","applicationIsLoaded","setIsApplicationLoaded","doLoadSource","then","source","addHiddenSource","CustomRouteInternal","route","children","redirectNoId","useSource","writeAccess","shape","string","isRequired","bool","CustomRoute","componentProps","Component","any","oneOfType","func","object","SourceEditModal","lazy","SourceRemoveModal","AddApplication","AddSourceWizard","module","default","SourcesPage","showEmptyState","setShowEmptyState","checkEmptyState","setCheckEmptyState","setFilterValue","history","location","useLocation","pageSize","fetchingError","paginationClicked","Promise","all","loadSourceTypes","loadAppTypes","loadEntities","parseQuery","hasSomeFilter","entries","updateQuery","onSetPage","_e","page","pageAndSize","maximumPageNumber","Math","ceil","max","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","fallback","exact","applicationTypes","onClose","afterSuccess","checkSourceStatus","hideSourcesButton","PageHeader","Section","detail","PrimaryToolbar","pagination","actionsConfig","Tooltip","content","tabIndex","filterConfig","items","filterValues","onChange","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips","getSourcesApi","checkAvailabilitySource"],"mappings":"qXA4CeA,EA9BS,WACpB,IAAMC,EAAWC,wBAEjB,OACI,kBAACC,EAAA,SAAD,KACI,kBAACC,EAAA,WAAD,CAAYC,QAASC,oBAAkBC,OACnC,kBAACC,EAAA,eAAD,CAAgBC,KAAMC,MACtB,kBAACC,EAAA,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC1B,kBAAC,IAAD,CACIC,eAAe,mBACfC,GAAG,iCAGX,kBAACC,EAAA,eAAD,KACI,kBAAC,IAAD,CACIF,eAAe,iGAEfC,GAAG,uCAGX,kBAACE,EAAA,OAAD,CAAQZ,QAAQ,OAAOa,QAAS,kBAAMjB,EAASkB,iBAC3C,kBAAC,IAAD,CACIL,eAAe,oBACfC,GAAG,gC,SCnCdK,EAAgB,WAGzB,OAFmBC,uBAAY,qBAAGC,KAAgBC,e,ykBCYtD,IAAMC,EAAc,SAACC,EAAMC,EAASC,EAAaC,GAA7B,OAA0CF,EAAQG,QAAO,SAAAC,GAAM,OAAIA,EAAOC,OAASD,EAAOE,UAC7GC,KAAI,SAAAC,GAAG,MAAK,CACTH,MAAOG,EAAIC,UAAYC,YAAWF,EAAIC,UAAfC,CAA0BX,EAAKS,EAAIG,OAAQZ,EAAM,CAAEE,cAAaC,aAAcH,EAAKS,EAAIG,QAAU,QAGtHC,EAAgB,SAACC,EAAUb,EAASC,EAAaC,GAAjC,OAClBW,EAASV,QAAO,qBAAGG,UAAsBQ,QAAO,SAACC,EAAKhB,GAAN,oBACzCgB,GADyC,QAGrChB,GAHqC,IAIxCiB,SAAUjB,EAAKkB,SACfC,MAAOpB,EAAYC,EAAMC,EAASC,EAAaC,GAC/CiB,iBAAkBpB,EAAKqB,iBAE3B,KAEKC,EAAsB,SAAArB,GAAO,OAAIA,EAAQG,QAAO,SAAAC,GAAM,OAAIA,EAAOC,OAASD,EAAOE,UAAQC,KAAI,SAAAH,GAAM,UAC5GC,MAAOD,EAAOC,OAAS,GACvBM,MAAOP,EAAOO,MACdL,OAAQF,EAAOE,QACXF,EAAOkB,UAAY,CAAEC,WAAY,CAACD,WAGpCE,EAAU,SAACC,EAAOC,GAAR,cAA0BD,GAAUC,IAkBvCC,EAAiB,SAACC,EAAMC,EAAMhC,GAAb,OAA4B,SAACiC,GACvD,IAKMC,EAAgB,CAClBC,QANYJ,EAAKK,cAAc,CAC/B5C,GAAI,yBACJD,eAAgB,uDAKhB8C,YAAY,EACZC,UAAW,yCAGTC,EAAU,CAAC,EAAD,CACZ/B,MAAOuB,EAAKK,cAAc,CACtB5C,GAAI,qBACJD,eAAgB,wBAEpBI,QAAS,SAAC6C,EAAKC,EAAN,OAAYjD,EAAZ,EAAYA,GAAZ,OAAqBwC,EAAKU,YAAeC,IAAOC,iBAAiBC,KAAMrD,MAC3EQ,EAA6B,CAAE8C,UAAW,UAA7BZ,GANN,GASZ1B,MAAOuB,EAAKK,cAAc,CACtB5C,GAAI,iBACJD,eAAgB,WAEpBI,QAAS,SAAC6C,EAAKC,EAAN,OAAYjD,EAAZ,EAAYA,GAAZ,OAAqBwC,EAAKU,YAAeC,IAAOI,cAAcF,KAAMrD,MACxEQ,EAA6B,CAAE8C,UAAW,UAA7BZ,IAStB,OAN0BD,EAAQe,UAtCN,SAACT,EAASR,EAAMC,EAAMhC,EAAYkC,GAAkBK,EAAQU,OAAO,EAAG,EAAlB,GAChFzC,MAAOuB,EAAKK,cAAc,CACtB5C,GAAI,eACJD,eAAgB,SAEpBI,QAAS,SAAC6C,EAAKC,EAAN,OAAYjD,EAAZ,EAAYA,GAAZ,OAAqBwC,EAAKU,YAAeC,IAAOO,YAAYL,KAAMrD,MACtEQ,EAA6B,CAAE8C,UAAW,UAA7BZ,IAmCdiB,CAAiBZ,EAASR,EAAMC,EAAMhC,EAAYkC,GAG/CK,IAqGIa,EAlGM,WAAM,IAtDLjD,EAuDV6B,EAASqB,cAATrB,KACFD,EAAOuB,cAEPC,EAASC,cACTxD,EAAaH,IALI,EAgBnBC,uBAAY,qBAAG2D,UAAuBC,gBARtCrD,EARmB,EAQnBA,SACAW,EATmB,EASnBA,SACAZ,EAVmB,EAUnBA,YACAuD,EAXmB,EAWnBA,kBACAC,EAZmB,EAYnBA,eACAC,EAbmB,EAanBA,OACAC,EAdmB,EAcnBA,cACAC,EAfmB,EAenBA,iBAEEC,EAAgBrF,wBAEhBsF,EAAmC,IAArBF,IAA2BR,EAnBxB,EAqBGW,qBAAWvC,GA3EnBxB,EA2EyCgE,YAAepC,EAAMkC,GA3EjD,CAC/BG,KAAM,GACNP,OAAQ,GACRQ,UAAU,EACVhD,MAAOG,EAAoBrB,MAkDJ,WAqBhByB,EArBgB,KAqBTlD,EArBS,KA+BjB4F,EAAiB,WACnB,IAAMnE,EAAUgE,YAAepC,EAAMkC,GAErC,OAAOvF,EAAS,CACZ0F,KAAMrD,EAAcC,EAAUb,EAASC,EAAaC,GACpDgB,MAAOG,EAAoBrB,MAInCoE,qBAAU,WACFhB,GAAUI,GAAqBC,GAC/BlF,EAAS,CAAE2F,UAAU,IACrBC,MAEA5F,EAAS,CAAE2F,UAAU,IAtBN,WACnB,IAAMlE,EAAUgE,YAAepC,EAAMkC,GAE9BvF,EAAS,CACZ2C,MAAOG,EAAoBrB,KAmB3BqE,MAEL,CAACjB,EAAQI,EAAmBC,IAE/BW,qBAAU,WACF3C,EAAMyC,UACNC,MAEL,CAACtD,IAEJ,IAAIyD,EAAY7C,EAAMwC,KAmBtB,OAlByB,IAArBL,GAA0BnC,EAAMyC,SAChCI,EAAY,CAAC,CACTC,YAAY,EACZrD,MAAO,CAAC,CACJsD,MAAO,CAAEC,QAASC,KAClBrE,MAAO,kBAAC,EAAD,UAGP+C,GAAWK,GAAmBD,IACtCc,EAAY,CAAC,CACTC,YAAY,EACZrD,MAAO,CAAC,CACJsD,MAAO,CAAEC,QAASC,IAAcvC,UAAW,2BAC3C9B,MAAO,kBAAC,IAAD,WAMf,kBAACsE,EAAA,EAAD,CACIC,eAAe,UACfC,aAAYjD,EAAKK,cAAc,CAC3B5C,GAAI,eACJD,eAAgB,oBAEpB0F,OAAQ,SAACC,EAAQC,EAAKC,GAAd,OAA4BpB,EAAcqB,YAAazD,EAAMP,MAAM8D,GAAKrE,MAAOsE,KACvFvB,OAAQ,CACJyB,MAAO1D,EAAMP,MAAMX,KAAI,SAAA6E,GAAI,OAAIA,EAAK9E,OAAS,SAAW8E,EAAKzE,SAAO0E,QAAQ3B,GAC5EuB,UAAWtB,GAEfM,KAAMK,EACNpD,MAAOO,EAAMP,MACbS,eAAgByB,GAAUQ,EAAmB,EAAIjC,EAAeC,EAAMC,EAAMhC,QAAcyF,EAC1FC,WAAYC,KAEZ,kBAAC,IAAD,MACA,kBAAC,IAAD,Q,mCC1KNC,EAAoB,SAAC,GAAoB,IAAlBpF,EAAkB,EAAlBA,MAAOqF,EAAW,EAAXA,KAC1B7F,EAAaH,IAEnB,OACI,kBAACjB,EAAA,SAAD,KACI,kBAACC,EAAA,WAAD,CAAYyD,UAAU,8BAClB,kBAACrD,EAAA,eAAD,CAAgBC,KAAM4G,MACtB,kBAAC1G,EAAA,MAAD,CAAOC,aAAa,KAAKC,KAAK,MACzBkB,GACG,kBAAC,IAAD,CACIhB,GAAG,0BACHD,eAAe,gBAI3B,kBAACE,EAAA,eAAD,KACKoG,GACG7F,GAAc,kBAAC,IAAD,CACVR,GAAG,yBACHD,eAAe,6DAErBS,GAAc,kBAAC,IAAM+F,SAAP,KACZ,6BACA,kBAAC,IAAD,CACIvG,GAAG,iCACHD,eAAe,oDAI1BS,EAAa,kBAAC,IAAD,CAAMgG,GAAIrD,IAAOsD,WAAWpD,MACtC,kBAACnD,EAAA,OAAD,CACIwG,MAAO,CAAEC,UAAW,gDACpBrH,QAAQ,WAER,kBAAC,IAAD,CACIU,GAAG,2BACHD,eAAe,iBAIvB,kBAACG,EAAA,OAAD,CACIwG,MAAO,CAAEC,UAAW,gDACpBrH,QAAQ,UACRuD,YAAU,GAEV,kBAAC,IAAD,CACI7C,GAAG,2BACHD,eAAe,mBAS3CqG,EAAkBQ,UAAY,CAC1B5F,MAAO6F,IAAUC,KACjBT,KAAMQ,IAAUC,MAGLV,Q,wlBCvER,IAAMW,GAAqBC,mBAAgB,SAACC,GAAD,OAAaA,MAAW,KAE7DC,GAA6B,CAAEC,WAAY,EAAG9C,OAAQ,aAAcC,cAAe,QAOnF8C,GAA6B,SAACxG,GAAD,OACtCA,EAAYM,KAAI,gBAAGlB,EAAH,EAAGA,GAAH,MAA2B,CAAEqH,MAA7B,EAAOC,aAA2ChG,MAAOtB,MACxEuH,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,MAAMK,cAAcD,EAAEJ,WAE/BM,GAAkC,SAAC9G,GAAD,OAC3CA,EAASK,KAAI,gBAAGlB,EAAH,EAAGA,GAAH,MAA2B,CAAEqH,MAA7B,EAAOO,aAA2CtG,MAAOtB,MACrEuH,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,MAAMK,cAAcD,EAAEJ,WAE/BQ,GAAY,SAAC9G,EAAQO,EAAOpC,GAAhB,OAA6BA,EAAS4I,YAAc,OACxE/G,EAASO,MAyBDyG,GAAe,SAACC,EAAapH,EAAaC,GAA3B,OACxBoH,OAAOC,KAAKF,GACX9G,KAAI,SAACyE,GAAD,OACDqC,EAAYrC,IAAQqC,EAAYrC,GAAKwC,OAAS,EAzBvB,SAACxC,EAAKqC,EAAapH,EAAaC,GAAhC,MAA8C,CACzEuH,KAAM,iBAAO,CAAEA,KAAMJ,EAAYrC,GAAMA,QACvC0C,eAAgB,iBAAO,CACnBC,SAAU,cACV3C,MACA4C,MAAOP,EAAYrC,GAAKzE,KAAI,SAAAlB,GACxB,IAAMwI,EAAa5H,EAAY6H,MAAK,SAACC,GAAD,OAAUA,EAAK1I,KAAOA,KAE1D,MAAQ,CAAEoI,KAAMI,EAAaA,EAAWlB,aAAetH,EAAIsB,MAAOtB,QAG1E2I,aAAc,iBAAO,CACjBL,SAAU,cACV3C,MACA4C,MAAOP,EAAYrC,GAAKzE,KAAI,SAAAlB,GACxB,IAAM4I,EAAU/H,EAAS4H,MAAK,SAACC,GAAD,OAAUA,EAAK1I,KAAOA,KAEpD,MAAQ,CAAEoI,KAAMQ,EAAUA,EAAQhB,aAAe5H,EAAIsB,MAAOtB,SAGtE2F,IAAS,iBAAO,CAAEyC,KAAMzC,IAKgCkD,CAAgBlD,EAAKqC,EAAapH,EAAaC,EAA/CgI,QAA6D5C,KAElHnF,OAAOgI,UAoBCC,GAAc,SAACC,EAAOjF,GAAR,OAAmBA,GAAUiF,EAAMb,OAAS,EAAIa,OAAQ/C,G,wCCjCpEgD,GAjCU,WACrB,IAAM1G,EAAOuB,cAEPtD,EAAaH,IAEbnB,EAAWC,wBAqBjB,OAnBA4F,qBAAU,WACN,IAAmB,IAAfvE,EAAsB,CACtB,IAAMQ,EAAQuB,EAAKK,cAAc,CAC7B5C,GAAI,4BACJD,eAAgB,6BAEdmJ,EAAc3G,EAAKK,cAAc,CACnC5C,GAAI,yBACJD,eAAgB,uDAGpBb,EAASiK,YACLnI,EACA,SACAkI,OAGT,KAEgB,IAAf1I,EACO,kBAAC,IAAD,CAAUgG,GAAIrD,IAAOc,QAAQZ,OAGjC,M,mBCSI+F,GAtCM,WAAM,IACfpJ,EAAOqJ,cAAPrJ,GACFuC,EAAOuB,cAEPC,EAASC,cAJQ,EAMuB1D,uBAAY,qBAAG2D,UAAuBC,gBAA5EE,EANe,EAMfA,eAAgBD,EAND,EAMCA,kBAClBjF,EAAWC,wBAPM,EAS+BmK,oBAAS,GATxC,WAShBC,EATgB,KASKC,EATL,KA+BvB,OApBAzE,qBAAU,WACFhB,GAAUK,GAAkBD,GAC5BsF,aAAazJ,GAAI0J,MAAK,gBAAaC,EAAb,MAAG1F,QAAH,aAA2B/E,EAAS0K,YAAgBD,OACzED,MAAK,WACFxK,EAASiK,YACL5G,EAAKK,cAAc,CACf5C,GAAI,8BACJD,eAAgB,mCAEpB,SACAwC,EAAKK,cAAc,CACf5C,GAAI,yCACJD,eAAgB,yDACjB,CAAEC,SAETwJ,GAAuB,QAGhC,CAACzF,EAAQK,EAAgBD,IAExBoF,EACO,kBAAC,IAAD,CAAU/C,GAAIrD,IAAOc,QAAQZ,OAGjC,MCrCLwG,GAAsB,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAGlC,QAFeD,EAAME,aAAeC,oBAAchE,IAEnC6D,EAAME,aACV,kBAAC,GAAD,MAIP,kBAAC,IAAMzD,SAAP,KACKuD,EAAMI,aAAe,kBAAC,GAAD,MACrBH,IAKbF,GAAoBjD,UAAY,CAC5BkD,MAAOjD,IAAUsD,MAAM,CACnB9G,KAAMwD,IAAUuD,OAAOC,WACvBL,aAAcnD,IAAUyD,KACxBJ,YAAarD,IAAUyD,OACxBD,WACHN,SAAUlD,IAAUC,KAAKuD,YAG7B,IAAME,GAAc,SAAC,GAAD,IAAGT,EAAH,EAAGA,MAAOU,EAAV,EAAUA,eAAgBC,EAA1B,EAA0BA,UAActF,EAAxC,sDAChB,kBAAC,IAAD,QAAWA,EAAX,CAAkB9B,KAAMyG,EAAMzG,OAC1B,kBAAC,GAAD,CAAqByG,MAAOA,GACxB,kBAACW,EAAeD,MAK5BD,GAAY3D,UAAY,CACpBkD,MAAOjD,IAAUsD,MAAM,CACnB9G,KAAMwD,IAAUuD,OAAOC,WACvBL,aAAcnD,IAAUyD,KACxBJ,YAAarD,IAAUyD,OACxBD,WACHG,eAAgB3D,IAAU6D,IAC1BD,UAAW5D,IAAU8D,UAAU,CAAC9D,IAAU+D,KAAM/D,IAAUgE,SAASR,YAGxDE,U,wlBC7Bf,IAAMO,GAAkBC,gBAAK,kBAAM,uDAC7BC,GAAoBD,gBAAK,kBAAM,iCAG/BE,GAAiBF,gBAAK,kBAAM,qEAC5BG,GAAkBH,gBAAK,kBAAM,+DAEjCrB,MAAK,SAAAyB,GAAM,MAAK,CAAEC,QAASD,EAAOD,uBA8OrBG,UA3NK,WAAM,MACsB/B,oBAAS,GAD/B,WACfgC,EADe,KACCC,EADD,OAEwBjC,oBAAS,GAFjC,WAEfkC,EAFe,KAEEC,EAFF,OAGWnC,qBAHX,WAGfxI,EAHe,KAGP4K,EAHO,KAKhB3H,EAASC,cACTxD,EAAaH,IAEbsL,EAAU9H,cACV+H,EAAWC,cACXtJ,EAAOuB,cAEPG,EAAU3D,uBAAY,qBAAG2D,UAAuBC,gBAGlD8D,EAUA/D,EAVA+D,YACAzD,EASAN,EATAM,iBACA1D,EAQAoD,EARApD,SACAiL,EAOA7H,EAPA6H,SACA3E,EAMAlD,EANAkD,WACA4E,EAKA9H,EALA8H,cACAnL,EAIAqD,EAJArD,YACAoL,EAGA/H,EAHA+H,kBACA5H,EAEAH,EAFAG,eACAD,EACAF,EADAE,kBAGEjF,EAAWC,wBAEjB4F,qBAAU,WACNkH,QAAQC,IAAI,CAAChN,EAASiN,eAAoBjN,EAASkN,eAAiBlN,EAASmN,YAAaC,mBACzF5C,MAAK,kBAAM+B,GAAmB,QAChC,IAEH,IAAMc,EAAgBtE,OAAOuE,QAAQxE,GAAa9G,KAAI,+CAA0BJ,OAAOgI,SAASX,OAAS,EAEzGpD,qBAAU,WACFyG,IACAD,EAAkBxH,GAA+B,IAArBQ,IAA2BgI,GACvDE,aAAYxI,MAEjB,CAAC2H,EAAUJ,IAEdzG,qBAAU,WACFjE,IAAWkH,EAAYI,MACvBsD,EAAe1D,EAAYI,QAEhC,CAACJ,EAAYI,OAEhBrD,qBAAU,WACFyG,GAAmBzH,GACnBwH,EAAuC,IAArBhH,IAA2BgI,KAElD,CAACxI,IAEJ,IAAM2I,EAAY,SAACC,EAAIC,GAAL,OAAc1N,EAAS2N,YAAYD,EAAMd,KAIrDgB,EAAoBC,KAAKC,KAAKzI,EAAmBuH,GAEvD/G,qBAAU,WACFhB,GAAUQ,EAAmB,GAAK4C,EAAa4F,KAAKE,IAAIH,EAAmB,IAC3EJ,EAAU,EAAII,MAItB,IAAMI,EAAmB,CACrBC,UAAW5I,EACXqI,KAAMzF,EACNiG,QAAStB,EACTY,YACAW,gBAfoB,SAACV,EAAIS,GAAL,OAAiBlO,EAAS2N,YAAY,EAAGO,MAkB3DE,EAAyB,SACxBJ,GADqB,IAExBK,cAAe,KACfjO,QAAS,SACTkO,WAAW,IAGTC,KAAyB1J,GAAWK,GAAmBD,GAAuB6H,GAkGpF,OACI,kBAAC,IAAMzF,SAAP,KACI,kBAAC,WAAD,CAAUmH,SAAU,MAChB,kBAAC,GAAD,CAAaC,OAAK,EAAC7D,MAAO3G,IAAOC,iBAAkBqH,UAAWQ,KAC9D,kBAAC,GAAD,CAAa0C,OAAK,EAAC7D,MAAO3G,IAAOI,cAAekH,UAAWO,KAC3D,kBAAC,GAAD,CACI2C,OAAK,EACL7D,MAAO3G,IAAOsD,WACdgE,UAAWS,GACXV,eAAgB,CACZ5J,YAAamI,GAAYnI,EAAauD,GACtCyJ,iBAAkB7E,GAAYlI,EAAUuD,GACxCzC,QAAQ,EACRkM,QAAS,kBAAMlC,EAAQnJ,KAAKW,IAAOc,QAAQZ,OAC3CyK,aAAc,SAACnE,GAAD,OJtOV,SAACzK,EAAUyK,GACnCoE,aAAkBpE,EAAO3J,IACzBd,EAASmN,YAAanF,KIoOwB4G,CAAa5O,EAAUyK,IACjDqE,mBAAmB,KAG3B,kBAAC,GAAD,CAAaL,OAAK,EAAC7D,MAAO3G,IAAOO,YAAa+G,UAAWK,MAE7D,kBAACmD,EAAA,WAAD,KACI,kBAACA,EAAA,gBAAD,CAAiBjN,MAAOuB,EAAKK,cAAc,CACvC5C,GAAI,kBACJD,eAAgB,eAGxB,kBAACmO,EAAA,QAAD,CAASxF,KAAK,WACP4C,GAAkBS,EACjB,kBAAC,EAAD,CACI/K,MAAO+K,EAAgBA,EAAc/K,WAAQiF,EAC7CI,KAAM0F,EAAgBA,EAAcoC,YAASlI,IA7H7D,kBAAC,IAAMM,SAAP,KACI,kBAAC6H,EAAA,eAAD,CACIC,WAAYZ,GAAuB,kBAAC,IAAD,MAAuBlJ,EAAmB,EAAI2I,OAAmBjH,EACpGqI,cAAe9N,EAAa,CACxBuC,QAAS,CACL,kBAAC,IAAD,CAAMyD,GAAIrD,IAAOsD,WAAWpD,KAAMsC,IAAI,mBAClC,kBAACzF,EAAA,OAAD,CAAQZ,QAAQ,UAAUU,GAAG,mBACzB,kBAAC,IAAD,CACIA,GAAG,oBACHD,eAAe,mBAK/B,CACAgD,QAAS,CACL,kBAACwL,GAAA,QAAD,CACIC,QACIjM,EAAKK,cAAc,CACf5C,GAAI,yBACJD,eAAgB,uDAGxB4F,IAAI,mBAEJ,0BAAM8I,SAAS,KACX,kBAACvO,EAAA,OAAD,CAAQZ,QAAQ,UAAUuD,YAAU,EAAC7C,GAAG,mBACpC,kBAAC,IAAD,CACIA,GAAG,oBACHD,eAAe,oBAOvC2O,aAAc,CACVC,MAAO,CAAC,CACJtH,MAAO9E,EAAKK,cAAc,CACtB5C,GAAI,eACJD,eAAgB,SAEpB6O,aAAc,CACV,aAAcrM,EAAKK,cAAc,CAC7B5C,GAAI,uBACJD,eAAgB,mBAEpB8O,SAAU,SAACnJ,EAAQpE,GACfoK,EAAepK,GACfyF,IAAmB,kBAAMc,GAAU,OAAQvG,EAAOpC,OAEtDoC,MAAOR,IAEZ,CACCuG,MAAO9E,EAAKK,cAAc,CACtB5C,GAAI,eACJD,eAAgB,SAEpB2I,KAAM,WACNkG,aAAc,CACVC,SAAU,SAACnJ,EAAQpE,GAAT,OACNuG,GAAU,iBAAkBvG,EAAOpC,IACvCyP,MAAOvH,GAA2BxG,GAAe,IACjDU,MAAO0G,EAAYK,iBAExB,CACChB,MAAO9E,EAAKK,cAAc,CACtB5C,GAAI,sBACJD,eAAgB,gBAEpB2I,KAAM,WACNkG,aAAc,CACVC,SAAU,SAACnJ,EAAQpE,GAAT,OACNuG,GAAU,eAAgBvG,EAAOpC,IACrCyP,MAAOhH,GAAgC9G,GAAY,IACnDS,MAAO0G,EAAYW,iBAI/BmG,oBAAqB,CACjBC,QAAShH,GAAaC,EAAapH,EAAaC,GAChDmO,SAAU,SAACtJ,EAAQ6C,EAAO0G,GAAhB,OACN/P,EAAS4I,YJ7JN,SAACS,EAAOP,EAAaiH,GAC5C,GAAIA,EACA,OACIhH,OAAOC,KAAKF,GAAavG,QAAO,SAACC,EAAKwN,GAAN,UAAC,MAC1BxN,GADyB,UAE3BwN,OAAOjJ,MACR,IAIZ,IAAMkJ,EAAO5G,EAAM,GAEnB,gBACOP,GADP,UAEKmH,EAAKxJ,IAAMwJ,EAAK5G,MAAQP,EAAYmH,EAAKxJ,KAAK7E,QAAO,SAACQ,GAAD,OAAWA,IAAU6N,EAAK5G,MAAM,GAAGjH,cAAS2E,II+I3DmJ,CAAY7G,EAAOP,EAAaiH,SAGnE,kBAAC,EAAD,MACA,kBAACb,EAAA,eAAD,CACIC,WACIZ,GAAuB,kBAAC,IAAD,MACjBlJ,EAAmB,EAAI+I,OAAyBrH,S,iCC7N1E,sDAGagE,EAAY,WAAM,IACnBjK,EAAOqJ,cAAPrJ,GAGR,OAFeM,uBAAY,qBAAG2D,QAAsBzC,SAASiH,MAAK,SAAAkB,GAAM,OAAIA,EAAO3J,KAAOA,U,iCCL9F,8CAEagE,EAAc,WAGvB,OAFiB1D,uBAAY,qBAAG2D,QAAsBF,WAEnC,I,iCCLvB,8CAEagK,EAAoB,SAAC/N,GAAD,OAAQqP,cAAgBC,wBAAwBtP,GAAxC,OAAkD","file":"js/sourcePage.d878077fa58598e02888.js","sourcesContent":["import React from 'react';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { FormattedMessage } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n    const dispatch = useDispatch();\n\n    return (\n        <Bullseye>\n            <EmptyState variant={EmptyStateVariant.small}>\n                <EmptyStateIcon icon={SearchIcon} />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    <FormattedMessage\n                        defaultMessage=\"No sources found\"\n                        id=\"sources.noResultsFoundTitle\"\n                    />\n                </Title>\n                <EmptyStateBody>\n                    <FormattedMessage\n                        defaultMessage=\"No sources match the filter criteria. Remove\n                    all filters or clear all filters to show sources.\"\n                        id=\"sources.noResultsFoundDescription\"\n                    />\n                </EmptyStateBody>\n                <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n                    <FormattedMessage\n                        defaultMessage=\"Clear all filters\"\n                        id=\"sources.clearAllFilters\"\n                    />\n                </Button>\n            </EmptyState>\n        </Bullseye>\n    );};\n\nexport default EmptyStateTable;\n","import { useSelector } from 'react-redux';\n\nexport const useIsOrgAdmin = () => {\n    const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n    return isOrgAdmin;\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, sortable } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\n\nimport { sortEntities } from '../../redux/sources/actions';\nimport { formatters } from './formatters';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { sourcesColumns, COLUMN_COUNT } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useIsOrgAdmin } from '../../hooks/useIsOrgAdmin';\nimport { replaceRouteId, routes } from '../../Routes';\n\nconst itemToCells = (item, columns, sourceTypes, appTypes) => columns.filter(column => column.title || column.hidden)\n.map(col => ({\n    title: col.formatter ? formatters(col.formatter)(item[col.value], item, { sourceTypes, appTypes }) : item[col.value] || ''\n}));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes) =>\n    entities.filter(({ hidden }) => !hidden).reduce((acc, item) => ([\n        ...acc,\n        {\n            ...item,\n            isOpen: !!item.expanded,\n            cells: itemToCells(item, columns, sourceTypes, appTypes),\n            disableActions: !!item.isDeleting\n        }\n    ]), []);\n\nexport const prepareColumnsCells = columns => columns.filter(column => column.title || column.hidden).map(column => ({\n    title: column.title || '',\n    value: column.value,\n    hidden: column.hidden,\n    ...(column.sortable && { transforms: [sortable] })\n}));\n\nconst reducer = (state, payload) => ({ ...state, ...payload });\n\nconst initialState = (columns) => ({\n    rows: [],\n    sortBy: {},\n    isLoaded: false,\n    cells: prepareColumnsCells(columns)\n});\n\nexport const insertEditAction = (actions, intl, push, isOrgAdmin, disabledProps) => actions.splice(1, 0, {\n    title: intl.formatMessage({\n        id: 'sources.edit',\n        defaultMessage: 'Edit'\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesEdit.path, id)),\n    ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n});\n\nexport const actionResolver = (intl, push, isOrgAdmin) => (rowData) => {\n    const tooltip = intl.formatMessage({\n        id: 'sources.notAdminButton',\n        defaultMessage: 'You do not have permission to perform this action.'\n    });\n\n    const disabledProps = {\n        tooltip,\n        isDisabled: true,\n        className: 'ins-c-sources__disabled-drodpown-item',\n    };\n\n    const actions = [{\n        title: intl.formatMessage({\n            id: 'sources.manageApps',\n            defaultMessage: 'Manage applications'\n        }),\n        onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourceManageApps.path, id)),\n        ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n    },\n    {\n        title: intl.formatMessage({\n            id: 'sources.delete',\n            defaultMessage: 'Delete'\n        }),\n        onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesRemove.path, id)),\n        ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n    }];\n\n    const isSourceEditable = !rowData.imported;\n\n    if (isSourceEditable) {\n        insertEditAction(actions, intl, push, isOrgAdmin, disabledProps);\n    }\n\n    return actions;\n};\n\nconst SourcesTable = () => {\n    const { push } = useHistory();\n    const intl = useIntl();\n\n    const loaded = useIsLoaded();\n    const isOrgAdmin = useIsOrgAdmin();\n\n    const {\n        appTypes,\n        entities,\n        sourceTypes,\n        sourceTypesLoaded,\n        appTypesLoaded,\n        sortBy,\n        sortDirection,\n        numberOfEntities\n    } = useSelector(({ sources }) => sources, shallowEqual);\n    const reduxDispatch = useDispatch();\n\n    const notSortable = numberOfEntities === 0 || !loaded;\n\n    const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n    const refreshColumns = () => {\n        const columns = sourcesColumns(intl, notSortable);\n\n        return dispatch({\n            cells: prepareColumnsCells(columns)\n        });\n    };\n\n    const refreshSources = () => {\n        const columns = sourcesColumns(intl, notSortable);\n\n        return dispatch({\n            rows: renderSources(entities, columns, sourceTypes, appTypes),\n            cells: prepareColumnsCells(columns)\n        });\n    };\n\n    useEffect(() => {\n        if (loaded && sourceTypesLoaded && appTypesLoaded) {\n            dispatch({ isLoaded: true });\n            refreshSources();\n        } else {\n            dispatch({ isLoaded: false });\n            refreshColumns();\n        }\n    }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n    useEffect(() => {\n        if (state.isLoaded) {\n            refreshSources();\n        }\n    }, [entities]);\n\n    let shownRows = state.rows;\n    if (numberOfEntities === 0 && state.isLoaded) {\n        shownRows = [{\n            heightAuto: true,\n            cells: [{\n                props: { colSpan: COLUMN_COUNT },\n                title: <EmptyStateTable />\n            }]\n        }];\n    } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n        shownRows = [{\n            heightAuto: true,\n            cells: [{\n                props: { colSpan: COLUMN_COUNT, className: 'sources-placeholder-row' },\n                title: <PlaceHolderTable />\n            }]\n        }];\n    }\n\n    return (\n        <Table\n            gridBreakPoint='grid-lg'\n            aria-label={intl.formatMessage({\n                id: 'sources.list',\n                defaultMessage: 'List of Sources'\n            })}\n            onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n            sortBy={{\n                index: state.cells.map(cell => cell.hidden ? 'hidden' : cell.value).indexOf(sortBy),\n                direction: sortDirection\n            }}\n            rows={shownRows}\n            cells={state.cells}\n            actionResolver={loaded && numberOfEntities > 0 ? actionResolver(intl, push, isOrgAdmin) : undefined}\n            rowWrapper={RowWrapperLoader}\n        >\n            <TableHeader />\n            <TableBody />\n        </Table>\n    );\n};\n\nexport default SourcesTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\n\nimport { Link } from 'react-router-dom';\nimport { routes } from '../Routes';\nimport { useIsOrgAdmin } from '../hooks/useIsOrgAdmin';\n\nconst SourcesEmptyState = ({ title, body }) => {\n    const isOrgAdmin = useIsOrgAdmin();\n\n    return (\n        <Bullseye>\n            <EmptyState className=\"ins-c-sources__empty-state\">\n                <EmptyStateIcon icon={WrenchIcon} />\n                <Title headingLevel=\"h5\" size=\"lg\">\n                    {title ? title :\n                        <FormattedMessage\n                            id=\"sources.emptyStateTitle\"\n                            defaultMessage=\"No sources\"\n                        />\n                    }\n                </Title>\n                <EmptyStateBody>\n                    {body ? body :\n                        isOrgAdmin && <FormattedMessage\n                            id=\"sources.emptyStateBody\"\n                            defaultMessage=\"No sources have been defined. To start define a source.\"\n                        />}\n                    {!isOrgAdmin && <React.Fragment>\n                        <br />\n                        <FormattedMessage\n                            id=\"sources.emptyStateBodyNotAdmin\"\n                            defaultMessage=\"You do not have permission to define sources.\"\n                        />\n                    </React.Fragment>}\n                </EmptyStateBody>\n                {isOrgAdmin ? <Link to={routes.sourcesNew.path}>\n                    <Button\n                        style={{ marginTop: 'var(--pf-c-empty-state--c-button--MarginTop)' }}\n                        variant=\"primary\"\n                    >\n                        <FormattedMessage\n                            id=\"sources.emptyStateButton\"\n                            defaultMessage=\"Add source\"\n                        />\n                    </Button>\n                </Link> :\n                    <Button\n                        style={{ marginTop: 'var(--pf-c-empty-state--c-button--MarginTop)' }}\n                        variant=\"primary\"\n                        isDisabled\n                    >\n                        <FormattedMessage\n                            id=\"sources.emptyStateButton\"\n                            defaultMessage=\"Add source\"\n                        />\n                    </Button>\n                }\n            </EmptyState>\n        </Bullseye>\n    );\n};\n\nSourcesEmptyState.propTypes = {\n    title: PropTypes.node,\n    body: PropTypes.node\n};\n\nexport default SourcesEmptyState;\n","import awesomeDebounce from 'awesome-debounce-promise';\nimport {\n    loadEntities,\n    filterSources,\n} from '../../redux/sources/actions';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = { pageNumber: 1, sortBy: 'created_at', sortDirection: 'desc' };\n\nexport const afterSuccess = (dispatch, source) => {\n    checkSourceStatus(source.id);\n    dispatch(loadEntities(afterSuccessLoadParameters));\n};\n\nexport const prepareSourceTypeSelection = (sourceTypes) =>\n    sourceTypes.map(({ id, product_name }) => ({ label: product_name, value: id }))\n    .sort((a, b) => a.label.localeCompare(b.label));\n\nexport const prepareApplicationTypeSelection = (appTypes) =>\n    appTypes.map(({ id, display_name }) => ({ label: display_name, value: id }))\n    .sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) => dispatch(filterSources({\n    [column]: value\n}));\n\nexport const chipsFormatters = (key, filterValue, sourceTypes, appTypes) => ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n        category: 'Source Type',\n        key,\n        chips: filterValue[key].map(id => {\n            const sourceType = sourceTypes.find((type) => type.id === id);\n\n            return ({ name: sourceType ? sourceType.product_name : id, value: id });\n        })\n    }),\n    applications: () => ({\n        category: 'Application',\n        key,\n        chips: filterValue[key].map(id => {\n            const appType = appTypes.find((type) => type.id === id);\n\n            return ({ name: appType ? appType.display_name : id, value: id });\n        })\n    })\n}[key] || (() => ({ name: key })));\n\nexport const prepareChips = (filterValue, sourceTypes, appTypes) =>\n    Object.keys(filterValue)\n    .map((key) =>\n        filterValue[key] && filterValue[key].length > 0 ? chipsFormatters(key, filterValue, sourceTypes, appTypes)() : undefined\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n    if (deleteAll) {\n        return (\n            Object.keys(filterValue).reduce((acc, curr) => ({\n                ...acc,\n                [curr]: undefined\n            }), {})\n        );\n    }\n\n    const chip = chips[0];\n\n    return ({\n        ...filterValue,\n        [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined\n    });\n};\n\nexport const loadedTypes = (types, loaded) => loaded && types.length > 0 ? types : undefined;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage } from '../../redux/sources/actions';\nimport { useIsOrgAdmin } from '../../hooks/useIsOrgAdmin';\nimport { routes } from '../../Routes';\n\nconst RedirectNotAdmin = () => {\n    const intl = useIntl();\n\n    const isOrgAdmin = useIsOrgAdmin();\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (isOrgAdmin === false) {\n            const title = intl.formatMessage({\n                id: 'sources.insufficietnPerms',\n                defaultMessage: 'Insufficient permissions'\n            });\n            const description = intl.formatMessage({\n                id: 'sources.notAdminButton',\n                defaultMessage: 'You do not have permission to perform this action.'\n            });\n\n            dispatch(addMessage(\n                title,\n                'danger',\n                description\n            ));\n        }\n    }, []);\n\n    if (isOrgAdmin === false) {\n        return <Redirect to={routes.sources.path} />;\n    }\n\n    return null;\n};\n\nexport default RedirectNotAdmin;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useParams, Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage, addHiddenSource } from '../../redux/sources/actions';\nimport { doLoadSource } from '../../api/entities';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { routes } from '../../Routes';\n\nconst RedirectNoId = () => {\n    const { id } = useParams();\n    const intl = useIntl();\n\n    const loaded = useIsLoaded();\n\n    const { appTypesLoaded, sourceTypesLoaded } = useSelector(({ sources }) => sources, shallowEqual);\n    const dispatch = useDispatch();\n\n    const [applicationIsLoaded, setIsApplicationLoaded] = useState(false);\n\n    useEffect(() => {\n        if (loaded && appTypesLoaded && sourceTypesLoaded) {\n            doLoadSource(id).then(({ sources: [source] }) => dispatch(addHiddenSource(source)))\n            .then(() => {\n                dispatch(addMessage(\n                    intl.formatMessage({\n                        id: 'sources.sourceNotFoundTitle',\n                        defaultMessage: 'Requested source was not found'\n                    }),\n                    'danger',\n                    intl.formatMessage({\n                        id: 'sources.sourceNotFoundTitleDescription',\n                        defaultMessage: 'Source with { id } was not found. Try it again later.'\n                    }, { id })\n                ));\n                setIsApplicationLoaded(true);\n            });\n        }\n    }, [loaded, appTypesLoaded, sourceTypesLoaded]);\n\n    if (applicationIsLoaded) {\n        return <Redirect to={routes.sources.path} />;\n    }\n\n    return null;\n};\n\nexport default RedirectNoId;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport RedirectNotAdmin from '../RedirectNotAdmin/RedirectNotAdmin';\nimport { useSource } from '../../hooks/useSource';\nimport RedirectNoId from '../RedirectNoId/RedirectNoId';\n\nconst CustomRouteInternal = ({ route, children }) => {\n    const source = route.redirectNoId ? useSource() : undefined;\n\n    if (!source && route.redirectNoId) {\n        return <RedirectNoId />;\n    }\n\n    return (\n        <React.Fragment>\n            {route.writeAccess && <RedirectNotAdmin />}\n            {children}\n        </React.Fragment>\n    );\n};\n\nCustomRouteInternal.propTypes = {\n    route: PropTypes.shape({\n        path: PropTypes.string.isRequired,\n        redirectNoId: PropTypes.bool,\n        writeAccess: PropTypes.bool\n    }).isRequired,\n    children: PropTypes.node.isRequired\n};\n\nconst CustomRoute = ({ route, componentProps, Component, ...props }) =>  (\n    <Route {...props} path={route.path}>\n        <CustomRouteInternal route={route}>\n            <Component  {...componentProps}/>\n        </CustomRouteInternal>\n    </Route>\n);\n\nCustomRoute.propTypes = {\n    route: PropTypes.shape({\n        path: PropTypes.string.isRequired,\n        redirectNoId: PropTypes.bool,\n        writeAccess: PropTypes.bool\n    }).isRequired,\n    componentProps: PropTypes.any,\n    Component: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n};\n\nexport default CustomRoute;\n","import React, { useEffect, useState, lazy, Suspense } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport {\n    loadAppTypes,\n    loadEntities,\n    loadSourceTypes,\n    filterSources\n} from '../redux/sources/actions';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/components/cjs/PageHeader';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\n\nimport SourcesTable from '../components/SourcesTable/SourcesTable';\nimport SourcesEmptyState from '../components/SourcesEmptyState';\nimport { pageAndSize } from '../redux/sources/actions';\nimport { routes } from '../Routes';\n\nconst SourceEditModal = lazy(() => import(/* webpackChunkName: \"edit\" */ '../components/SourceEditForm/SourceEditModal'));\nconst SourceRemoveModal = lazy(() => import(/* webpackChunkName: \"remove\" */\n    '../components/SourceRemoveModal/SourceRemoveModal'\n));\nconst AddApplication = lazy(() => import(/* webpackChunkName: \"addApp\" */ '../components/AddApplication/AddApplication'));\nconst AddSourceWizard = lazy(() => import(\n    /* webpackChunkName: \"addSource\" */ '@redhat-cloud-services/frontend-components-sources/cjs/addSourceWizard'\n).then(module => ({ default: module.AddSourceWizard })));\n\nimport {\n    prepareChips,\n    removeChips,\n    setFilter,\n    debouncedFiltering,\n    prepareSourceTypeSelection,\n    afterSuccess,\n    loadedTypes,\n    prepareApplicationTypeSelection\n} from './Sources/helpers';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport { useIsOrgAdmin } from '../hooks/useIsOrgAdmin';\nimport CustomRoute from '../components/CustomRoute/CustomRoute';\nimport { updateQuery, parseQuery } from '../utilities/urlQuery';\nimport { Tooltip } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { PaginationLoader } from '../components/SourcesTable/loaders';\n\nconst SourcesPage = () => {\n    const [showEmptyState, setShowEmptyState] = useState(false);\n    const [checkEmptyState, setCheckEmptyState] = useState(false);\n    const [filter, setFilterValue] = useState();\n\n    const loaded = useIsLoaded();\n    const isOrgAdmin = useIsOrgAdmin();\n\n    const history = useHistory();\n    const location = useLocation();\n    const intl = useIntl();\n\n    const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n    const {\n        filterValue,\n        numberOfEntities,\n        appTypes,\n        pageSize,\n        pageNumber,\n        fetchingError,\n        sourceTypes,\n        paginationClicked,\n        appTypesLoaded,\n        sourceTypesLoaded\n    } = sources;\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        Promise.all([dispatch(loadSourceTypes()), dispatch(loadAppTypes()), dispatch(loadEntities(parseQuery()))])\n        .then(() => setCheckEmptyState(true));\n    }, []);\n\n    const hasSomeFilter = Object.entries(filterValue).map(([_key, value]) => value).filter(Boolean).length > 0;\n\n    useEffect(() => {\n        if (checkEmptyState) {\n            setShowEmptyState(loaded && numberOfEntities === 0 && !hasSomeFilter);\n            updateQuery(sources);\n        }\n    }, [location, checkEmptyState]);\n\n    useEffect(() => {\n        if (filter !== filterValue.name) {\n            setFilterValue(filterValue.name);\n        }\n    }, [filterValue.name]);\n\n    useEffect(() => {\n        if (checkEmptyState && loaded) {\n            setShowEmptyState(numberOfEntities === 0 && !hasSomeFilter);\n        }\n    }, [loaded]);\n\n    const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n    const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n    const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n    useEffect(() => {\n        if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n            onSetPage({}, maximumPageNumber);\n        }\n    });\n\n    const paginationConfig = {\n        itemCount: numberOfEntities,\n        page: pageNumber,\n        perPage: pageSize,\n        onSetPage,\n        onPerPageSelect\n    };\n\n    const paginationConfigBottom = {\n        ...paginationConfig,\n        dropDirection: 'up',\n        variant: 'bottom',\n        isCompact: false\n    };\n\n    const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n    const mainContent = () => (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n                actionsConfig={isOrgAdmin ? {\n                    actions: [\n                        <Link to={routes.sourcesNew.path} key=\"addSourceButton\">\n                            <Button variant='primary' id=\"addSourceButton\">\n                                <FormattedMessage\n                                    id=\"sources.addSource\"\n                                    defaultMessage=\"Add source\"\n                                />\n                            </Button>\n                        </Link>\n                    ]\n                } : {\n                    actions: [\n                        <Tooltip\n                            content={\n                                intl.formatMessage({\n                                    id: 'sources.notAdminButton',\n                                    defaultMessage: 'You do not have permission to perform this action.'\n                                })\n                            }\n                            key=\"addSourceButton\"\n                        >\n                            <span tabIndex=\"0\">\n                                <Button variant='primary' isDisabled id=\"addSourceButton\">\n                                    <FormattedMessage\n                                        id=\"sources.addSource\"\n                                        defaultMessage=\"Add source\"\n                                    />\n                                </Button>\n                            </span>\n                        </Tooltip>\n                    ]\n                }}\n                filterConfig={{\n                    items: [{\n                        label: intl.formatMessage({\n                            id: 'sources.name',\n                            defaultMessage: 'Name'\n                        }),\n                        filterValues: {\n                            'aria-label': intl.formatMessage({\n                                id: 'sources.filterByName',\n                                defaultMessage: 'Filter by name'\n                            }),\n                            onChange: (_event, value) => {\n                                setFilterValue(value);\n                                debouncedFiltering(() => setFilter('name', value, dispatch));\n                            },\n                            value: filter\n                        }\n                    }, {\n                        label: intl.formatMessage({\n                            id: 'sources.type',\n                            defaultMessage: 'Type'\n                        }),\n                        type: 'checkbox',\n                        filterValues: {\n                            onChange: (_event, value) =>\n                                setFilter('source_type_id', value, dispatch),\n                            items: prepareSourceTypeSelection(sourceTypes || []),\n                            value: filterValue.source_type_id\n                        }\n                    }, {\n                        label: intl.formatMessage({\n                            id: 'sources.application',\n                            defaultMessage: 'Application'\n                        }),\n                        type: 'checkbox',\n                        filterValues: {\n                            onChange: (_event, value) =>\n                                setFilter('applications', value, dispatch),\n                            items: prepareApplicationTypeSelection(appTypes || []),\n                            value: filterValue.applications\n                        }\n                    }]\n                }}\n                activeFiltersConfig={{\n                    filters: prepareChips(filterValue, sourceTypes, appTypes),\n                    onDelete: (_event, chips, deleteAll) =>\n                        dispatch(filterSources(removeChips(chips, filterValue, deleteAll)))\n                }}\n            />\n            <SourcesTable />\n            <PrimaryToolbar\n                pagination={\n                    showPaginationLoader ? <PaginationLoader />\n                        : numberOfEntities > 0 ? paginationConfigBottom : undefined\n                }\n            />\n        </React.Fragment>\n    );\n\n    return (\n        <React.Fragment>\n            <Suspense fallback={null}>\n                <CustomRoute exact route={routes.sourceManageApps} Component={AddApplication}/>\n                <CustomRoute exact route={routes.sourcesRemove} Component={SourceRemoveModal}/>\n                <CustomRoute\n                    exact\n                    route={routes.sourcesNew}\n                    Component={AddSourceWizard}\n                    componentProps={{\n                        sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n                        applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n                        isOpen: true,\n                        onClose: () => history.push(routes.sources.path),\n                        afterSuccess: (source) => afterSuccess(dispatch, source),\n                        hideSourcesButton: true\n                    }}\n                />\n                <CustomRoute exact route={routes.sourcesEdit} Component={SourceEditModal}/>\n            </Suspense>\n            <PageHeader>\n                <PageHeaderTitle title={intl.formatMessage({\n                    id: 'sources.sources',\n                    defaultMessage: 'Sources'\n                })}/>\n            </PageHeader>\n            <Section type='content'>\n                { (showEmptyState || fetchingError) ?\n                    <SourcesEmptyState\n                        title={fetchingError ? fetchingError.title : undefined}\n                        body={fetchingError ? fetchingError.detail : undefined}\n                    />\n                    :\n                    mainContent()}\n            </Section>\n        </React.Fragment>\n    );\n};\n\nexport default SourcesPage;\n","import { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nexport const useSource = () => {\n    const { id } = useParams();\n    const source = useSelector(({ sources }) => sources.entities.find(source => source.id === id));\n\n    return source;\n};\n","import { useSelector } from 'react-redux';\n\nexport const useIsLoaded = () => {\n    const isLoaded = useSelector(({ sources }) => sources.loaded);\n\n    return isLoaded <= 0;\n};\n","import { getSourcesApi } from './entities';\n\nexport const checkSourceStatus = (id) => getSourcesApi().checkAvailabilitySource(id).catch(() => {});\n"],"sourceRoot":""}