{"version":3,"sources":["webpack:///./src/components/SourcesTable/EmptyStateTable.js","webpack:///./src/hooks/useIsOrgAdmin.js","webpack:///./src/components/SourcesTable/SourcesTable.js","webpack:///./src/components/SourcesEmptyState.js","webpack:///./src/components/SourcesErrorState.js","webpack:///./src/pages/Sources/helpers.js","webpack:///./src/components/RedirectNotAdmin/RedirectNotAdmin.js","webpack:///./src/components/RedirectNoId/RedirectNoId.js","webpack:///./src/components/CustomRoute/CustomRoute.js","webpack:///./src/pages/Sources.js","webpack:///./src/hooks/useSource.js","webpack:///./src/hooks/useIsLoaded.js","webpack:///./src/api/checkSourceStatus.js"],"names":["EmptyStateTable","intl","useIntl","dispatch","useDispatch","Bullseye","EmptyState","variant","EmptyStateVariant","small","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","formatMessage","id","defaultMessage","EmptyStateBody","Button","onClick","clearFilters","useIsOrgAdmin","useSelector","user","isOrgAdmin","itemToCells","item","columns","sourceTypes","appTypes","filter","column","title","hidden","map","col","formatter","formatters","value","renderSources","entities","reduce","acc","isOpen","expanded","cells","disableActions","isDeleting","prepareColumnsCells","sortable","transforms","reducer","state","payload","actionResolver","push","rowData","disabledProps","tooltip","isDisabled","className","actions","_ev","_i","replaceRouteId","routes","sourceManageApps","path","component","sourcesRemove","imported","splice","sourcesEdit","insertEditAction","SourcesTable","useHistory","loaded","useIsLoaded","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","sortBy","sortDirection","numberOfEntities","reduxDispatch","notSortable","useReducer","sourcesColumns","rows","isLoaded","refreshSources","useEffect","refreshColumns","shownRows","heightAuto","props","colSpan","COLUMN_COUNT","Table","gridBreakPoint","aria-label","onSort","_event","key","direction","sortEntities","index","cell","indexOf","undefined","rowWrapper","RowWrapperLoader","SourcesEmptyState","WrenchIcon","Fragment","to","sourcesNew","SourcesErrorState","ExclamationCircleIcon","color","a","chunks","Text","href","target","rel","window","location","debouncedFiltering","awesomeDebounce","refresh","afterSuccessLoadParameters","pageNumber","prepareSourceTypeSelection","label","product_name","sort","b","localeCompare","prepareApplicationTypeSelection","display_name","setFilter","filterSources","prepareChips","filterValue","Object","keys","length","name","source_type_id","category","chips","sourceType","find","type","applications","appType","chipsFormatters","Boolean","loadedTypes","types","RedirectNotAdmin","description","addMessage","RedirectNoId","useParams","useState","applicationIsLoaded","setIsApplicationLoaded","doLoadSource","then","source","addHiddenSource","CustomRouteInternal","route","children","redirectNoId","useSource","writeAccess","propTypes","PropTypes","shape","string","isRequired","bool","node","CustomRoute","componentProps","Component","any","oneOfType","func","object","SourceEditModal","lazy","SourceRemoveModal","AddApplication","AddSourceWizard","module","default","SourcesPage","showEmptyState","setShowEmptyState","checkEmptyState","setCheckEmptyState","setFilterValue","loadingError","setLoadingError","history","useLocation","pageSize","fetchingError","paginationClicked","Promise","all","loadSourceTypes","loadAppTypes","loadEntities","parseQuery","error","hasSomeFilter","entries","updateQuery","onSetPage","_e","page","pageAndSize","maximumPageNumber","Math","ceil","max","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","isErrored","fallback","exact","applicationTypes","onClose","afterSuccess","checkSourceStatus","hideSourcesButton","PageHeader","Section","PrimaryToolbar","pagination","actionsConfig","Tooltip","content","tabIndex","filterConfig","items","filterValues","onChange","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips","getSourcesApi","checkAvailabilitySource"],"mappings":"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","file":"js/sourcePage.fe5de9e1dc60da5ee60c.js","sourcesContent":["import React from 'react';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n\n    return (\n        <Bullseye>\n            <EmptyState variant={EmptyStateVariant.small}>\n                <EmptyStateIcon icon={SearchIcon} />\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    { intl.formatMessage({\n                        id: 'sources.noResultsFoundTitle',\n                        defaultMessage: 'No sources found'\n                    }) }\n                </Title>\n                <EmptyStateBody>\n                    { intl.formatMessage({\n                        id: 'sources.noResultsFoundDescription',\n                        // eslint-disable-next-line max-len\n                        defaultMessage: 'No sources match the filter criteria. Remove all filters or clear all filters to show sources.'\n                    }) }\n                </EmptyStateBody>\n                <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n                    { intl.formatMessage({\n                        id: 'sources.clearAllFilters',\n                        defaultMessage: 'Clear all filters'\n                    }) }\n                </Button>\n            </EmptyState>\n        </Bullseye>\n    );};\n\nexport default EmptyStateTable;\n","import { useSelector } from 'react-redux';\n\nexport const useIsOrgAdmin = () => {\n    const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n    return isOrgAdmin;\n};\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, sortable } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\n\nimport { sortEntities } from '../../redux/sources/actions';\nimport { formatters } from './formatters';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { sourcesColumns, COLUMN_COUNT } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useIsOrgAdmin } from '../../hooks/useIsOrgAdmin';\nimport { replaceRouteId, routes } from '../../Routes';\n\nconst itemToCells = (item, columns, sourceTypes, appTypes) => columns.filter(column => column.title || column.hidden)\n.map(col => ({\n    title: col.formatter ? formatters(col.formatter)(item[col.value], item, { sourceTypes, appTypes }) : item[col.value] || ''\n}));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes) =>\n    entities.filter(({ hidden }) => !hidden).reduce((acc, item) => ([\n        ...acc,\n        {\n            ...item,\n            isOpen: !!item.expanded,\n            cells: itemToCells(item, columns, sourceTypes, appTypes),\n            disableActions: !!item.isDeleting\n        }\n    ]), []);\n\nexport const prepareColumnsCells = columns => columns.filter(column => column.title || column.hidden).map(column => ({\n    title: column.title || '',\n    value: column.value,\n    hidden: column.hidden,\n    ...(column.sortable && { transforms: [sortable] })\n}));\n\nconst reducer = (state, payload) => ({ ...state, ...payload });\n\nconst initialState = (columns) => ({\n    rows: [],\n    sortBy: {},\n    isLoaded: false,\n    cells: prepareColumnsCells(columns)\n});\n\nexport const insertEditAction = (actions, intl, push, isOrgAdmin, disabledProps) => actions.splice(1, 0, {\n    title: intl.formatMessage({\n        id: 'sources.edit',\n        defaultMessage: 'Edit'\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesEdit.path, id)),\n    ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n});\n\nexport const actionResolver = (intl, push, isOrgAdmin) => (rowData) => {\n    const tooltip = intl.formatMessage({\n        id: 'sources.notAdminButton',\n        defaultMessage: 'You do not have permission to perform this action.'\n    });\n\n    const disabledProps = {\n        tooltip,\n        isDisabled: true,\n        className: 'ins-c-sources__disabled-drodpown-item',\n    };\n\n    const actions = [{\n        title: intl.formatMessage({\n            id: 'sources.manageApps',\n            defaultMessage: 'Manage applications'\n        }),\n        onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourceManageApps.path, id)),\n        ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n    },\n    {\n        title: intl.formatMessage({\n            id: 'sources.delete',\n            defaultMessage: 'Delete'\n        }),\n        onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesRemove.path, id)),\n        ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n    }];\n\n    const isSourceEditable = !rowData.imported;\n\n    if (isSourceEditable) {\n        insertEditAction(actions, intl, push, isOrgAdmin, disabledProps);\n    }\n\n    return actions;\n};\n\nconst SourcesTable = () => {\n    const { push } = useHistory();\n    const intl = useIntl();\n\n    const loaded = useIsLoaded();\n    const isOrgAdmin = useIsOrgAdmin();\n\n    const {\n        appTypes,\n        entities,\n        sourceTypes,\n        sourceTypesLoaded,\n        appTypesLoaded,\n        sortBy,\n        sortDirection,\n        numberOfEntities\n    } = useSelector(({ sources }) => sources, shallowEqual);\n    const reduxDispatch = useDispatch();\n\n    const notSortable = numberOfEntities === 0 || !loaded;\n\n    const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n    const refreshColumns = () => {\n        const columns = sourcesColumns(intl, notSortable);\n\n        return dispatch({\n            cells: prepareColumnsCells(columns)\n        });\n    };\n\n    const refreshSources = () => {\n        const columns = sourcesColumns(intl, notSortable);\n\n        return dispatch({\n            rows: renderSources(entities, columns, sourceTypes, appTypes),\n            cells: prepareColumnsCells(columns)\n        });\n    };\n\n    useEffect(() => {\n        if (loaded && sourceTypesLoaded && appTypesLoaded) {\n            dispatch({ isLoaded: true });\n            refreshSources();\n        } else {\n            dispatch({ isLoaded: false });\n            refreshColumns();\n        }\n    }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n    useEffect(() => {\n        if (state.isLoaded) {\n            refreshSources();\n        }\n    }, [entities]);\n\n    let shownRows = state.rows;\n    if (numberOfEntities === 0 && state.isLoaded) {\n        shownRows = [{\n            heightAuto: true,\n            cells: [{\n                props: { colSpan: COLUMN_COUNT },\n                title: <EmptyStateTable />\n            }]\n        }];\n    } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n        shownRows = [{\n            heightAuto: true,\n            cells: [{\n                props: { colSpan: COLUMN_COUNT, className: 'sources-placeholder-row' },\n                title: <PlaceHolderTable />\n            }]\n        }];\n    }\n\n    return (\n        <Table\n            gridBreakPoint='grid-lg'\n            aria-label={intl.formatMessage({\n                id: 'sources.list',\n                defaultMessage: 'List of Sources'\n            })}\n            onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n            sortBy={{\n                index: state.cells.map(cell => cell.hidden ? 'hidden' : cell.value).indexOf(sortBy),\n                direction: sortDirection\n            }}\n            rows={shownRows}\n            cells={state.cells}\n            actionResolver={loaded && numberOfEntities > 0 ? actionResolver(intl, push, isOrgAdmin) : undefined}\n            rowWrapper={RowWrapperLoader}\n        >\n            <TableHeader />\n            <TableBody />\n        </Table>\n    );\n};\n\nexport default SourcesTable;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\n\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\n\nimport { Link } from 'react-router-dom';\nimport { routes } from '../Routes';\nimport { useIsOrgAdmin } from '../hooks/useIsOrgAdmin';\n\nconst SourcesEmptyState = () => {\n    const isOrgAdmin = useIsOrgAdmin();\n    const intl = useIntl();\n\n    return (\n        <Bullseye>\n            <EmptyState className=\"ins-c-sources__empty-state\">\n                <EmptyStateIcon icon={WrenchIcon} />\n                <Title headingLevel=\"h5\" size=\"lg\">\n                    {\n                        intl.formatMessage({ id: 'sources.emptyStateTitle', defaultMessage: 'No sources' })\n                    }\n                </Title>\n                <EmptyStateBody>\n                    {\n                        isOrgAdmin && intl.formatMessage({\n                            id: 'sources.emptyStateBody',\n                            defaultMessage: 'No sources have been defined. To start define a source.'\n                        })\n                    }\n                    {!isOrgAdmin && <React.Fragment>\n                        <br />\n                        {intl.formatMessage({\n                            id: 'sources.emptyStateBodyNotAdmin',\n                            defaultMessage: 'You do not have permission to define sources.'\n                        })}\n                    </React.Fragment>}\n                </EmptyStateBody>\n                {isOrgAdmin ? <Link to={routes.sourcesNew.path}>\n                    <Button\n                        className=\"pf-u-mt-xl\"\n                        variant=\"primary\"\n                    >\n                        { intl.formatMessage({\n                            id: 'sources.emptyStateButton',\n                            defaultMessage: 'Add source'\n                        }) }\n                    </Button>\n                </Link> :\n                    <Button\n                        variant=\"primary\"\n                        isDisabled\n                    >\n                        { intl.formatMessage({\n                            id: 'sources.emptyStateButton',\n                            defaultMessage: 'Add source'\n                        }) }\n                    </Button>\n                }\n            </EmptyState>\n        </Bullseye>\n    );\n};\n\nexport default SourcesEmptyState;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\n\nconst SourcesErrorState = () => {\n    const intl = useIntl();\n\n    return (\n        <Bullseye>\n            <EmptyState className=\"ins-c-sources__empty-state\">\n                <EmptyStateIcon icon={ExclamationCircleIcon} color=\"var(--pf-global--danger-color--100)\"/>\n                <Title headingLevel=\"h5\" size=\"lg\">\n                    {\n                        intl.formatMessage({\n                            id: 'sources.errorStateTitle',\n                            defaultMessage: 'Something went wrong'\n                        })\n                    }\n                </Title>\n                <EmptyStateBody>\n                    {intl.formatMessage({\n                        id: 'sources.errorStateBody',\n                        // eslint-disable-next-line max-len\n                        defaultMessage: 'There was a problem processing the request. Try refreshing the page. If the problem persists, contact <a>Red Hat support.</a>'\n                    }, {\n                        // eslint-disable-next-line react/display-name\n                        a: (chunks) => (<Text\n                            key=\"link\"\n                            component=\"a\"\n                            href=\"https://access.redhat.com/support\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {chunks}\n                        </Text>)\n                    })}\n                </EmptyStateBody>\n                <Button\n                    className=\"pf-u-mt-xl\"\n                    variant=\"primary\"\n                    component=\"a\"\n                    href={window.location.href}\n                >\n                    { intl.formatMessage({\n                        id: 'sources.retry',\n                        defaultMessage: 'Retry'\n                    }) }\n                </Button>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n\nexport default SourcesErrorState;\n","import awesomeDebounce from 'awesome-debounce-promise';\nimport {\n    loadEntities,\n    filterSources,\n} from '../../redux/sources/actions';\nimport { checkSourceStatus } from '../../api/checkSourceStatus';\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = { pageNumber: 1, sortBy: 'created_at', sortDirection: 'desc' };\n\nexport const afterSuccess = (dispatch, source) => {\n    source?.id && checkSourceStatus(source.id);\n    dispatch(loadEntities(afterSuccessLoadParameters));\n};\n\nexport const prepareSourceTypeSelection = (sourceTypes) =>\n    sourceTypes.map(({ id, product_name }) => ({ label: product_name, value: id }))\n    .sort((a, b) => a.label.localeCompare(b.label));\n\nexport const prepareApplicationTypeSelection = (appTypes) =>\n    appTypes.map(({ id, display_name }) => ({ label: display_name, value: id }))\n    .sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) => dispatch(filterSources({\n    [column]: value\n}));\n\nexport const chipsFormatters = (key, filterValue, sourceTypes, appTypes) => ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n        category: 'Source Type',\n        key,\n        chips: filterValue[key].map(id => {\n            const sourceType = sourceTypes.find((type) => type.id === id);\n\n            return ({ name: sourceType ? sourceType.product_name : id, value: id });\n        })\n    }),\n    applications: () => ({\n        category: 'Application',\n        key,\n        chips: filterValue[key].map(id => {\n            const appType = appTypes.find((type) => type.id === id);\n\n            return ({ name: appType ? appType.display_name : id, value: id });\n        })\n    })\n}[key] || (() => ({ name: key })));\n\nexport const prepareChips = (filterValue, sourceTypes, appTypes) =>\n    Object.keys(filterValue)\n    .map((key) =>\n        filterValue[key] && filterValue[key].length > 0 ? chipsFormatters(key, filterValue, sourceTypes, appTypes)() : undefined\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n    if (deleteAll) {\n        return (\n            Object.keys(filterValue).reduce((acc, curr) => ({\n                ...acc,\n                [curr]: undefined\n            }), {})\n        );\n    }\n\n    const chip = chips[0];\n\n    return ({\n        ...filterValue,\n        [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined\n    });\n};\n\nexport const loadedTypes = (types, loaded) => loaded && types.length > 0 ? types : undefined;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage } from '../../redux/sources/actions';\nimport { useIsOrgAdmin } from '../../hooks/useIsOrgAdmin';\nimport { routes } from '../../Routes';\n\nconst RedirectNotAdmin = () => {\n    const intl = useIntl();\n\n    const isOrgAdmin = useIsOrgAdmin();\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (isOrgAdmin === false) {\n            const title = intl.formatMessage({\n                id: 'sources.insufficietnPerms',\n                defaultMessage: 'Insufficient permissions'\n            });\n            const description = intl.formatMessage({\n                id: 'sources.notAdminButton',\n                defaultMessage: 'You do not have permission to perform this action.'\n            });\n\n            dispatch(addMessage(\n                title,\n                'danger',\n                description\n            ));\n        }\n    }, []);\n\n    if (isOrgAdmin === false) {\n        return <Redirect to={routes.sources.path} />;\n    }\n\n    return null;\n};\n\nexport default RedirectNotAdmin;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useParams, Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage, addHiddenSource } from '../../redux/sources/actions';\nimport { doLoadSource } from '../../api/entities';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { routes } from '../../Routes';\n\nconst RedirectNoId = () => {\n    const { id } = useParams();\n    const intl = useIntl();\n\n    const loaded = useIsLoaded();\n\n    const { appTypesLoaded, sourceTypesLoaded } = useSelector(({ sources }) => sources, shallowEqual);\n    const dispatch = useDispatch();\n\n    const [applicationIsLoaded, setIsApplicationLoaded] = useState(false);\n\n    useEffect(() => {\n        if (loaded && appTypesLoaded && sourceTypesLoaded) {\n            doLoadSource(id).then(({ sources: [source] }) => dispatch(addHiddenSource(source)))\n            .then(() => {\n                dispatch(addMessage(\n                    intl.formatMessage({\n                        id: 'sources.sourceNotFoundTitle',\n                        defaultMessage: 'Requested source was not found'\n                    }),\n                    'danger',\n                    intl.formatMessage({\n                        id: 'sources.sourceNotFoundTitleDescription',\n                        defaultMessage: 'Source with { id } was not found. Try it again later.'\n                    }, { id })\n                ));\n                setIsApplicationLoaded(true);\n            });\n        }\n    }, [loaded, appTypesLoaded, sourceTypesLoaded]);\n\n    if (applicationIsLoaded) {\n        return <Redirect to={routes.sources.path} />;\n    }\n\n    return null;\n};\n\nexport default RedirectNoId;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport RedirectNotAdmin from '../RedirectNotAdmin/RedirectNotAdmin';\nimport { useSource } from '../../hooks/useSource';\nimport RedirectNoId from '../RedirectNoId/RedirectNoId';\n\nconst CustomRouteInternal = ({ route, children }) => {\n    const source = route.redirectNoId ? useSource() : undefined;\n\n    if (!source && route.redirectNoId) {\n        return <RedirectNoId />;\n    }\n\n    return (\n        <React.Fragment>\n            {route.writeAccess && <RedirectNotAdmin />}\n            {children}\n        </React.Fragment>\n    );\n};\n\nCustomRouteInternal.propTypes = {\n    route: PropTypes.shape({\n        path: PropTypes.string.isRequired,\n        redirectNoId: PropTypes.bool,\n        writeAccess: PropTypes.bool\n    }).isRequired,\n    children: PropTypes.node.isRequired\n};\n\nconst CustomRoute = ({ route, componentProps, Component, ...props }) =>  (\n    <Route {...props} path={route.path}>\n        <CustomRouteInternal route={route}>\n            <Component  {...componentProps}/>\n        </CustomRouteInternal>\n    </Route>\n);\n\nCustomRoute.propTypes = {\n    route: PropTypes.shape({\n        path: PropTypes.string.isRequired,\n        redirectNoId: PropTypes.bool,\n        writeAccess: PropTypes.bool\n    }).isRequired,\n    componentProps: PropTypes.any,\n    Component: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired\n};\n\nexport default CustomRoute;\n","import React, { useEffect, useState, lazy, Suspense } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { useIntl } from 'react-intl';\n\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/components/cjs/PageHeader';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\n\nimport {\n    loadAppTypes,\n    loadEntities,\n    loadSourceTypes,\n    filterSources,\n    pageAndSize\n} from '../redux/sources/actions';\nimport SourcesTable from '../components/SourcesTable/SourcesTable';\nimport SourcesEmptyState from '../components/SourcesEmptyState';\nimport SourcesErrorState from '../components/SourcesErrorState';\nimport { routes } from '../Routes';\n\nconst SourceEditModal = lazy(() => import(/* webpackChunkName: \"edit\" */ '../components/SourceEditForm/SourceEditModal'));\nconst SourceRemoveModal = lazy(() => import(/* webpackChunkName: \"remove\" */\n    '../components/SourceRemoveModal/SourceRemoveModal'\n));\nconst AddApplication = lazy(() => import(/* webpackChunkName: \"addApp\" */ '../components/AddApplication/AddApplication'));\nconst AddSourceWizard = lazy(() => import(\n    /* webpackChunkName: \"addSource\" */ '@redhat-cloud-services/frontend-components-sources/cjs/addSourceWizard'\n).then(module => ({ default: module.AddSourceWizard })));\n\nimport {\n    prepareChips,\n    removeChips,\n    setFilter,\n    debouncedFiltering,\n    prepareSourceTypeSelection,\n    afterSuccess,\n    loadedTypes,\n    prepareApplicationTypeSelection\n} from './Sources/helpers';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport { useIsOrgAdmin } from '../hooks/useIsOrgAdmin';\nimport CustomRoute from '../components/CustomRoute/CustomRoute';\nimport { updateQuery, parseQuery } from '../utilities/urlQuery';\nimport { Tooltip } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { PaginationLoader } from '../components/SourcesTable/loaders';\n\nconst SourcesPage = () => {\n    const [showEmptyState, setShowEmptyState] = useState(false);\n    const [checkEmptyState, setCheckEmptyState] = useState(false);\n    const [filter, setFilterValue] = useState();\n    const [loadingError, setLoadingError] = useState();\n\n    const loaded = useIsLoaded();\n    const isOrgAdmin = useIsOrgAdmin();\n\n    const history = useHistory();\n    const location = useLocation();\n    const intl = useIntl();\n\n    const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n    const {\n        filterValue,\n        numberOfEntities,\n        appTypes,\n        pageSize,\n        pageNumber,\n        fetchingError,\n        sourceTypes,\n        paginationClicked,\n        appTypesLoaded,\n        sourceTypesLoaded\n    } = sources;\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        Promise.all([dispatch(loadSourceTypes()), dispatch(loadAppTypes()), dispatch(loadEntities(parseQuery()))])\n        .then(() => setCheckEmptyState(true))\n        .catch((error) => setLoadingError(error));\n    }, []);\n\n    const hasSomeFilter = Object.entries(filterValue).map(([_key, value]) => value).filter(Boolean).length > 0;\n\n    useEffect(() => {\n        if (checkEmptyState) {\n            setShowEmptyState(loaded && numberOfEntities === 0 && !hasSomeFilter);\n            updateQuery(sources);\n        }\n    }, [location, checkEmptyState]);\n\n    useEffect(() => {\n        if (filter !== filterValue.name) {\n            setFilterValue(filterValue.name);\n        }\n    }, [filterValue.name]);\n\n    useEffect(() => {\n        if (checkEmptyState && loaded) {\n            setShowEmptyState(numberOfEntities === 0 && !hasSomeFilter);\n        }\n    }, [loaded]);\n\n    const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n    const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n    const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n    useEffect(() => {\n        if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n            onSetPage({}, maximumPageNumber);\n        }\n    });\n\n    const paginationConfig = {\n        itemCount: numberOfEntities,\n        page: pageNumber,\n        perPage: pageSize,\n        onSetPage,\n        onPerPageSelect\n    };\n\n    const paginationConfigBottom = {\n        ...paginationConfig,\n        dropDirection: 'up',\n        variant: 'bottom',\n        isCompact: false\n    };\n\n    const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n    const mainContent = () => (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n                actionsConfig={isOrgAdmin ? {\n                    actions: [\n                        <Link to={routes.sourcesNew.path} key=\"addSourceButton\">\n                            <Button variant='primary' id=\"addSourceButton\">\n                                { intl.formatMessage({\n                                    id: 'sources.addSource',\n                                    defaultMessage: 'Add source'\n                                }) }\n                            </Button>\n                        </Link>\n                    ]\n                } : {\n                    actions: [\n                        <Tooltip\n                            content={\n                                intl.formatMessage({\n                                    id: 'sources.notAdminButton',\n                                    defaultMessage: 'You do not have permission to perform this action.'\n                                })\n                            }\n                            key=\"addSourceButton\"\n                        >\n                            <span tabIndex=\"0\">\n                                <Button variant='primary' isDisabled id=\"addSourceButton\">\n                                    { intl.formatMessage({\n                                        id: 'sources.addSource',\n                                        defaultMessage: 'Add source'\n                                    }) }\n                                </Button>\n                            </span>\n                        </Tooltip>\n                    ]\n                }}\n                filterConfig={{\n                    items: [{\n                        label: intl.formatMessage({\n                            id: 'sources.name',\n                            defaultMessage: 'Name'\n                        }),\n                        filterValues: {\n                            'aria-label': intl.formatMessage({\n                                id: 'sources.filterByName',\n                                defaultMessage: 'Filter by name'\n                            }),\n                            onChange: (_event, value) => {\n                                setFilterValue(value);\n                                debouncedFiltering(() => setFilter('name', value, dispatch));\n                            },\n                            value: filter\n                        }\n                    }, {\n                        label: intl.formatMessage({\n                            id: 'sources.type',\n                            defaultMessage: 'Type'\n                        }),\n                        type: 'checkbox',\n                        filterValues: {\n                            onChange: (_event, value) =>\n                                setFilter('source_type_id', value, dispatch),\n                            items: prepareSourceTypeSelection(sourceTypes || []),\n                            value: filterValue.source_type_id\n                        }\n                    }, {\n                        label: intl.formatMessage({\n                            id: 'sources.application',\n                            defaultMessage: 'Application'\n                        }),\n                        type: 'checkbox',\n                        filterValues: {\n                            onChange: (_event, value) =>\n                                setFilter('applications', value, dispatch),\n                            items: prepareApplicationTypeSelection(appTypes || []),\n                            value: filterValue.applications\n                        }\n                    }]\n                }}\n                activeFiltersConfig={{\n                    filters: prepareChips(filterValue, sourceTypes, appTypes),\n                    onDelete: (_event, chips, deleteAll) =>\n                        dispatch(filterSources(removeChips(chips, filterValue, deleteAll)))\n                }}\n            />\n            <SourcesTable />\n            <PrimaryToolbar\n                pagination={\n                    showPaginationLoader ? <PaginationLoader />\n                        : numberOfEntities > 0 ? paginationConfigBottom : undefined\n                }\n            />\n        </React.Fragment>\n    );\n\n    const isErrored = loadingError || fetchingError;\n\n    return (\n        <React.Fragment>\n            <Suspense fallback={null}>\n                <CustomRoute exact route={routes.sourceManageApps} Component={AddApplication}/>\n                <CustomRoute exact route={routes.sourcesRemove} Component={SourceRemoveModal}/>\n                <CustomRoute\n                    exact\n                    route={routes.sourcesNew}\n                    Component={AddSourceWizard}\n                    componentProps={{\n                        sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n                        applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n                        isOpen: true,\n                        onClose: () => history.push(routes.sources.path),\n                        afterSuccess: (source) => afterSuccess(dispatch, source),\n                        hideSourcesButton: true\n                    }}\n                />\n                <CustomRoute exact route={routes.sourcesEdit} Component={SourceEditModal}/>\n            </Suspense>\n            <PageHeader>\n                <PageHeaderTitle title={intl.formatMessage({\n                    id: 'sources.sources',\n                    defaultMessage: 'Sources'\n                })}/>\n            </PageHeader>\n            <Section type='content'>\n                { showEmptyState && <SourcesEmptyState />}\n                { isErrored && <SourcesErrorState />}\n                { !showEmptyState && !isErrored && mainContent()}\n            </Section>\n        </React.Fragment>\n    );\n};\n\nexport default SourcesPage;\n","import { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nexport const useSource = () => {\n    const { id } = useParams();\n    const source = useSelector(({ sources }) => sources.entities.find(source => source.id === id));\n\n    return source;\n};\n","import { useSelector } from 'react-redux';\n\nexport const useIsLoaded = () => {\n    const isLoaded = useSelector(({ sources }) => sources.loaded);\n\n    return isLoaded <= 0;\n};\n","import { getSourcesApi } from './entities';\n\nexport const checkSourceStatus = (id) => getSourcesApi().checkAvailabilitySource(id).catch(() => {});\n"],"sourceRoot":""}