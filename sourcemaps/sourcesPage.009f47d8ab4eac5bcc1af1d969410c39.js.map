{"version":3,"file":"js/sourcesPage.1652893379476.a00b2d8f056e5836f7bd.js","mappings":"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","sources":["webpack:///./src/api/source_types.js","webpack:///./src/components/RedirectNoWriteAccess/RedirectNoWriteAccess.js","webpack:///./src/components/RedirectNoPaused/RedirectNoPaused.js","webpack:///./src/components/CustomRoute/CustomRoute.js","webpack:///./src/components/RedirectNoId/RedirectNoId.js","webpack:///./src/components/TilesShared/ImageWithPlaceholder.js","webpack:///./src/hooks/useHasWritePermissions.js","webpack:///./src/hooks/useIsLoaded.js","webpack:///./src/hooks/useSource.js","webpack:///./src/components/SourcesTable/EmptyStateTable.js","webpack:///./src/components/SourcesTable/SourcesTable.js","webpack:///./src/pages/Sources/helpers.js","webpack:///./src/components/TilesShared/DisabledTile.js","webpack:///./src/components/TilesShared/TilesArray.js","webpack:///./src/components/CloudTiles/CloudTiles.js","webpack:///./src/components/CloudTiles/CloudEmptyState.js","webpack:///./src/components/RedHatTiles/RedHatTiles.js","webpack:///./src/components/RedHatTiles/RedHatEmptyState.js","webpack:///./src/components/TabNavigation.js","webpack:///./src/components/SourcesHeader.js","webpack:///./src/utilities/formatValueToExport.js","webpack:///./src/pages/Sources.js","webpack:///./src/utilities/generateCSV.js","webpack:///./src/utilities/generateJSON.js","webpack:///./src/utilities/computeSourceStatus.js","webpack:///./src/utilities/disabledTooltipProps.js","webpack:///./src/utilities/filterApps.js","webpack:///./src/utilities/filterTypes.js"],"sourcesContent":["import { getSourcesApi } from './entities.js';\n\nexport const doLoadSourceTypes = () =>\n  getSourcesApi()\n    .listSourceTypes()\n    .then((data) => data.data);\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage } from '../../redux/sources/actions';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { routes } from '../../Routes';\nimport { disabledMessage } from '../../utilities/disabledTooltipProps';\n\nconst RedirectNoWriteAccess = () => {\n  const intl = useIntl();\n\n  const writePermissions = useHasWritePermissions();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (writePermissions === false) {\n      const title = intl.formatMessage({\n        id: 'sources.insufficietnPerms',\n        defaultMessage: 'Insufficient permissions',\n      });\n      const description = disabledMessage(intl);\n\n      dispatch(addMessage({ title, variant: 'danger', description }));\n    }\n  }, [writePermissions]);\n\n  if (writePermissions === false) {\n    return <Redirect to={routes.sources.path} />;\n  }\n\n  return null;\n};\n\nexport default RedirectNoWriteAccess;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage } from '../../redux/sources/actions';\nimport { replaceRouteId, routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\n\nconst RedirectNoPaused = () => {\n  const intl = useIntl();\n  const source = useSource();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (source.paused_at) {\n      dispatch(\n        addMessage({\n          title: intl.formatMessage({\n            id: 'sources.sourcePausedRedirect',\n            defaultMessage: 'Source is paused',\n          }),\n          variant: 'danger',\n          description: intl.formatMessage({\n            id: 'sources.sourcePausedRedirectDescription',\n            defaultMessage: 'You cannot perform this action on a paused source.',\n          }),\n        })\n      );\n    }\n  }, [source.paused_at]);\n\n  if (source.paused_at) {\n    return <Redirect to={replaceRouteId(routes.sourcesDetail.path, source.id)} />;\n  }\n\n  return null;\n};\n\nexport default RedirectNoPaused;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { useSource } from '../../hooks/useSource';\nimport RedirectNoWriteAccess from '../RedirectNoWriteAccess/RedirectNoWriteAccess';\nimport RedirectNoId from '../RedirectNoId/RedirectNoId';\nimport RedirectNoPaused from '../RedirectNoPaused/RedirectNoPaused';\n\nconst CustomRouteInternal = ({ route, children }) => {\n  const source = route.redirectNoId && useSource();\n\n  if (!source && route.redirectNoId) {\n    return <RedirectNoId />;\n  }\n\n  return (\n    <React.Fragment>\n      {route.noPaused && <RedirectNoPaused />}\n      {route.writeAccess && <RedirectNoWriteAccess />}\n      {children}\n    </React.Fragment>\n  );\n};\n\nCustomRouteInternal.propTypes = {\n  route: PropTypes.shape({\n    path: PropTypes.string.isRequired,\n    redirectNoId: PropTypes.bool,\n    writeAccess: PropTypes.bool,\n    noPaused: PropTypes.bool,\n  }).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst CustomRoute = ({ route, componentProps, Component, ...props }) => (\n  <Route {...props} path={route.path}>\n    <CustomRouteInternal route={route}>\n      <Component {...componentProps} />\n    </CustomRouteInternal>\n  </Route>\n);\n\nCustomRoute.propTypes = {\n  route: PropTypes.shape({\n    path: PropTypes.string.isRequired,\n    redirectNoId: PropTypes.bool,\n    writeAccess: PropTypes.bool,\n    noPaused: PropTypes.bool,\n  }).isRequired,\n  componentProps: PropTypes.any,\n  Component: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n};\n\nexport default CustomRoute;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useParams, Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage, addHiddenSource } from '../../redux/sources/actions';\nimport { doLoadSource } from '../../api/entities';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\n\nconst RedirectNoId = () => {\n  const { id } = useParams();\n  const intl = useIntl();\n  const source = useSource();\n\n  const loaded = useIsLoaded();\n\n  const { appTypesLoaded, sourceTypesLoaded } = useSelector(({ sources }) => sources, shallowEqual);\n  const dispatch = useDispatch();\n\n  const [applicationIsLoaded, setIsApplicationLoaded] = useState(false);\n\n  useEffect(() => {\n    if (loaded && appTypesLoaded && sourceTypesLoaded) {\n      doLoadSource(id)\n        .then(({ sources: [source] }) => {\n          dispatch(addHiddenSource(source));\n          return source;\n        })\n        .then((source) => {\n          if (!source) {\n            dispatch(\n              addMessage({\n                title: intl.formatMessage({\n                  id: 'sources.sourceNotFoundTitle',\n                  defaultMessage: 'Requested source was not found',\n                }),\n                variant: 'danger',\n                description: intl.formatMessage(\n                  {\n                    id: 'sources.sourceNotFoundTitleDescription',\n                    defaultMessage: 'Source with { id } was not found. Try it again later.',\n                  },\n                  { id }\n                ),\n              })\n            );\n          }\n\n          setIsApplicationLoaded(true);\n        });\n    }\n  }, [loaded, appTypesLoaded, sourceTypesLoaded]);\n\n  if (applicationIsLoaded && !source) {\n    return <Redirect to={routes.sources.path} />;\n  }\n\n  return null;\n};\n\nexport default RedirectNoId;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Loader } from '../SourcesTable/loaders';\n\nconst ImageWithPlaceholder = ({ src, ...rest }) => {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <React.Fragment>\n      {!loaded && <Loader height=\"40px\" width=\"110px\" {...rest} />}\n      <img\n        src={src}\n        data-testid=\"ImageWithPlaceholder\"\n        onLoad={() => setLoaded(true)}\n        style={{ display: loaded ? 'initial' : 'none' }}\n        {...rest}\n      />\n    </React.Fragment>\n  );\n};\n\nImageWithPlaceholder.propTypes = {\n  src: PropTypes.string.isRequired,\n};\n\nexport default ImageWithPlaceholder;\n","import { useSelector } from 'react-redux';\n\nexport const useHasWritePermissions = () => {\n  const writePermissions = useSelector(({ user }) => user?.writePermissions);\n\n  if (typeof writePermissions !== 'boolean') {\n    return undefined;\n  }\n\n  return !!writePermissions;\n};\n","import { useSelector } from 'react-redux';\n\nexport const useIsLoaded = () => {\n  const isLoaded = useSelector(({ sources }) => sources.loaded);\n\n  return isLoaded <= 0;\n};\n","import { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nexport const useSource = () => {\n  const { id } = useParams();\n  const source = useSelector(({ sources }) => sources.entities.find((source) => source.id === id));\n\n  return source;\n};\n","import React from 'react';\n\nimport { Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody, Bullseye, Title } from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.small}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundTitle',\n            defaultMessage: 'No sources found',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundDescription',\n            defaultMessage: 'No sources match the filter criteria. Remove all filters or clear all filters to show sources.',\n          })}\n        </EmptyStateBody>\n        <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n          {intl.formatMessage({\n            id: 'sources.clearAllFilters',\n            defaultMessage: 'Clear all filters',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default EmptyStateTable;\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, sortable, wrappable } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\n\nimport { pauseSource, resumeSource, sortEntities } from '../../redux/sources/actions';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { sourcesColumns, COLUMN_COUNT } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { replaceRouteId, routes } from '../../Routes';\nimport disabledTooltipProps from '../../utilities/disabledTooltipProps';\n\nexport const itemToCells = (item, columns, sourceTypes, appTypes) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((col) => ({\n      title: col.formatter\n        ? col.formatter(item[col.value], item, {\n            sourceTypes,\n            appTypes,\n          })\n        : item[col.value] || '',\n    }));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes, removingSources) =>\n  entities\n    .filter(({ hidden }) => !hidden)\n    .reduce((acc, item) => {\n      const isDeleting = removingSources.includes(item.id);\n\n      return [\n        ...acc,\n        {\n          ...item,\n          originalName: item.name,\n          isOpen: !!item.expanded,\n          cells: itemToCells(item, columns, sourceTypes, appTypes),\n          disableActions: isDeleting,\n          isDeleting,\n        },\n      ];\n    }, []);\n\nexport const prepareColumnsCells = (columns) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((column) => ({\n      title: column.title || '',\n      value: column.value,\n      hidden: column.hidden,\n      transforms: [wrappable],\n      ...(column.sortable && { transforms: [sortable, wrappable] }),\n    }));\n\nconst reducer = (state, payload) => ({ ...state, ...payload, key: state.key + 1 });\n\nconst initialState = (columns) => ({\n  rows: [],\n  sortBy: {},\n  isLoaded: false,\n  cells: prepareColumnsCells(columns),\n  key: 0,\n});\n\nexport const actionResolver = (intl, push, hasWritePermissions, dispatch) => (rowData) => {\n  const disabledProps = disabledTooltipProps(intl);\n  const actions = [];\n\n  if (rowData.paused_at) {\n    actions.push({\n      title: intl.formatMessage({\n        id: 'sources.resume',\n        defaultMessage: 'Resume',\n      }),\n      description: intl.formatMessage({\n        id: 'sources.resume.description',\n        defaultMessage: 'Unpause data collection for this source',\n      }),\n      onClick: (_ev, _i, { id }) => dispatch(resumeSource(id, rowData.originalName, intl)),\n      ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n    });\n  } else {\n    actions.push({\n      title: intl.formatMessage({\n        id: 'sources.pause',\n        defaultMessage: 'Pause',\n      }),\n      description: intl.formatMessage({\n        id: 'sources.pause.description',\n        defaultMessage: 'Temporarily disable data collection',\n      }),\n      onClick: (_ev, _i, { id }) => dispatch(pauseSource(id, rowData.originalName, intl)),\n      ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n    });\n  }\n\n  actions.push({\n    title: intl.formatMessage({\n      id: 'sources.remove',\n      defaultMessage: 'Remove',\n    }),\n    description: intl.formatMessage({\n      id: 'sources.remove.description',\n      defaultMessage: 'Permanently delete this source and all collected data',\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesRemove.path, id)),\n    ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n  });\n\n  actions.push({\n    title: !rowData.paused_at\n      ? intl.formatMessage({\n          id: 'sources.edit',\n          defaultMessage: 'Edit',\n        })\n      : intl.formatMessage({\n          id: 'sources.viewDetails',\n          defaultMessage: 'View details',\n        }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesDetail.path, id)),\n    ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n  });\n\n  return actions;\n};\n\nconst SourcesTable = () => {\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const loaded = useIsLoaded();\n  const writePermissions = useHasWritePermissions();\n\n  const {\n    appTypes,\n    entities,\n    sourceTypes,\n    sourceTypesLoaded,\n    appTypesLoaded,\n    sortBy,\n    sortDirection,\n    numberOfEntities,\n    removingSources,\n  } = useSelector(({ sources }) => sources, shallowEqual);\n  const reduxDispatch = useDispatch();\n\n  const notSortable = numberOfEntities === 0 || !loaded;\n\n  const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n  const refreshColumns = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  const refreshSources = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      rows: renderSources(entities, columns, sourceTypes, appTypes, removingSources),\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  useEffect(() => {\n    if (loaded && sourceTypesLoaded && appTypesLoaded) {\n      dispatch({ isLoaded: true });\n      refreshSources();\n    } else {\n      dispatch({ isLoaded: false });\n      refreshColumns();\n    }\n  }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n  useEffect(() => {\n    if (state.isLoaded) {\n      refreshSources();\n    }\n  }, [entities, removingSources]);\n\n  let shownRows = state.rows;\n  if (numberOfEntities === 0 && state.isLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: COLUMN_COUNT },\n            title: <EmptyStateTable />,\n          },\n        ],\n      },\n    ];\n  } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: {\n              colSpan: COLUMN_COUNT,\n              className: 'sources-placeholder-row',\n            },\n            title: <PlaceHolderTable />,\n          },\n        ],\n      },\n    ];\n  }\n\n  return (\n    <Table\n      gridBreakPoint=\"grid-lg\"\n      aria-label={intl.formatMessage({\n        id: 'sources.list',\n        defaultMessage: 'List of Sources',\n      })}\n      onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n      sortBy={{\n        index: state.cells.map((cell) => (cell.hidden ? 'hidden' : cell.value)).indexOf(sortBy),\n        direction: sortDirection,\n      }}\n      key={state.key}\n      rows={shownRows}\n      cells={state.cells}\n      actionResolver={loaded && numberOfEntities > 0 ? actionResolver(intl, push, writePermissions, reduxDispatch) : undefined}\n      rowWrapper={RowWrapperLoader}\n      className={numberOfEntities === 0 && state.isLoaded ? 'ins-c-table-empty-state' : ''}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default SourcesTable;\n","import React from 'react';\nimport awesomeDebounce from 'awesome-debounce-promise';\n\nimport { AlertActionLink } from '@patternfly/react-core';\n\nimport { loadEntities, filterSources, addMessage, removeMessage } from '../../redux/sources/actions';\nimport { replaceRouteId, routes } from '../../Routes';\nimport { AVAILABLE } from '../../views/formatters';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport { bold } from '../../utilities/intlShared';\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = {\n  pageNumber: 1,\n  sortBy: 'created_at',\n  sortDirection: 'desc',\n};\n\nexport const afterSuccess = (dispatch) => dispatch(loadEntities(afterSuccessLoadParameters));\n\nexport const prepareSourceTypeSelection = (sourceTypes) =>\n  sourceTypes.map(({ id, product_name }) => ({ label: product_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const prepareApplicationTypeSelection = (appTypes) =>\n  appTypes.map(({ id, display_name }) => ({ label: display_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) =>\n  dispatch(\n    filterSources({\n      [column]: value,\n    })\n  );\n\nexport const chipsFormatters = (key, filterValue, sourceTypes, appTypes, intl) =>\n  ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n      category: 'Source Type',\n      key,\n      chips: filterValue[key].map((id) => {\n        const sourceType = sourceTypes.find((type) => type.id === id);\n\n        return { name: sourceType ? sourceType.product_name : id, value: id };\n      }),\n    }),\n    applications: () => ({\n      category: 'Application',\n      key,\n      chips: filterValue[key].map((id) => {\n        const appType = appTypes.find((type) => type.id === id);\n\n        return { name: appType ? appType.display_name : id, value: id };\n      }),\n    }),\n    availability_status: () => ({\n      category: 'Status',\n      key,\n      chips: [\n        {\n          value: filterValue[key][0],\n          name:\n            filterValue[key][0] === AVAILABLE\n              ? intl.formatMessage({\n                  id: 'sources.available',\n                  defaultMessage: 'Available',\n                })\n              : intl.formatMessage({\n                  id: 'sources.unavailable',\n                  defaultMessage: 'Unavailable',\n                }),\n        },\n      ],\n    }),\n  }[key] || (() => ({ name: key })));\n\nexport const prepareChips = (filterValue, sourceTypes, appTypes, intl) =>\n  Object.keys(filterValue)\n    .map((key) =>\n      filterValue[key] && filterValue[key].length > 0\n        ? chipsFormatters(key, filterValue, sourceTypes, appTypes, intl)()\n        : undefined\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n  if (deleteAll) {\n    return Object.keys(filterValue).reduce(\n      (acc, curr) => ({\n        ...acc,\n        [curr]: undefined,\n      }),\n      {}\n    );\n  }\n\n  const chip = chips[0];\n\n  return {\n    ...filterValue,\n    [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined,\n  };\n};\n\nexport const loadedTypes = (types, loaded) => (loaded && types.length > 0 ? types : undefined);\n\nexport const checkSubmit = (state, dispatch, push, intl, stateDispatch) => {\n  const id = `sources-wizard-notification-${Date.now()}`;\n\n  if (location.pathname.split('/').filter(Boolean).pop() !== routes.sourcesNew.path.split('/').pop()) {\n    if (state.isErrored) {\n      const { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory } = state.wizardState;\n\n      dispatch(\n        addMessage({\n          title: intl.formatMessage({\n            id: 'alert.error.title',\n            defaultMessage: 'Error adding source',\n          }),\n          description: intl.formatMessage(\n            {\n              id: 'alert.error.description',\n              defaultMessage:\n                'There was a problem while trying to add source {name}. Please try again. If the error persists, open a support case.',\n            },\n            { name: <b>{state.values.source.name}</b> }\n          ),\n          variant: 'danger',\n          id,\n          actionLinks: (\n            <AlertActionLink\n              onClick={() => {\n                stateDispatch({\n                  type: 'retryWizard',\n                  initialValues: state.values,\n                  initialState: { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory },\n                });\n                dispatch(removeMessage(id));\n                push(routes.sourcesNew.path);\n              }}\n            >\n              {intl.formatMessage({\n                id: 'alert.error.link',\n                defaultMessage: 'Retry',\n              })}\n            </AlertActionLink>\n          ),\n        })\n      );\n    } else {\n      switch (computeSourceStatus(state.createdSource)) {\n        case 'unavailable':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.error.title',\n                defaultMessage: 'Source configuration unsuccessful',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'error.notification',\n                  defaultMessage: '{error} [<b>{name}</b>]',\n                },\n                {\n                  error:\n                    state.createdSource.applications?.[0]?.availability_status_error ||\n                    state.createdSource.endpoint?.[0]?.availability_status_error ||\n                    intl.formatMessage({\n                      id: 'wizard.unknownError',\n                      defaultMessage: 'Unknown error',\n                    }),\n                  name: state.createdSource.name,\n                  b: bold,\n                }\n              ),\n              variant: 'danger',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.unavailable.link',\n                    defaultMessage: 'Edit source',\n                  })}\n                </AlertActionLink>\n              ),\n            })\n          );\n          break;\n        case 'timeout':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.timeout.title',\n                defaultMessage: 'Source configuration in progress',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.timeout.description',\n                  defaultMessage:\n                    'We are still working to confirm credentials for source {name}. To track progress, check the Status column in the Sources table.',\n                },\n                { name: <b>{state.createdSource.name}</b> }\n              ),\n              variant: 'info',\n            })\n          );\n          break;\n        default:\n          dispatch(\n            addMessage({\n              title: intl.formatMessage(\n                {\n                  id: 'alert.success.title',\n                  defaultMessage: '{type} connection successful',\n                },\n                { type: state.sourceTypes.find(({ id }) => id === state.createdSource.source_type_id)?.product_name }\n              ),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.success.description',\n                  defaultMessage: 'Source {name} was successfully added',\n                },\n                { name: <b>{state.createdSource.name}</b> }\n              ),\n              variant: 'success',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.success.link',\n                    defaultMessage: 'View source details',\n                  })}\n                </AlertActionLink>\n              ),\n            })\n          );\n          break;\n      }\n    }\n  }\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Tile, Tooltip } from '@patternfly/react-core';\nimport { disabledMessage } from '../../utilities/disabledTooltipProps';\n\nconst DisabledTile = (props) => {\n  const intl = useIntl();\n\n  const tooltip = disabledMessage(intl);\n\n  return (\n    <Tooltip content={tooltip}>\n      <div className=\"disabled-tile-with-tooltip\">\n        <Tile {...props} isDisabled />\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default DisabledTile;\n","import PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes } from '../../Routes';\n\nimport { Tile } from '@patternfly/react-core';\n\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport DisabledTile from '../TilesShared/DisabledTile';\nimport { filterVendorTypes } from '../../utilities/filterTypes';\n\nconst TilesArray = ({ setSelectedType, mapper }) => {\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n  const activeCategory = useSelector(({ sources }) => sources.activeCategory);\n\n  const { push } = useHistory();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const openWizard = (type) => {\n    setSelectedType(type);\n    push(routes.sourcesNew.path);\n  };\n\n  const TileComponent = hasWritePermissions ? Tile : DisabledTile;\n\n  return sourceTypes\n    .filter(filterVendorTypes(activeCategory))\n    .sort((a, b) => a.product_name.localeCompare(b.product_name))\n    .map(({ name }) => mapper(name, openWizard, TileComponent));\n};\n\nTilesArray.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n  mapper: PropTypes.func.isRequired,\n};\n\nexport default TilesArray;\n","import React from 'react';\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    amazon: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Amazon Web Services\"\n        onClick={() => openWizard('amazon')}\n        className=\"tile pf-u-mr-md pf-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/aws.svg\"\n            alt=\"aws logo\"\n          />\n        }\n      />\n    ),\n    google: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Google Cloud\"\n        className=\"tile pf-u-mr-md pf-u-mt-md\"\n        onClick={() => openWizard('google')}\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/google-cloud-short.svg\"\n            alt=\"google logo\"\n          />\n        }\n      />\n    ),\n    azure: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Microsoft Azure\"\n        onClick={() => openWizard('azure')}\n        className=\"tile pf-u-mr-md pf-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/microsoft-azure-short.svg\"\n            alt=\"azure logo\"\n          />\n        }\n      />\n    ),\n    ibm: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"IBM Cloud\"\n        onClick={() => openWizard('ibm')}\n        className=\"tile pf-u-mr-md pf-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/ibm-cloud.svg\"\n            alt=\"azure logo\"\n          />\n        }\n      />\n    ),\n  }[type]);\n\nconst CloudTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default CloudTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardTitle, CardFooter, Text } from '@patternfly/react-core';\n\nimport CloudTiles from './CloudTiles';\n\nconst CLOUD_CATALOG_HREF = 'https://catalog.redhat.com/cloud';\n\nconst CloudEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"src-c-card__cloud-empty-state pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'cloud.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your public clouds',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'cloud.emptystate.cardDescription',\n            defaultMessage: 'Select an available provider.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <CloudTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n      <CardFooter className=\"cloud-footer\">\n        <Text className=\"catalog-link pf-u-mt-lg\">\n          {intl.formatMessage(\n            {\n              id: 'cloud.emptystate.catalogLink',\n              defaultMessage: 'Looking for a different provider? <a>See all Red Hat Certified Cloud and Service Providers</a>',\n            },\n            {\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href={CLOUD_CATALOG_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            }\n          )}\n        </Text>\n      </CardFooter>\n    </Card>\n  );\n};\n\nCloudEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default CloudEmptyState;\n","import React from 'react';\n\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst icon = (\n  <ImageWithPlaceholder className=\"redhat-icon\" src=\"/apps/frontend-assets/red-hat-logos/stacked.svg\" alt=\"red hat logo\" />\n);\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    openshift: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"OpenShift Container Platform\"\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        onClick={() => openWizard('openshift')}\n        icon={icon}\n      />\n    ),\n  }[type]);\n\nconst RedHatTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default RedHatTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardTitle, Text } from '@patternfly/react-core';\n\nimport RedHatTiles from './RedHatTiles';\n\nconst RedHatEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"src-c-card__cloud-empty-state pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'redhat.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your Red Hat applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'redhat.emptystate.cardDescription',\n            defaultMessage: 'Select an available application.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <RedHatTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nRedHatEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default RedHatEmptyState;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Tabs, Tab, TabTitleIcon, TabTitleText } from '@patternfly/react-core';\nimport RedhatIcon from '@patternfly/react-icons/dist/esm/icons/redhat-icon';\nimport CloudIcon from '@patternfly/react-icons/dist/esm/icons/cloud-icon';\n\nimport { setActiveCategory } from '../redux/sources/actions';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\n\nconst TabNavigation = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const activeCategory = useSelector(({ sources }) => sources.activeCategory);\n\n  return (\n    <Tabs activeKey={activeCategory} onSelect={(_e, key) => dispatch(setActiveCategory(key))} className=\"pf-u-mt-md\">\n      <Tab\n        eventKey={CLOUD_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <CloudIcon aria-label=\"Cloud Icon\" />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.cloudSources', defaultMessage: 'Cloud sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n      <Tab\n        eventKey={REDHAT_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <RedhatIcon aria-label=\"Red Hat Icon\" />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.redhatSources', defaultMessage: 'Red Hat sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n    </Tabs>\n  );\n};\n\nexport default TabNavigation;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport TabNavigation from './TabNavigation';\n\nconst SourcesHeader = () => {\n  const intl = useIntl();\n\n  return (\n    <PageHeader className=\"pf-u-pb-0\">\n      <PageHeaderTitle\n        title={intl.formatMessage({\n          id: 'sources.sources',\n          defaultMessage: 'Sources',\n        })}\n      />\n      <TabNavigation />\n    </PageHeader>\n  );\n};\n\nexport default React.memo(SourcesHeader);\n","const formatValueToExport = (key, value, applicationTypes, sourceTypes) => {\n  switch (key) {\n    case 'applications':\n      return value\n        .map(({ application_type_id }) => applicationTypes.find(({ id }) => id === application_type_id)?.display_name)\n        .join(',');\n    case 'source_type_id':\n      return sourceTypes.find(({ id }) => id === value)?.product_name;\n    default:\n      return value;\n  }\n};\n\nexport default formatValueToExport;\n","import React, { useEffect, lazy, Suspense, useReducer } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\n\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { useScreenSize, isSmallScreen } from '@redhat-cloud-services/frontend-components/useScreenSize';\n\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport { filterSources, pageAndSize } from '../redux/sources/actions';\nimport SourcesTable from '../components/SourcesTable/SourcesTable';\nimport { routes } from '../Routes';\n\nconst SourceRemoveModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"remove\" */\n    '../components/SourceRemoveModal/SourceRemoveModal'\n  )\n);\nconst AddSourceWizard = lazy(() =>\n  import(/* webpackChunkName: \"addSource\" */ '../components/addSourceWizard/index').then((module) => ({\n    default: module.AddSourceWizard,\n  }))\n);\n\nimport {\n  prepareChips,\n  removeChips,\n  setFilter,\n  debouncedFiltering,\n  prepareSourceTypeSelection,\n  afterSuccess,\n  loadedTypes,\n  prepareApplicationTypeSelection,\n  checkSubmit,\n} from './Sources/helpers';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../hooks/useHasWritePermissions';\nimport CustomRoute from '../components/CustomRoute/CustomRoute';\nimport { PaginationLoader } from '../components/SourcesTable/loaders';\nimport CloudCards from '../components/CloudTiles/CloudCards';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\nimport CloudEmptyState from '../components/CloudTiles/CloudEmptyState';\nimport { AVAILABLE, UNAVAILABLE } from '../views/formatters';\nimport RedHatEmptyState from '../components/RedHatTiles/RedHatEmptyState';\nimport { filterVendorTypes } from '../utilities/filterTypes';\nimport { filterVendorAppTypes } from '../utilities/filterApps';\nimport SourcesHeader from '../components/SourcesHeader';\nimport generateCSV from '../utilities/generateCSV';\nimport generateJSON from '../utilities/generateJSON';\n\nconst initialState = {\n  filter: undefined,\n  selectedType: undefined,\n  wizardInitialState: undefined,\n  wizardInitialValues: undefined,\n};\n\nconst reducer = (state, { type, value, selectedType, initialValues, initialState }) => {\n  switch (type) {\n    case 'setFilterValue':\n      return { ...state, filter: value };\n    case 'setSelectedType':\n      return { ...state, selectedType };\n    case 'retryWizard':\n      return { ...state, wizardInitialState: initialState, wizardInitialValues: initialValues };\n    case 'closeWizard':\n      return { ...state, selectedType: undefined, wizardInitialState: undefined, wizardInitialValues: undefined };\n  }\n};\n\nconst SourcesPage = () => {\n  const [{ filter, selectedType, wizardInitialState, wizardInitialValues }, stateDispatch] = useReducer(reducer, initialState);\n\n  const entitiesLoaded = useIsLoaded();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const history = useHistory();\n  const intl = useIntl();\n\n  const screenSize = useScreenSize();\n\n  const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n  const {\n    filterValue,\n    numberOfEntities,\n    appTypes,\n    pageSize,\n    pageNumber,\n    fetchingError,\n    sourceTypes,\n    paginationClicked,\n    appTypesLoaded,\n    sourceTypesLoaded,\n    activeCategory,\n    entities,\n  } = sources;\n\n  const loaded = entitiesLoaded && sourceTypesLoaded && appTypesLoaded;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (filter !== filterValue.name) {\n      stateDispatch({ type: 'setFilterValue', value: filterValue.name });\n    }\n  }, [filterValue.name]);\n\n  const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n  const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n  const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n  useEffect(() => {\n    if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n      onSetPage({}, maximumPageNumber);\n    }\n  });\n\n  const paginationConfig = {\n    itemCount: numberOfEntities,\n    page: pageNumber,\n    perPage: pageSize,\n    onSetPage,\n    onPerPageSelect,\n    className: 'top-pagination',\n  };\n\n  const paginationConfigBottom = {\n    ...paginationConfig,\n    dropDirection: 'up',\n    variant: 'bottom',\n    isCompact: false,\n    className: 'bottom-pagination',\n  };\n\n  const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n  const filteredSourceTypes = sourceTypes.filter(filterVendorTypes(activeCategory, true));\n\n  const addSourceText = intl.formatMessage({\n    id: 'sources.addSource',\n    defaultMessage: 'Add source',\n  });\n  const noPermissionsText = intl.formatMessage({\n    id: 'sources.notAdminAddButton',\n    defaultMessage:\n      'To add a source, you must be granted Sources Administrator permissions from your Organization Administrator.',\n  });\n\n  let actionsConfig;\n\n  if (isSmallScreen(screenSize)) {\n    actionsConfig = {\n      dropdownProps: { position: 'right' },\n      actions: hasWritePermissions\n        ? [{ label: addSourceText, props: { to: routes.sourcesNew.path, component: Link } }]\n        : [\n            {\n              label: addSourceText,\n              props: {\n                component: 'div',\n                isDisabled: true,\n                tooltip: noPermissionsText,\n                className: 'src-m-dropdown-item-disabled',\n              },\n            },\n          ],\n    };\n  }\n\n  const mainContent = () => (\n    <React.Fragment>\n      <PrimaryToolbar\n        useMobileLayout\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n        actionsConfig={\n          actionsConfig || {\n            dropdownProps: { position: 'right' },\n            actions: hasWritePermissions\n              ? [\n                  <Link to={routes.sourcesNew.path} key=\"addSourceButton\">\n                    <Button variant=\"primary\" id=\"addSourceButton\">\n                      {addSourceText}\n                    </Button>\n                  </Link>,\n                ]\n              : [\n                  <Tooltip content={noPermissionsText} key=\"addSourceButton\">\n                    <span tabIndex=\"0\">\n                      <Button variant=\"primary\" isDisabled id=\"addSourceButton\">\n                        {addSourceText}\n                      </Button>\n                    </span>\n                  </Tooltip>,\n                ],\n          }\n        }\n        filterConfig={{\n          items: [\n            {\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              filterValues: {\n                'aria-label': intl.formatMessage({\n                  id: 'sources.filterByName',\n                  defaultMessage: 'Filter by name',\n                }),\n                onChange: (_event, value) => {\n                  stateDispatch({ type: 'setFilterValue', value });\n                  debouncedFiltering(() => setFilter('name', value, dispatch));\n                },\n                value: filter,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.type',\n                defaultMessage: 'Type',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('source_type_id', value, dispatch),\n                items: prepareSourceTypeSelection(filteredSourceTypes),\n                value: filterValue.source_type_id,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.application',\n                defaultMessage: 'Application',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('applications', value, dispatch),\n                items: prepareApplicationTypeSelection(\n                  appTypes?.filter(filterVendorAppTypes(filteredSourceTypes, activeCategory)) || []\n                ),\n                value: filterValue.applications,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.availabilityStatus',\n                defaultMessage: 'Status',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (event, _value, selectedValue) =>\n                  setFilter('availability_status', event.target.checked ? [selectedValue] : [], dispatch),\n                items: [\n                  { label: intl.formatMessage({ id: 'sources.available', defaultMessage: 'Available' }), value: AVAILABLE },\n                  {\n                    label: intl.formatMessage({ id: 'sources.unavailable', defaultMessage: 'Unavailable' }),\n                    value: UNAVAILABLE,\n                  },\n                ],\n                value: filterValue.availability_status,\n              },\n            },\n          ],\n        }}\n        activeFiltersConfig={{\n          filters: prepareChips(filterValue, sourceTypes, appTypes, intl),\n          onDelete: (_event, chips, deleteAll) => dispatch(filterSources(removeChips(chips, filterValue, deleteAll))),\n        }}\n        exportConfig={{\n          ...(isSmallScreen && { position: 'right' }),\n          isDisabled: !loaded,\n          onSelect: (_e, type) => {\n            const data =\n              type === 'csv'\n                ? generateCSV(entities, intl, appTypes, sourceTypes)\n                : generateJSON(entities, intl, appTypes, sourceTypes);\n            downloadFile(data, `sources-${new Date().toISOString()}`, type);\n          },\n        }}\n      />\n      <SourcesTable />\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfigBottom : undefined}\n      />\n    </React.Fragment>\n  );\n\n  const hasSomeFilter =\n    Object.entries(filterValue)\n      .map(([_key, value]) => value && (!Array.isArray(value) || (Array.isArray(value) && value.length > 0)))\n      .filter(Boolean).length > 0;\n\n  const showEmptyState = loaded && numberOfEntities === 0 && !hasSomeFilter;\n  const showInfoCards = activeCategory === CLOUD_VENDOR && !showEmptyState;\n\n  const setSelectedType = (selectedType) => stateDispatch({ type: 'setSelectedType', selectedType });\n\n  return (\n    <React.Fragment>\n      <Suspense fallback={null}>\n        <CustomRoute exact route={routes.sourcesRemove} Component={SourceRemoveModal} />\n        <CustomRoute\n          exact\n          route={routes.sourcesNew}\n          Component={AddSourceWizard}\n          componentProps={{\n            sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n            applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n            isOpen: true,\n            onClose: () => {\n              stateDispatch({ type: 'closeWizard' });\n              history.push(routes.sources.path);\n            },\n            afterSuccess: (source) => afterSuccess(dispatch, source),\n            hideSourcesButton: true,\n            selectedType,\n            submitCallback: (state) => checkSubmit(state, dispatch, history.push, intl, stateDispatch),\n            initialValues: wizardInitialValues,\n            initialWizardState: wizardInitialState,\n            activeCategory,\n          }}\n        />\n      </Suspense>\n      <SourcesHeader />\n      <Section type=\"content\">\n        {showInfoCards && <CloudCards />}\n        {fetchingError && <ErrorState />}\n        {!fetchingError && showEmptyState && activeCategory === CLOUD_VENDOR && (\n          <CloudEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && showEmptyState && activeCategory === REDHAT_VENDOR && (\n          <RedHatEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && !showEmptyState && mainContent()}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nexport default SourcesPage;\n","import { sourcesColumns } from '../views/sourcesViewDefinition';\nimport formatValueToExport from './formatValueToExport';\n\nconst generateCSV = (entities, intl, applicationTypes, sourceTypes) => {\n  const columns = sourcesColumns(intl).filter(({ hidden }) => !hidden);\n\n  const rows = [\n    columns.map(({ title }) => title),\n    ...entities.map((source) =>\n      columns\n        .map(({ value }) => formatValueToExport(value, source[value], applicationTypes, sourceTypes))\n        .map((value) => (value?.includes(',') ? `\"${value}\"` : value))\n    ),\n  ];\n\n  return rows.map((r) => r.join(',')).join('\\n');\n};\n\nexport default generateCSV;\n","import { sourcesColumns } from '../views/sourcesViewDefinition';\nimport formatValueToExport from './formatValueToExport';\n\nconst formatSource = (columns, source, applicationTypes, sourceTypes) =>\n  columns.reduce(\n    (acc, curr) => ({ ...acc, [curr.title]: formatValueToExport(curr.value, source[curr.value], applicationTypes, sourceTypes) }),\n    {}\n  );\n\nconst generateJSON = (entities, intl, applicationTypes, sourceTypes) => {\n  const columns = sourcesColumns(intl).filter(({ hidden }) => !hidden);\n\n  const rows = entities.map((source) => formatSource(columns, source, applicationTypes, sourceTypes));\n\n  return JSON.stringify(rows, null, 2);\n};\n\nexport default generateJSON;\n","export const computeSourceStatus = (source) => {\n  const appStatuses =\n    source.applications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const endpointStatuses =\n    source.endpoint?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const authenticationsStatuses =\n    source.authentications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n\n  const statuses = [...appStatuses, ...endpointStatuses, ...authenticationsStatuses];\n\n  if (statuses.includes('unavailable')) {\n    return 'unavailable';\n  }\n\n  if (statuses.length > 0 && statuses.every((status) => status === 'available')) {\n    return 'available';\n  }\n\n  if (statuses.includes('timeout')) {\n    return 'timeout';\n  }\n\n  return 'finished';\n};\n\nexport default computeSourceStatus;\n","export const disabledMessage = (intl) =>\n  intl.formatMessage({\n    id: 'sources.notAdminButton',\n    defaultMessage:\n      'To perform this action, you must be granted Sources Administrator permissions from your Organization Administrator.',\n  });\n\nconst disabledTooltipProps = (intl) => ({\n  tooltip: disabledMessage(intl),\n  isDisabled: true,\n  className: 'src-m-dropdown-item-disabled',\n});\n\nexport default disabledTooltipProps;\n","import { TOPOLOGY_INV_NAME } from './constants';\n\nconst filterApps = (type) => type.name !== TOPOLOGY_INV_NAME;\n\nexport const filterVendorAppTypes =\n  (sourceTypes, category) =>\n  ({ supported_source_types }) =>\n    supported_source_types.find((type) => sourceTypes.find(({ name }) => type === name)?.category === category);\n\nexport default filterApps;\n","import { ANSIBLE_TOWER_NAME, SATELLITE_NAME } from './constants';\n\nconst filterTypes = (type) => type.schema;\n\nconst hiddenTypes = [SATELLITE_NAME, ANSIBLE_TOWER_NAME];\n\nexport const filterVendorTypes =\n  (activeCategory, showHidden) =>\n  ({ category, name }) => {\n    if (showHidden) {\n      return category === activeCategory;\n    } else {\n      return category === activeCategory && !hiddenTypes.includes(name);\n    }\n  };\n\nexport default filterTypes;\n"],"names":["doLoadSourceTypes","getSourcesApi","listSourceTypes","then","data","intl","useIntl","writePermissions","useHasWritePermissions","dispatch","useDispatch","useEffect","title","formatMessage","id","defaultMessage","description","disabledMessage","addMessage","variant","Redirect","to","routes","source","useSource","paused_at","replaceRouteId","CustomRouteInternal","route","children","redirectNoId","noPaused","writeAccess","RedirectNoId","propTypes","PropTypes","path","isRequired","CustomRoute","componentProps","Component","props","Route","useParams","loaded","useIsLoaded","useSelector","sources","shallowEqual","appTypesLoaded","sourceTypesLoaded","useState","applicationIsLoaded","setIsApplicationLoaded","doLoadSource","addHiddenSource","ImageWithPlaceholder","src","rest","setLoaded","height","width","onLoad","style","display","user","entities","find","Bullseye","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","EmptyStateBody","Button","onClick","clearFilters","itemToCells","item","columns","sourceTypes","appTypes","filter","column","hidden","map","col","formatter","value","renderSources","removingSources","reduce","acc","isDeleting","includes","originalName","name","isOpen","expanded","cells","disableActions","prepareColumnsCells","transforms","wrappable","sortable","reducer","state","payload","key","actionResolver","push","hasWritePermissions","rowData","disabledProps","disabledTooltipProps","actions","_ev","_i","resumeSource","component","pauseSource","useHistory","sortBy","sortDirection","numberOfEntities","reduxDispatch","notSortable","useReducer","sourcesColumns","rows","isLoaded","refreshSources","refreshColumns","shownRows","heightAuto","colSpan","COLUMN_COUNT","className","Table","gridBreakPoint","onSort","_event","direction","sortEntities","index","cell","indexOf","undefined","rowWrapper","RowWrapperLoader","TableHeader","TableBody","debouncedFiltering","awesomeDebounce","refresh","afterSuccessLoadParameters","pageNumber","prepareSourceTypeSelection","label","product_name","sort","a","b","localeCompare","prepareApplicationTypeSelection","display_name","setFilter","filterSources","prepareChips","filterValue","Object","keys","length","source_type_id","category","chips","sourceType","type","applications","appType","availability_status","AVAILABLE","chipsFormatters","Boolean","loadedTypes","types","tooltip","Tooltip","content","Tile","isDisabled","TilesArray","setSelectedType","mapper","activeCategory","openWizard","TileComponent","DisabledTile","filterVendorTypes","amazon","isStacked","alt","google","azure","ibm","CloudEmptyState","Card","CardTitle","CardBody","Text","CardFooter","chunks","href","target","rel","openshift","RedHatEmptyState","Tabs","activeKey","onSelect","_e","setActiveCategory","Tab","eventKey","CLOUD_VENDOR","TabTitleIcon","TabTitleText","REDHAT_VENDOR","SourcesHeader","PageHeader","PageHeaderTitle","React","applicationTypes","application_type_id","join","SourceRemoveModal","lazy","AddSourceWizard","module","default","initialState","selectedType","wizardInitialState","wizardInitialValues","initialValues","stateDispatch","entitiesLoaded","history","screenSize","useScreenSize","pageSize","fetchingError","paginationClicked","onSetPage","page","pageAndSize","maximumPageNumber","Math","ceil","max","actionsConfig","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","filteredSourceTypes","addSourceText","noPermissionsText","isSmallScreen","dropdownProps","position","Link","hasSomeFilter","entries","Array","isArray","showEmptyState","showInfoCards","Suspense","fallback","exact","onClose","afterSuccess","loadEntities","hideSourcesButton","submitCallback","Date","now","location","pathname","split","pop","isErrored","wizardState","activeStep","activeStepIndex","maxStepIndex","prevSteps","registeredFieldsHistory","values","actionLinks","AlertActionLink","removeMessage","computeSourceStatus","createdSource","error","availability_status_error","endpoint","bold","checkSubmit","initialWizardState","Section","CloudCards","ErrorState","PrimaryToolbar","useMobileLayout","pagination","tabIndex","filterConfig","items","filterValues","onChange","filterVendorAppTypes","event","_value","selectedValue","checked","UNAVAILABLE","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips","exportConfig","formatValueToExport","r","generateCSV","formatSource","JSON","stringify","generateJSON","downloadFile","toISOString","appStatuses","endpointStatuses","authenticationsStatuses","authentications","statuses","every","status","supported_source_types","TOPOLOGY_INV_NAME","hiddenTypes","SATELLITE_NAME","ANSIBLE_TOWER_NAME","showHidden","schema"],"sourceRoot":""}