{"version":3,"file":"js/sourcesPage.c5f5d56b91f61b8727a3.js","mappings":"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","sources":["webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/components/SourcesTable/EmptyStateTable.js","webpack:///./src/components/SourcesTable/SourcesTable.js","webpack:///./src/pages/Sources/helpers.js","webpack:///./src/components/TilesShared/ImageWithPlaceholder.js","webpack:///./src/components/TilesShared/DisabledTile.js","webpack:///./src/components/TilesShared/TilesArray.js","webpack:///./src/components/CloudTiles/CloudTiles.js","webpack:///./src/components/CloudTiles/CloudEmptyState.js","webpack:///./src/components/RedHatTiles/RedHatTiles.js","webpack:///./src/components/RedHatTiles/RedHatEmptyState.js","webpack:///./src/components/TabNavigation.js","webpack:///./src/components/SourcesHeader.js","webpack:///./src/utilities/formatValueToExport.js","webpack:///./src/pages/Sources.js","webpack:///./src/utilities/generateCSV.js","webpack:///./src/utilities/generateJSON.js","webpack:///./src/utilities/computeSourceStatus.js","webpack:///./src/utilities/filterApps.js","webpack:///./src/utilities/filterTypes.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { linkBasename, mergeToBasename } from '../utilities/utils';\n\nexport const useAppNavigate = () => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n","import React from 'react';\n\nimport { Bullseye, Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.small}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundTitle',\n            defaultMessage: 'No sources found',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundDescription',\n            defaultMessage: 'No sources match the filter criteria. Remove all filters or clear all filters to show sources.',\n          })}\n        </EmptyStateBody>\n        <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n          {intl.formatMessage({\n            id: 'sources.clearAllFilters',\n            defaultMessage: 'Clear all filters',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default EmptyStateTable;\n","import React, { useEffect, useReducer } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Table, TableBody, TableHeader, sortable, wrappable } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\n\nimport { pauseSource, resumeSource, sortEntities } from '../../redux/sources/actions';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { COLUMN_COUNT, sourcesColumns } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { replaceRouteId, routes } from '../../Routing';\nimport disabledTooltipProps from '../../utilities/disabledTooltipProps';\nimport { useAppNavigate } from '../../hooks/useAppNavigate';\n\nexport const itemToCells = (item, columns, sourceTypes, appTypes) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((col) => ({\n      title: col.formatter\n        ? col.formatter(item[col.value], item, {\n            sourceTypes,\n            appTypes,\n          })\n        : item[col.value] || '',\n    }));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes, removingSources) =>\n  entities\n    .filter(({ hidden }) => !hidden)\n    .reduce((acc, item) => {\n      const isDeleting = removingSources.includes(item.id);\n\n      return [\n        ...acc,\n        {\n          ...item,\n          originalName: item.name,\n          isOpen: !!item.expanded,\n          cells: itemToCells(item, columns, sourceTypes, appTypes),\n          disableActions: isDeleting,\n          isDeleting,\n        },\n      ];\n    }, []);\n\nexport const prepareColumnsCells = (columns) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((column) => ({\n      title: column.title || '',\n      value: column.value,\n      hidden: column.hidden,\n      transforms: [wrappable],\n      ...(column.sortable && { transforms: [sortable, wrappable] }),\n    }));\n\nconst reducer = (state, payload) => ({ ...state, ...payload, key: state.key + 1 });\n\nconst initialState = (columns) => ({\n  rows: [],\n  sortBy: {},\n  isLoaded: false,\n  cells: prepareColumnsCells(columns),\n  key: 0,\n});\n\nexport const actionResolver = (intl, navigate, hasWritePermissions, dispatch, isOrgAdmin) => (rowData) => {\n  const disabledProps = disabledTooltipProps(intl, isOrgAdmin);\n  const actions = [];\n\n  if (rowData.paused_at) {\n    actions.push({\n      title: intl.formatMessage({\n        id: 'sources.resume',\n        defaultMessage: 'Resume',\n      }),\n      description: intl.formatMessage({\n        id: 'sources.resume.description',\n        defaultMessage: 'Unpause data collection for this source',\n      }),\n      onClick: (_ev, _i, { id }) => dispatch(resumeSource(id, rowData.originalName, intl)),\n      ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n    });\n  } else {\n    actions.push({\n      title: intl.formatMessage({\n        id: 'sources.pause',\n        defaultMessage: 'Pause',\n      }),\n      description: intl.formatMessage({\n        id: 'sources.pause.description',\n        defaultMessage: 'Temporarily disable data collection',\n      }),\n      onClick: (_ev, _i, { id }) => dispatch(pauseSource(id, rowData.originalName, intl)),\n      ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n    });\n  }\n\n  actions.push({\n    title: intl.formatMessage({\n      id: 'sources.remove',\n      defaultMessage: 'Remove',\n    }),\n    description: intl.formatMessage({\n      id: 'sources.remove.description',\n      defaultMessage: 'Permanently delete this source and all collected data',\n    }),\n    onClick: (_ev, _i, { id }) => navigate(replaceRouteId(routes.sourcesRemove.path, id)),\n    ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n  });\n\n  actions.push({\n    title: !rowData.paused_at\n      ? intl.formatMessage({\n          id: 'sources.edit',\n          defaultMessage: 'Edit',\n        })\n      : intl.formatMessage({\n          id: 'sources.viewDetails',\n          defaultMessage: 'View details',\n        }),\n    onClick: (_ev, _i, { id }) => navigate(replaceRouteId(routes.sourcesDetail.path, id)),\n    ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n  });\n\n  return actions;\n};\n\nconst SourcesTable = () => {\n  const navigate = useAppNavigate();\n  const intl = useIntl();\n\n  const loaded = useIsLoaded();\n  const writePermissions = useHasWritePermissions();\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n  const {\n    appTypes,\n    entities,\n    sourceTypes,\n    sourceTypesLoaded,\n    appTypesLoaded,\n    sortBy,\n    sortDirection,\n    numberOfEntities,\n    removingSources,\n  } = useSelector(({ sources }) => sources, shallowEqual);\n  const reduxDispatch = useDispatch();\n\n  const notSortable = numberOfEntities === 0 || !loaded;\n\n  const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n  const refreshColumns = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  const refreshSources = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      rows: renderSources(entities, columns, sourceTypes, appTypes, removingSources),\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  useEffect(() => {\n    if (loaded && sourceTypesLoaded && appTypesLoaded) {\n      dispatch({ isLoaded: true });\n      refreshSources();\n    } else {\n      dispatch({ isLoaded: false });\n      refreshColumns();\n    }\n  }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n  useEffect(() => {\n    if (state.isLoaded) {\n      refreshSources();\n    }\n  }, [entities, removingSources]);\n\n  let shownRows = state.rows;\n  if (numberOfEntities === 0 && state.isLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: COLUMN_COUNT },\n            title: <EmptyStateTable />,\n          },\n        ],\n      },\n    ];\n  } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: {\n              colSpan: COLUMN_COUNT,\n              className: 'sources-placeholder-row',\n            },\n            title: <PlaceHolderTable />,\n          },\n        ],\n      },\n    ];\n  }\n\n  return (\n    <Table\n      gridBreakPoint=\"grid-lg\"\n      aria-label={intl.formatMessage({\n        id: 'sources.list',\n        defaultMessage: 'List of Sources',\n      })}\n      onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n      sortBy={{\n        index: state.cells.map((cell) => (cell.hidden ? 'hidden' : cell.value)).indexOf(sortBy),\n        direction: sortDirection,\n      }}\n      key={state.key}\n      rows={shownRows}\n      cells={state.cells}\n      actionResolver={\n        loaded && numberOfEntities > 0 ? actionResolver(intl, navigate, writePermissions, reduxDispatch, isOrgAdmin) : undefined\n      }\n      rowWrapper={RowWrapperLoader}\n      className={numberOfEntities === 0 && state.isLoaded ? 'ins-c-table-empty-state' : ''}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default SourcesTable;\n","import React from 'react';\nimport awesomeDebounce from 'awesome-debounce-promise';\n\nimport { AlertActionLink } from '@patternfly/react-core';\n\nimport { addMessage, filterSources, loadEntities, removeMessage } from '../../redux/sources/actions';\nimport { replaceRouteId, routes } from '../../Routing';\nimport { AVAILABLE } from '../../views/formatters';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport { bold } from '../../utilities/intlShared';\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = {\n  pageNumber: 1,\n  sortBy: 'created_at',\n  sortDirection: 'desc',\n};\n\nexport const afterSuccess = (dispatch) => dispatch(loadEntities(afterSuccessLoadParameters));\n\nexport const prepareSourceTypeSelection = (sourceTypes) =>\n  sourceTypes.map(({ id, product_name }) => ({ label: product_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const prepareApplicationTypeSelection = (appTypes) =>\n  appTypes.map(({ id, display_name }) => ({ label: display_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) =>\n  dispatch(\n    filterSources({\n      [column]: value,\n    })\n  );\n\nexport const chipsFormatters = (key, filterValue, sourceTypes, appTypes, intl) =>\n  ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n      category: 'Source Type',\n      key,\n      chips: filterValue[key].map((id) => {\n        const sourceType = sourceTypes.find((type) => type.id === id);\n\n        return { name: sourceType ? sourceType.product_name : id, value: id };\n      }),\n    }),\n    applications: () => ({\n      category: 'Application',\n      key,\n      chips: filterValue[key].map((id) => {\n        const appType = appTypes.find((type) => type.id === id);\n\n        return { name: appType ? appType.display_name : id, value: id };\n      }),\n    }),\n    availability_status: () => ({\n      category: 'Status',\n      key,\n      chips: [\n        {\n          value: filterValue[key][0],\n          name:\n            filterValue[key][0] === AVAILABLE\n              ? intl.formatMessage({\n                  id: 'sources.available',\n                  defaultMessage: 'Available',\n                })\n              : intl.formatMessage({\n                  id: 'sources.unavailable',\n                  defaultMessage: 'Unavailable',\n                }),\n        },\n      ],\n    }),\n  }[key] || (() => ({ name: key })));\n\nexport const prepareChips = (filterValue, sourceTypes, appTypes, intl) =>\n  Object.keys(filterValue)\n    .map((key) =>\n      filterValue[key] && filterValue[key].length > 0\n        ? chipsFormatters(key, filterValue, sourceTypes, appTypes, intl)()\n        : undefined\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n  if (deleteAll) {\n    return Object.keys(filterValue).reduce(\n      (acc, curr) => ({\n        ...acc,\n        [curr]: undefined,\n      }),\n      {}\n    );\n  }\n\n  const chip = chips[0];\n\n  return {\n    ...filterValue,\n    [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined,\n  };\n};\n\nexport const loadedTypes = (types, loaded) => (loaded && types.length > 0 ? types : undefined);\n\nexport const checkSubmit = (state, dispatch, push, intl, stateDispatch) => {\n  const id = `sources-wizard-notification-${Date.now()}`;\n\n  if (location.pathname.split('/').filter(Boolean).pop() !== routes.sourcesNew.path.split('/').pop()) {\n    if (state.isErrored) {\n      const { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory } = state.wizardState;\n      dispatch(\n        addMessage({\n          title: intl.formatMessage({\n            id: 'alert.error.title',\n            defaultMessage: 'Error adding source',\n          }),\n          description: intl.formatMessage(\n            {\n              id: 'alert.error.description',\n              defaultMessage:\n                'There was a problem while trying to add source {name}. Please try again. If the error persists, open a support case.',\n            },\n            { name: <b>{state.values.source.name}</b> }\n          ),\n          variant: 'danger',\n          id,\n          actionLinks: (\n            <AlertActionLink\n              onClick={() => {\n                stateDispatch({\n                  type: 'retryWizard',\n                  initialValues: state.values,\n                  initialState: { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory },\n                });\n                dispatch(removeMessage(id));\n                push(routes.sourcesNew.path);\n              }}\n            >\n              {intl.formatMessage({\n                id: 'alert.error.link',\n                defaultMessage: 'Retry',\n              })}\n            </AlertActionLink>\n          ),\n        })\n      );\n    } else {\n      switch (computeSourceStatus(state.createdSource)) {\n        case 'unavailable':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.error.title',\n                defaultMessage: 'Source configuration unsuccessful',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'error.notification',\n                  defaultMessage: '{error} [<b>{name}</b>]',\n                },\n                {\n                  error:\n                    state.createdSource.applications?.[0]?.availability_status_error ||\n                    state.createdSource.endpoint?.[0]?.availability_status_error ||\n                    intl.formatMessage({\n                      id: 'wizard.unknownError',\n                      defaultMessage: 'Unknown error',\n                    }),\n                  name: state.createdSource.name,\n                  b: bold,\n                }\n              ),\n              variant: 'danger',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.unavailable.link',\n                    defaultMessage: 'Edit source',\n                  })}\n                </AlertActionLink>\n              ),\n            })\n          );\n          break;\n        case 'timeout':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.timeout.title',\n                defaultMessage: 'Source configuration in progress',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.timeout.description',\n                  defaultMessage:\n                    'We are still working to confirm credentials for source {name}. To track progress, check the Status column in the Sources table.',\n                },\n                { name: <b>{state.createdSource.name}</b> }\n              ),\n              variant: 'info',\n            })\n          );\n          break;\n        default:\n          dispatch(\n            addMessage({\n              title: intl.formatMessage(\n                {\n                  id: 'alert.success.title',\n                  defaultMessage: '{type} connection successful',\n                },\n                { type: state.sourceTypes.find(({ id }) => id === state.createdSource.source_type_id)?.product_name }\n              ),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.success.description',\n                  defaultMessage: 'Source {name} was successfully added',\n                },\n                { name: <b>{state.createdSource.name}</b> }\n              ),\n              variant: 'success',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.success.link',\n                    defaultMessage: 'View source details',\n                  })}\n                </AlertActionLink>\n              ),\n            })\n          );\n          break;\n      }\n    }\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Loader } from '../SourcesTable/loaders';\n\nconst ImageWithPlaceholder = ({ src, ...rest }) => {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <React.Fragment>\n      {!loaded && <Loader height=\"40px\" width=\"110px\" {...rest} />}\n      <img\n        src={src}\n        data-testid=\"ImageWithPlaceholder\"\n        onLoad={() => setLoaded(true)}\n        style={{ display: loaded ? 'initial' : 'none' }}\n        {...rest}\n      />\n    </React.Fragment>\n  );\n};\n\nImageWithPlaceholder.propTypes = {\n  src: PropTypes.string.isRequired,\n};\n\nexport default ImageWithPlaceholder;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nimport { Tile, Tooltip } from '@patternfly/react-core';\nimport { disabledMessage } from '../../utilities/disabledTooltipProps';\n\nconst DisabledTile = (props) => {\n  const intl = useIntl();\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n  const tooltip = disabledMessage(intl, isOrgAdmin);\n\n  return (\n    <Tooltip content={tooltip}>\n      <div className=\"disabled-tile-with-tooltip\">\n        <Tile {...props} isDisabled />\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default DisabledTile;\n","import PropTypes from 'prop-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes } from '../../Routing';\n\nimport { Tile } from '@patternfly/react-core';\n\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { useAppNavigate } from '../../hooks/useAppNavigate';\nimport DisabledTile from '../TilesShared/DisabledTile';\nimport { filterVendorTypes } from '../../utilities/filterTypes';\n\nconst TilesArray = ({ setSelectedType, mapper }) => {\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n  const activeCategory = useSelector(({ sources }) => sources.activeCategory);\n\n  const appNavigate = useAppNavigate();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const openWizard = (type) => {\n    setSelectedType(type);\n    appNavigate(routes.sourcesNew.path);\n  };\n\n  const TileComponent = hasWritePermissions ? Tile : DisabledTile;\n\n  return sourceTypes\n    .filter(filterVendorTypes(activeCategory))\n    .sort((a, b) => a.product_name.localeCompare(b.product_name))\n    .map(({ name }) => mapper(name, openWizard, TileComponent));\n};\n\nTilesArray.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n  mapper: PropTypes.func.isRequired,\n};\n\nexport default TilesArray;\n","import React from 'react';\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    amazon: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Amazon Web Services\"\n        onClick={() => openWizard('amazon')}\n        className=\"tile pf-u-mr-md pf-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/aws.svg\"\n            alt=\"aws logo\"\n          />\n        }\n      />\n    ),\n    google: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Google Cloud\"\n        className=\"tile pf-u-mr-md pf-u-mt-md\"\n        onClick={() => openWizard('google')}\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/google-cloud-short.svg\"\n            alt=\"google logo\"\n          />\n        }\n      />\n    ),\n    azure: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Microsoft Azure\"\n        onClick={() => openWizard('azure')}\n        className=\"tile pf-u-mr-md pf-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/microsoft-azure-short.svg\"\n            alt=\"azure logo\"\n          />\n        }\n      />\n    ),\n    ibm: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"IBM Cloud\"\n        onClick={() => openWizard('ibm')}\n        className=\"tile pf-u-mr-md pf-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/ibm-cloud.svg\"\n            alt=\"ibm logo\"\n          />\n        }\n      />\n    ),\n    'oracle-cloud-infrastructure': (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Oracle Cloud Infrastructure\"\n        onClick={() => openWizard('oracle-cloud-infrastructure')}\n        className=\"tile pf-u-mr-md pf-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/oracle-short.svg\"\n            alt=\"oracle logo\"\n          />\n        }\n      />\n    ),\n  }[type]);\n\nconst CloudTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default CloudTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardFooter, CardTitle, Text } from '@patternfly/react-core';\n\nimport CloudTiles from './CloudTiles';\n\nconst CLOUD_CATALOG_HREF = 'https://catalog.redhat.com/cloud';\n\nconst CloudEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"src-c-card__cloud-empty-state pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'cloud.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your public clouds',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'cloud.emptystate.cardDescription',\n            defaultMessage: 'Select an available provider.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <CloudTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n      <CardFooter className=\"cloud-footer\">\n        <Text className=\"catalog-link pf-u-mt-lg\">\n          {intl.formatMessage(\n            {\n              id: 'cloud.emptystate.catalogLink',\n              defaultMessage: 'Looking for a different provider? <a>See all Red Hat Certified Cloud and Service Providers</a>',\n            },\n            {\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href={CLOUD_CATALOG_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            }\n          )}\n        </Text>\n      </CardFooter>\n    </Card>\n  );\n};\n\nCloudEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default CloudEmptyState;\n","import React from 'react';\n\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst icon = (\n  <ImageWithPlaceholder className=\"redhat-icon\" src=\"/apps/frontend-assets/red-hat-logos/stacked.svg\" alt=\"red hat logo\" />\n);\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    openshift: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"OpenShift Container Platform\"\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        onClick={() => openWizard('openshift')}\n        icon={icon}\n      />\n    ),\n  }[type]);\n\nconst RedHatTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default RedHatTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardTitle, Text } from '@patternfly/react-core';\n\nimport RedHatTiles from './RedHatTiles';\n\nconst RedHatEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"src-c-card__cloud-empty-state pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'redhat.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your Red Hat applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'redhat.emptystate.cardDescription',\n            defaultMessage: 'Select an available application.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <RedHatTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nRedHatEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default RedHatEmptyState;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Tab, TabTitleIcon, TabTitleText, Tabs } from '@patternfly/react-core';\nimport RedhatIcon from '@patternfly/react-icons/dist/esm/icons/redhat-icon';\nimport CloudIcon from '@patternfly/react-icons/dist/esm/icons/cloud-icon';\n\nimport { setActiveCategory } from '../redux/sources/actions';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\n\nconst TabNavigation = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const activeCategory = useSelector(({ sources }) => sources.activeCategory);\n\n  return (\n    <Tabs activeKey={activeCategory} onSelect={(_e, key) => dispatch(setActiveCategory(key))} className=\"pf-u-mt-md\">\n      <Tab\n        eventKey={CLOUD_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <CloudIcon aria-label=\"Cloud Icon\" />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.cloudSources', defaultMessage: 'Cloud sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n      <Tab\n        eventKey={REDHAT_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <RedhatIcon aria-label=\"Red Hat Icon\" />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.redhatSources', defaultMessage: 'Red Hat sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n    </Tabs>\n  );\n};\n\nexport default TabNavigation;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport TabNavigation from './TabNavigation';\n\nconst SourcesHeader = () => {\n  const intl = useIntl();\n\n  return (\n    <PageHeader className=\"pf-u-pb-0\">\n      <PageHeaderTitle\n        title={intl.formatMessage({\n          id: 'sources.sources',\n          defaultMessage: 'Sources',\n        })}\n      />\n      <TabNavigation />\n    </PageHeader>\n  );\n};\n\nexport default React.memo(SourcesHeader);\n","const formatValueToExport = (key, value, applicationTypes, sourceTypes) => {\n  switch (key) {\n    case 'applications':\n      return value\n        .map(({ application_type_id }) => applicationTypes.find(({ id }) => id === application_type_id)?.display_name)\n        .join(',');\n    case 'source_type_id':\n      return sourceTypes.find(({ id }) => id === value)?.product_name;\n    default:\n      return value;\n  }\n};\n\nexport default formatValueToExport;\n","import React, { Suspense, useEffect, useReducer } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport AppLink from '../components/AppLink';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport { useAppNavigate } from '../hooks/useAppNavigate';\n\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { isSmallScreen, useScreenSize } from '@redhat-cloud-services/frontend-components/useScreenSize';\n\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport { filterSources, pageAndSize } from '../redux/sources/actions';\nimport SourcesTable from '../components/SourcesTable/SourcesTable';\nimport { routes } from '../Routing';\n\nimport {\n  afterSuccess,\n  checkSubmit,\n  debouncedFiltering,\n  loadedTypes,\n  prepareApplicationTypeSelection,\n  prepareChips,\n  prepareSourceTypeSelection,\n  removeChips,\n  setFilter,\n} from './Sources/helpers';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../hooks/useHasWritePermissions';\nimport { PaginationLoader } from '../components/SourcesTable/loaders';\nimport CloudCards from '../components/CloudTiles/CloudCards';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\nimport CloudEmptyState from '../components/CloudTiles/CloudEmptyState';\nimport { AVAILABLE, UNAVAILABLE } from '../views/formatters';\nimport RedHatEmptyState from '../components/RedHatTiles/RedHatEmptyState';\nimport { filterVendorTypes } from '../utilities/filterTypes';\nimport { filterVendorAppTypes } from '../utilities/filterApps';\nimport SourcesHeader from '../components/SourcesHeader';\nimport generateCSV from '../utilities/generateCSV';\nimport generateJSON from '../utilities/generateJSON';\nimport { Outlet } from 'react-router-dom';\n\nconst initialState = {\n  filter: undefined,\n  selectedType: undefined,\n  wizardInitialState: undefined,\n  wizardInitialValues: undefined,\n};\n\nconst reducer = (state, { type, value, selectedType, initialValues, initialState }) => {\n  switch (type) {\n    case 'setFilterValue':\n      return { ...state, filter: value };\n    case 'setSelectedType':\n      return { ...state, selectedType };\n    case 'retryWizard':\n      return { ...state, wizardInitialState: initialState, wizardInitialValues: initialValues };\n    case 'closeWizard':\n      return { ...state, selectedType: undefined, wizardInitialState: undefined, wizardInitialValues: undefined };\n  }\n};\n\nconst SourcesPage = () => {\n  const [{ filter, selectedType, wizardInitialState, wizardInitialValues }, stateDispatch] = useReducer(reducer, initialState);\n\n  const entitiesLoaded = useIsLoaded();\n  const hasWritePermissions = useHasWritePermissions();\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n  const appNavigate = useAppNavigate();\n  const intl = useIntl();\n\n  const screenSize = useScreenSize();\n\n  const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n  const {\n    filterValue,\n    numberOfEntities,\n    appTypes,\n    pageSize,\n    pageNumber,\n    fetchingError,\n    sourceTypes,\n    paginationClicked,\n    appTypesLoaded,\n    sourceTypesLoaded,\n    activeCategory,\n    entities,\n  } = sources;\n\n  const loaded = entitiesLoaded && sourceTypesLoaded && appTypesLoaded;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (filter !== filterValue.name) {\n      stateDispatch({ type: 'setFilterValue', value: filterValue.name });\n    }\n  }, [filterValue.name]);\n\n  const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n  const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n  const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n  useEffect(() => {\n    if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n      onSetPage({}, maximumPageNumber);\n    }\n  });\n\n  const paginationConfig = {\n    itemCount: numberOfEntities,\n    page: pageNumber,\n    perPage: pageSize,\n    onSetPage,\n    onPerPageSelect,\n    className: 'top-pagination',\n  };\n\n  const paginationConfigBottom = {\n    ...paginationConfig,\n    dropDirection: 'up',\n    variant: 'bottom',\n    isCompact: false,\n    className: 'bottom-pagination',\n  };\n\n  const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n  const filteredSourceTypes = sourceTypes.filter(filterVendorTypes(activeCategory, true));\n\n  const addSourceText = intl.formatMessage({\n    id: 'sources.addSource',\n    defaultMessage: 'Add source',\n  });\n  const noPermissionsText = isOrgAdmin\n    ? intl.formatMessage({\n        id: 'sources.notAdminAddButton',\n        defaultMessage: 'To add a source, you must add Sources Administrator permissions to your user.',\n      })\n    : intl.formatMessage({\n        id: 'sources.notPermissionsAddButton',\n        defaultMessage: 'To add a source, your Organization Administrator must grant you Sources Administrator permissions.',\n      });\n\n  let actionsConfig;\n\n  if (isSmallScreen(screenSize)) {\n    actionsConfig = {\n      dropdownProps: { position: 'right' },\n      actions: hasWritePermissions\n        ? [{ label: addSourceText, props: { to: routes.sourcesNew.path, component: AppLink } }]\n        : [\n            {\n              label: addSourceText,\n              props: {\n                component: 'div',\n                isDisabled: true,\n                tooltip: noPermissionsText,\n                className: 'src-m-dropdown-item-disabled',\n              },\n            },\n          ],\n    };\n  }\n\n  const mainContent = () => (\n    <React.Fragment>\n      <PrimaryToolbar\n        useMobileLayout\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n        actionsConfig={\n          actionsConfig || {\n            dropdownProps: { position: 'right' },\n            actions: hasWritePermissions\n              ? [\n                  <AppLink to={routes.sourcesNew.path} key=\"addSourceButton\">\n                    <Button\n                      data-hcc-index=\"true\"\n                      data-hcc-title={addSourceText}\n                      data-hcc-alt=\"create source;add cloud provider\"\n                      variant=\"primary\"\n                      id=\"addSourceButton\"\n                    >\n                      {addSourceText}\n                    </Button>\n                  </AppLink>,\n                ]\n              : [\n                  <Tooltip content={noPermissionsText} key=\"addSourceButton\">\n                    <span tabIndex=\"0\">\n                      <Button variant=\"primary\" isDisabled id=\"addSourceButton\">\n                        {addSourceText}\n                      </Button>\n                    </span>\n                  </Tooltip>,\n                ],\n          }\n        }\n        filterConfig={{\n          items: [\n            {\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              filterValues: {\n                'aria-label': intl.formatMessage({\n                  id: 'sources.filterByName',\n                  defaultMessage: 'Filter by name',\n                }),\n                onChange: (_event, value) => {\n                  stateDispatch({ type: 'setFilterValue', value });\n                  debouncedFiltering(() => setFilter('name', value, dispatch));\n                },\n                value: filter,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.type',\n                defaultMessage: 'Type',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('source_type_id', value, dispatch),\n                items: prepareSourceTypeSelection(filteredSourceTypes),\n                value: filterValue.source_type_id,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.application',\n                defaultMessage: 'Application',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('applications', value, dispatch),\n                items: prepareApplicationTypeSelection(\n                  appTypes?.filter(filterVendorAppTypes(filteredSourceTypes, activeCategory)) || []\n                ),\n                value: filterValue.applications,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.availabilityStatus',\n                defaultMessage: 'Status',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (event, _value, selectedValue) =>\n                  setFilter('availability_status', event.target.checked ? [selectedValue] : [], dispatch),\n                items: [\n                  { label: intl.formatMessage({ id: 'sources.available', defaultMessage: 'Available' }), value: AVAILABLE },\n                  {\n                    label: intl.formatMessage({ id: 'sources.unavailable', defaultMessage: 'Unavailable' }),\n                    value: UNAVAILABLE,\n                  },\n                ],\n                value: filterValue.availability_status,\n              },\n            },\n          ],\n        }}\n        activeFiltersConfig={{\n          filters: prepareChips(filterValue, sourceTypes, appTypes, intl),\n          onDelete: (_event, chips, deleteAll) => dispatch(filterSources(removeChips(chips, filterValue, deleteAll))),\n        }}\n        exportConfig={{\n          ...(isSmallScreen && { position: 'right' }),\n          isDisabled: !loaded,\n          onSelect: (_e, type) => {\n            const data =\n              type === 'csv'\n                ? generateCSV(entities, intl, appTypes, sourceTypes)\n                : generateJSON(entities, intl, appTypes, sourceTypes);\n            downloadFile(data, `sources-${new Date().toISOString()}`, type);\n          },\n        }}\n      />\n      <SourcesTable />\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfigBottom : undefined}\n      />\n    </React.Fragment>\n  );\n\n  const hasSomeFilter =\n    Object.entries(filterValue)\n      .map(([_key, value]) => value && (!Array.isArray(value) || (Array.isArray(value) && value.length > 0)))\n      .filter(Boolean).length > 0;\n\n  const showEmptyState = loaded && numberOfEntities === 0 && !hasSomeFilter;\n  const showInfoCards = activeCategory === CLOUD_VENDOR && !showEmptyState;\n\n  const setSelectedType = (selectedType) => stateDispatch({ type: 'setSelectedType', selectedType });\n\n  return (\n    <React.Fragment>\n      <Suspense fallback={null}>\n        <Outlet\n          context={{\n            sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n            applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n            isOpen: true,\n            onClose: () => {\n              stateDispatch({ type: 'closeWizard' });\n              appNavigate(routes.sources.path);\n            },\n            afterSuccess: (source) => afterSuccess(dispatch, source),\n            hideSourcesButton: true,\n            selectedType,\n            submitCallback: (state) => checkSubmit(state, dispatch, appNavigate, intl, stateDispatch),\n            initialValues: wizardInitialValues,\n            initialWizardState: wizardInitialState,\n            activeCategory,\n          }}\n        />\n      </Suspense>\n      <SourcesHeader />\n      <Section type=\"content\">\n        {showInfoCards && <CloudCards />}\n        {fetchingError && <ErrorState />}\n        {!fetchingError && showEmptyState && activeCategory === CLOUD_VENDOR && (\n          <CloudEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && showEmptyState && activeCategory === REDHAT_VENDOR && (\n          <RedHatEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && !showEmptyState && mainContent()}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nexport default SourcesPage;\n","import { sourcesColumns } from '../views/sourcesViewDefinition';\nimport formatValueToExport from './formatValueToExport';\n\nconst generateCSV = (entities, intl, applicationTypes, sourceTypes) => {\n  const columns = sourcesColumns(intl).filter(({ hidden }) => !hidden);\n\n  const rows = [\n    columns.map(({ title }) => title),\n    ...entities.map((source) =>\n      columns\n        .map(({ value }) => formatValueToExport(value, source[value], applicationTypes, sourceTypes))\n        .map((value) => (value?.includes(',') ? `\"${value}\"` : value))\n    ),\n  ];\n\n  return rows.map((r) => r.join(',')).join('\\n');\n};\n\nexport default generateCSV;\n","import { sourcesColumns } from '../views/sourcesViewDefinition';\nimport formatValueToExport from './formatValueToExport';\n\nconst formatSource = (columns, source, applicationTypes, sourceTypes) =>\n  columns.reduce(\n    (acc, curr) => ({ ...acc, [curr.title]: formatValueToExport(curr.value, source[curr.value], applicationTypes, sourceTypes) }),\n    {}\n  );\n\nconst generateJSON = (entities, intl, applicationTypes, sourceTypes) => {\n  const columns = sourcesColumns(intl).filter(({ hidden }) => !hidden);\n\n  const rows = entities.map((source) => formatSource(columns, source, applicationTypes, sourceTypes));\n\n  return JSON.stringify(rows, null, 2);\n};\n\nexport default generateJSON;\n","export const computeSourceStatus = (source) => {\n  const appStatuses =\n    source.applications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const endpointStatuses =\n    source.endpoint?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const authenticationsStatuses =\n    source.authentications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n\n  const statuses = [...appStatuses, ...endpointStatuses, ...authenticationsStatuses];\n\n  if (statuses.includes('unavailable')) {\n    return 'unavailable';\n  }\n\n  if (statuses.length > 0 && statuses.every((status) => status === 'available')) {\n    return 'available';\n  }\n\n  if (statuses.includes('timeout')) {\n    return 'timeout';\n  }\n\n  return 'finished';\n};\n\nexport default computeSourceStatus;\n","import { TOPOLOGY_INV_NAME } from './constants';\n\nconst filterApps = (type) => type.name !== TOPOLOGY_INV_NAME;\n\nexport const filterVendorAppTypes =\n  (sourceTypes, category) =>\n  ({ supported_source_types }) =>\n    supported_source_types.find((type) => sourceTypes.find(({ name }) => type === name)?.category === category);\n\nexport default filterApps;\n","import { ANSIBLE_TOWER_NAME, SATELLITE_NAME } from './constants';\n\nconst filterTypes = (type) => type.schema;\n\nconst hiddenTypes = [SATELLITE_NAME, ANSIBLE_TOWER_NAME];\n\nexport const filterVendorTypes =\n  (activeCategory, showHidden) =>\n  ({ category, name }) => {\n    if (showHidden) {\n      return category === activeCategory;\n    } else {\n      return category === activeCategory && !hiddenTypes.includes(name);\n    }\n  };\n\nexport default filterTypes;\n"],"names":["useAppNavigate","navigate","useNavigate","to","options","mergeToBasename","linkBasename","intl","useIntl","dispatch","useDispatch","Bullseye","EmptyState","variant","EmptyStateVariant","small","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","formatMessage","id","defaultMessage","EmptyStateBody","Button","onClick","clearFilters","itemToCells","item","columns","sourceTypes","appTypes","filter","column","title","hidden","map","col","formatter","value","renderSources","entities","removingSources","reduce","acc","isDeleting","includes","originalName","name","isOpen","expanded","cells","disableActions","prepareColumnsCells","transforms","wrappable","sortable","reducer","state","payload","key","actionResolver","hasWritePermissions","isOrgAdmin","rowData","disabledProps","disabledTooltipProps","actions","paused_at","push","description","_ev","_i","resumeSource","component","pauseSource","replaceRouteId","routes","sourcesRemove","path","sourcesDetail","loaded","useIsLoaded","writePermissions","useHasWritePermissions","useSelector","user","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","sortBy","sortDirection","numberOfEntities","reduxDispatch","notSortable","useReducer","sourcesColumns","rows","isLoaded","refreshSources","useEffect","refreshColumns","shownRows","heightAuto","props","colSpan","COLUMN_COUNT","className","Table","gridBreakPoint","onSort","_event","direction","sortEntities","index","cell","indexOf","undefined","rowWrapper","RowWrapperLoader","TableHeader","TableBody","debouncedFiltering","awesomeDebounce","refresh","afterSuccessLoadParameters","pageNumber","prepareSourceTypeSelection","label","product_name","sort","a","b","localeCompare","prepareApplicationTypeSelection","display_name","setFilter","filterSources","prepareChips","filterValue","Object","keys","length","source_type_id","category","chips","sourceType","find","type","applications","appType","availability_status","AVAILABLE","chipsFormatters","Boolean","loadedTypes","types","ImageWithPlaceholder","src","rest","useState","setLoaded","height","width","onLoad","style","display","propTypes","PropTypes","isRequired","tooltip","disabledMessage","Tooltip","content","Tile","isDisabled","TilesArray","setSelectedType","mapper","activeCategory","appNavigate","openWizard","sourcesNew","TileComponent","DisabledTile","filterVendorTypes","amazon","isStacked","alt","google","azure","ibm","CloudEmptyState","Card","CardTitle","CardBody","Text","CardFooter","chunks","href","target","rel","openshift","RedHatEmptyState","Tabs","activeKey","onSelect","_e","setActiveCategory","Tab","eventKey","CLOUD_VENDOR","TabTitleIcon","TabTitleText","REDHAT_VENDOR","SourcesHeader","PageHeader","PageHeaderTitle","React","applicationTypes","application_type_id","join","initialState","selectedType","wizardInitialState","wizardInitialValues","initialValues","stateDispatch","entitiesLoaded","screenSize","useScreenSize","pageSize","fetchingError","paginationClicked","onSetPage","page","pageAndSize","maximumPageNumber","Math","ceil","max","actionsConfig","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","filteredSourceTypes","addSourceText","noPermissionsText","isSmallScreen","dropdownProps","position","AppLink","hasSomeFilter","entries","Array","isArray","showEmptyState","showInfoCards","Suspense","fallback","Outlet","context","onClose","afterSuccess","source","loadEntities","hideSourcesButton","submitCallback","Date","now","location","pathname","split","pop","isErrored","wizardState","activeStep","activeStepIndex","maxStepIndex","prevSteps","registeredFieldsHistory","addMessage","values","actionLinks","AlertActionLink","removeMessage","computeSourceStatus","createdSource","error","availability_status_error","endpoint","bold","checkSubmit","initialWizardState","Section","CloudCards","ErrorState","PrimaryToolbar","useMobileLayout","pagination","tabIndex","filterConfig","items","filterValues","onChange","filterVendorAppTypes","event","_value","selectedValue","checked","UNAVAILABLE","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips","exportConfig","data","formatValueToExport","r","generateCSV","formatSource","JSON","stringify","generateJSON","downloadFile","toISOString","appStatuses","endpointStatuses","authenticationsStatuses","authentications","statuses","every","status","supported_source_types","TOPOLOGY_INV_NAME","hiddenTypes","SATELLITE_NAME","ANSIBLE_TOWER_NAME","showHidden","schema"],"sourceRoot":""}