{"version":3,"file":"js/sourcesPage.402a65bb7322d5085287.js","mappings":"6IAGO,MAAMA,EAAiB,KAC5B,MAAMC,GAAW,IAAAC,eAEjB,MAAO,CAACC,EAAIC,IACHH,GAAS,OAAgBE,EAAI,KAAeC,EACpD,C,mWCCH,MA+BA,EA/BwB,KACtB,MAAMC,GAAO,UACPC,GAAW,UAEjB,OACE,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAC,WAAU,CAACC,QAAS,EAAAC,kBAAkBC,OACrC,kBAAC,EAAAC,eAAc,CAACC,KAAM,MACtB,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,MAC3BX,EAAKY,cAAc,CAClBC,GAAI,8BACJC,eAAgB,sBAGpB,kBAAC,EAAAC,eAAc,KACZf,EAAKY,cAAc,CAClBC,GAAI,oCACJC,eAAgB,oGAGpB,kBAAC,EAAAE,OAAM,CAACZ,QAAQ,OAAOa,QAAS,IAAMhB,GAAS,YAC5CD,EAAKY,cAAc,CAClBC,GAAI,0BACJC,eAAgB,wBAKzB,E,2DCpBI,MAAMI,EAAc,CAACC,EAAMC,EAASC,EAAaC,IACtDF,EACGG,QAAQC,GAAWA,EAAOC,OAASD,EAAOE,SAC1CC,KAAKC,IAAQ,CACZH,MAAOG,EAAIC,UACPD,EAAIC,UAAUV,EAAKS,EAAIE,OAAQX,EAAM,CACnCE,cACAC,aAEFH,EAAKS,EAAIE,QAAU,OAGvBC,EAAgB,CAACC,EAAUZ,EAASC,EAAaC,EAAUW,IAC/DD,EACGT,QAAO,EAAGG,aAAcA,IACxBQ,QAAO,CAACC,EAAKhB,KACZ,MAAMiB,EAAaH,EAAgBI,SAASlB,EAAKN,IAEjD,MAAO,IACFsB,EACH,IACKhB,EACHmB,aAAcnB,EAAKoB,KACnBC,SAAUrB,EAAKsB,SACfC,MAAOxB,EAAYC,EAAMC,EAASC,EAAaC,GAC/CqB,eAAgBP,EAChBA,cAEH,GACA,IAEMQ,EAAuBxB,GAClCA,EACGG,QAAQC,GAAWA,EAAOC,OAASD,EAAOE,SAC1CC,KAAKH,IAAW,CACfC,MAAOD,EAAOC,OAAS,GACvBK,MAAON,EAAOM,MACdJ,OAAQF,EAAOE,OACfmB,WAAY,CAACC,EAAA,OACTtB,EAAOuB,UAAY,CAAEF,WAAY,CAACE,EAAA,EAAUD,EAAA,KAChDE,MAAOxB,EAAOC,MAAQ,CAAE,aAAcD,EAAOC,OAAU,CAAE,aAAc,4BAGvEwB,EAAU,CAACC,EAAOC,KAAY,IAAMD,KAAUC,EAASC,IAAKF,EAAME,IAAM,IAUjEC,EAAiB,CAACrD,EAAMJ,EAAU0D,EAAqBrD,EAAUsD,IAAgBC,IAC5F,MAAMC,GAAgB,EAAAC,EAAA,GAAqB1D,EAAMuD,GAC3CI,EAAU,GAyDhB,OAvDIH,EAAQI,UACVD,EAAQE,KAAK,CACXpC,MAAOzB,EAAKY,cAAc,CACxBC,GAAI,iBACJC,eAAgB,WAElBgD,YAAa9D,EAAKY,cAAc,CAC9BC,GAAI,6BACJC,eAAgB,iDAElBG,QAAS,CAAC8C,EAAKC,GAAMnD,QAASZ,GAAS,QAAaY,EAAI2C,EAAQlB,aAActC,OACzEsD,EAAsC,CAAEW,UAAW,UAA7BR,IAG7BE,EAAQE,KAAK,CACXpC,MAAOzB,EAAKY,cAAc,CACxBC,GAAI,gBACJC,eAAgB,UAElBgD,YAAa9D,EAAKY,cAAc,CAC9BC,GAAI,4BACJC,eAAgB,wCAElBG,QAAS,CAAC8C,EAAKC,GAAMnD,QAASZ,GAAS,QAAYY,EAAI2C,EAAQlB,aAActC,OACxEsD,EAAsC,CAAEW,UAAW,UAA7BR,IAI/BE,EAAQE,KAAK,CACXpC,MAAOzB,EAAKY,cAAc,CACxBC,GAAI,iBACJC,eAAgB,WAElBgD,YAAa9D,EAAKY,cAAc,CAC9BC,GAAI,6BACJC,eAAgB,+DAElBG,QAAS,CAAC8C,EAAKC,GAAMnD,QAASjB,GAAS,QAAe,KAAOsE,cAAcC,KAAMtD,OAC5EyC,EAAsC,CAAEW,UAAW,UAA7BR,IAG7BE,EAAQE,KAAK,CACXpC,MAAQ+B,EAAQI,UAKZ5D,EAAKY,cAAc,CACjBC,GAAI,sBACJC,eAAgB,iBANlBd,EAAKY,cAAc,CACjBC,GAAI,eACJC,eAAgB,SAMtBG,QAAS,CAAC8C,EAAKC,GAAMnD,QAASjB,GAAS,QAAe,KAAOwE,cAAcD,KAAMtD,OAC5EyC,EAAsC,CAAEW,UAAW,UAA7BR,IAGtBE,CAAO,EAsHhB,EAnHqB,KACnB,MAAM/D,GAAW,EAAAD,EAAA,KACXK,GAAO,UAEPqE,GAAS,EAAAC,EAAA,KACTC,GAAmB,EAAAC,EAAA,KACnBjB,GAAa,SAAY,EAAGkB,UAAWA,EAAKlB,cAE5C,SACJjC,EAAQ,SACRU,EAAQ,YACRX,EAAW,kBACXqD,EAAiB,eACjBC,EAAc,OACdC,EAAM,cACNC,EAAa,iBACbC,EAAgB,gBAChB7C,IACE,SAAY,EAAG8C,aAAcA,GAAS,MACpCC,GAAgB,UAEhBC,EAAmC,IAArBH,IAA2BT,GAExCnB,EAAOjD,IAAY,IAAAiF,YAAWjC,GA7FjB7B,GA6FuC,OAAepB,EAAMiF,GA7FhD,CAChCE,KAAM,GACNP,OAAQ,CAAC,EACTQ,UAAU,EACV1C,MAAOE,EAAoBxB,GAC3BgC,IAAK,KALc,IAAChC,EA+FpB,MAQMiE,EAAiB,KACrB,MAAMjE,GAAU,OAAepB,EAAMiF,GAErC,OAAOhF,EAAS,CACdkF,KAAMpD,EAAcC,EAAUZ,EAASC,EAAaC,EAAUW,GAC9DS,MAAOE,EAAoBxB,IAC3B,GAGJ,IAAAkE,YAAU,KACJjB,GAAUK,GAAqBC,GACjC1E,EAAS,CAAEmF,UAAU,IACrBC,MAEApF,EAAS,CAAEmF,UAAU,IAtBF,MACrB,MAAMhE,GAAU,OAAepB,EAAMiF,GAE9BhF,EAAS,CACdyC,MAAOE,EAAoBxB,IAC3B,EAkBAmE,G,GAED,CAAClB,EAAQK,EAAmBC,KAE/B,IAAAW,YAAU,KACJpC,EAAMkC,UACRC,G,GAED,CAACrD,EAAUC,IAEd,IAAIuD,EAAYtC,EAAMiC,KA8BtB,OA7ByB,IAArBL,GAA0B5B,EAAMkC,SAClCI,EAAY,CACV,CACEC,YAAY,EACZ/C,MAAO,CACL,CACEM,MAAO,CAAE0C,QAAS,KAClBjE,MAAO,kBAAC,EAAe,UAKrB4C,GAAWM,GAAmBD,IACxCc,EAAY,CACV,CACEC,YAAY,EACZ/C,MAAO,CACL,CACEM,MAAO,CACL0C,QAAS,IACTC,UAAW,2BAEblE,MAAO,kBAAC,KAAgB,WAQhC,kBAACmE,EAAA,EAAK,CACJC,eAAe,UAAS,aACZ7F,EAAKY,cAAc,CAC7BC,GAAI,eACJC,eAAgB,yBAElBgF,OAAQ,CAACC,EAAQ3C,EAAK4C,IAAchB,GAAc,QAAa9B,EAAMR,MAAMU,GAAKtB,MAAOkE,IACvFpB,OAAQ,CACNqB,MAAO/C,EAAMR,MAAMf,KAAKuE,GAAUA,EAAKxE,OAAS,SAAWwE,EAAKpE,QAAQqE,QAAQvB,GAChFoB,UAAWnB,GAEbzB,IAAKF,EAAME,IACX+B,KAAMK,EACN9C,MAAOQ,EAAMR,MACbW,eACEgB,GAAUS,EAAmB,EAAIzB,EAAerD,EAAMJ,EAAU2E,EAAkBS,EAAezB,QAAc6C,EAEjHC,WAAY,KACZV,UAAgC,IAArBb,GAA0B5B,EAAMkC,SAAW,0BAA4B,IAElF,kBAAC,IAAW,MACZ,kBAAC,IAAS,MAEb,E,2DCzOI,MAAMkB,GAAqB,QAAiBC,GAAYA,KAAW,KAE7DC,EAA6B,CACxCC,WAAY,EACZ7B,OAAQ,aACRC,cAAe,QAKJ6B,EAA8BrF,GACzCA,EAAYM,KAAI,EAAGd,KAAI8F,mBAAmB,CAAGC,MAAOD,EAAc7E,MAAOjB,MAAOgG,MAAK,CAACC,EAAGC,IAAMD,EAAEF,MAAMI,cAAcD,EAAEH,SAE5GK,EAAmC3F,GAC9CA,EAASK,KAAI,EAAGd,KAAIqG,mBAAmB,CAAGN,MAAOM,EAAcpF,MAAOjB,MAAOgG,MAAK,CAACC,EAAGC,IAAMD,EAAEF,MAAMI,cAAcD,EAAEH,SAEzGO,EAAY,CAAC3F,EAAQM,EAAO7B,IACvCA,GACE,QAAc,CACZ,CAACuB,GAASM,KA8CHsF,EAAe,CAACC,EAAahG,EAAaC,EAAUtB,IAC/DsH,OAAOC,KAAKF,GACT1F,KAAKyB,GACJiE,EAAYjE,IAAQiE,EAAYjE,GAAKoE,OAAS,EA7CrB,EAACpE,EAAKiE,EAAahG,EAAaC,EAAUtB,KACvE,CACEuC,KAAM,KAAM,CAAGA,KAAM8E,EAAYjE,GAAMA,QACvCqE,eAAgB,KAAM,CACpBC,SAAU,mBACVtE,MACAuE,MAAON,EAAYjE,GAAKzB,KAAKd,IAC3B,MAAM+G,EAAavG,EAAYwG,MAAMC,GAASA,EAAKjH,KAAOA,IAE1D,MAAO,CAAE0B,KAAMqF,EAAaA,EAAWjB,aAAe9F,EAAIiB,MAAOjB,EAAI,MAGzEkH,aAAc,KAAM,CAClBL,SAAU,cACVtE,MACAuE,MAAON,EAAYjE,GAAKzB,KAAKd,IAC3B,MAAMmH,EAAU1G,EAASuG,MAAMC,GAASA,EAAKjH,KAAOA,IAEpD,MAAO,CAAE0B,KAAMyF,EAAUA,EAAQd,aAAerG,EAAIiB,MAAOjB,EAAI,MAGnEoH,oBAAqB,KAAM,CACzBP,SAAU,SACVtE,MACAuE,MAAO,CACL,CACE7F,MAAOuF,EAAYjE,GAAK,GACxBb,KACE8E,EAAYjE,GAAK,KAAO,KACpBpD,EAAKY,cAAc,CACjBC,GAAI,oBACJC,eAAgB,cAElBd,EAAKY,cAAc,CACjBC,GAAI,sBACJC,eAAgB,qBAK7BsC,IAAQ,MAAO,CAAGb,KAAMa,MAMnB8E,CAAgB9E,EAAKiE,EAAahG,EAAaC,EAAUtB,EAAzDkI,QACA9B,IAEL7E,OAAO4G,SAqBCC,EAAc,CAACC,EAAOhE,IAAYA,GAAUgE,EAAMb,OAAS,EAAIa,OAAQjC,E,0ECnGpF,MAAMkC,GAAuB,EAAGC,SAAQC,MACtC,MAAOnE,EAAQoE,IAAa,IAAAC,WAAS,GAErC,OACE,kBAAC,aAAc,MACXrE,GAAU,kBAAC,KAAM,CAACsE,OAAO,OAAOC,MAAM,WAAYJ,IACpD,yBACED,IAAKA,EAAG,cACI,uBACZM,OAAQ,IAAMJ,GAAU,GACxBK,MAAO,CAAEC,QAAS1E,EAAS,UAAY,WACnCmE,IAGT,EAGHF,GAAqBU,UAAY,CAC/BT,IAAK,YAAiBU,YAGxB,Y,gBCnBA,MAeA,GAfsBjG,IACpB,MAAMhD,GAAO,UACPuD,GAAa,SAAY,EAAGkB,UAAWA,EAAKlB,aAE5C2F,GAAU,OAAgBlJ,EAAMuD,GAEtC,OACE,kBAAC,EAAA4F,QAAO,CAACC,QAASF,GAChB,yBAAKvD,UAAU,8BACb,kBAAC,GAAA0D,KAAI,IAAKrG,EAAOsG,YAAU,KAGhC,E,gBCRH,MAAMC,GAAa,EAAGC,kBAAiBC,aACrC,MAAMpI,GAAc,SAAY,EAAG0D,aAAcA,EAAQ1D,aAAa,MAChEqI,GAAiB,SAAY,EAAG3E,aAAcA,EAAQ2E,iBAEtDC,GAAc,EAAAhK,EAAA,KACd2D,GAAsB,EAAAkB,EAAA,KAEtBoF,EAAc9B,IAClB0B,EAAgB1B,GAChB6B,EAAY,KAAOE,WAAW1F,KAAK,EAG/B2F,EAAgBxG,EAAsB,GAAA+F,KAAO,GAEnD,OAAOhI,EACJE,QAAO,QAAkBmI,IACzB7C,MAAK,CAACC,EAAGC,IAAMD,EAAEH,aAAaK,cAAcD,EAAEJ,gBAC9ChF,KAAI,EAAGY,UAAWkH,EAAOlH,EAAMqH,EAAYE,IAAe,EAG/DP,GAAWP,UAAY,CACrBQ,gBAAiB,UAAeP,WAChCQ,OAAQ,UAAeR,YAGzB,YChCMQ,GAAS,CAAC3B,EAAM8B,EAAYE,KAChC,CACEC,OACE,kBAACD,EAAa,CACZE,WAAS,EACT5G,IAAK0E,EACLrG,MAAM,sBACNR,QAAS,IAAM2I,EAAW,UAC1BjE,UAAU,mCACVnF,KACE,kBAAC,GAAoB,CACnBmF,UAAU,8BACV4C,IAAI,+CACJ0B,IAAI,eAKZC,OACE,kBAACJ,EAAa,CACZE,WAAS,EACT5G,IAAK0E,EACLrG,MAAM,eACNkE,UAAU,mCACV1E,QAAS,IAAM2I,EAAW,UAC1BpJ,KACE,kBAAC,GAAoB,CACnBmF,UAAU,8BACV4C,IAAI,8DACJ0B,IAAI,kBAKZE,MACE,kBAACL,EAAa,CACZE,WAAS,EACT5G,IAAK0E,EACLrG,MAAM,kBACNR,QAAS,IAAM2I,EAAW,SAC1BjE,UAAU,mCACVnF,KACE,kBAAC,GAAoB,CACnBmF,UAAU,8BACV4C,IAAI,iEACJ0B,IAAI,iBAKZG,IACE,kBAACN,EAAa,CACZE,WAAS,EACT5G,IAAK0E,EACLrG,MAAM,YACNR,QAAS,IAAM2I,EAAW,OAC1BjE,UAAU,mCACVnF,KACE,kBAAC,GAAoB,CACnBmF,UAAU,8BACV4C,IAAI,qDACJ0B,IAAI,eAKZ,8BACE,kBAACH,EAAa,CACZE,WAAS,EACT5G,IAAK0E,EACLrG,MAAM,8BACNR,QAAS,IAAM2I,EAAW,+BAC1BjE,UAAU,mCACVnF,KACE,kBAAC,GAAoB,CACnBmF,UAAU,8BACV4C,IAAI,wDACJ0B,IAAI,mBAKXnC,IAIL,GAFoB9E,GAAU,kBAAC,GAAU,IAAKA,EAAOyG,OAAQA,KC7EvDY,GAAkB,EAAGb,sBACzB,MAAMxJ,GAAO,UAEb,OACE,kBAAC,GAAAsK,KAAI,CAAC3E,UAAU,kEACd,kBAAC,GAAA4E,UAAS,KACPvK,EAAKY,cAAc,CAClBC,GAAI,6BACJC,eAAgB,qDAGpB,kBAAC,GAAA0J,SAAQ,KACP,kBAAC,GAAAC,KAAI,KACFzK,EAAKY,cAAc,CAClBC,GAAI,mCACJC,eAAgB,mCAGpB,yBAAK6E,UAAU,8CACb,kBAAC,GAAU,CAAC6D,gBAAiBA,MAGjC,kBAAC,GAAAkB,WAAU,CAAC/E,UAAU,gBACpB,kBAAC,GAAA8E,KAAI,CAAC9E,UAAU,8BACb3F,EAAKY,cACJ,CACEC,GAAI,+BACJC,eAAgB,kGAElB,CACEgG,EAAI6D,GACF,kBAAC,GAAAF,KAAI,CAACrH,IAAI,OAAOa,UAAU,IAAI2G,KAjCpB,mCAiC8CC,OAAO,SAASC,IAAI,uBAC1EH,OAQhB,EAGHN,GAAgBrB,UAAY,CAC1BQ,gBAAiB,UAAeP,YAGlC,YCrDMzI,GACJ,kBAAC,GAAoB,CAACmF,UAAU,cAAc4C,IAAI,kDAAkD0B,IAAI,iBAGpG,GAAS,CAACnC,EAAM8B,EAAYE,KAChC,CACEiB,UACE,kBAACjB,EAAa,CACZE,WAAS,EACT5G,IAAK0E,EACLrG,MAAM,+BACNkE,UAAU,4DACV1E,QAAS,IAAM2I,EAAW,aAC1BpJ,KAAMA,MAGTsH,IAIL,GAFqB9E,GAAU,kBAAC,GAAU,IAAKA,EAAOyG,OAAQ,KCdxDuB,GAAmB,EAAGxB,sBAC1B,MAAMxJ,GAAO,UAEb,OACE,kBAAC,GAAAsK,KAAI,CAAC3E,UAAU,kEACd,kBAAC,GAAA4E,UAAS,KACPvK,EAAKY,cAAc,CAClBC,GAAI,8BACJC,eAAgB,4DAGpB,kBAAC,GAAA0J,SAAQ,KACP,kBAAC,GAAAC,KAAI,KACFzK,EAAKY,cAAc,CAClBC,GAAI,oCACJC,eAAgB,sCAGpB,yBAAK6E,UAAU,8CACb,kBAAC,GAAW,CAAC6D,gBAAiBA,MAIrC,EAGHwB,GAAiBhC,UAAY,CAC3BQ,gBAAiB,UAAeP,YAGlC,Y,kGC3BA,MA2GA,GA3GsB,KACpB,MAAMjJ,GAAO,UACPC,GAAW,UACXyJ,GAAiB,SAAY,EAAG3E,aAAcA,EAAQ2E,iBACtDuB,GAAqB,KAAAC,SAAQ,iCAC7BC,GAAkB,KAAAD,SAAQ,2CAC1BE,GAA6B,KAAAF,SAAQ,kCACrC3H,GAAa,SAAY,EAAGkB,UAAWA,EAAKlB,aAC5C8H,GAA6B,SAAY,EAAG5G,UAAWA,GAAM6G,mCAEnE,OACE,kBAAC,GAAAC,YAAW,CAACzD,KAAK,OAAO1H,QAAS,GAAAoL,oBAAoBC,MAAOC,gBAAc,GACzE,kBAAC,GAAAC,KAAI,CACHC,UAAWlC,EACXmC,SAAU,CAACC,EAAI1I,IAAQnD,GAAS,QAAkBmD,IAClDuC,UAAU,gBACVoG,MAAO,CACLC,QAAS,YACTC,GAAI,UACJC,GAAI,UACJ,MAAO,aAGRd,GACC,kBAAC,GAAAe,IAAG,CACFC,SAAU,MACV3K,MAAO,kBAAC,GAAA4K,aAAY,K,IAAGrM,EAAKY,cAAc,CAAEC,GAAI,mBAAoBC,eAAgB,iBAGtFyC,GAAc8H,KACbJ,GAAsBE,KACtBA,EACC,oCACE,kBAAC,GAAAgB,IAAG,CACFC,SAAU,MACV3K,MACE,kBAAC,GAAA4K,aAAY,KACVrM,EAAKY,cAAc,CAAEC,GAAI,yBAA0BC,eAAgB,sBAI1E,kBAAC,GAAAqL,IAAG,CACFC,SAAU,MACV3K,MACE,kBAAC,GAAA4K,aAAY,KACVrM,EAAKY,cAAc,CAAEC,GAAI,8BAA+BC,eAAgB,8BAI/E,kBAAC,GAAAqL,IAAG,CACFC,SAAU,MACV3K,MAAO,kBAAC,GAAA4K,aAAY,KAAErM,EAAKY,cAAc,CAAEC,GAAI,mBAAoBC,eAAgB,iBAIvF,kBAAC,GAAAqL,IAAG,CACFC,SAAU,MACV3K,MACE,kBAAC,GAAA4K,aAAY,KAAErM,EAAKY,cAAc,CAAEC,GAAI,uBAAwBC,eAAgB,qBAIxF,kBAAC,GAAAqL,IAAG,CACFC,SAAU,MACV3K,MACE,kBAAC,aAAc,KACZ2J,EAA6B,GAG5B,kBAAC,GAAAkB,aAAY,KACX,kBAAC,KAAS,cAAY,gBAG1B,kBAAC,GAAAD,aAAY,KACVrM,EAAKY,cAAc,CAClBC,GAAI,uBACJC,eAAgBmK,EAAqB,QAAU,sBAMzD,kBAAC,GAAAkB,IAAG,CACFC,SAAU,MACV3K,MACE,kBAAC,aAAc,KACZ2J,EAA6B,GAG5B,kBAAC,GAAAkB,aAAY,KACX,kBAAC,KAAU,cAAY,kBAG3B,kBAAC,GAAAD,aAAY,KACVrM,EAAKY,cAAc,CAClBC,GAAI,wBACJC,eAAgBmK,EAAqB,UAAY,yBAQhE,E,4EC9GH,MAAMsB,GAAgB,CACpB,CACE9K,MAAO,iBACPqC,YAAa,6CACbhC,MAAO,OAET,CACEL,MAAO,yBACPqC,YAAa,2CACbhC,MAAO,OAET,CACEL,MAAO,WACPqC,YAAa,GACbhC,MAAO,OAET,CACEL,MAAO,QACPqC,YAAa,qFACbhC,MAAO,OAET,CACEL,MAAO,UACPqC,YAAa,+FACbhC,MAAO,QAoEX,GAhE8BkB,IAC5B,MAAOR,EAAQgK,IAAa,IAAA9D,WAAS,IAC9B+D,EAA0BC,IAA+B,IAAAhE,WAAS,IAClEiE,EAAqBC,IAA0B,IAAAlE,WAAS,IACxDmE,EAAqBC,IAA0B,IAAApE,UAAS,MAY/D,OACE,yBAAK/C,UAAU,yBACZ,CAAC,MAAgB,MAAW,OAAUtD,SAASwK,IAC9C,kBAACE,EAAA,EAAc,CACbC,QAAQ,gBACRC,OAAO,uBACPzK,OAAQiK,EACR/E,SAAUmF,EACVK,WAAY,KACVR,GAA4B,GAC5BI,EAAuB,KAAK,EAE9BK,SAAU,yBAAKtM,GAAG,qBAGrB,CAAC,MAAe,OAAcwB,SAASwK,IACtC,kBAAC,WAAe,CACdrK,OAAQmK,EACRS,QAAS,KACPR,GAAuB,GACvBE,EAAuB,KAAK,EAE9BpD,eAAgBmD,IAGpB,kBAAC,GAAAQ,SAAQ,CACP7K,OAAQA,EACRqJ,SArCe,CAAC9F,EAAQjE,KAC5B0K,GAAU,GACVM,EAAuBhL,GACnB,CAAC,MAAe,OAAcO,SAASP,GACzC8K,GAAuB,GACd,CAAC,MAAgB,MAAW,OAAUvK,SAASP,IACxD4K,GAA4B,E,EAgC1BY,aAAcd,EACde,OAASC,GACP,kBAAC,GAAAC,WAAU,CAACC,IAAKF,EAAWvM,QAAS,IAAMuL,GAAWhK,GAASmL,WAAYnL,EAAQpC,QAAQ,WAAS,yBAIlG4C,GAEJ,kBAAC,GAAA4K,aAAY,KACVrB,GAAc5K,KAAI,EAAGF,QAAOK,QAAOgC,iBAClC,kBAAC,GAAA+J,aAAY,CAACzK,IAAK3B,EAAOK,MAAOA,EAAOgC,YAAaA,GAClDrC,OAMZ,EC9CH,GAAe,UAxCO,KACpB,MAAMzB,GAAO,UACPoL,GAA6B,KAAAF,SAAQ,kCAG3C,OACE,oCACGE,EACC,oCACE,kBAAC,MAAa,CACZ0C,OAAQ,iBACRrM,MAAOzB,EAAKY,cAAc,CAAEC,GAAI,uBAAwBC,eAAgB,iBACxEiN,SAAS,0MACTvN,KAAM,yBAAK+H,IAVI,mEAUmB0B,IAAI,6BACtC+D,UAAW,CACTpH,MAAO,aACPqH,YAAY,EACZnO,GAAI,gKAENoO,WACE,kBAAC,GAAoB,CACnBC,YAAa,CACXC,SAAUC,SAASC,KACnBC,SAAU,aAKlB,kBAAC,GAAa,OAGhB,kBAACC,GAAA,EAAU,CAAC7I,UAAU,gBACpB,kBAAC8I,GAAA,EAAe,CAAChN,MAAOzB,EAAKY,cAAc,CAAEC,GAAI,uBAAwBC,eAAgB,mBACzF,kBAAC,GAAa,OAIrB,ICjCH,GAb4B,CAACsC,EAAKtB,EAAO4M,EAAkBrN,KACzD,OAAQ+B,GACN,IAAK,eACH,OAAOtB,EACJH,KAAI,EAAGgN,yBAA0BD,EAAiB7G,MAAK,EAAGhH,QAASA,IAAO8N,KAAsBzH,eAChG0H,KAAK,KACV,IAAK,iBACH,OAAOvN,EAAYwG,MAAK,EAAGhH,QAASA,IAAOiB,KAAQ6E,aACrD,QACE,OAAO7E,E,kBCoCb,MAAM,GAAe,CACnBP,YAAQ6E,EACRyI,kBAAczI,EACd0I,wBAAoB1I,EACpB2I,yBAAqB3I,GAGjB,GAAU,CAAClD,GAAS4E,OAAMhG,QAAO+M,eAAcG,gBAAeC,mBAClE,OAAQnH,GACN,IAAK,iBACH,MAAO,IAAK5E,EAAO3B,OAAQO,GAC7B,IAAK,kBACH,MAAO,IAAKoB,EAAO2L,gBACrB,IAAK,cACH,MAAO,IAAK3L,EAAO4L,mBAAoBG,EAAcF,oBAAqBC,GAC5E,IAAK,cACH,MAAO,IAAK9L,EAAO2L,kBAAczI,EAAW0I,wBAAoB1I,EAAW2I,yBAAqB3I,G,EAkStG,GA9RoB,KAClB,OAAO,OAAE7E,EAAM,aAAEsN,EAAY,mBAAEC,EAAkB,oBAAEC,GAAuBG,IAAiB,IAAAhK,YAAW,GAAS,IAEzGiK,GAAiB,EAAA7K,EAAA,KACjBhB,GAAsB,EAAAkB,EAAA,KACtBjB,GAAa,SAAY,EAAGkB,UAAWA,EAAKlB,aAC5C0H,GAAqB,KAAAC,SAAQ,mCAAoC,KAAAA,SAAQ,8BAEzEvB,GAAc,EAAAhK,EAAA,KACdK,GAAO,UAEPoP,GAAa,EAAAC,EAAA,KAEbtK,GAAU,SAAY,EAAGA,aAAcA,GAAS,OAEhD,YACJsC,EAAW,iBACXvC,EAAgB,SAChBxD,EAAQ,SACRgO,EAAQ,WACR7I,EAAU,cACV8I,EAAa,YACblO,EAAW,kBACXmO,EAAiB,eACjB7K,GAAc,kBACdD,GAAiB,eACjBgF,GAAc,SACd1H,IACE+C,EAEEV,GAAS8K,GAAkBzK,IAAqBC,GAEhD1E,IAAW,WAEjB,IAAAqF,YAAU,KACJ/D,IAAW8F,EAAY9E,MACzB2M,EAAc,CAAEpH,KAAM,iBAAkBhG,MAAOuF,EAAY9E,M,GAE5D,CAAC8E,EAAY9E,OAEhB,MAAMkN,GAAY,CAAC3D,EAAI4D,IAASzP,IAAS,QAAYyP,EAAMJ,IAIrDK,GAAoBC,KAAKC,KAAK/K,EAAmBwK,IAEvD,IAAAhK,YAAU,KACJjB,IAAUS,EAAmB,GAAK2B,EAAamJ,KAAKE,IAAIH,GAAmB,IAC7EF,GAAU,EAAIE,G,IAIlB,MAAMI,GAAmB,CACvBC,UAAWlL,EACX4K,KAAMjJ,EACNwJ,QAASX,EACTG,aACAS,gBAfsB,CAACpE,EAAImE,IAAYhQ,IAAS,QAAY,EAAGgQ,IAgB/DtK,UAAW,kBAGPwK,GAAyB,IAC1BJ,GACHK,cAAe,KACfhQ,QAAS,SACTiQ,WAAW,EACX1K,UAAW,qBAGP2K,KAAyBjM,IAAWM,IAAmBD,IAAuB8K,GAE9Ee,GAAsBlP,EAAYE,QAAO,QAAkBmI,IAAgB,IAE3E8G,GAAgBxQ,EAAKY,cAAc,CACvCC,GAAI,oBACJC,eAAgB,oBAEZ2P,GAAoBlN,EACtBvD,EAAKY,cAAc,CACjBC,GAAI,4BACJC,eAAgB,gFAElBd,EAAKY,cAAc,CACjBC,GAAI,kCACJC,eAAgB,qGAGtB,IAAI4P,IAEA,EAAAC,EAAA,GAAcvB,KAChBsB,GAAgB,CACdE,cAAe,CAAErC,SAAU,SAC3B5K,QAASL,EACL,CAAC,CAAEsD,MAAO4J,GAAexN,MAAO,CAAElD,GAAI,KAAO+J,WAAW1F,KAAMF,UAAW4M,EAAA,KACzE,CACE,CACEjK,MAAO4J,GACPxN,MAAO,CACLiB,UAAW,SACXqF,YAAY,EACZJ,QAASuH,GACTK,aAAc,CACZ1H,QAASqH,IAEX9K,UAAW,oCAOzB,MAAMoL,GACJzJ,OAAO0J,QAAQ3J,GACZ1F,KAAI,EAAEsP,EAAMnP,KAAWA,KAAWoP,MAAMC,QAAQrP,IAAWoP,MAAMC,QAAQrP,IAAUA,EAAM0F,OAAS,KAClGjG,OAAO4G,SAASX,OAAS,EAExB4J,GAAiB/M,IAA+B,IAArBS,IAA2BiM,GACtDM,GAAgB3H,KAAmB,QAAiB0H,GAEpD5H,GAAmBqF,GAAiBK,EAAc,CAAEpH,KAAM,kBAAmB+G,iBAE7EyC,GACJ,CAAC,MAAc,MAAgB,MAAW,OAAUjP,SAASqH,KAAmBuB,EAC9E,kBAAC8B,EAAA,EAAc,CAACC,QAAQ,gBAAgBC,OAAO,sBAAsBvD,eAAgBA,KAClF6F,GAAkB6B,GA0HnB,KAzHF,kBAAC,aAAc,KACb,kBAACG,EAAA,EAAc,CACbC,WAAYlB,GAAuB,kBAAC,KAAgB,MAAMxL,EAAmB,EAAIiL,QAAmB3J,EACpGsK,cACEA,IAAiB,CACfE,cAAe,CAAErC,SAAU,SAC3B5K,QAASL,EACL,CACE,kBAACuN,EAAA,EAAO,CAAC/Q,GAAI,KAAO+J,WAAW1F,KAAMf,IAAI,mBACvC,kBAAC,EAAApC,OAAM,kBACU,OAAM,iBACLwP,GAAa,eAChB,mCACbpQ,QAAQ,UACRS,GAAG,mBAEF2P,MAIP,CACE,kBAAC,EAAArH,QAAO,CAACC,QAASqH,GAAmBrN,IAAI,mBACvC,0BAAMqO,SAAS,KACb,kBAAC,EAAAzQ,OAAM,CAACZ,QAAQ,UAAUkJ,YAAU,EAACzI,GAAG,mBACrC2P,QAOjBkB,aAAc,CACZC,MAAO,CACL,CACE7J,KAAM,OACNlB,MAAO5G,EAAKY,cAAc,CACxBC,GAAI,eACJC,eAAgB,SAElB8Q,aAAc,CACZ,aAAc5R,EAAKY,cAAc,CAC/BC,GAAI,uBACJC,eAAgB,mBAElB+Q,SAAU,CAAC9L,EAAQjE,KACjBoN,EAAc,CAAEpH,KAAM,iBAAkBhG,UACxCwE,GAAmB,IAAMa,EAAU,OAAQrF,EAAO7B,KAAU,EAE9D6B,MAAOP,GAAU,KAGrB,CACEqF,MAAO5G,EAAKY,cAAc,CACxBC,GAAI,eACJC,eAAgB,SAElBgH,KAAM,WACN8J,aAAc,CACZC,SAAU,CAAC9L,EAAQjE,IAAUqF,EAAU,iBAAkBrF,EAAO7B,IAChE0R,MAAOjL,EAA2B6J,IAClCzO,MAAOuF,EAAYI,gBAAkB,KAGzC,CACEb,MAAO5G,EAAKY,cAAc,CACxBC,GAAI,sBACJC,eAAgB,gBAElBgH,KAAM,WACN8J,aAAc,CACZC,SAAU,CAAC9L,EAAQjE,IAAUqF,EAAU,eAAgBrF,EAAO7B,IAC9D0R,MAAO1K,EACL3F,GAAUC,QAAO,QAAqBgP,GAAqB7G,MAAoB,IAEjF5H,MAAOuF,EAAYU,eAGvB,CACEnB,MAAO5G,EAAKY,cAAc,CACxBC,GAAI,6BACJC,eAAgB,WAElBgH,KAAM,WACN8J,aAAc,CACZC,SAAU,CAACC,EAAOhQ,EAAOiQ,IACvB5K,EAAU,sBAAuB2K,EAAMjH,OAAOmH,QAAU,CAACD,GAAiB,GAAI9R,IAChF0R,MAAO,CACL,CAAE/K,MAAO5G,EAAKY,cAAc,CAAEC,GAAI,oBAAqBC,eAAgB,cAAgBgB,MAAO,MAC9F,CACE8E,MAAO5G,EAAKY,cAAc,CAAEC,GAAI,sBAAuBC,eAAgB,gBACvEgB,MAAO,OAGXA,MAAOuF,EAAYY,wBAK3BgK,oBAAqB,CACnBC,QAAS9K,EAAaC,EAAahG,EAAaC,EAAUtB,GAC1DmS,SAAU,CAACpM,EAAQ4B,EAAOyK,KACxBnS,IAAS,QZ9MI,EAAC0H,EAAON,EAAa+K,KAC9C,GAAIA,EACF,OAAO9K,OAAOC,KAAKF,GAAanF,QAC9B,CAACC,EAAKkQ,KAAS,IACVlQ,EACH,CAACkQ,QAAOjM,KAEV,CAAC,GAIL,MAAMkM,EAAO3K,EAAM,GAEnB,MAAO,IACFN,EACH,CAACiL,EAAKlP,KAAMkP,EAAK3K,MAAQN,EAAYiL,EAAKlP,KAAK7B,QAAQO,GAAUA,IAAUwQ,EAAK3K,MAAM,GAAG7F,aAASsE,EACnG,EY8LkCmM,CAAY5K,EAAON,EAAa+K,IAAY,GAGvEI,aAAc,IACR7B,EAAA,GAAiB,CAAEpC,SAAU,SACjCjF,YAAajF,GACbwH,SAAU,CAACC,EAAIhE,KACb,MAAM2K,EACK,QAAT3K,ECxSI,EAAC9F,EAAUhC,EAAM0O,EAAkBrN,KACrD,MAAMD,GAAU,OAAepB,GAAMuB,QAAO,EAAGG,aAAcA,IAW7D,MATa,CACXN,EAAQO,KAAI,EAAGF,WAAYA,OACxBO,EAASL,KAAK+Q,GACftR,EACGO,KAAI,EAAGG,WAAY,GAAoBA,EAAO4Q,EAAO5Q,GAAQ4M,EAAkBrN,KAC/EM,KAAKG,GAAWA,GAAOO,SAAS,KAAO,IAAIP,KAAWA,OAIjDH,KAAKgR,GAAMA,EAAE/D,KAAK,OAAMA,KAAK,KAAK,ED6R5B,CAAY5M,GAAUhC,EAAMsB,EAAUD,GEnSrC,EAACW,EAAUhC,EAAM0O,EAAkBrN,KACtD,MAAMD,GAAU,OAAepB,GAAMuB,QAAO,EAAGG,aAAcA,IAEvDyD,EAAOnD,EAASL,KAAK+Q,GATR,EAACtR,EAASsR,EAAQhE,EAAkBrN,IACvDD,EAAQc,QACN,CAACC,EAAKkQ,KAAS,IAAMlQ,EAAK,CAACkQ,EAAK5Q,OAAQ,GAAoB4Q,EAAKvQ,MAAO4Q,EAAOL,EAAKvQ,OAAQ4M,EAAkBrN,MAC9G,CAAC,GAMmCuR,CAAaxR,EAASsR,EAAQhE,EAAkBrN,KAEtF,OAAOwR,KAAKC,UAAU3N,EAAM,KAAM,EAAE,EF+RlB,CAAanD,GAAUhC,EAAMsB,EAAUD,IAC7C,QAAaoR,EAAM,YAAW,IAAIM,MAAOC,gBAAiBlL,EAAK,KAIrE,kBAAC,EAAY,MACb,kBAACyJ,EAAA,EAAc,CACbC,WAAYlB,GAAuB,kBAAC,KAAgB,MAAMxL,EAAmB,EAAIqL,QAAyB/J,KAKlH,OACE,kBAAC,aAAc,KACb,kBAAC,EAAA6M,SAAQ,CAAC9F,SAAU,MAClB,kBAAC,GAAA+F,OAAM,CACLC,QAAS,CACP9R,YAAa+G,EAAY/G,EAAaqD,IACtCgK,iBAAkBtG,EAAY9G,EAAUqD,IACxCnC,QAAQ,EACR4K,QAAS,KACP8B,EAAc,CAAEpH,KAAM,gBACtB6B,EAAY,KAAO5E,QAAQZ,KAAK,EAElCiP,aAAeV,GZlTC,CAACzS,GAAaA,GAAS,QAAauG,IYkT1B4M,CAAanT,IACvCoT,mBAAmB,EACnBxE,eACAyE,eAAiBpQ,GZ9NF,EAACA,EAAOjD,EAAU4D,EAAM7D,EAAMkP,KACvD,MAAMrO,EAAK,+BAA+BkS,KAAKQ,QAE/C,GAAIC,SAASC,SAASC,MAAM,KAAKnS,OAAO4G,SAASwL,QAAU,KAAO9J,WAAW1F,KAAKuP,MAAM,KAAKC,MAC3F,GAAIzQ,EAAM0Q,UAAW,CACnB,MAAM,WAAEC,EAAU,gBAAEC,EAAe,aAAEC,EAAY,UAAEC,EAAS,wBAAEC,GAA4B/Q,EAAMgR,YAChGjU,GACE,QAAW,CACTwB,MAAOzB,EAAKY,cAAc,CACxBC,GAAI,oBACJC,eAAgB,6BAElBgD,YAAa9D,EAAKY,cAChB,CACEC,GAAI,0BACJC,eACE,6HAEJ,CAAEyB,KAAM,2BAAIW,EAAMiR,OAAOzB,OAAOnQ,QAElCnC,QAAS,SACTS,KACAuT,YACE,kBAAC,EAAAC,gBAAe,CACdpT,QAAS,KACPiO,EAAc,CACZpH,KAAM,cACNkH,cAAe9L,EAAMiR,OACrBlF,aAAc,CAAE4E,aAAYC,kBAAiBC,eAAcC,YAAWC,6BAExEhU,GAAS,QAAcY,IACvBgD,EAAK,KAAOgG,WAAW1F,KAAK,GAG7BnE,EAAKY,cAAc,CAClBC,GAAI,mBACJC,eAAgB,a,MAO1B,QAAQ,EAAAwT,EAAA,GAAoBpR,EAAMqR,gBAChC,IAAK,cACHtU,GACE,QAAW,CACTwB,MAAOzB,EAAKY,cAAc,CACxBC,GAAI,oBACJC,eAAgB,sCAElBgD,YAAa9D,EAAKY,cAChB,CACEC,GAAI,qBACJC,eAAgB,2BAElB,CACE0T,MACEtR,EAAMqR,cAAcxM,eAAe,IAAI0M,2BACvCvR,EAAMqR,cAAcG,WAAW,IAAID,2BACnCzU,EAAKY,cAAc,CACjBC,GAAI,sBACJC,eAAgB,kBAEpByB,KAAMW,EAAMqR,cAAchS,KAC1BwE,EAAG,MAGP3G,QAAS,SACTS,KACAuT,YACE,kBAAC,EAAAC,gBAAe,CACdpT,QAAS,KACPhB,GAAS,QAAcY,IACvBgD,GAAK,QAAe,KAAOO,cAAcD,KAAMjB,EAAMqR,cAAc1T,IAAI,GAGxEb,EAAKY,cAAc,CAClBC,GAAI,yBACJC,eAAgB,yBAM1B,MACF,IAAK,UACHb,GACE,QAAW,CACTwB,MAAOzB,EAAKY,cAAc,CACxBC,GAAI,sBACJC,eAAgB,0CAElBgD,YAAa9D,EAAKY,cAChB,CACEC,GAAI,4BACJC,eACE,6IAEJ,CAAEyB,KAAM,2BAAIW,EAAMqR,cAAchS,QAElCnC,QAAS,UAGb,MACF,QACEH,GACE,QAAW,CACTwB,MAAOzB,EAAKY,cACV,CACEC,GAAI,sBACJC,eAAgB,gCAElB,CAAEgH,KAAM5E,EAAM7B,YAAYwG,MAAK,EAAGhH,QAASA,IAAOqC,EAAMqR,cAAc9M,kBAAiBd,eAEzF7C,YAAa9D,EAAKY,cAChB,CACEC,GAAI,4BACJC,eAAgB,wCAElB,CAAEyB,KAAM,2BAAIW,EAAMqR,cAAchS,QAElCnC,QAAS,UACTS,KACAuT,YACE,kBAAC,EAAAC,gBAAe,CACdpT,QAAS,KACPhB,GAAS,QAAcY,IACvBgD,GAAK,QAAe,KAAOO,cAAcD,KAAMjB,EAAMqR,cAAc1T,IAAI,GAGxEb,EAAKY,cAAc,CAClBC,GAAI,qBACJC,eAAgB,4B,EYyFG6T,CAAYzR,EAAOjD,GAAU0J,EAAa3J,EAAMkP,GAC3EF,cAAeD,EACf6F,mBAAoB9F,EACpBpF,sBAIN,kBAAC,GAAa,MACd,kBAACmL,EAAA,EAAO,CAAC/M,KAAK,WACXuJ,IAAiB,kBAACyD,GAAA,EAAU,MAC5BvF,GAAiB,kBAACwF,EAAA,EAAU,OAC3BxF,GAAiB6B,IAAkB1H,KAAmB,OACtD,kBAAC,GAAe,CAACF,gBAAiBA,MAElC+F,GAAiB6B,IAAkB1H,KAAmB,OACtD,kBAAC,GAAgB,CAACF,gBAAiBA,KAEpC8H,IAGN,C","sources":["webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/components/SourcesTable/EmptyStateTable.js","webpack:///./src/components/SourcesTable/SourcesTable.js","webpack:///./src/pages/Sources/helpers.js","webpack:///./src/components/TilesShared/ImageWithPlaceholder.js","webpack:///./src/components/TilesShared/DisabledTile.js","webpack:///./src/components/TilesShared/TilesArray.js","webpack:///./src/components/CloudTiles/CloudTiles.js","webpack:///./src/components/CloudTiles/CloudEmptyState.js","webpack:///./src/components/RedHatTiles/RedHatTiles.js","webpack:///./src/components/RedHatTiles/RedHatEmptyState.js","webpack:///./src/components/TabNavigation.js","webpack:///./src/components/IntegrationsDropdown.js","webpack:///./src/components/SourcesHeader.js","webpack:///./src/utilities/formatValueToExport.js","webpack:///./src/pages/Sources.js","webpack:///./src/utilities/generateCSV.js","webpack:///./src/utilities/generateJSON.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { linkBasename, mergeToBasename } from '../utilities/utils';\n\nexport const useAppNavigate = () => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n","import React from 'react';\n\nimport { Bullseye, Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.small}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundTitle',\n            defaultMessage: 'No sources found',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundDescription',\n            defaultMessage: 'No sources match the filter criteria. Remove all filters or clear all filters to show sources.',\n          })}\n        </EmptyStateBody>\n        <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n          {intl.formatMessage({\n            id: 'sources.clearAllFilters',\n            defaultMessage: 'Clear all filters',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default EmptyStateTable;\n","import React, { useEffect, useReducer } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { sortable, wrappable } from '@patternfly/react-table';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table/deprecated';\nimport { useIntl } from 'react-intl';\n\nimport { pauseSource, resumeSource, sortEntities } from '../../redux/sources/actions';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { COLUMN_COUNT, sourcesColumns } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { replaceRouteId, routes } from '../../Routing';\nimport disabledTooltipProps from '../../utilities/disabledTooltipProps';\nimport { useAppNavigate } from '../../hooks/useAppNavigate';\nimport './sourcesTable.scss';\n\nexport const itemToCells = (item, columns, sourceTypes, appTypes) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((col) => ({\n      title: col.formatter\n        ? col.formatter(item[col.value], item, {\n            sourceTypes,\n            appTypes,\n          })\n        : item[col.value] || '',\n    }));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes, removingSources) =>\n  entities\n    .filter(({ hidden }) => !hidden)\n    .reduce((acc, item) => {\n      const isDeleting = removingSources.includes(item.id);\n\n      return [\n        ...acc,\n        {\n          ...item,\n          originalName: item.name,\n          isOpen: !!item.expanded,\n          cells: itemToCells(item, columns, sourceTypes, appTypes),\n          disableActions: isDeleting,\n          isDeleting,\n        },\n      ];\n    }, []);\n\nexport const prepareColumnsCells = (columns) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((column) => ({\n      title: column.title || '',\n      value: column.value,\n      hidden: column.hidden,\n      transforms: [wrappable],\n      ...(column.sortable && { transforms: [sortable, wrappable] }),\n      props: column.title ? { 'aria-label': column.title } : { 'aria-label': 'Column without title' },\n    }));\n\nconst reducer = (state, payload) => ({ ...state, ...payload, key: state.key + 1 });\n\nconst initialState = (columns) => ({\n  rows: [],\n  sortBy: {},\n  isLoaded: false,\n  cells: prepareColumnsCells(columns),\n  key: 0,\n});\n\nexport const actionResolver = (intl, navigate, hasWritePermissions, dispatch, isOrgAdmin) => (rowData) => {\n  const disabledProps = disabledTooltipProps(intl, isOrgAdmin);\n  const actions = [];\n\n  if (rowData.paused_at) {\n    actions.push({\n      title: intl.formatMessage({\n        id: 'sources.resume',\n        defaultMessage: 'Resume',\n      }),\n      description: intl.formatMessage({\n        id: 'sources.resume.description',\n        defaultMessage: 'Unpause data collection for this integration',\n      }),\n      onClick: (_ev, _i, { id }) => dispatch(resumeSource(id, rowData.originalName, intl)),\n      ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n    });\n  } else {\n    actions.push({\n      title: intl.formatMessage({\n        id: 'sources.pause',\n        defaultMessage: 'Pause',\n      }),\n      description: intl.formatMessage({\n        id: 'sources.pause.description',\n        defaultMessage: 'Temporarily disable data collection',\n      }),\n      onClick: (_ev, _i, { id }) => dispatch(pauseSource(id, rowData.originalName, intl)),\n      ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n    });\n  }\n\n  actions.push({\n    title: intl.formatMessage({\n      id: 'sources.remove',\n      defaultMessage: 'Remove',\n    }),\n    description: intl.formatMessage({\n      id: 'sources.remove.description',\n      defaultMessage: 'Permanently delete this integration and all collected data',\n    }),\n    onClick: (_ev, _i, { id }) => navigate(replaceRouteId(routes.sourcesRemove.path, id)),\n    ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n  });\n\n  actions.push({\n    title: !rowData.paused_at\n      ? intl.formatMessage({\n          id: 'sources.edit',\n          defaultMessage: 'Edit',\n        })\n      : intl.formatMessage({\n          id: 'sources.viewDetails',\n          defaultMessage: 'View details',\n        }),\n    onClick: (_ev, _i, { id }) => navigate(replaceRouteId(routes.sourcesDetail.path, id)),\n    ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n  });\n\n  return actions;\n};\n\nconst SourcesTable = () => {\n  const navigate = useAppNavigate();\n  const intl = useIntl();\n\n  const loaded = useIsLoaded();\n  const writePermissions = useHasWritePermissions();\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n  const {\n    appTypes,\n    entities,\n    sourceTypes,\n    sourceTypesLoaded,\n    appTypesLoaded,\n    sortBy,\n    sortDirection,\n    numberOfEntities,\n    removingSources,\n  } = useSelector(({ sources }) => sources, shallowEqual);\n  const reduxDispatch = useDispatch();\n\n  const notSortable = numberOfEntities === 0 || !loaded;\n\n  const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n  const refreshColumns = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  const refreshSources = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      rows: renderSources(entities, columns, sourceTypes, appTypes, removingSources),\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  useEffect(() => {\n    if (loaded && sourceTypesLoaded && appTypesLoaded) {\n      dispatch({ isLoaded: true });\n      refreshSources();\n    } else {\n      dispatch({ isLoaded: false });\n      refreshColumns();\n    }\n  }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n  useEffect(() => {\n    if (state.isLoaded) {\n      refreshSources();\n    }\n  }, [entities, removingSources]);\n\n  let shownRows = state.rows;\n  if (numberOfEntities === 0 && state.isLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: COLUMN_COUNT },\n            title: <EmptyStateTable />,\n          },\n        ],\n      },\n    ];\n  } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: {\n              colSpan: COLUMN_COUNT,\n              className: 'sources-placeholder-row',\n            },\n            title: <PlaceHolderTable />,\n          },\n        ],\n      },\n    ];\n  }\n\n  return (\n    <Table\n      gridBreakPoint=\"grid-lg\"\n      aria-label={intl.formatMessage({\n        id: 'sources.list',\n        defaultMessage: 'List of Integrations',\n      })}\n      onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n      sortBy={{\n        index: state.cells.map((cell) => (cell.hidden ? 'hidden' : cell.value)).indexOf(sortBy),\n        direction: sortDirection,\n      }}\n      key={state.key}\n      rows={shownRows}\n      cells={state.cells}\n      actionResolver={\n        loaded && numberOfEntities > 0 ? actionResolver(intl, navigate, writePermissions, reduxDispatch, isOrgAdmin) : undefined\n      }\n      rowWrapper={RowWrapperLoader}\n      className={numberOfEntities === 0 && state.isLoaded ? 'ins-c-table-empty-state' : ''}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default SourcesTable;\n","import React from 'react';\nimport awesomeDebounce from 'awesome-debounce-promise';\n\nimport { AlertActionLink } from '@patternfly/react-core';\n\nimport { addMessage, filterSources, loadEntities, removeMessage } from '../../redux/sources/actions';\nimport { replaceRouteId, routes } from '../../Routing';\nimport { AVAILABLE } from '../../views/formatters';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport { bold } from '../../utilities/intlShared';\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = {\n  pageNumber: 1,\n  sortBy: 'created_at',\n  sortDirection: 'desc',\n};\n\nexport const afterSuccess = (dispatch) => dispatch(loadEntities(afterSuccessLoadParameters));\n\nexport const prepareSourceTypeSelection = (sourceTypes) =>\n  sourceTypes.map(({ id, product_name }) => ({ label: product_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const prepareApplicationTypeSelection = (appTypes) =>\n  appTypes.map(({ id, display_name }) => ({ label: display_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) =>\n  dispatch(\n    filterSources({\n      [column]: value,\n    }),\n  );\n\nexport const chipsFormatters = (key, filterValue, sourceTypes, appTypes, intl) =>\n  ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n      category: 'Integration Type',\n      key,\n      chips: filterValue[key].map((id) => {\n        const sourceType = sourceTypes.find((type) => type.id === id);\n\n        return { name: sourceType ? sourceType.product_name : id, value: id };\n      }),\n    }),\n    applications: () => ({\n      category: 'Application',\n      key,\n      chips: filterValue[key].map((id) => {\n        const appType = appTypes.find((type) => type.id === id);\n\n        return { name: appType ? appType.display_name : id, value: id };\n      }),\n    }),\n    availability_status: () => ({\n      category: 'Status',\n      key,\n      chips: [\n        {\n          value: filterValue[key][0],\n          name:\n            filterValue[key][0] === AVAILABLE\n              ? intl.formatMessage({\n                  id: 'sources.available',\n                  defaultMessage: 'Available',\n                })\n              : intl.formatMessage({\n                  id: 'sources.unavailable',\n                  defaultMessage: 'Unavailable',\n                }),\n        },\n      ],\n    }),\n  })[key] || (() => ({ name: key }));\n\nexport const prepareChips = (filterValue, sourceTypes, appTypes, intl) =>\n  Object.keys(filterValue)\n    .map((key) =>\n      filterValue[key] && filterValue[key].length > 0\n        ? chipsFormatters(key, filterValue, sourceTypes, appTypes, intl)()\n        : undefined,\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n  if (deleteAll) {\n    return Object.keys(filterValue).reduce(\n      (acc, curr) => ({\n        ...acc,\n        [curr]: undefined,\n      }),\n      {},\n    );\n  }\n\n  const chip = chips[0];\n\n  return {\n    ...filterValue,\n    [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined,\n  };\n};\n\nexport const loadedTypes = (types, loaded) => (loaded && types.length > 0 ? types : undefined);\n\nexport const checkSubmit = (state, dispatch, push, intl, stateDispatch) => {\n  const id = `sources-wizard-notification-${Date.now()}`;\n\n  if (location.pathname.split('/').filter(Boolean).pop() !== routes.sourcesNew.path.split('/').pop()) {\n    if (state.isErrored) {\n      const { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory } = state.wizardState;\n      dispatch(\n        addMessage({\n          title: intl.formatMessage({\n            id: 'alert.error.title',\n            defaultMessage: 'Error adding integration',\n          }),\n          description: intl.formatMessage(\n            {\n              id: 'alert.error.description',\n              defaultMessage:\n                'There was a problem while trying to add integration {name}. Please try again. If the error persists, open a support case.',\n            },\n            { name: <b>{state.values.source.name}</b> },\n          ),\n          variant: 'danger',\n          id,\n          actionLinks: (\n            <AlertActionLink\n              onClick={() => {\n                stateDispatch({\n                  type: 'retryWizard',\n                  initialValues: state.values,\n                  initialState: { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory },\n                });\n                dispatch(removeMessage(id));\n                push(routes.sourcesNew.path);\n              }}\n            >\n              {intl.formatMessage({\n                id: 'alert.error.link',\n                defaultMessage: 'Retry',\n              })}\n            </AlertActionLink>\n          ),\n        }),\n      );\n    } else {\n      switch (computeSourceStatus(state.createdSource)) {\n        case 'unavailable':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.error.title',\n                defaultMessage: 'Source configuration unsuccessful',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'error.notification',\n                  defaultMessage: '{error} [<b>{name}</b>]',\n                },\n                {\n                  error:\n                    state.createdSource.applications?.[0]?.availability_status_error ||\n                    state.createdSource.endpoint?.[0]?.availability_status_error ||\n                    intl.formatMessage({\n                      id: 'wizard.unknownError',\n                      defaultMessage: 'Unknown error',\n                    }),\n                  name: state.createdSource.name,\n                  b: bold,\n                },\n              ),\n              variant: 'danger',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.unavailable.link',\n                    defaultMessage: 'Edit integration',\n                  })}\n                </AlertActionLink>\n              ),\n            }),\n          );\n          break;\n        case 'timeout':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.timeout.title',\n                defaultMessage: 'Integration configuration in progress',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.timeout.description',\n                  defaultMessage:\n                    'We are still working to confirm credentials for integration {name}. To track progress, check the Status column in the Integrations table.',\n                },\n                { name: <b>{state.createdSource.name}</b> },\n              ),\n              variant: 'info',\n            }),\n          );\n          break;\n        default:\n          dispatch(\n            addMessage({\n              title: intl.formatMessage(\n                {\n                  id: 'alert.success.title',\n                  defaultMessage: '{type} connection successful',\n                },\n                { type: state.sourceTypes.find(({ id }) => id === state.createdSource.source_type_id)?.product_name },\n              ),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.success.description',\n                  defaultMessage: 'Source {name} was successfully added',\n                },\n                { name: <b>{state.createdSource.name}</b> },\n              ),\n              variant: 'success',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.success.link',\n                    defaultMessage: 'View source details',\n                  })}\n                </AlertActionLink>\n              ),\n            }),\n          );\n          break;\n      }\n    }\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Loader } from '../SourcesTable/loaders';\n\nconst ImageWithPlaceholder = ({ src, ...rest }) => {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <React.Fragment>\n      {!loaded && <Loader height=\"40px\" width=\"110px\" {...rest} />}\n      <img\n        src={src}\n        data-testid=\"ImageWithPlaceholder\"\n        onLoad={() => setLoaded(true)}\n        style={{ display: loaded ? 'initial' : 'none' }}\n        {...rest}\n      />\n    </React.Fragment>\n  );\n};\n\nImageWithPlaceholder.propTypes = {\n  src: PropTypes.string.isRequired,\n};\n\nexport default ImageWithPlaceholder;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nimport { Tile, Tooltip } from '@patternfly/react-core';\nimport { disabledMessage } from '../../utilities/disabledTooltipProps';\n\nconst DisabledTile = (props) => {\n  const intl = useIntl();\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n  const tooltip = disabledMessage(intl, isOrgAdmin);\n\n  return (\n    <Tooltip content={tooltip}>\n      <div className=\"disabled-tile-with-tooltip\">\n        <Tile {...props} isDisabled />\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default DisabledTile;\n","import PropTypes from 'prop-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes } from '../../Routing';\n\nimport { Tile } from '@patternfly/react-core';\n\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { useAppNavigate } from '../../hooks/useAppNavigate';\nimport DisabledTile from '../TilesShared/DisabledTile';\nimport { filterVendorTypes } from '../../utilities/filterTypes';\n\nconst TilesArray = ({ setSelectedType, mapper }) => {\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n  const activeCategory = useSelector(({ sources }) => sources.activeCategory);\n\n  const appNavigate = useAppNavigate();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const openWizard = (type) => {\n    setSelectedType(type);\n    appNavigate(routes.sourcesNew.path);\n  };\n\n  const TileComponent = hasWritePermissions ? Tile : DisabledTile;\n\n  return sourceTypes\n    .filter(filterVendorTypes(activeCategory))\n    .sort((a, b) => a.product_name.localeCompare(b.product_name))\n    .map(({ name }) => mapper(name, openWizard, TileComponent));\n};\n\nTilesArray.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n  mapper: PropTypes.func.isRequired,\n};\n\nexport default TilesArray;\n","import React from 'react';\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    amazon: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Amazon Web Services\"\n        onClick={() => openWizard('amazon')}\n        className=\"tile pf-v5-u-mr-md pf-v5-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-v5-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/aws.svg\"\n            alt=\"aws logo\"\n          />\n        }\n      />\n    ),\n    google: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Google Cloud\"\n        className=\"tile pf-v5-u-mr-md pf-v5-u-mt-md\"\n        onClick={() => openWizard('google')}\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-v5-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/google-cloud-short.svg\"\n            alt=\"google logo\"\n          />\n        }\n      />\n    ),\n    azure: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Microsoft Azure\"\n        onClick={() => openWizard('azure')}\n        className=\"tile pf-v5-u-mr-md pf-v5-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-v5-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/microsoft-azure-short.svg\"\n            alt=\"azure logo\"\n          />\n        }\n      />\n    ),\n    ibm: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"IBM Cloud\"\n        onClick={() => openWizard('ibm')}\n        className=\"tile pf-v5-u-mr-md pf-v5-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-v5-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/ibm-cloud.svg\"\n            alt=\"ibm logo\"\n          />\n        }\n      />\n    ),\n    'oracle-cloud-infrastructure': (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Oracle Cloud Infrastructure\"\n        onClick={() => openWizard('oracle-cloud-infrastructure')}\n        className=\"tile pf-v5-u-mr-md pf-v5-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-v5-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/oracle-short.svg\"\n            alt=\"oracle logo\"\n          />\n        }\n      />\n    ),\n  })[type];\n\nconst CloudTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default CloudTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardFooter, CardTitle, Text } from '@patternfly/react-core';\n\nimport CloudTiles from './CloudTiles';\n\nconst CLOUD_CATALOG_HREF = 'https://catalog.redhat.com/cloud';\n\nconst CloudEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"src-c-card__cloud-empty-state pf-v5-u-mt-md pf-v5-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'cloud.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your public clouds',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'cloud.emptystate.cardDescription',\n            defaultMessage: 'Select an available provider.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-v5-u-mt-md pf-v5-u-mb-lg\">\n          <CloudTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n      <CardFooter className=\"cloud-footer\">\n        <Text className=\"catalog-link pf-v5-u-mt-lg\">\n          {intl.formatMessage(\n            {\n              id: 'cloud.emptystate.catalogLink',\n              defaultMessage: 'Looking for a different provider? <a>See all Red Hat Certified Cloud and Service Providers</a>',\n            },\n            {\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href={CLOUD_CATALOG_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            },\n          )}\n        </Text>\n      </CardFooter>\n    </Card>\n  );\n};\n\nCloudEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default CloudEmptyState;\n","import React from 'react';\n\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst icon = (\n  <ImageWithPlaceholder className=\"redhat-icon\" src=\"/apps/frontend-assets/red-hat-logos/stacked.svg\" alt=\"red hat logo\" />\n);\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    openshift: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"OpenShift Container Platform\"\n        className=\"tile pf-v5-u-mr-md-on-md pf-v5-u-mt-md pf-v5-u-mt-0-on-md\"\n        onClick={() => openWizard('openshift')}\n        icon={icon}\n      />\n    ),\n  })[type];\n\nconst RedHatTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default RedHatTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardTitle, Text } from '@patternfly/react-core';\n\nimport RedHatTiles from './RedHatTiles';\n\nconst RedHatEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"src-c-card__cloud-empty-state pf-v5-u-mt-md pf-v5-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'redhat.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your Red Hat applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'redhat.emptystate.cardDescription',\n            defaultMessage: 'Select an available application.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-v5-u-mt-md pf-v5-u-mb-lg\">\n          <RedHatTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nRedHatEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default RedHatEmptyState;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { PageSection, PageSectionVariants, Tab, TabTitleIcon, TabTitleText, Tabs } from '@patternfly/react-core';\nimport RedhatIcon from '@patternfly/react-icons/dist/esm/icons/redhat-icon';\nimport CloudIcon from '@patternfly/react-icons/dist/esm/icons/cloud-icon';\n\nimport { setActiveCategory } from '../redux/sources/actions';\nimport { CLOUD_VENDOR, COMMUNICATIONS, INTEGRATIONS, OVERVIEW, REDHAT_VENDOR, REPORTING, WEBHOOKS } from '../utilities/constants';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst TabNavigation = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const activeCategory = useSelector(({ sources }) => sources.activeCategory);\n  const enableIntegrations = useFlag('platform.sources.integrations');\n  const enableBreakdown = useFlag('platform.sources.integrations.breakdown');\n  const enableIntegrationsOverview = useFlag('platform.integrations.overview');\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n  const hasIntegrationsPermissions = useSelector(({ user }) => user?.integrationsEndpointsPermissions);\n\n  return (\n    <PageSection type=\"tabs\" variant={PageSectionVariants.light} isWidthLimited>\n      <Tabs\n        activeKey={activeCategory}\n        onSelect={(_e, key) => dispatch(setActiveCategory(key))}\n        className=\"pf-v5-u-mt-md\"\n        inset={{\n          default: 'insetNone',\n          md: 'insetSm',\n          xl: 'insetLg',\n          '2xl': 'inset2xl',\n        }}\n      >\n        {enableIntegrationsOverview && (\n          <Tab\n            eventKey={OVERVIEW}\n            title={<TabTitleText> {intl.formatMessage({ id: 'sources.overview', defaultMessage: 'Overview' })}</TabTitleText>}\n          ></Tab>\n        )}\n        {(isOrgAdmin || hasIntegrationsPermissions) &&\n          (enableIntegrations || enableBreakdown) &&\n          (enableBreakdown ? (\n            <>\n              <Tab\n                eventKey={COMMUNICATIONS}\n                title={\n                  <TabTitleText>\n                    {intl.formatMessage({ id: 'sources.communications', defaultMessage: 'Communications' })}\n                  </TabTitleText>\n                }\n              />\n              <Tab\n                eventKey={REPORTING}\n                title={\n                  <TabTitleText>\n                    {intl.formatMessage({ id: 'sources.reportingAutomation', defaultMessage: 'Reporting & Automation' })}\n                  </TabTitleText>\n                }\n              />\n              <Tab\n                eventKey={WEBHOOKS}\n                title={<TabTitleText>{intl.formatMessage({ id: 'sources.webhooks', defaultMessage: 'Webhooks' })}</TabTitleText>}\n              />\n            </>\n          ) : (\n            <Tab\n              eventKey={INTEGRATIONS}\n              title={\n                <TabTitleText>{intl.formatMessage({ id: 'sources.integrations', defaultMessage: 'Integrations' })}</TabTitleText>\n              }\n            />\n          ))}\n        <Tab\n          eventKey={CLOUD_VENDOR}\n          title={\n            <React.Fragment>\n              {enableIntegrationsOverview ? (\n                ''\n              ) : (\n                <TabTitleIcon>\n                  <CloudIcon aria-label=\"Cloud Icon\" />\n                </TabTitleIcon>\n              )}\n              <TabTitleText>\n                {intl.formatMessage({\n                  id: 'sources.cloudSources',\n                  defaultMessage: enableIntegrations ? 'Cloud' : 'Cloud sources',\n                })}\n              </TabTitleText>\n            </React.Fragment>\n          }\n        />\n        <Tab\n          eventKey={REDHAT_VENDOR}\n          title={\n            <React.Fragment>\n              {enableIntegrationsOverview ? (\n                ''\n              ) : (\n                <TabTitleIcon>\n                  <RedhatIcon aria-label=\"Red Hat Icon\" />\n                </TabTitleIcon>\n              )}\n              <TabTitleText>\n                {intl.formatMessage({\n                  id: 'sources.redhatSources',\n                  defaultMessage: enableIntegrations ? 'Red Hat' : 'Red Hat sources',\n                })}\n              </TabTitleText>\n            </React.Fragment>\n          }\n        />\n      </Tabs>\n    </PageSection>\n  );\n};\n\nexport default TabNavigation;\n","import React, { useState } from 'react';\nimport { Dropdown, DropdownItem, DropdownList, MenuToggle } from '@patternfly/react-core';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport AddSourceWizard from './addSourceWizard';\nimport { CLOUD_VENDOR, COMMUNICATIONS, REDHAT_VENDOR, REPORTING, WEBHOOKS } from '../utilities/constants';\n\nconst dropdownItems = [\n  {\n    title: 'Communications',\n    description: 'Google Chat, Microsoft Office Teams, Slack',\n    value: COMMUNICATIONS,\n  },\n  {\n    title: 'Reporting & Automation',\n    description: 'Event-Driven Ansible, ServiceNow, Splunk',\n    value: REPORTING,\n  },\n  {\n    title: 'Webhooks',\n    description: '',\n    value: WEBHOOKS,\n  },\n  {\n    title: 'Cloud',\n    description: 'Amazon Web Services, Google Cloud Platform, Microsoft Azure, Oracle Cloud Platform',\n    value: CLOUD_VENDOR,\n  },\n  {\n    title: 'Red Hat',\n    description: 'Red Hat OpenShift Container Platform, Red Hat Satellite, Red Hat Ansible Automation Platform',\n    value: REDHAT_VENDOR,\n  },\n];\n\nconst IntegrationsDropdown = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isIntegrationsWizardOpen, setIsIntegrationsWizardOpen] = useState(false);\n  const [isSourcesWizardOpen, setIsSourcesWizardOpen] = useState(false);\n  const [selectedIntegration, setSelectedIntegration] = useState(null);\n\n  const handleSelect = (_event, value) => {\n    setIsOpen(false);\n    setSelectedIntegration(value);\n    if ([REDHAT_VENDOR, CLOUD_VENDOR].includes(value)) {\n      setIsSourcesWizardOpen(true);\n    } else if ([COMMUNICATIONS, REPORTING, WEBHOOKS].includes(value)) {\n      setIsIntegrationsWizardOpen(true);\n    }\n  };\n\n  return (\n    <div className=\"integrations-dropdown\">\n      {[COMMUNICATIONS, REPORTING, WEBHOOKS].includes(selectedIntegration) && (\n        <AsyncComponent\n          appName=\"notifications\"\n          module=\"./IntegrationsWizard\"\n          isOpen={isIntegrationsWizardOpen}\n          category={selectedIntegration}\n          closeModal={() => {\n            setIsIntegrationsWizardOpen(false);\n            setSelectedIntegration(null);\n          }}\n          fallback={<div id=\"fallback-modal\" />}\n        />\n      )}\n      {[REDHAT_VENDOR, CLOUD_VENDOR].includes(selectedIntegration) && (\n        <AddSourceWizard\n          isOpen={isSourcesWizardOpen}\n          onClose={() => {\n            setIsSourcesWizardOpen(false);\n            setSelectedIntegration(null);\n          }}\n          activeCategory={selectedIntegration}\n        />\n      )}\n      <Dropdown\n        isOpen={isOpen}\n        onSelect={handleSelect}\n        onOpenChange={setIsOpen}\n        toggle={(toggleRef) => (\n          <MenuToggle ref={toggleRef} onClick={() => setIsOpen(!isOpen)} isExpanded={isOpen} variant=\"primary\">\n            Create Integration\n          </MenuToggle>\n        )}\n        {...props}\n      >\n        <DropdownList>\n          {dropdownItems.map(({ title, value, description }) => (\n            <DropdownItem key={title} value={value} description={description}>\n              {title}\n            </DropdownItem>\n          ))}\n        </DropdownList>\n      </Dropdown>\n    </div>\n  );\n};\n\nexport default IntegrationsDropdown;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport TabNavigation from './TabNavigation';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { ContentHeader } from '@patternfly/react-component-groups';\nimport IntegrationsDropdown from './IntegrationsDropdown';\nimport '../styles/sourcesHeader.scss';\n\nconst SourcesHeader = () => {\n  const intl = useIntl();\n  const enableIntegrationsOverview = useFlag('platform.integrations.overview');\n  const integrationsIcon = '/apps/frontend-assets/sources-integrations/integrations-icon.svg';\n\n  return (\n    <>\n      {enableIntegrationsOverview ? (\n        <>\n          <ContentHeader\n            ouiaId={'sources-header'}\n            title={intl.formatMessage({ id: 'sources.integrations', defaultMessage: 'Integrations' })}\n            subtitle=\"Integrating third-party applications expands the scope of notifications beyond emails and messages, so that you can view and manage Hybrid Cloud Console events from your preferred platform dashboard.\"\n            icon={<img src={integrationsIcon} alt=\"integrations-header-icon\" />}\n            linkProps={{\n              label: 'Learn more',\n              isExternal: true,\n              to: 'https://access.redhat.com/documentation/en-us/red_hat_hybrid_cloud_console/1-latest/html/configuring_notifications_on_the_red_hat_hybrid_cloud_console/index',\n            }}\n            actionMenu={\n              <IntegrationsDropdown\n                popperProps={{\n                  appendTo: document.body,\n                  position: 'right',\n                }}\n              />\n            }\n          />\n          <TabNavigation />\n        </>\n      ) : (\n        <PageHeader className=\"pf-v5-u-pb-0\">\n          <PageHeaderTitle title={intl.formatMessage({ id: 'sources.integrations', defaultMessage: 'Integrations' })} />\n          <TabNavigation />\n        </PageHeader>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(SourcesHeader);\n","const formatValueToExport = (key, value, applicationTypes, sourceTypes) => {\n  switch (key) {\n    case 'applications':\n      return value\n        .map(({ application_type_id }) => applicationTypes.find(({ id }) => id === application_type_id)?.display_name)\n        .join(',');\n    case 'source_type_id':\n      return sourceTypes.find(({ id }) => id === value)?.product_name;\n    default:\n      return value;\n  }\n};\n\nexport default formatValueToExport;\n","import React, { Suspense, useEffect, useReducer } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\n\nimport AppLink from '../components/AppLink';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { isSmallScreen, useScreenSize } from '@redhat-cloud-services/frontend-components/useScreenSize';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport SourcesTable from '../components/SourcesTable/SourcesTable';\nimport { filterSources, pageAndSize } from '../redux/sources/actions';\nimport { useAppNavigate } from '../hooks/useAppNavigate';\nimport { routes } from '../Routing';\n\nimport {\n  afterSuccess,\n  checkSubmit,\n  debouncedFiltering,\n  loadedTypes,\n  prepareApplicationTypeSelection,\n  prepareChips,\n  prepareSourceTypeSelection,\n  removeChips,\n  setFilter,\n} from './Sources/helpers';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../hooks/useHasWritePermissions';\nimport { PaginationLoader } from '../components/SourcesTable/loaders';\nimport CloudCards from '../components/CloudTiles/CloudCards';\nimport { CLOUD_VENDOR, COMMUNICATIONS, INTEGRATIONS, REDHAT_VENDOR, REPORTING, WEBHOOKS } from '../utilities/constants';\nimport CloudEmptyState from '../components/CloudTiles/CloudEmptyState';\nimport { AVAILABLE, UNAVAILABLE } from '../views/formatters';\nimport RedHatEmptyState from '../components/RedHatTiles/RedHatEmptyState';\nimport { filterVendorTypes } from '../utilities/filterTypes';\nimport { filterVendorAppTypes } from '../utilities/filterApps';\nimport SourcesHeader from '../components/SourcesHeader';\nimport generateCSV from '../utilities/generateCSV';\nimport generateJSON from '../utilities/generateJSON';\nimport { Outlet } from 'react-router-dom';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst initialState = {\n  filter: undefined,\n  selectedType: undefined,\n  wizardInitialState: undefined,\n  wizardInitialValues: undefined,\n};\n\nconst reducer = (state, { type, value, selectedType, initialValues, initialState }) => {\n  switch (type) {\n    case 'setFilterValue':\n      return { ...state, filter: value };\n    case 'setSelectedType':\n      return { ...state, selectedType };\n    case 'retryWizard':\n      return { ...state, wizardInitialState: initialState, wizardInitialValues: initialValues };\n    case 'closeWizard':\n      return { ...state, selectedType: undefined, wizardInitialState: undefined, wizardInitialValues: undefined };\n  }\n};\n\nconst SourcesPage = () => {\n  const [{ filter, selectedType, wizardInitialState, wizardInitialValues }, stateDispatch] = useReducer(reducer, initialState);\n\n  const entitiesLoaded = useIsLoaded();\n  const hasWritePermissions = useHasWritePermissions();\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n  const enableIntegrations = useFlag('platform.sources.integrations') || useFlag('platform.sources.breakdown');\n\n  const appNavigate = useAppNavigate();\n  const intl = useIntl();\n\n  const screenSize = useScreenSize();\n\n  const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n  const {\n    filterValue,\n    numberOfEntities,\n    appTypes,\n    pageSize,\n    pageNumber,\n    fetchingError,\n    sourceTypes,\n    paginationClicked,\n    appTypesLoaded,\n    sourceTypesLoaded,\n    activeCategory,\n    entities,\n  } = sources;\n\n  const loaded = entitiesLoaded && sourceTypesLoaded && appTypesLoaded;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (filter !== filterValue.name) {\n      stateDispatch({ type: 'setFilterValue', value: filterValue.name });\n    }\n  }, [filterValue.name]);\n\n  const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n  const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n  const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n  useEffect(() => {\n    if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n      onSetPage({}, maximumPageNumber);\n    }\n  });\n\n  const paginationConfig = {\n    itemCount: numberOfEntities,\n    page: pageNumber,\n    perPage: pageSize,\n    onSetPage,\n    onPerPageSelect,\n    className: 'top-pagination',\n  };\n\n  const paginationConfigBottom = {\n    ...paginationConfig,\n    dropDirection: 'up',\n    variant: 'bottom',\n    isCompact: false,\n    className: 'bottom-pagination',\n  };\n\n  const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n  const filteredSourceTypes = sourceTypes.filter(filterVendorTypes(activeCategory, true));\n\n  const addSourceText = intl.formatMessage({\n    id: 'sources.addSource',\n    defaultMessage: 'Add integration',\n  });\n  const noPermissionsText = isOrgAdmin\n    ? intl.formatMessage({\n        id: 'sources.notAdminAddButton',\n        defaultMessage: 'To add a source, you must add Cloud Administrator permissions to your user.',\n      })\n    : intl.formatMessage({\n        id: 'sources.notPermissionsAddButton',\n        defaultMessage: 'To add a source, your Organization Administrator must grant you Cloud Administrator permissions.',\n      });\n\n  let actionsConfig;\n\n  if (isSmallScreen(screenSize)) {\n    actionsConfig = {\n      dropdownProps: { position: 'right' },\n      actions: hasWritePermissions\n        ? [{ label: addSourceText, props: { to: routes.sourcesNew.path, component: AppLink } }]\n        : [\n            {\n              label: addSourceText,\n              props: {\n                component: 'button',\n                isDisabled: true,\n                tooltip: noPermissionsText,\n                tooltipProps: {\n                  content: noPermissionsText,\n                },\n                className: 'src-m-dropdown-item-disabled',\n              },\n            },\n          ],\n    };\n  }\n\n  const hasSomeFilter =\n    Object.entries(filterValue)\n      .map(([_key, value]) => value && (!Array.isArray(value) || (Array.isArray(value) && value.length > 0)))\n      .filter(Boolean).length > 0;\n\n  const showEmptyState = loaded && numberOfEntities === 0 && !hasSomeFilter;\n  const showInfoCards = activeCategory === CLOUD_VENDOR && !showEmptyState;\n\n  const setSelectedType = (selectedType) => stateDispatch({ type: 'setSelectedType', selectedType });\n\n  const mainContent =\n    [INTEGRATIONS, COMMUNICATIONS, REPORTING, WEBHOOKS].includes(activeCategory) && enableIntegrations ? (\n      <AsyncComponent appName=\"notifications\" module=\"./IntegrationsTable\" activeCategory={activeCategory} />\n    ) : !fetchingError && !showEmptyState ? (\n      <React.Fragment>\n        <PrimaryToolbar\n          pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n          actionsConfig={\n            actionsConfig || {\n              dropdownProps: { position: 'right' },\n              actions: hasWritePermissions\n                ? [\n                    <AppLink to={routes.sourcesNew.path} key=\"addSourceButton\">\n                      <Button\n                        data-hcc-index=\"true\"\n                        data-hcc-title={addSourceText}\n                        data-hcc-alt=\"create source;add cloud provider\"\n                        variant=\"primary\"\n                        id=\"addSourceButton\"\n                      >\n                        {addSourceText}\n                      </Button>\n                    </AppLink>,\n                  ]\n                : [\n                    <Tooltip content={noPermissionsText} key=\"addSourceButton\">\n                      <span tabIndex=\"0\">\n                        <Button variant=\"primary\" isDisabled id=\"addSourceButton\">\n                          {addSourceText}\n                        </Button>\n                      </span>\n                    </Tooltip>,\n                  ],\n            }\n          }\n          filterConfig={{\n            items: [\n              {\n                type: 'text',\n                label: intl.formatMessage({\n                  id: 'sources.name',\n                  defaultMessage: 'Name',\n                }),\n                filterValues: {\n                  'aria-label': intl.formatMessage({\n                    id: 'sources.filterByName',\n                    defaultMessage: 'Filter by name',\n                  }),\n                  onChange: (_event, value) => {\n                    stateDispatch({ type: 'setFilterValue', value });\n                    debouncedFiltering(() => setFilter('name', value, dispatch));\n                  },\n                  value: filter || '',\n                },\n              },\n              {\n                label: intl.formatMessage({\n                  id: 'sources.type',\n                  defaultMessage: 'Type',\n                }),\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (_event, value) => setFilter('source_type_id', value, dispatch),\n                  items: prepareSourceTypeSelection(filteredSourceTypes),\n                  value: filterValue.source_type_id ?? [],\n                },\n              },\n              {\n                label: intl.formatMessage({\n                  id: 'sources.application',\n                  defaultMessage: 'Application',\n                }),\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (_event, value) => setFilter('applications', value, dispatch),\n                  items: prepareApplicationTypeSelection(\n                    appTypes?.filter(filterVendorAppTypes(filteredSourceTypes, activeCategory)) || [],\n                  ),\n                  value: filterValue.applications,\n                },\n              },\n              {\n                label: intl.formatMessage({\n                  id: 'sources.availabilityStatus',\n                  defaultMessage: 'Status',\n                }),\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (event, value, selectedValue) =>\n                    setFilter('availability_status', event.target.checked ? [selectedValue] : [], dispatch),\n                  items: [\n                    { label: intl.formatMessage({ id: 'sources.available', defaultMessage: 'Available' }), value: AVAILABLE },\n                    {\n                      label: intl.formatMessage({ id: 'sources.unavailable', defaultMessage: 'Unavailable' }),\n                      value: UNAVAILABLE,\n                    },\n                  ],\n                  value: filterValue.availability_status,\n                },\n              },\n            ],\n          }}\n          activeFiltersConfig={{\n            filters: prepareChips(filterValue, sourceTypes, appTypes, intl),\n            onDelete: (_event, chips, deleteAll) => {\n              dispatch(filterSources(removeChips(chips, filterValue, deleteAll)));\n            },\n          }}\n          exportConfig={{\n            ...(isSmallScreen && { position: 'right' }),\n            isDisabled: !loaded,\n            onSelect: (_e, type) => {\n              const data =\n                type === 'csv'\n                  ? generateCSV(entities, intl, appTypes, sourceTypes)\n                  : generateJSON(entities, intl, appTypes, sourceTypes);\n              downloadFile(data, `sources-${new Date().toISOString()}`, type);\n            },\n          }}\n        />\n        <SourcesTable />\n        <PrimaryToolbar\n          pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfigBottom : undefined}\n        />\n      </React.Fragment>\n    ) : null;\n\n  return (\n    <React.Fragment>\n      <Suspense fallback={null}>\n        <Outlet\n          context={{\n            sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n            applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n            isOpen: true,\n            onClose: () => {\n              stateDispatch({ type: 'closeWizard' });\n              appNavigate(routes.sources.path);\n            },\n            afterSuccess: (source) => afterSuccess(dispatch, source),\n            hideSourcesButton: true,\n            selectedType,\n            submitCallback: (state) => checkSubmit(state, dispatch, appNavigate, intl, stateDispatch),\n            initialValues: wizardInitialValues,\n            initialWizardState: wizardInitialState,\n            activeCategory,\n          }}\n        />\n      </Suspense>\n      <SourcesHeader />\n      <Section type=\"content\">\n        {showInfoCards && <CloudCards />}\n        {fetchingError && <ErrorState />}\n        {!fetchingError && showEmptyState && activeCategory === CLOUD_VENDOR && (\n          <CloudEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && showEmptyState && activeCategory === REDHAT_VENDOR && (\n          <RedHatEmptyState setSelectedType={setSelectedType} />\n        )}\n        {mainContent}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nexport default SourcesPage;\n","import { sourcesColumns } from '../views/sourcesViewDefinition';\nimport formatValueToExport from './formatValueToExport';\n\nconst generateCSV = (entities, intl, applicationTypes, sourceTypes) => {\n  const columns = sourcesColumns(intl).filter(({ hidden }) => !hidden);\n\n  const rows = [\n    columns.map(({ title }) => title),\n    ...entities.map((source) =>\n      columns\n        .map(({ value }) => formatValueToExport(value, source[value], applicationTypes, sourceTypes))\n        .map((value) => (value?.includes(',') ? `\"${value}\"` : value)),\n    ),\n  ];\n\n  return rows.map((r) => r.join(',')).join('\\n');\n};\n\nexport default generateCSV;\n","import { sourcesColumns } from '../views/sourcesViewDefinition';\nimport formatValueToExport from './formatValueToExport';\n\nconst formatSource = (columns, source, applicationTypes, sourceTypes) =>\n  columns.reduce(\n    (acc, curr) => ({ ...acc, [curr.title]: formatValueToExport(curr.value, source[curr.value], applicationTypes, sourceTypes) }),\n    {},\n  );\n\nconst generateJSON = (entities, intl, applicationTypes, sourceTypes) => {\n  const columns = sourcesColumns(intl).filter(({ hidden }) => !hidden);\n\n  const rows = entities.map((source) => formatSource(columns, source, applicationTypes, sourceTypes));\n\n  return JSON.stringify(rows, null, 2);\n};\n\nexport default generateJSON;\n"],"names":["useAppNavigate","navigate","useNavigate","to","options","intl","dispatch","Bullseye","EmptyState","variant","EmptyStateVariant","small","EmptyStateIcon","icon","Title","headingLevel","size","formatMessage","id","defaultMessage","EmptyStateBody","Button","onClick","itemToCells","item","columns","sourceTypes","appTypes","filter","column","title","hidden","map","col","formatter","value","renderSources","entities","removingSources","reduce","acc","isDeleting","includes","originalName","name","isOpen","expanded","cells","disableActions","prepareColumnsCells","transforms","wrappable","sortable","props","reducer","state","payload","key","actionResolver","hasWritePermissions","isOrgAdmin","rowData","disabledProps","disabledTooltipProps","actions","paused_at","push","description","_ev","_i","component","sourcesRemove","path","sourcesDetail","loaded","useIsLoaded","writePermissions","useHasWritePermissions","user","sourceTypesLoaded","appTypesLoaded","sortBy","sortDirection","numberOfEntities","sources","reduxDispatch","notSortable","useReducer","rows","isLoaded","refreshSources","useEffect","refreshColumns","shownRows","heightAuto","colSpan","className","Table","gridBreakPoint","onSort","_event","direction","index","cell","indexOf","undefined","rowWrapper","debouncedFiltering","refresh","afterSuccessLoadParameters","pageNumber","prepareSourceTypeSelection","product_name","label","sort","a","b","localeCompare","prepareApplicationTypeSelection","display_name","setFilter","prepareChips","filterValue","Object","keys","length","source_type_id","category","chips","sourceType","find","type","applications","appType","availability_status","chipsFormatters","Boolean","loadedTypes","types","ImageWithPlaceholder","src","rest","setLoaded","useState","height","width","onLoad","style","display","propTypes","isRequired","tooltip","Tooltip","content","Tile","isDisabled","TilesArray","setSelectedType","mapper","activeCategory","appNavigate","openWizard","sourcesNew","TileComponent","amazon","isStacked","alt","google","azure","ibm","CloudEmptyState","Card","CardTitle","CardBody","Text","CardFooter","chunks","href","target","rel","openshift","RedHatEmptyState","enableIntegrations","useFlag","enableBreakdown","enableIntegrationsOverview","hasIntegrationsPermissions","integrationsEndpointsPermissions","PageSection","PageSectionVariants","light","isWidthLimited","Tabs","activeKey","onSelect","_e","inset","default","md","xl","Tab","eventKey","TabTitleText","TabTitleIcon","dropdownItems","setIsOpen","isIntegrationsWizardOpen","setIsIntegrationsWizardOpen","isSourcesWizardOpen","setIsSourcesWizardOpen","selectedIntegration","setSelectedIntegration","AsyncComponent","appName","module","closeModal","fallback","onClose","Dropdown","onOpenChange","toggle","toggleRef","MenuToggle","ref","isExpanded","DropdownList","DropdownItem","ouiaId","subtitle","linkProps","isExternal","actionMenu","popperProps","appendTo","document","body","position","PageHeader","PageHeaderTitle","applicationTypes","application_type_id","join","selectedType","wizardInitialState","wizardInitialValues","initialValues","initialState","stateDispatch","entitiesLoaded","screenSize","useScreenSize","pageSize","fetchingError","paginationClicked","onSetPage","page","maximumPageNumber","Math","ceil","max","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","filteredSourceTypes","addSourceText","noPermissionsText","actionsConfig","isSmallScreen","dropdownProps","AppLink","tooltipProps","hasSomeFilter","entries","_key","Array","isArray","showEmptyState","showInfoCards","mainContent","PrimaryToolbar","pagination","tabIndex","filterConfig","items","filterValues","onChange","event","selectedValue","checked","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips","exportConfig","data","source","r","formatSource","JSON","stringify","Date","toISOString","Suspense","Outlet","context","afterSuccess","hideSourcesButton","submitCallback","now","location","pathname","split","pop","isErrored","activeStep","activeStepIndex","maxStepIndex","prevSteps","registeredFieldsHistory","wizardState","values","actionLinks","AlertActionLink","computeSourceStatus","createdSource","error","availability_status_error","endpoint","checkSubmit","initialWizardState","Section","CloudCards","ErrorState"],"sourceRoot":""}