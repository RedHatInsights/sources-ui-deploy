{"version":3,"file":"js/sourcesPage.d01f1363fbe3bc624991.js","mappings":"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","sources":["webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/components/SourcesTable/EmptyStateTable.js","webpack:///./src/components/SourcesTable/SourcesTable.js","webpack:///./src/pages/Sources/helpers.js","webpack:///./src/components/TilesShared/ImageWithPlaceholder.js","webpack:///./src/components/TilesShared/DisabledTile.js","webpack:///./src/components/TilesShared/TilesArray.js","webpack:///./src/components/CloudTiles/CloudTiles.js","webpack:///./src/components/CloudTiles/CloudEmptyState.js","webpack:///./src/components/RedHatTiles/RedHatTiles.js","webpack:///./src/components/RedHatTiles/RedHatEmptyState.js","webpack:///./src/components/TabNavigation.js","webpack:///./src/components/SourcesHeader.js","webpack:///./src/utilities/formatValueToExport.js","webpack:///./src/pages/Sources.js","webpack:///./src/utilities/generateCSV.js","webpack:///./src/utilities/generateJSON.js","webpack:///./src/utilities/computeSourceStatus.js","webpack:///./src/utilities/filterApps.js","webpack:///./src/utilities/filterTypes.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { linkBasename, mergeToBasename } from '../utilities/utils';\n\nexport const useAppNavigate = () => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n","import React from 'react';\n\nimport { Bullseye, Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.small}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundTitle',\n            defaultMessage: 'No sources found',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundDescription',\n            defaultMessage: 'No sources match the filter criteria. Remove all filters or clear all filters to show sources.',\n          })}\n        </EmptyStateBody>\n        <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n          {intl.formatMessage({\n            id: 'sources.clearAllFilters',\n            defaultMessage: 'Clear all filters',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default EmptyStateTable;\n","import React, { useEffect, useReducer } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { sortable, wrappable } from '@patternfly/react-table';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table/deprecated';\nimport { useIntl } from 'react-intl';\n\nimport { pauseSource, resumeSource, sortEntities } from '../../redux/sources/actions';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { COLUMN_COUNT, sourcesColumns } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { replaceRouteId, routes } from '../../Routing';\nimport disabledTooltipProps from '../../utilities/disabledTooltipProps';\nimport { useAppNavigate } from '../../hooks/useAppNavigate';\nimport './sourcesTable.scss';\n\nexport const itemToCells = (item, columns, sourceTypes, appTypes) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((col) => ({\n      title: col.formatter\n        ? col.formatter(item[col.value], item, {\n            sourceTypes,\n            appTypes,\n          })\n        : item[col.value] || '',\n    }));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes, removingSources) =>\n  entities\n    .filter(({ hidden }) => !hidden)\n    .reduce((acc, item) => {\n      const isDeleting = removingSources.includes(item.id);\n\n      return [\n        ...acc,\n        {\n          ...item,\n          originalName: item.name,\n          isOpen: !!item.expanded,\n          cells: itemToCells(item, columns, sourceTypes, appTypes),\n          disableActions: isDeleting,\n          isDeleting,\n        },\n      ];\n    }, []);\n\nexport const prepareColumnsCells = (columns) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((column) => ({\n      title: column.title || '',\n      value: column.value,\n      hidden: column.hidden,\n      transforms: [wrappable],\n      ...(column.sortable && { transforms: [sortable, wrappable] }),\n    }));\n\nconst reducer = (state, payload) => ({ ...state, ...payload, key: state.key + 1 });\n\nconst initialState = (columns) => ({\n  rows: [],\n  sortBy: {},\n  isLoaded: false,\n  cells: prepareColumnsCells(columns),\n  key: 0,\n});\n\nexport const actionResolver = (intl, navigate, hasWritePermissions, dispatch, isOrgAdmin) => (rowData) => {\n  const disabledProps = disabledTooltipProps(intl, isOrgAdmin);\n  const actions = [];\n\n  if (rowData.paused_at) {\n    actions.push({\n      title: intl.formatMessage({\n        id: 'sources.resume',\n        defaultMessage: 'Resume',\n      }),\n      description: intl.formatMessage({\n        id: 'sources.resume.description',\n        defaultMessage: 'Unpause data collection for this integration',\n      }),\n      onClick: (_ev, _i, { id }) => dispatch(resumeSource(id, rowData.originalName, intl)),\n      ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n    });\n  } else {\n    actions.push({\n      title: intl.formatMessage({\n        id: 'sources.pause',\n        defaultMessage: 'Pause',\n      }),\n      description: intl.formatMessage({\n        id: 'sources.pause.description',\n        defaultMessage: 'Temporarily disable data collection',\n      }),\n      onClick: (_ev, _i, { id }) => dispatch(pauseSource(id, rowData.originalName, intl)),\n      ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n    });\n  }\n\n  actions.push({\n    title: intl.formatMessage({\n      id: 'sources.remove',\n      defaultMessage: 'Remove',\n    }),\n    description: intl.formatMessage({\n      id: 'sources.remove.description',\n      defaultMessage: 'Permanently delete this integration and all collected data',\n    }),\n    onClick: (_ev, _i, { id }) => navigate(replaceRouteId(routes.sourcesRemove.path, id)),\n    ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n  });\n\n  actions.push({\n    title: !rowData.paused_at\n      ? intl.formatMessage({\n          id: 'sources.edit',\n          defaultMessage: 'Edit',\n        })\n      : intl.formatMessage({\n          id: 'sources.viewDetails',\n          defaultMessage: 'View details',\n        }),\n    onClick: (_ev, _i, { id }) => navigate(replaceRouteId(routes.sourcesDetail.path, id)),\n    ...(!hasWritePermissions ? disabledProps : { component: 'button' }),\n  });\n\n  return actions;\n};\n\nconst SourcesTable = () => {\n  const navigate = useAppNavigate();\n  const intl = useIntl();\n\n  const loaded = useIsLoaded();\n  const writePermissions = useHasWritePermissions();\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n  const {\n    appTypes,\n    entities,\n    sourceTypes,\n    sourceTypesLoaded,\n    appTypesLoaded,\n    sortBy,\n    sortDirection,\n    numberOfEntities,\n    removingSources,\n  } = useSelector(({ sources }) => sources, shallowEqual);\n  const reduxDispatch = useDispatch();\n\n  const notSortable = numberOfEntities === 0 || !loaded;\n\n  const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n  const refreshColumns = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  const refreshSources = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      rows: renderSources(entities, columns, sourceTypes, appTypes, removingSources),\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  useEffect(() => {\n    if (loaded && sourceTypesLoaded && appTypesLoaded) {\n      dispatch({ isLoaded: true });\n      refreshSources();\n    } else {\n      dispatch({ isLoaded: false });\n      refreshColumns();\n    }\n  }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n  useEffect(() => {\n    if (state.isLoaded) {\n      refreshSources();\n    }\n  }, [entities, removingSources]);\n\n  let shownRows = state.rows;\n  if (numberOfEntities === 0 && state.isLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: COLUMN_COUNT },\n            title: <EmptyStateTable />,\n          },\n        ],\n      },\n    ];\n  } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: {\n              colSpan: COLUMN_COUNT,\n              className: 'sources-placeholder-row',\n            },\n            title: <PlaceHolderTable />,\n          },\n        ],\n      },\n    ];\n  }\n\n  return (\n    <Table\n      gridBreakPoint=\"grid-lg\"\n      aria-label={intl.formatMessage({\n        id: 'sources.list',\n        defaultMessage: 'List of Integrations',\n      })}\n      onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n      sortBy={{\n        index: state.cells.map((cell) => (cell.hidden ? 'hidden' : cell.value)).indexOf(sortBy),\n        direction: sortDirection,\n      }}\n      key={state.key}\n      rows={shownRows}\n      cells={state.cells}\n      actionResolver={\n        loaded && numberOfEntities > 0 ? actionResolver(intl, navigate, writePermissions, reduxDispatch, isOrgAdmin) : undefined\n      }\n      rowWrapper={RowWrapperLoader}\n      className={numberOfEntities === 0 && state.isLoaded ? 'ins-c-table-empty-state' : ''}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default SourcesTable;\n","import React from 'react';\nimport awesomeDebounce from 'awesome-debounce-promise';\n\nimport { AlertActionLink } from '@patternfly/react-core';\n\nimport { addMessage, filterSources, loadEntities, removeMessage } from '../../redux/sources/actions';\nimport { replaceRouteId, routes } from '../../Routing';\nimport { AVAILABLE } from '../../views/formatters';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport { bold } from '../../utilities/intlShared';\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = {\n  pageNumber: 1,\n  sortBy: 'created_at',\n  sortDirection: 'desc',\n};\n\nexport const afterSuccess = (dispatch) => dispatch(loadEntities(afterSuccessLoadParameters));\n\nexport const prepareSourceTypeSelection = (sourceTypes) =>\n  sourceTypes.map(({ id, product_name }) => ({ label: product_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const prepareApplicationTypeSelection = (appTypes) =>\n  appTypes.map(({ id, display_name }) => ({ label: display_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) =>\n  dispatch(\n    filterSources({\n      [column]: value,\n    }),\n  );\n\nexport const chipsFormatters = (key, filterValue, sourceTypes, appTypes, intl) =>\n  ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n      category: 'Integration Type',\n      key,\n      chips: filterValue[key].map((id) => {\n        const sourceType = sourceTypes.find((type) => type.id === id);\n\n        return { name: sourceType ? sourceType.product_name : id, value: id };\n      }),\n    }),\n    applications: () => ({\n      category: 'Application',\n      key,\n      chips: filterValue[key].map((id) => {\n        const appType = appTypes.find((type) => type.id === id);\n\n        return { name: appType ? appType.display_name : id, value: id };\n      }),\n    }),\n    availability_status: () => ({\n      category: 'Status',\n      key,\n      chips: [\n        {\n          value: filterValue[key][0],\n          name:\n            filterValue[key][0] === AVAILABLE\n              ? intl.formatMessage({\n                  id: 'sources.available',\n                  defaultMessage: 'Available',\n                })\n              : intl.formatMessage({\n                  id: 'sources.unavailable',\n                  defaultMessage: 'Unavailable',\n                }),\n        },\n      ],\n    }),\n  })[key] || (() => ({ name: key }));\n\nexport const prepareChips = (filterValue, sourceTypes, appTypes, intl) =>\n  Object.keys(filterValue)\n    .map((key) =>\n      filterValue[key] && filterValue[key].length > 0\n        ? chipsFormatters(key, filterValue, sourceTypes, appTypes, intl)()\n        : undefined,\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n  if (deleteAll) {\n    return Object.keys(filterValue).reduce(\n      (acc, curr) => ({\n        ...acc,\n        [curr]: undefined,\n      }),\n      {},\n    );\n  }\n\n  const chip = chips[0];\n\n  return {\n    ...filterValue,\n    [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined,\n  };\n};\n\nexport const loadedTypes = (types, loaded) => (loaded && types.length > 0 ? types : undefined);\n\nexport const checkSubmit = (state, dispatch, push, intl, stateDispatch) => {\n  const id = `sources-wizard-notification-${Date.now()}`;\n\n  if (location.pathname.split('/').filter(Boolean).pop() !== routes.sourcesNew.path.split('/').pop()) {\n    if (state.isErrored) {\n      const { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory } = state.wizardState;\n      dispatch(\n        addMessage({\n          title: intl.formatMessage({\n            id: 'alert.error.title',\n            defaultMessage: 'Error adding integration',\n          }),\n          description: intl.formatMessage(\n            {\n              id: 'alert.error.description',\n              defaultMessage:\n                'There was a problem while trying to add integration {name}. Please try again. If the error persists, open a support case.',\n            },\n            { name: <b>{state.values.source.name}</b> },\n          ),\n          variant: 'danger',\n          id,\n          actionLinks: (\n            <AlertActionLink\n              onClick={() => {\n                stateDispatch({\n                  type: 'retryWizard',\n                  initialValues: state.values,\n                  initialState: { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory },\n                });\n                dispatch(removeMessage(id));\n                push(routes.sourcesNew.path);\n              }}\n            >\n              {intl.formatMessage({\n                id: 'alert.error.link',\n                defaultMessage: 'Retry',\n              })}\n            </AlertActionLink>\n          ),\n        }),\n      );\n    } else {\n      switch (computeSourceStatus(state.createdSource)) {\n        case 'unavailable':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.error.title',\n                defaultMessage: 'Source configuration unsuccessful',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'error.notification',\n                  defaultMessage: '{error} [<b>{name}</b>]',\n                },\n                {\n                  error:\n                    state.createdSource.applications?.[0]?.availability_status_error ||\n                    state.createdSource.endpoint?.[0]?.availability_status_error ||\n                    intl.formatMessage({\n                      id: 'wizard.unknownError',\n                      defaultMessage: 'Unknown error',\n                    }),\n                  name: state.createdSource.name,\n                  b: bold,\n                },\n              ),\n              variant: 'danger',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.unavailable.link',\n                    defaultMessage: 'Edit integration',\n                  })}\n                </AlertActionLink>\n              ),\n            }),\n          );\n          break;\n        case 'timeout':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.timeout.title',\n                defaultMessage: 'Integration configuration in progress',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.timeout.description',\n                  defaultMessage:\n                    'We are still working to confirm credentials for integration {name}. To track progress, check the Status column in the Integrations table.',\n                },\n                { name: <b>{state.createdSource.name}</b> },\n              ),\n              variant: 'info',\n            }),\n          );\n          break;\n        default:\n          dispatch(\n            addMessage({\n              title: intl.formatMessage(\n                {\n                  id: 'alert.success.title',\n                  defaultMessage: '{type} connection successful',\n                },\n                { type: state.sourceTypes.find(({ id }) => id === state.createdSource.source_type_id)?.product_name },\n              ),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.success.description',\n                  defaultMessage: 'Source {name} was successfully added',\n                },\n                { name: <b>{state.createdSource.name}</b> },\n              ),\n              variant: 'success',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.success.link',\n                    defaultMessage: 'View source details',\n                  })}\n                </AlertActionLink>\n              ),\n            }),\n          );\n          break;\n      }\n    }\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Loader } from '../SourcesTable/loaders';\n\nconst ImageWithPlaceholder = ({ src, ...rest }) => {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <React.Fragment>\n      {!loaded && <Loader height=\"40px\" width=\"110px\" {...rest} />}\n      <img\n        src={src}\n        data-testid=\"ImageWithPlaceholder\"\n        onLoad={() => setLoaded(true)}\n        style={{ display: loaded ? 'initial' : 'none' }}\n        {...rest}\n      />\n    </React.Fragment>\n  );\n};\n\nImageWithPlaceholder.propTypes = {\n  src: PropTypes.string.isRequired,\n};\n\nexport default ImageWithPlaceholder;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nimport { Tile, Tooltip } from '@patternfly/react-core';\nimport { disabledMessage } from '../../utilities/disabledTooltipProps';\n\nconst DisabledTile = (props) => {\n  const intl = useIntl();\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n  const tooltip = disabledMessage(intl, isOrgAdmin);\n\n  return (\n    <Tooltip content={tooltip}>\n      <div className=\"disabled-tile-with-tooltip\">\n        <Tile {...props} isDisabled />\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default DisabledTile;\n","import PropTypes from 'prop-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes } from '../../Routing';\n\nimport { Tile } from '@patternfly/react-core';\n\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { useAppNavigate } from '../../hooks/useAppNavigate';\nimport DisabledTile from '../TilesShared/DisabledTile';\nimport { filterVendorTypes } from '../../utilities/filterTypes';\n\nconst TilesArray = ({ setSelectedType, mapper }) => {\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n  const activeCategory = useSelector(({ sources }) => sources.activeCategory);\n\n  const appNavigate = useAppNavigate();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const openWizard = (type) => {\n    setSelectedType(type);\n    appNavigate(routes.sourcesNew.path);\n  };\n\n  const TileComponent = hasWritePermissions ? Tile : DisabledTile;\n\n  return sourceTypes\n    .filter(filterVendorTypes(activeCategory))\n    .sort((a, b) => a.product_name.localeCompare(b.product_name))\n    .map(({ name }) => mapper(name, openWizard, TileComponent));\n};\n\nTilesArray.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n  mapper: PropTypes.func.isRequired,\n};\n\nexport default TilesArray;\n","import React from 'react';\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    amazon: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Amazon Web Services\"\n        onClick={() => openWizard('amazon')}\n        className=\"tile pf-v5-u-mr-md pf-v5-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-v5-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/aws.svg\"\n            alt=\"aws logo\"\n          />\n        }\n      />\n    ),\n    google: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Google Cloud\"\n        className=\"tile pf-v5-u-mr-md pf-v5-u-mt-md\"\n        onClick={() => openWizard('google')}\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-v5-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/google-cloud-short.svg\"\n            alt=\"google logo\"\n          />\n        }\n      />\n    ),\n    azure: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Microsoft Azure\"\n        onClick={() => openWizard('azure')}\n        className=\"tile pf-v5-u-mr-md pf-v5-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-v5-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/microsoft-azure-short.svg\"\n            alt=\"azure logo\"\n          />\n        }\n      />\n    ),\n    ibm: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"IBM Cloud\"\n        onClick={() => openWizard('ibm')}\n        className=\"tile pf-v5-u-mr-md pf-v5-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-v5-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/ibm-cloud.svg\"\n            alt=\"ibm logo\"\n          />\n        }\n      />\n    ),\n    'oracle-cloud-infrastructure': (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Oracle Cloud Infrastructure\"\n        onClick={() => openWizard('oracle-cloud-infrastructure')}\n        className=\"tile pf-v5-u-mr-md pf-v5-u-mt-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-v5-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/oracle-short.svg\"\n            alt=\"oracle logo\"\n          />\n        }\n      />\n    ),\n  })[type];\n\nconst CloudTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default CloudTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardFooter, CardTitle, Text } from '@patternfly/react-core';\n\nimport CloudTiles from './CloudTiles';\n\nconst CLOUD_CATALOG_HREF = 'https://catalog.redhat.com/cloud';\n\nconst CloudEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"src-c-card__cloud-empty-state pf-v5-u-mt-md pf-v5-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'cloud.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your public clouds',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'cloud.emptystate.cardDescription',\n            defaultMessage: 'Select an available provider.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-v5-u-mt-md pf-v5-u-mb-lg\">\n          <CloudTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n      <CardFooter className=\"cloud-footer\">\n        <Text className=\"catalog-link pf-v5-u-mt-lg\">\n          {intl.formatMessage(\n            {\n              id: 'cloud.emptystate.catalogLink',\n              defaultMessage: 'Looking for a different provider? <a>See all Red Hat Certified Cloud and Service Providers</a>',\n            },\n            {\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href={CLOUD_CATALOG_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            },\n          )}\n        </Text>\n      </CardFooter>\n    </Card>\n  );\n};\n\nCloudEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default CloudEmptyState;\n","import React from 'react';\n\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst icon = (\n  <ImageWithPlaceholder className=\"redhat-icon\" src=\"/apps/frontend-assets/red-hat-logos/stacked.svg\" alt=\"red hat logo\" />\n);\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    openshift: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"OpenShift Container Platform\"\n        className=\"tile pf-v5-u-mr-md-on-md pf-v5-u-mt-md pf-v5-u-mt-0-on-md\"\n        onClick={() => openWizard('openshift')}\n        icon={icon}\n      />\n    ),\n  })[type];\n\nconst RedHatTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default RedHatTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardTitle, Text } from '@patternfly/react-core';\n\nimport RedHatTiles from './RedHatTiles';\n\nconst RedHatEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"src-c-card__cloud-empty-state pf-v5-u-mt-md pf-v5-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'redhat.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your Red Hat applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'redhat.emptystate.cardDescription',\n            defaultMessage: 'Select an available application.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-v5-u-mt-md pf-v5-u-mb-lg\">\n          <RedHatTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nRedHatEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default RedHatEmptyState;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Tab, TabTitleIcon, TabTitleText, Tabs } from '@patternfly/react-core';\nimport RedhatIcon from '@patternfly/react-icons/dist/esm/icons/redhat-icon';\nimport CloudIcon from '@patternfly/react-icons/dist/esm/icons/cloud-icon';\n\nimport { setActiveCategory } from '../redux/sources/actions';\nimport { CLOUD_VENDOR, COMMUNICATIONS, INTEGRATIONS, REDHAT_VENDOR, REPORTING, WEBHOOKS } from '../utilities/constants';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst TabNavigation = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const activeCategory = useSelector(({ sources }) => sources.activeCategory);\n  const enableIntegrations = useFlag('platform.sources.integrations');\n  const enableBreakdown = useFlag('platform.sources.integrations.breakdown');\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n\n  return (\n    <Tabs activeKey={activeCategory} onSelect={(_e, key) => dispatch(setActiveCategory(key))} className=\"pf-v5-u-mt-md\">\n      <Tab\n        eventKey={CLOUD_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <CloudIcon aria-label=\"Cloud Icon\" />\n            </TabTitleIcon>\n            <TabTitleText>\n              {intl.formatMessage({\n                id: 'sources.cloudSources',\n                defaultMessage: enableIntegrations ? 'Cloud' : 'Cloud sources',\n              })}\n            </TabTitleText>\n          </React.Fragment>\n        }\n      />\n      <Tab\n        eventKey={REDHAT_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <RedhatIcon aria-label=\"Red Hat Icon\" />\n            </TabTitleIcon>\n            <TabTitleText>\n              {intl.formatMessage({\n                id: 'sources.redhatSources',\n                defaultMessage: enableIntegrations ? 'Red Hat' : 'Red Hat sources',\n              })}\n            </TabTitleText>\n          </React.Fragment>\n        }\n      />\n      {isOrgAdmin &&\n        (enableIntegrations || enableBreakdown) &&\n        (enableBreakdown ? (\n          <>\n            <Tab\n              eventKey={COMMUNICATIONS}\n              title={\n                <TabTitleText>\n                  {intl.formatMessage({ id: 'sources.communications', defaultMessage: 'Communications' })}\n                </TabTitleText>\n              }\n            />\n            <Tab\n              eventKey={REPORTING}\n              title={\n                <TabTitleText>\n                  {intl.formatMessage({ id: 'sources.reportingAutomation', defaultMessage: 'Reporting & Automation' })}\n                </TabTitleText>\n              }\n            />\n            <Tab\n              eventKey={WEBHOOKS}\n              title={<TabTitleText>{intl.formatMessage({ id: 'sources.webhooks', defaultMessage: 'Webhooks' })}</TabTitleText>}\n            />\n          </>\n        ) : (\n          <Tab\n            eventKey={INTEGRATIONS}\n            title={\n              <TabTitleText>{intl.formatMessage({ id: 'sources.integrations', defaultMessage: 'Integrations' })}</TabTitleText>\n            }\n          />\n        ))}\n    </Tabs>\n  );\n};\n\nexport default TabNavigation;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport TabNavigation from './TabNavigation';\n\nconst SourcesHeader = () => {\n  const intl = useIntl();\n\n  return (\n    <PageHeader className=\"pf-v5-u-pb-0\">\n      <PageHeaderTitle title={intl.formatMessage({ id: 'sources.integrations', defaultMessage: 'Integrations' })} />\n      <TabNavigation />\n    </PageHeader>\n  );\n};\n\nexport default React.memo(SourcesHeader);\n","const formatValueToExport = (key, value, applicationTypes, sourceTypes) => {\n  switch (key) {\n    case 'applications':\n      return value\n        .map(({ application_type_id }) => applicationTypes.find(({ id }) => id === application_type_id)?.display_name)\n        .join(',');\n    case 'source_type_id':\n      return sourceTypes.find(({ id }) => id === value)?.product_name;\n    default:\n      return value;\n  }\n};\n\nexport default formatValueToExport;\n","import React, { Suspense, useEffect, useReducer } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\n\nimport AppLink from '../components/AppLink';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { isSmallScreen, useScreenSize } from '@redhat-cloud-services/frontend-components/useScreenSize';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport SourcesTable from '../components/SourcesTable/SourcesTable';\nimport { filterSources, pageAndSize } from '../redux/sources/actions';\nimport { useAppNavigate } from '../hooks/useAppNavigate';\nimport { routes } from '../Routing';\n\nimport {\n  afterSuccess,\n  checkSubmit,\n  debouncedFiltering,\n  loadedTypes,\n  prepareApplicationTypeSelection,\n  prepareChips,\n  prepareSourceTypeSelection,\n  removeChips,\n  setFilter,\n} from './Sources/helpers';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../hooks/useHasWritePermissions';\nimport { PaginationLoader } from '../components/SourcesTable/loaders';\nimport CloudCards from '../components/CloudTiles/CloudCards';\nimport { CLOUD_VENDOR, COMMUNICATIONS, INTEGRATIONS, REDHAT_VENDOR, REPORTING, WEBHOOKS } from '../utilities/constants';\nimport CloudEmptyState from '../components/CloudTiles/CloudEmptyState';\nimport { AVAILABLE, UNAVAILABLE } from '../views/formatters';\nimport RedHatEmptyState from '../components/RedHatTiles/RedHatEmptyState';\nimport { filterVendorTypes } from '../utilities/filterTypes';\nimport { filterVendorAppTypes } from '../utilities/filterApps';\nimport SourcesHeader from '../components/SourcesHeader';\nimport generateCSV from '../utilities/generateCSV';\nimport generateJSON from '../utilities/generateJSON';\nimport { Outlet } from 'react-router-dom';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst initialState = {\n  filter: undefined,\n  selectedType: undefined,\n  wizardInitialState: undefined,\n  wizardInitialValues: undefined,\n};\n\nconst reducer = (state, { type, value, selectedType, initialValues, initialState }) => {\n  switch (type) {\n    case 'setFilterValue':\n      return { ...state, filter: value };\n    case 'setSelectedType':\n      return { ...state, selectedType };\n    case 'retryWizard':\n      return { ...state, wizardInitialState: initialState, wizardInitialValues: initialValues };\n    case 'closeWizard':\n      return { ...state, selectedType: undefined, wizardInitialState: undefined, wizardInitialValues: undefined };\n  }\n};\n\nconst SourcesPage = () => {\n  const [{ filter, selectedType, wizardInitialState, wizardInitialValues }, stateDispatch] = useReducer(reducer, initialState);\n\n  const entitiesLoaded = useIsLoaded();\n  const hasWritePermissions = useHasWritePermissions();\n  const isOrgAdmin = useSelector(({ user }) => user.isOrgAdmin);\n  const enableIntegrations = useFlag('platform.sources.integrations') || useFlag('platform.sources.breakdown');\n\n  const appNavigate = useAppNavigate();\n  const intl = useIntl();\n\n  const screenSize = useScreenSize();\n\n  const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n  const {\n    filterValue,\n    numberOfEntities,\n    appTypes,\n    pageSize,\n    pageNumber,\n    fetchingError,\n    sourceTypes,\n    paginationClicked,\n    appTypesLoaded,\n    sourceTypesLoaded,\n    activeCategory,\n    entities,\n  } = sources;\n\n  const loaded = entitiesLoaded && sourceTypesLoaded && appTypesLoaded;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (filter !== filterValue.name) {\n      stateDispatch({ type: 'setFilterValue', value: filterValue.name });\n    }\n  }, [filterValue.name]);\n\n  const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n  const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n  const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n  useEffect(() => {\n    if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n      onSetPage({}, maximumPageNumber);\n    }\n  });\n\n  const paginationConfig = {\n    itemCount: numberOfEntities,\n    page: pageNumber,\n    perPage: pageSize,\n    onSetPage,\n    onPerPageSelect,\n    className: 'top-pagination',\n  };\n\n  const paginationConfigBottom = {\n    ...paginationConfig,\n    dropDirection: 'up',\n    variant: 'bottom',\n    isCompact: false,\n    className: 'bottom-pagination',\n  };\n\n  const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n  const filteredSourceTypes = sourceTypes.filter(filterVendorTypes(activeCategory, true));\n\n  const addSourceText = intl.formatMessage({\n    id: 'sources.addSource',\n    defaultMessage: 'Add integration',\n  });\n  const noPermissionsText = isOrgAdmin\n    ? intl.formatMessage({\n        id: 'sources.notAdminAddButton',\n        defaultMessage: 'To add a source, you must add Cloud Integration Administrator permissions to your user.',\n      })\n    : intl.formatMessage({\n        id: 'sources.notPermissionsAddButton',\n        defaultMessage:\n          'To add a source, your Organization Administrator must grant you Cloud Integration Administrator permissions.',\n      });\n\n  let actionsConfig;\n\n  if (isSmallScreen(screenSize)) {\n    actionsConfig = {\n      dropdownProps: { position: 'right' },\n      actions: hasWritePermissions\n        ? [{ label: addSourceText, props: { to: routes.sourcesNew.path, component: AppLink } }]\n        : [\n            {\n              label: addSourceText,\n              props: {\n                component: 'button',\n                isDisabled: true,\n                tooltip: noPermissionsText,\n                tooltipProps: {\n                  content: noPermissionsText,\n                },\n                className: 'src-m-dropdown-item-disabled',\n              },\n            },\n          ],\n    };\n  }\n\n  const hasSomeFilter =\n    Object.entries(filterValue)\n      .map(([_key, value]) => value && (!Array.isArray(value) || (Array.isArray(value) && value.length > 0)))\n      .filter(Boolean).length > 0;\n\n  const showEmptyState = loaded && numberOfEntities === 0 && !hasSomeFilter;\n  const showInfoCards = activeCategory === CLOUD_VENDOR && !showEmptyState;\n\n  const setSelectedType = (selectedType) => stateDispatch({ type: 'setSelectedType', selectedType });\n\n  const mainContent =\n    [INTEGRATIONS, COMMUNICATIONS, REPORTING, WEBHOOKS].includes(activeCategory) && enableIntegrations ? (\n      <AsyncComponent appName=\"notifications\" module=\"./IntegrationsTable\" activeCategory={activeCategory} />\n    ) : !fetchingError && !showEmptyState ? (\n      <React.Fragment>\n        <PrimaryToolbar\n          pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n          actionsConfig={\n            actionsConfig || {\n              dropdownProps: { position: 'right' },\n              actions: hasWritePermissions\n                ? [\n                    <AppLink to={routes.sourcesNew.path} key=\"addSourceButton\">\n                      <Button\n                        data-hcc-index=\"true\"\n                        data-hcc-title={addSourceText}\n                        data-hcc-alt=\"create source;add cloud provider\"\n                        variant=\"primary\"\n                        id=\"addSourceButton\"\n                      >\n                        {addSourceText}\n                      </Button>\n                    </AppLink>,\n                  ]\n                : [\n                    <Tooltip content={noPermissionsText} key=\"addSourceButton\">\n                      <span tabIndex=\"0\">\n                        <Button variant=\"primary\" isDisabled id=\"addSourceButton\">\n                          {addSourceText}\n                        </Button>\n                      </span>\n                    </Tooltip>,\n                  ],\n            }\n          }\n          filterConfig={{\n            items: [\n              {\n                type: 'text',\n                label: intl.formatMessage({\n                  id: 'sources.name',\n                  defaultMessage: 'Name',\n                }),\n                filterValues: {\n                  'aria-label': intl.formatMessage({\n                    id: 'sources.filterByName',\n                    defaultMessage: 'Filter by name',\n                  }),\n                  onChange: (_event, value) => {\n                    stateDispatch({ type: 'setFilterValue', value });\n                    debouncedFiltering(() => setFilter('name', value, dispatch));\n                  },\n                  value: filter || '',\n                },\n              },\n              {\n                label: intl.formatMessage({\n                  id: 'sources.type',\n                  defaultMessage: 'Type',\n                }),\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (_event, value) => setFilter('source_type_id', value, dispatch),\n                  items: prepareSourceTypeSelection(filteredSourceTypes),\n                  value: filterValue.source_type_id ?? [],\n                },\n              },\n              {\n                label: intl.formatMessage({\n                  id: 'sources.application',\n                  defaultMessage: 'Application',\n                }),\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (_event, value) => setFilter('applications', value, dispatch),\n                  items: prepareApplicationTypeSelection(\n                    appTypes?.filter(filterVendorAppTypes(filteredSourceTypes, activeCategory)) || [],\n                  ),\n                  value: filterValue.applications,\n                },\n              },\n              {\n                label: intl.formatMessage({\n                  id: 'sources.availabilityStatus',\n                  defaultMessage: 'Status',\n                }),\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (event, value, selectedValue) =>\n                    setFilter('availability_status', event.target.checked ? [selectedValue] : [], dispatch),\n                  items: [\n                    { label: intl.formatMessage({ id: 'sources.available', defaultMessage: 'Available' }), value: AVAILABLE },\n                    {\n                      label: intl.formatMessage({ id: 'sources.unavailable', defaultMessage: 'Unavailable' }),\n                      value: UNAVAILABLE,\n                    },\n                  ],\n                  value: filterValue.availability_status,\n                },\n              },\n            ],\n          }}\n          activeFiltersConfig={{\n            filters: prepareChips(filterValue, sourceTypes, appTypes, intl),\n            onDelete: (_event, chips, deleteAll) => {\n              dispatch(filterSources(removeChips(chips, filterValue, deleteAll)));\n            },\n          }}\n          exportConfig={{\n            ...(isSmallScreen && { position: 'right' }),\n            isDisabled: !loaded,\n            onSelect: (_e, type) => {\n              const data =\n                type === 'csv'\n                  ? generateCSV(entities, intl, appTypes, sourceTypes)\n                  : generateJSON(entities, intl, appTypes, sourceTypes);\n              downloadFile(data, `sources-${new Date().toISOString()}`, type);\n            },\n          }}\n        />\n        <SourcesTable />\n        <PrimaryToolbar\n          pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfigBottom : undefined}\n        />\n      </React.Fragment>\n    ) : null;\n\n  return (\n    <React.Fragment>\n      <Suspense fallback={null}>\n        <Outlet\n          context={{\n            sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n            applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n            isOpen: true,\n            onClose: () => {\n              stateDispatch({ type: 'closeWizard' });\n              appNavigate(routes.sources.path);\n            },\n            afterSuccess: (source) => afterSuccess(dispatch, source),\n            hideSourcesButton: true,\n            selectedType,\n            submitCallback: (state) => checkSubmit(state, dispatch, appNavigate, intl, stateDispatch),\n            initialValues: wizardInitialValues,\n            initialWizardState: wizardInitialState,\n            activeCategory,\n          }}\n        />\n      </Suspense>\n      <SourcesHeader />\n      <Section type=\"content\">\n        {showInfoCards && <CloudCards />}\n        {fetchingError && <ErrorState />}\n        {!fetchingError && showEmptyState && activeCategory === CLOUD_VENDOR && (\n          <CloudEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && showEmptyState && activeCategory === REDHAT_VENDOR && (\n          <RedHatEmptyState setSelectedType={setSelectedType} />\n        )}\n        {mainContent}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nexport default SourcesPage;\n","import { sourcesColumns } from '../views/sourcesViewDefinition';\nimport formatValueToExport from './formatValueToExport';\n\nconst generateCSV = (entities, intl, applicationTypes, sourceTypes) => {\n  const columns = sourcesColumns(intl).filter(({ hidden }) => !hidden);\n\n  const rows = [\n    columns.map(({ title }) => title),\n    ...entities.map((source) =>\n      columns\n        .map(({ value }) => formatValueToExport(value, source[value], applicationTypes, sourceTypes))\n        .map((value) => (value?.includes(',') ? `\"${value}\"` : value)),\n    ),\n  ];\n\n  return rows.map((r) => r.join(',')).join('\\n');\n};\n\nexport default generateCSV;\n","import { sourcesColumns } from '../views/sourcesViewDefinition';\nimport formatValueToExport from './formatValueToExport';\n\nconst formatSource = (columns, source, applicationTypes, sourceTypes) =>\n  columns.reduce(\n    (acc, curr) => ({ ...acc, [curr.title]: formatValueToExport(curr.value, source[curr.value], applicationTypes, sourceTypes) }),\n    {},\n  );\n\nconst generateJSON = (entities, intl, applicationTypes, sourceTypes) => {\n  const columns = sourcesColumns(intl).filter(({ hidden }) => !hidden);\n\n  const rows = entities.map((source) => formatSource(columns, source, applicationTypes, sourceTypes));\n\n  return JSON.stringify(rows, null, 2);\n};\n\nexport default generateJSON;\n","export const computeSourceStatus = (source) => {\n  const appStatuses =\n    source.applications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const endpointStatuses =\n    source.endpoint?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n  const authenticationsStatuses =\n    source.authentications?.filter(Boolean).map(({ availability_status }) => availability_status || 'timeout') || [];\n\n  const statuses = [...appStatuses, ...endpointStatuses, ...authenticationsStatuses];\n\n  if (statuses.includes('unavailable')) {\n    return 'unavailable';\n  }\n\n  if (statuses.length > 0 && statuses.every((status) => status === 'available')) {\n    return 'available';\n  }\n\n  if (statuses.includes('timeout')) {\n    return 'timeout';\n  }\n\n  return 'finished';\n};\n\nexport default computeSourceStatus;\n","import { TOPOLOGY_INV_NAME } from './constants';\n\nconst filterApps = (type) => type.name !== TOPOLOGY_INV_NAME;\n\nexport const filterVendorAppTypes =\n  (sourceTypes, category) =>\n  ({ supported_source_types }) =>\n    supported_source_types.find((type) => sourceTypes.find(({ name }) => type === name)?.category === category);\n\nexport default filterApps;\n","import { ANSIBLE_TOWER_NAME, SATELLITE_NAME } from './constants';\n\nconst filterTypes = (type) => type.schema;\n\nconst hiddenTypes = [SATELLITE_NAME, ANSIBLE_TOWER_NAME];\n\nexport const filterVendorTypes =\n  (activeCategory, showHidden) =>\n  ({ category, name }) => {\n    if (showHidden) {\n      return category === activeCategory;\n    } else {\n      return category === activeCategory && !hiddenTypes.includes(name);\n    }\n  };\n\nexport default filterTypes;\n"],"names":["useAppNavigate","navigate","useNavigate","to","options","intl","dispatch","Bullseye","EmptyState","variant","EmptyStateVariant","small","EmptyStateIcon","icon","Title","headingLevel","size","formatMessage","id","defaultMessage","EmptyStateBody","Button","onClick","itemToCells","item","columns","sourceTypes","appTypes","filter","column","title","hidden","map","col","formatter","value","renderSources","entities","removingSources","reduce","acc","isDeleting","includes","originalName","name","isOpen","expanded","cells","disableActions","prepareColumnsCells","transforms","wrappable","sortable","reducer","state","payload","key","actionResolver","hasWritePermissions","isOrgAdmin","rowData","disabledProps","disabledTooltipProps","actions","paused_at","push","description","_ev","_i","component","sourcesRemove","path","sourcesDetail","loaded","useIsLoaded","writePermissions","useHasWritePermissions","user","sourceTypesLoaded","appTypesLoaded","sortBy","sortDirection","numberOfEntities","sources","reduxDispatch","notSortable","useReducer","rows","isLoaded","refreshSources","useEffect","refreshColumns","shownRows","heightAuto","props","colSpan","className","Table","gridBreakPoint","onSort","_event","direction","index","cell","indexOf","undefined","rowWrapper","debouncedFiltering","refresh","afterSuccessLoadParameters","pageNumber","prepareSourceTypeSelection","product_name","label","sort","a","b","localeCompare","prepareApplicationTypeSelection","display_name","setFilter","prepareChips","filterValue","Object","keys","length","source_type_id","category","chips","sourceType","find","type","applications","appType","availability_status","chipsFormatters","Boolean","loadedTypes","types","ImageWithPlaceholder","src","rest","setLoaded","useState","height","width","onLoad","style","display","propTypes","isRequired","tooltip","Tooltip","content","Tile","isDisabled","TilesArray","setSelectedType","mapper","activeCategory","appNavigate","openWizard","sourcesNew","TileComponent","amazon","isStacked","alt","google","azure","ibm","CloudEmptyState","Card","CardTitle","CardBody","Text","CardFooter","chunks","href","target","rel","openshift","RedHatEmptyState","enableIntegrations","useFlag","enableBreakdown","Tabs","activeKey","onSelect","_e","Tab","eventKey","TabTitleIcon","TabTitleText","PageHeader","PageHeaderTitle","applicationTypes","application_type_id","join","selectedType","wizardInitialState","wizardInitialValues","initialValues","initialState","stateDispatch","entitiesLoaded","screenSize","useScreenSize","pageSize","fetchingError","paginationClicked","onSetPage","page","maximumPageNumber","Math","ceil","max","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","filteredSourceTypes","addSourceText","noPermissionsText","actionsConfig","isSmallScreen","dropdownProps","position","AppLink","tooltipProps","hasSomeFilter","entries","_key","Array","isArray","showEmptyState","showInfoCards","mainContent","AsyncComponent","appName","module","PrimaryToolbar","pagination","tabIndex","filterConfig","items","filterValues","onChange","event","selectedValue","checked","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips","exportConfig","data","source","r","formatSource","JSON","stringify","Date","toISOString","Suspense","fallback","Outlet","context","onClose","afterSuccess","hideSourcesButton","submitCallback","now","location","pathname","split","pop","isErrored","activeStep","activeStepIndex","maxStepIndex","prevSteps","registeredFieldsHistory","wizardState","values","actionLinks","AlertActionLink","computeSourceStatus","createdSource","error","availability_status_error","endpoint","checkSubmit","initialWizardState","Section","CloudCards","ErrorState","statuses","authentications","every","status","filterVendorAppTypes","supported_source_types","hiddenTypes","filterVendorTypes","showHidden","schema"],"sourceRoot":""}