{"version":3,"sources":["webpack:///./src/components/SourcesTable/EmptyStateTable.js","webpack:///./src/components/SourcesTable/SourcesTable.js","webpack:///./src/pages/Sources/helpers.js","webpack:///./src/hooks/useScreen.js","webpack:///./src/components/TilesShared/ImageWithPlaceholder.js","webpack:///./src/components/TilesShared/DisabledTile.js","webpack:///./src/components/TilesShared/TilesArray.js","webpack:///./src/components/CloudTiles/CloudTiles.js","webpack:///./src/components/CloudTiles/CloudEmptyState.js","webpack:///./src/components/RedHatTiles/RedHatTiles.js","webpack:///./src/components/RedHatTiles/RedHatEmptyState.js","webpack:///./src/components/TabNavigation.js","webpack:///./src/components/SourcesHeader.js","webpack:///./src/utilities/formatValueToExport.js","webpack:///./src/pages/Sources.js","webpack:///./src/utilities/generateCSV.js","webpack:///./src/utilities/generateJSON.js","webpack:///./src/utilities/filterTypes.js"],"names":["intl","useIntl","dispatch","useDispatch","Bullseye","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","formatMessage","id","defaultMessage","EmptyStateBody","Button","onClick","clearFilters","itemToCells","item","columns","sourceTypes","appTypes","filter","column","title","hidden","map","col","formatter","value","renderSources","entities","removingSources","reduce","acc","isDeleting","includes","originalName","name","isOpen","expanded","cells","disableActions","prepareColumnsCells","transforms","wrappable","sortable","reducer","state","payload","actionResolver","push","isOrgAdmin","rowData","disabledProps","disabledTooltipProps","actions","paused_at","description","_ev","_i","resumeSource","component","pauseSource","replaceRouteId","routes","useHistory","loaded","useIsLoaded","writePermissions","useHasWritePermissions","useSelector","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","sortBy","sortDirection","numberOfEntities","reduxDispatch","notSortable","useReducer","sourcesColumns","rows","isLoaded","refreshSources","useEffect","refreshColumns","shownRows","heightAuto","props","colSpan","COLUMN_COUNT","className","Table","gridBreakPoint","aria-label","onSort","_event","key","direction","sortEntities","index","cell","indexOf","undefined","rowWrapper","RowWrapperLoader","TableHeader","TableBody","debouncedFiltering","awesomeDebounce","refresh","afterSuccessLoadParameters","pageNumber","prepareSourceTypeSelection","label","product_name","sort","a","b","localeCompare","prepareApplicationTypeSelection","display_name","setFilter","filterSources","prepareChips","filterValue","Object","keys","length","source_type_id","category","chips","sourceType","find","type","applications","appType","availability_status","AVAILABLE","chipsFormatters","Boolean","loadedTypes","types","variants","getVariant","width","window","innerWidth","ImageWithPlaceholder","src","rest","useState","setLoaded","height","onLoad","style","display","propTypes","PropTypes","tooltip","disabledMessage","Tooltip","content","Tile","isDisabled","TilesArray","setSelectedType","mapper","activeVendor","hasWritePermissions","openWizard","TileComponent","DisabledTile","filterVendorTypes","amazon","isStacked","alt","google","azure","CloudEmptyState","Card","CardTitle","CardBody","Text","CardFooter","chunks","href","target","rel","openshift","RedHatEmptyState","Tabs","activeKey","onSelect","_e","setActiveVendor","Tab","eventKey","CLOUD_VENDOR","TabTitleIcon","TabTitleText","REDHAT_VENDOR","SourcesHeader","PageHeader","PageHeaderTitle","React","applicationTypes","application_type_id","join","SourceRemoveModal","lazy","AddSourceWizard","then","module","default","initialState","selectedType","wizardInitialState","wizardInitialValues","initialValues","setVariant","prev","stateDispatch","entitiesLoaded","history","screenSize","useRef","handleResize","newVariant","current","addEventListener","removeEventListener","pageSize","fetchingError","paginationClicked","onSetPage","page","pageAndSize","maximumPageNumber","Math","ceil","max","actionsConfig","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","filteredSourceTypes","addSourceText","noPermissionsText","dropdownProps","position","to","Link","hasSomeFilter","entries","Array","isArray","showEmptyState","showInfoCards","Suspense","fallback","CustomRoute","exact","route","Component","componentProps","onClose","afterSuccess","source","loadEntities","hideSourcesButton","submitCallback","Date","now","location","pathname","split","pop","isErrored","wizardState","activeStep","activeStepIndex","maxStepIndex","prevSteps","registeredFieldsHistory","addMessage","values","actionLinks","AlertActionLink","removeMessage","computeSourceStatus","createdSource","error","availability_status_error","endpoint","bold","checkSubmit","initialWizardState","Section","CloudCards","ErrorState","PrimaryToolbar","pagination","tabIndex","filterConfig","items","filterValues","onChange","filterVendorAppTypes","event","_value","selectedValue","checked","UNAVAILABLE","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips","exportConfig","data","formatValueToExport","r","generateCSV","formatSource","JSON","stringify","generateJSON","downloadFile","toISOString","hiddenTypes","SATELLITE_NAME","ANSIBLE_TOWER_NAME","showHidden","vendor","schema","authentication"],"mappings":"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","file":"js/sourcesPage.4c437f597bae6a8846be.js","sourcesContent":["import React from 'react';\n\nimport { Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody, Bullseye, Title } from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.small}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundTitle',\n            defaultMessage: 'No sources found',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundDescription',\n            defaultMessage: 'No sources match the filter criteria. Remove all filters or clear all filters to show sources.',\n          })}\n        </EmptyStateBody>\n        <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n          {intl.formatMessage({\n            id: 'sources.clearAllFilters',\n            defaultMessage: 'Clear all filters',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default EmptyStateTable;\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, sortable, wrappable } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\n\nimport { pauseSource, resumeSource, sortEntities } from '../../redux/sources/actions';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { sourcesColumns, COLUMN_COUNT } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { replaceRouteId, routes } from '../../Routes';\nimport disabledTooltipProps from '../../utilities/disabledTooltipProps';\n\nexport const itemToCells = (item, columns, sourceTypes, appTypes) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((col) => ({\n      title: col.formatter\n        ? col.formatter(item[col.value], item, {\n            sourceTypes,\n            appTypes,\n          })\n        : item[col.value] || '',\n    }));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes, removingSources) =>\n  entities\n    .filter(({ hidden }) => !hidden)\n    .reduce((acc, item) => {\n      const isDeleting = removingSources.includes(item.id);\n\n      return [\n        ...acc,\n        {\n          ...item,\n          originalName: item.name,\n          isOpen: !!item.expanded,\n          cells: itemToCells(item, columns, sourceTypes, appTypes),\n          disableActions: isDeleting,\n          isDeleting,\n        },\n      ];\n    }, []);\n\nexport const prepareColumnsCells = (columns) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((column) => ({\n      title: column.title || '',\n      value: column.value,\n      hidden: column.hidden,\n      transforms: [wrappable],\n      ...(column.sortable && { transforms: [sortable, wrappable] }),\n    }));\n\nconst reducer = (state, payload) => ({ ...state, ...payload });\n\nconst initialState = (columns) => ({\n  rows: [],\n  sortBy: {},\n  isLoaded: false,\n  cells: prepareColumnsCells(columns),\n});\n\nexport const actionResolver = (intl, push, isOrgAdmin, dispatch) => (rowData) => {\n  const disabledProps = disabledTooltipProps(intl);\n  const actions = [];\n\n  if (rowData.paused_at) {\n    actions.push({\n      title: intl.formatMessage({\n        id: 'sources.resume',\n        defaultMessage: 'Resume',\n      }),\n      description: intl.formatMessage({\n        id: 'sources.resume.description',\n        defaultMessage: 'Unpause data collection for this source',\n      }),\n      onClick: (_ev, _i, { id }) => dispatch(resumeSource(id, rowData.originalName, intl)),\n      ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n    });\n  } else {\n    actions.push({\n      title: intl.formatMessage({\n        id: 'sources.pause',\n        defaultMessage: 'Pause',\n      }),\n      description: intl.formatMessage({\n        id: 'sources.pause.description',\n        defaultMessage: 'Temporarily disable data collection',\n      }),\n      onClick: (_ev, _i, { id }) => dispatch(pauseSource(id, rowData.originalName, intl)),\n      ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n    });\n  }\n\n  actions.push({\n    title: intl.formatMessage({\n      id: 'sources.remove',\n      defaultMessage: 'Remove',\n    }),\n    description: intl.formatMessage({\n      id: 'sources.remove.description',\n      defaultMessage: 'Permanently delete this source and all collected data',\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesRemove.path, id)),\n    ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n  });\n\n  actions.push({\n    title: !rowData.paused_at\n      ? intl.formatMessage({\n          id: 'sources.edit',\n          defaultMessage: 'Edit',\n        })\n      : intl.formatMessage({\n          id: 'sources.viewDetails',\n          defaultMessage: 'View details',\n        }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesDetail.path, id)),\n    ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n  });\n\n  return actions;\n};\n\nconst SourcesTable = () => {\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const loaded = useIsLoaded();\n  const writePermissions = useHasWritePermissions();\n\n  const {\n    appTypes,\n    entities,\n    sourceTypes,\n    sourceTypesLoaded,\n    appTypesLoaded,\n    sortBy,\n    sortDirection,\n    numberOfEntities,\n    removingSources,\n  } = useSelector(({ sources }) => sources, shallowEqual);\n  const reduxDispatch = useDispatch();\n\n  const notSortable = numberOfEntities === 0 || !loaded;\n\n  const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n  const refreshColumns = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  const refreshSources = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      rows: renderSources(entities, columns, sourceTypes, appTypes, removingSources),\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  useEffect(() => {\n    if (loaded && sourceTypesLoaded && appTypesLoaded) {\n      dispatch({ isLoaded: true });\n      refreshSources();\n    } else {\n      dispatch({ isLoaded: false });\n      refreshColumns();\n    }\n  }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n  useEffect(() => {\n    if (state.isLoaded) {\n      refreshSources();\n    }\n  }, [entities, removingSources]);\n\n  let shownRows = state.rows;\n  if (numberOfEntities === 0 && state.isLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: COLUMN_COUNT },\n            title: <EmptyStateTable />,\n          },\n        ],\n      },\n    ];\n  } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: {\n              colSpan: COLUMN_COUNT,\n              className: 'sources-placeholder-row',\n            },\n            title: <PlaceHolderTable />,\n          },\n        ],\n      },\n    ];\n  }\n\n  return (\n    <Table\n      gridBreakPoint=\"grid-lg\"\n      aria-label={intl.formatMessage({\n        id: 'sources.list',\n        defaultMessage: 'List of Sources',\n      })}\n      onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n      sortBy={{\n        index: state.cells.map((cell) => (cell.hidden ? 'hidden' : cell.value)).indexOf(sortBy),\n        direction: sortDirection,\n      }}\n      rows={shownRows}\n      cells={state.cells}\n      actionResolver={loaded && numberOfEntities > 0 ? actionResolver(intl, push, writePermissions, reduxDispatch) : undefined}\n      rowWrapper={RowWrapperLoader}\n      className={numberOfEntities === 0 && state.isLoaded ? 'ins-c-table-empty-state' : ''}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default SourcesTable;\n","import React from 'react';\nimport awesomeDebounce from 'awesome-debounce-promise';\n\nimport { AlertActionLink } from '@patternfly/react-core';\n\nimport { loadEntities, filterSources, addMessage, removeMessage } from '../../redux/sources/actions';\nimport { replaceRouteId, routes } from '../../Routes';\nimport { AVAILABLE } from '../../views/formatters';\nimport computeSourceStatus from '../../utilities/computeSourceStatus';\nimport { bold } from '../../utilities/intlShared';\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = {\n  pageNumber: 1,\n  sortBy: 'created_at',\n  sortDirection: 'desc',\n};\n\nexport const afterSuccess = (dispatch) => dispatch(loadEntities(afterSuccessLoadParameters));\n\nexport const prepareSourceTypeSelection = (sourceTypes) =>\n  sourceTypes.map(({ id, product_name }) => ({ label: product_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const prepareApplicationTypeSelection = (appTypes) =>\n  appTypes.map(({ id, display_name }) => ({ label: display_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) =>\n  dispatch(\n    filterSources({\n      [column]: value,\n    })\n  );\n\nexport const chipsFormatters = (key, filterValue, sourceTypes, appTypes, intl) =>\n  ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n      category: 'Source Type',\n      key,\n      chips: filterValue[key].map((id) => {\n        const sourceType = sourceTypes.find((type) => type.id === id);\n\n        return { name: sourceType ? sourceType.product_name : id, value: id };\n      }),\n    }),\n    applications: () => ({\n      category: 'Application',\n      key,\n      chips: filterValue[key].map((id) => {\n        const appType = appTypes.find((type) => type.id === id);\n\n        return { name: appType ? appType.display_name : id, value: id };\n      }),\n    }),\n    availability_status: () => ({\n      category: 'Status',\n      key,\n      chips: [\n        {\n          value: filterValue[key][0],\n          name:\n            filterValue[key][0] === AVAILABLE\n              ? intl.formatMessage({\n                  id: 'sources.available',\n                  defaultMessage: 'Available',\n                })\n              : intl.formatMessage({\n                  id: 'sources.unavailable',\n                  defaultMessage: 'Unavailable',\n                }),\n        },\n      ],\n    }),\n  }[key] || (() => ({ name: key })));\n\nexport const prepareChips = (filterValue, sourceTypes, appTypes, intl) =>\n  Object.keys(filterValue)\n    .map((key) =>\n      filterValue[key] && filterValue[key].length > 0\n        ? chipsFormatters(key, filterValue, sourceTypes, appTypes, intl)()\n        : undefined\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n  if (deleteAll) {\n    return Object.keys(filterValue).reduce(\n      (acc, curr) => ({\n        ...acc,\n        [curr]: undefined,\n      }),\n      {}\n    );\n  }\n\n  const chip = chips[0];\n\n  return {\n    ...filterValue,\n    [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined,\n  };\n};\n\nexport const loadedTypes = (types, loaded) => (loaded && types.length > 0 ? types : undefined);\n\nexport const checkSubmit = (state, dispatch, push, intl, stateDispatch) => {\n  const id = `sources-wizard-notification-${Date.now()}`;\n\n  if (location.pathname.split('/').filter(Boolean).pop() !== routes.sourcesNew.path.split('/').pop()) {\n    if (state.isErrored) {\n      const { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory } = state.wizardState;\n\n      dispatch(\n        addMessage({\n          title: intl.formatMessage({\n            id: 'alert.error.title',\n            defaultMessage: 'Error adding source',\n          }),\n          description: intl.formatMessage(\n            {\n              id: 'alert.error.description',\n              defaultMessage:\n                'There was a problem while trying to add source {name}. Please try again. If the error persists, open a support case.',\n            },\n            { name: <b>{state.values.source.name}</b> }\n          ),\n          variant: 'danger',\n          id,\n          actionLinks: (\n            <AlertActionLink\n              onClick={() => {\n                stateDispatch({\n                  type: 'retryWizard',\n                  initialValues: state.values,\n                  initialState: { activeStep, activeStepIndex, maxStepIndex, prevSteps, registeredFieldsHistory },\n                });\n                dispatch(removeMessage(id));\n                push(routes.sourcesNew.path);\n              }}\n            >\n              {intl.formatMessage({\n                id: 'alert.error.link',\n                defaultMessage: 'Retry',\n              })}\n            </AlertActionLink>\n          ),\n        })\n      );\n    } else {\n      switch (computeSourceStatus(state.createdSource)) {\n        case 'unavailable':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.error.title',\n                defaultMessage: 'Source configuration unsuccessful',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'error.notification',\n                  defaultMessage: '{error} [<b>{name}</b>]',\n                },\n                {\n                  error:\n                    state.createdSource.applications?.[0]?.availability_status_error ||\n                    state.createdSource.endpoint?.[0]?.availability_status_error ||\n                    intl.formatMessage({\n                      id: 'wizard.unknownError',\n                      defaultMessage: 'Unknown error',\n                    }),\n                  name: state.createdSource.name,\n                  b: bold,\n                }\n              ),\n              variant: 'danger',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.unavailable.link',\n                    defaultMessage: 'Edit source',\n                  })}\n                </AlertActionLink>\n              ),\n            })\n          );\n          break;\n        case 'timeout':\n          dispatch(\n            addMessage({\n              title: intl.formatMessage({\n                id: 'alert.timeout.title',\n                defaultMessage: 'Source configuration in progress',\n              }),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.timeout.description',\n                  defaultMessage:\n                    'We are still working to confirm credentials for source {name}. To track progress, check the Status column in the Sources table.',\n                },\n                { name: <b>{state.createdSource.name}</b> }\n              ),\n              variant: 'info',\n            })\n          );\n          break;\n        default:\n          dispatch(\n            addMessage({\n              title: intl.formatMessage(\n                {\n                  id: 'alert.success.title',\n                  defaultMessage: '{type} connection successful',\n                },\n                { type: state.sourceTypes.find(({ id }) => id === state.createdSource.source_type_id)?.product_name }\n              ),\n              description: intl.formatMessage(\n                {\n                  id: 'alert.success.description',\n                  defaultMessage: 'Source {name} was successfully added',\n                },\n                { name: <b>{state.createdSource.name}</b> }\n              ),\n              variant: 'success',\n              id,\n              actionLinks: (\n                <AlertActionLink\n                  onClick={() => {\n                    dispatch(removeMessage(id));\n                    push(replaceRouteId(routes.sourcesDetail.path, state.createdSource.id));\n                  }}\n                >\n                  {intl.formatMessage({\n                    id: 'alert.success.link',\n                    defaultMessage: 'View source details',\n                  })}\n                </AlertActionLink>\n              ),\n            })\n          );\n          break;\n      }\n    }\n  }\n};\n","import { useEffect, useRef, useState } from 'react';\n\nexport const variants = ['xs', 'sm', 'md', 'lg', '2xl'];\n\nexport const getVariant = () => {\n  const width = window.innerWidth;\n\n  if (width <= 576) {\n    return variants[0];\n  }\n\n  if (width <= 768) {\n    return variants[1];\n  }\n\n  if (width <= 992) {\n    return variants[2];\n  }\n\n  if (width <= 1200) {\n    return variants[3];\n  }\n\n  return variants[4];\n};\n\nconst useScreen = () => {\n  const [variant, setVariant] = useState(() => getVariant());\n  const prev = useRef(variant);\n\n  useEffect(() => {\n    function handleResize() {\n      const newVariant = getVariant();\n      if (newVariant !== prev.current) {\n        prev.current = newVariant;\n        setVariant(newVariant);\n      }\n    }\n\n    window.addEventListener('resize', handleResize);\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return variant;\n};\n\nexport default useScreen;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Loader } from '../SourcesTable/loaders';\n\nconst ImageWithPlaceholder = ({ src, ...rest }) => {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <React.Fragment>\n      {!loaded && <Loader height=\"40px\" width=\"110px\" {...rest} />}\n      <img src={src} onLoad={() => setLoaded(true)} style={{ display: loaded ? 'initial' : 'none' }} {...rest} />\n    </React.Fragment>\n  );\n};\n\nImageWithPlaceholder.propTypes = {\n  src: PropTypes.string.isRequired,\n};\n\nexport default ImageWithPlaceholder;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Tile, Tooltip } from '@patternfly/react-core';\nimport { disabledMessage } from '../../utilities/disabledTooltipProps';\n\nconst DisabledTile = (props) => {\n  const intl = useIntl();\n\n  const tooltip = disabledMessage(intl);\n\n  return (\n    <Tooltip content={tooltip}>\n      <div className=\"disabled-tile-with-tooltip\">\n        <Tile {...props} isDisabled />\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default DisabledTile;\n","import PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes } from '../../Routes';\n\nimport { Tile } from '@patternfly/react-core';\n\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport DisabledTile from '../TilesShared/DisabledTile';\nimport { filterVendorTypes } from '../../utilities/filterTypes';\n\nconst TilesArray = ({ setSelectedType, mapper }) => {\n  const sourceTypes = useSelector(({ sources }) => sources.sourceTypes, shallowEqual);\n  const activeVendor = useSelector(({ sources }) => sources.activeVendor);\n\n  const { push } = useHistory();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const openWizard = (type) => {\n    setSelectedType(type);\n    push(routes.sourcesNew.path);\n  };\n\n  const TileComponent = hasWritePermissions ? Tile : DisabledTile;\n\n  return sourceTypes\n    .filter(filterVendorTypes(activeVendor))\n    .sort((a, b) => a.product_name.localeCompare(b.product_name))\n    .map(({ name }) => mapper(name, openWizard, TileComponent));\n};\n\nTilesArray.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n  mapper: PropTypes.func.isRequired,\n};\n\nexport default TilesArray;\n","import React from 'react';\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    amazon: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Amazon Web Services\"\n        onClick={() => openWizard('amazon')}\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/aws.svg\"\n            alt=\"aws logo\"\n          />\n        }\n      />\n    ),\n    google: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Google Cloud\"\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        onClick={() => openWizard('google')}\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/google-cloud-short.svg\"\n            alt=\"google logo\"\n          />\n        }\n      />\n    ),\n    azure: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"Microsoft Azure\"\n        onClick={() => openWizard('azure')}\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        icon={\n          <ImageWithPlaceholder\n            className=\"provider-icon pf-u-mb-sm\"\n            src=\"/apps/frontend-assets/partners-icons/microsoft-azure-short.svg\"\n            alt=\"azure logo\"\n          />\n        }\n      />\n    ),\n  }[type]);\n\nconst CloudTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default CloudTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardTitle, CardFooter, Text } from '@patternfly/react-core';\n\nimport CloudTiles from './CloudTiles';\n\nconst CLOUD_CATALOG_HREF = 'https://catalog.redhat.com/cloud';\n\nconst CloudEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"ins-c-sources__cloud-empty-state-card pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'cloud.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your public clouds',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'cloud.emptystate.cardDescription',\n            defaultMessage: 'Select an available provider.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <CloudTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n      <CardFooter className=\"cloud-footer\">\n        <Text className=\"catalog-link pf-u-mt-lg\">\n          {intl.formatMessage(\n            {\n              id: 'cloud.emptystate.catalogLink',\n              defaultMessage: 'Looking for a different provider? <a>See all Red Hat Certified Cloud and Service Providers</a>',\n            },\n            {\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href={CLOUD_CATALOG_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            }\n          )}\n        </Text>\n      </CardFooter>\n    </Card>\n  );\n};\n\nCloudEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default CloudEmptyState;\n","import React from 'react';\n\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport TilesArray from '../TilesShared/TilesArray';\n\nconst icon = (\n  <ImageWithPlaceholder className=\"redhat-icon\" src=\"/apps/frontend-assets/red-hat-logos/stacked.svg\" alt=\"red hat logo\" />\n);\n\nconst mapper = (type, openWizard, TileComponent) =>\n  ({\n    openshift: (\n      <TileComponent\n        isStacked\n        key={type}\n        title=\"OpenShift Container Platfrom\"\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        onClick={() => openWizard('openshift')}\n        icon={icon}\n      />\n    ),\n  }[type]);\n\nconst RedHatTiles = (props) => <TilesArray {...props} mapper={mapper} />;\n\nexport default RedHatTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, CardTitle, Text } from '@patternfly/react-core';\n\nimport RedHatTiles from './RedHatTiles';\n\nconst RedHatEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"ins-c-sources__cloud-empty-state-card pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'redhat.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your Red Hat applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'redhat.emptystate.cardDescription',\n            defaultMessage: 'Select an available application.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <RedHatTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nRedHatEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default RedHatEmptyState;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Tabs, Tab, TabTitleIcon, TabTitleText } from '@patternfly/react-core';\nimport RedhatIcon from '@patternfly/react-icons/dist/esm/icons/redhat-icon';\nimport CloudIcon from '@patternfly/react-icons/dist/esm/icons/cloud-icon';\n\nimport { setActiveVendor } from '../redux/sources/actions';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\n\nconst TabNavigation = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const activeVendor = useSelector(({ sources }) => sources.activeVendor);\n\n  return (\n    <Tabs activeKey={activeVendor} onSelect={(_e, key) => dispatch(setActiveVendor(key))} className=\"pf-u-mt-md\">\n      <Tab\n        eventKey={CLOUD_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <CloudIcon />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.cloudSources', defaultMessage: 'Cloud sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n      <Tab\n        eventKey={REDHAT_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <RedhatIcon />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.redhatSources', defaultMessage: 'Red Hat sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n    </Tabs>\n  );\n};\n\nexport default TabNavigation;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport TabNavigation from './TabNavigation';\n\nconst SourcesHeader = () => {\n  const intl = useIntl();\n\n  return (\n    <PageHeader className=\"pf-u-pb-0\">\n      <PageHeaderTitle\n        title={intl.formatMessage({\n          id: 'sources.sources',\n          defaultMessage: 'Sources',\n        })}\n      />\n      <TabNavigation />\n    </PageHeader>\n  );\n};\n\nexport default React.memo(SourcesHeader);\n","const formatValueToExport = (key, value, applicationTypes, sourceTypes) => {\n  switch (key) {\n    case 'applications':\n      return value\n        .map(({ application_type_id }) => applicationTypes.find(({ id }) => id === application_type_id)?.display_name)\n        .join(',');\n    case 'source_type_id':\n      return sourceTypes.find(({ id }) => id === value)?.product_name;\n    default:\n      return value;\n  }\n};\n\nexport default formatValueToExport;\n","import React, { useEffect, lazy, Suspense, useReducer } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\n\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { Section } from '@redhat-cloud-services/frontend-components/Section';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\n\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nimport { filterSources, pageAndSize } from '../redux/sources/actions';\nimport SourcesTable from '../components/SourcesTable/SourcesTable';\nimport { routes } from '../Routes';\n\nconst SourceRemoveModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"remove\" */\n    '../components/SourceRemoveModal/SourceRemoveModal'\n  )\n);\nconst AddSourceWizard = lazy(() =>\n  import(/* webpackChunkName: \"addSource\" */ '../components/addSourceWizard/index').then((module) => ({\n    default: module.AddSourceWizard,\n  }))\n);\n\nimport {\n  prepareChips,\n  removeChips,\n  setFilter,\n  debouncedFiltering,\n  prepareSourceTypeSelection,\n  afterSuccess,\n  loadedTypes,\n  prepareApplicationTypeSelection,\n  checkSubmit,\n} from './Sources/helpers';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport useScreen, { variants } from '../hooks/useScreen';\nimport { useHasWritePermissions } from '../hooks/useHasWritePermissions';\nimport CustomRoute from '../components/CustomRoute/CustomRoute';\nimport { PaginationLoader } from '../components/SourcesTable/loaders';\nimport CloudCards from '../components/CloudTiles/CloudCards';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\nimport CloudEmptyState from '../components/CloudTiles/CloudEmptyState';\nimport { AVAILABLE, UNAVAILABLE } from '../views/formatters';\nimport RedHatEmptyState from '../components/RedHatTiles/RedHatEmptyState';\nimport { filterVendorTypes } from '../utilities/filterTypes';\nimport { filterVendorAppTypes } from '../utilities/filterApps';\nimport SourcesHeader from '../components/SourcesHeader';\nimport generateCSV from '../utilities/generateCSV';\nimport generateJSON from '../utilities/generateJSON';\n\nconst initialState = {\n  filter: undefined,\n  selectedType: undefined,\n  wizardInitialState: undefined,\n  wizardInitialValues: undefined,\n};\n\nconst reducer = (state, { type, value, selectedType, initialValues, initialState }) => {\n  switch (type) {\n    case 'setFilterValue':\n      return { ...state, filter: value };\n    case 'setSelectedType':\n      return { ...state, selectedType };\n    case 'retryWizard':\n      return { ...state, wizardInitialState: initialState, wizardInitialValues: initialValues };\n    case 'closeWizard':\n      return { ...state, selectedType: undefined, wizardInitialState: undefined, wizardInitialValues: undefined };\n  }\n};\n\nconst SourcesPage = () => {\n  const [{ filter, selectedType, wizardInitialState, wizardInitialValues }, stateDispatch] = useReducer(reducer, initialState);\n\n  const entitiesLoaded = useIsLoaded();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const history = useHistory();\n  const intl = useIntl();\n\n  const screenSize = useScreen();\n\n  const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n  const {\n    filterValue,\n    numberOfEntities,\n    appTypes,\n    pageSize,\n    pageNumber,\n    fetchingError,\n    sourceTypes,\n    paginationClicked,\n    appTypesLoaded,\n    sourceTypesLoaded,\n    activeVendor,\n    entities,\n  } = sources;\n\n  const loaded = entitiesLoaded && sourceTypesLoaded && appTypesLoaded;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (filter !== filterValue.name) {\n      stateDispatch({ type: 'setFilterValue', value: filterValue.name });\n    }\n  }, [filterValue.name]);\n\n  const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n  const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n  const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n  useEffect(() => {\n    if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n      onSetPage({}, maximumPageNumber);\n    }\n  });\n\n  const paginationConfig = {\n    itemCount: numberOfEntities,\n    page: pageNumber,\n    perPage: pageSize,\n    onSetPage,\n    onPerPageSelect,\n    className: 'top-pagination',\n  };\n\n  const paginationConfigBottom = {\n    ...paginationConfig,\n    dropDirection: 'up',\n    variant: 'bottom',\n    isCompact: false,\n    className: 'bottom-pagination',\n  };\n\n  const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n  const filteredSourceTypes = sourceTypes.filter(filterVendorTypes(activeVendor, true));\n\n  const addSourceText = intl.formatMessage({\n    id: 'sources.addSource',\n    defaultMessage: 'Add source',\n  });\n  const noPermissionsText = intl.formatMessage({\n    id: 'sources.notAdminAddButton',\n    defaultMessage: 'To add a source, you must be granted write permissions from your Organization Administrator.',\n  });\n\n  let actionsConfig;\n  if (variants.indexOf(screenSize) <= variants.indexOf('sm')) {\n    actionsConfig = {\n      dropdownProps: { position: 'right' },\n      actions: hasWritePermissions\n        ? [{ label: addSourceText, props: { to: routes.sourcesNew.path, component: Link } }]\n        : [\n            {\n              label: addSourceText,\n              props: {\n                component: 'div',\n                isDisabled: true,\n                tooltip: noPermissionsText,\n                className: 'ins-c-sources__disabled-drodpown-item',\n              },\n            },\n          ],\n    };\n  }\n\n  const mainContent = () => (\n    <React.Fragment>\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n        actionsConfig={\n          actionsConfig || {\n            dropdownProps: { position: 'right' },\n            actions: hasWritePermissions\n              ? [\n                  <Link to={routes.sourcesNew.path} key=\"addSourceButton\">\n                    <Button variant=\"primary\" id=\"addSourceButton\">\n                      {addSourceText}\n                    </Button>\n                  </Link>,\n                ]\n              : [\n                  <Tooltip content={noPermissionsText} key=\"addSourceButton\">\n                    <span tabIndex=\"0\">\n                      <Button variant=\"primary\" isDisabled id=\"addSourceButton\">\n                        {addSourceText}\n                      </Button>\n                    </span>\n                  </Tooltip>,\n                ],\n          }\n        }\n        filterConfig={{\n          items: [\n            {\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              filterValues: {\n                'aria-label': intl.formatMessage({\n                  id: 'sources.filterByName',\n                  defaultMessage: 'Filter by name',\n                }),\n                onChange: (_event, value) => {\n                  stateDispatch({ type: 'setFilterValue', value });\n                  debouncedFiltering(() => setFilter('name', value, dispatch));\n                },\n                value: filter,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.type',\n                defaultMessage: 'Type',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('source_type_id', value, dispatch),\n                items: prepareSourceTypeSelection(filteredSourceTypes),\n                value: filterValue.source_type_id,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.application',\n                defaultMessage: 'Application',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('applications', value, dispatch),\n                items: prepareApplicationTypeSelection(\n                  appTypes?.filter(filterVendorAppTypes(filteredSourceTypes, activeVendor)) || []\n                ),\n                value: filterValue.applications,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.availabilityStatus',\n                defaultMessage: 'Status',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (event, _value, selectedValue) =>\n                  setFilter('availability_status', event.target.checked ? [selectedValue] : [], dispatch),\n                items: [\n                  { label: intl.formatMessage({ id: 'sources.available', defaultMessage: 'Available' }), value: AVAILABLE },\n                  {\n                    label: intl.formatMessage({ id: 'sources.unavailable', defaultMessage: 'Unavailable' }),\n                    value: UNAVAILABLE,\n                  },\n                ],\n                value: filterValue.availability_status,\n              },\n            },\n          ],\n        }}\n        activeFiltersConfig={{\n          filters: prepareChips(filterValue, sourceTypes, appTypes, intl),\n          onDelete: (_event, chips, deleteAll) => dispatch(filterSources(removeChips(chips, filterValue, deleteAll))),\n        }}\n        exportConfig={{\n          isDisabled: !loaded,\n          onSelect: (_e, type) => {\n            const data =\n              type === 'csv'\n                ? generateCSV(entities, intl, appTypes, sourceTypes)\n                : generateJSON(entities, intl, appTypes, sourceTypes);\n            downloadFile(data, `sources-${new Date().toISOString()}`, type);\n          },\n        }}\n      />\n      <SourcesTable />\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfigBottom : undefined}\n      />\n    </React.Fragment>\n  );\n\n  const hasSomeFilter =\n    Object.entries(filterValue)\n      .map(([_key, value]) => value && (!Array.isArray(value) || (Array.isArray(value) && value.length > 0)))\n      .filter(Boolean).length > 0;\n\n  const showEmptyState = loaded && numberOfEntities === 0 && !hasSomeFilter;\n  const showInfoCards = activeVendor === CLOUD_VENDOR && !showEmptyState;\n\n  const setSelectedType = (selectedType) => stateDispatch({ type: 'setSelectedType', selectedType });\n\n  return (\n    <React.Fragment>\n      <Suspense fallback={null}>\n        <CustomRoute exact route={routes.sourcesRemove} Component={SourceRemoveModal} />\n        <CustomRoute\n          exact\n          route={routes.sourcesNew}\n          Component={AddSourceWizard}\n          componentProps={{\n            sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n            applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n            isOpen: true,\n            onClose: () => {\n              stateDispatch({ type: 'closeWizard' });\n              history.push(routes.sources.path);\n            },\n            afterSuccess: (source) => afterSuccess(dispatch, source),\n            hideSourcesButton: true,\n            selectedType,\n            submitCallback: (state) => checkSubmit(state, dispatch, history.push, intl, stateDispatch),\n            initialValues: wizardInitialValues,\n            initialWizardState: wizardInitialState,\n            activeVendor,\n          }}\n        />\n      </Suspense>\n      <SourcesHeader />\n      <Section type=\"content\">\n        {showInfoCards && <CloudCards />}\n        {fetchingError && <ErrorState />}\n        {!fetchingError && showEmptyState && activeVendor === CLOUD_VENDOR && (\n          <CloudEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && showEmptyState && activeVendor === REDHAT_VENDOR && (\n          <RedHatEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && !showEmptyState && mainContent()}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nexport default SourcesPage;\n","import { sourcesColumns } from '../views/sourcesViewDefinition';\nimport formatValueToExport from './formatValueToExport';\n\nconst generateCSV = (entities, intl, applicationTypes, sourceTypes) => {\n  const columns = sourcesColumns(intl).filter(({ hidden }) => !hidden);\n\n  const rows = [\n    columns.map(({ title }) => title),\n    ...entities.map((source) =>\n      columns\n        .map(({ value }) => formatValueToExport(value, source[value], applicationTypes, sourceTypes))\n        .map((value) => (value?.includes(',') ? `\"${value}\"` : value))\n    ),\n  ];\n\n  return rows.map((r) => r.join(',')).join('\\n');\n};\n\nexport default generateCSV;\n","import { sourcesColumns } from '../views/sourcesViewDefinition';\nimport formatValueToExport from './formatValueToExport';\n\nconst formatSource = (columns, source, applicationTypes, sourceTypes) =>\n  columns.reduce(\n    (acc, curr) => ({ ...acc, [curr.title]: formatValueToExport(curr.value, source[curr.value], applicationTypes, sourceTypes) }),\n    {}\n  );\n\nconst generateJSON = (entities, intl, applicationTypes, sourceTypes) => {\n  const columns = sourcesColumns(intl).filter(({ hidden }) => !hidden);\n\n  const rows = entities.map((source) => formatSource(columns, source, applicationTypes, sourceTypes));\n\n  return JSON.stringify(rows, null, 2);\n};\n\nexport default generateJSON;\n","import { ANSIBLE_TOWER_NAME, CLOUD_VENDOR, REDHAT_VENDOR, SATELLITE_NAME } from './constants';\n\nconst filterTypes = (type) => type.schema?.authentication && type.schema?.endpoint;\n\nconst hiddenTypes = [SATELLITE_NAME, ANSIBLE_TOWER_NAME];\n\nexport const filterVendorTypes =\n  (activeVendor, showHidden) =>\n  ({ vendor, name }) => {\n    if (activeVendor === CLOUD_VENDOR) {\n      return vendor !== REDHAT_VENDOR;\n    } else {\n      if (showHidden) {\n        return vendor === REDHAT_VENDOR;\n      } else {\n        return vendor === REDHAT_VENDOR && !hiddenTypes.includes(name);\n      }\n    }\n  };\n\nexport default filterTypes;\n"],"sourceRoot":""}