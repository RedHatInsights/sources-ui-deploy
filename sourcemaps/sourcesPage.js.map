{"version":3,"sources":["webpack:///./src/components/SourcesTable/EmptyStateTable.js","webpack:///./src/components/SourcesTable/SourcesTable.js","webpack:///./src/components/SourcesErrorState.js","webpack:///./src/pages/Sources/helpers.js","webpack:///./src/components/TabNavigation.js","webpack:///./src/components/CloudTiles/CloudEmptyState.js","webpack:///./src/components/RedHatTiles/RedHatTiles.js","webpack:///./src/components/RedHatTiles/RedHatEmptyState.js","webpack:///./src/pages/Sources.js","webpack:///./src/hooks/useSource.js","webpack:///./src/hooks/useIsLoaded.js","webpack:///./src/components/RedirectNoId/RedirectNoId.js","webpack:///./src/components/RedirectNoWriteAccess/RedirectNoWriteAccess.js","webpack:///./src/components/CustomRoute/CustomRoute.js"],"names":["EmptyStateTable","intl","useIntl","dispatch","useDispatch","Bullseye","EmptyState","variant","EmptyStateVariant","small","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","formatMessage","id","defaultMessage","EmptyStateBody","Button","onClick","clearFilters","itemToCells","item","columns","sourceTypes","appTypes","filter","column","title","hidden","map","col","formatter","value","renderSources","entities","removingSources","reduce","acc","isDeleting","includes","isOpen","expanded","cells","disableActions","prepareColumnsCells","transforms","wrappable","sortable","reducer","state","payload","actionResolver","push","isOrgAdmin","rowData","disabledProps","tooltip","isDisabled","className","actions","imported","splice","_ev","_i","replaceRouteId","routes","sourcesDetail","path","component","insertEditAction","sourcesRemove","SourcesTable","useHistory","loaded","useIsLoaded","writePermissions","useHasWritePermissions","useSelector","sources","shallowEqual","sourceTypesLoaded","appTypesLoaded","sortBy","sortDirection","numberOfEntities","reduxDispatch","notSortable","useReducer","sourcesColumns","rows","isLoaded","refreshSources","useEffect","refreshColumns","shownRows","heightAuto","props","colSpan","COLUMN_COUNT","Table","gridBreakPoint","aria-label","onSort","_event","key","direction","sortEntities","index","cell","indexOf","undefined","rowWrapper","RowWrapperLoader","SourcesErrorState","ExclamationCircleIcon","color","a","chunks","Text","href","target","rel","window","location","debouncedFiltering","awesomeDebounce","refresh","afterSuccessLoadParameters","pageNumber","prepareSourceTypeSelection","activeVendor","vendor","CLOUD_VENDOR","CLOUD_VENDORS","REDHAT_VENDOR","label","product_name","sort","b","localeCompare","prepareApplicationTypeSelection","display_name","setFilter","filterSources","prepareChips","filterValue","Object","keys","length","name","source_type_id","category","chips","sourceType","find","type","applications","appType","availability_status","AVAILABLE","chipsFormatters","Boolean","loadedTypes","types","TabNavigation","Tabs","activeKey","onSelect","_e","setActiveVendor","isFilled","Tab","eventKey","Fragment","TabTitleIcon","TabTitleText","CloudEmptyState","setSelectedType","Card","CardTitle","CardBody","CloudTiles","CardFooter","ProvidersLink","propTypes","PropTypes","func","isRequired","RedHatTiles","hasWritePermissions","openWizard","sourcesNew","TileComponent","Tile","DisabledTile","ImageWithPlaceholder","src","alt","isStacked","RedHatEmptyState","SourceRemoveModal","lazy","AddSourceWizard","then","module","default","SourcesPage","useState","setFilterValue","selectedType","entitiesLoaded","history","pageSize","fetchingError","paginationClicked","onSetPage","page","pageAndSize","maximumPageNumber","Math","ceil","max","paginationConfig","itemCount","perPage","onPerPageSelect","paginationConfigBottom","dropDirection","isCompact","showPaginationLoader","hasSomeFilter","entries","Array","isArray","showEmptyState","showInfoCards","fallback","CustomRoute","exact","route","Component","componentProps","applicationTypes","onClose","afterSuccess","source","loadEntities","hideSourcesButton","PageHeader","Section","CloudCards","PrimaryToolbar","pagination","actionsConfig","to","Tooltip","content","tabIndex","filterConfig","items","filterValues","onChange","filterVendorAppTypes","event","_value","selectedValue","checked","UNAVAILABLE","activeFiltersConfig","filters","onDelete","deleteAll","curr","chip","removeChips","useSource","useParams","RedirectNoId","applicationIsLoaded","setIsApplicationLoaded","doLoadSource","addHiddenSource","addMessage","RedirectNoWriteAccess","description","CustomRouteInternal","children","redirectNoId","writeAccess","shape","string","bool","node","any","oneOfType","object"],"mappings":"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","file":"js/sourcesPage.8d40e562acf658ca86e7.js","sourcesContent":["import React from 'react';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\n\nimport { clearFilters } from '../../redux/sources/actions';\n\nconst EmptyStateTable = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.small}>\n        <EmptyStateIcon icon={SearchIcon} />\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundTitle',\n            defaultMessage: 'No sources found',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage({\n            id: 'sources.noResultsFoundDescription',\n            defaultMessage: 'No sources match the filter criteria. Remove all filters or clear all filters to show sources.',\n          })}\n        </EmptyStateBody>\n        <Button variant=\"link\" onClick={() => dispatch(clearFilters())}>\n          {intl.formatMessage({\n            id: 'sources.clearAllFilters',\n            defaultMessage: 'Clear all filters',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default EmptyStateTable;\n","import React, { useEffect, useReducer } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, sortable, wrappable } from '@patternfly/react-table';\nimport { useIntl } from 'react-intl';\n\nimport { sortEntities } from '../../redux/sources/actions';\nimport { PlaceHolderTable, RowWrapperLoader } from './loaders';\nimport { sourcesColumns, COLUMN_COUNT } from '../../views/sourcesViewDefinition';\nimport EmptyStateTable from './EmptyStateTable';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { replaceRouteId, routes } from '../../Routes';\n\nconst itemToCells = (item, columns, sourceTypes, appTypes) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((col) => ({\n      title: col.formatter\n        ? col.formatter(item[col.value], item, {\n            sourceTypes,\n            appTypes,\n          })\n        : item[col.value] || '',\n    }));\n\nconst renderSources = (entities, columns, sourceTypes, appTypes, removingSources) =>\n  entities\n    .filter(({ hidden }) => !hidden)\n    .reduce((acc, item) => {\n      const isDeleting = removingSources.includes(item.id);\n\n      return [\n        ...acc,\n        {\n          ...item,\n          isOpen: !!item.expanded,\n          cells: itemToCells(item, columns, sourceTypes, appTypes),\n          disableActions: isDeleting,\n          isDeleting,\n        },\n      ];\n    }, []);\n\nexport const prepareColumnsCells = (columns) =>\n  columns\n    .filter((column) => column.title || column.hidden)\n    .map((column) => ({\n      title: column.title || '',\n      value: column.value,\n      hidden: column.hidden,\n      transforms: [wrappable],\n      ...(column.sortable && { transforms: [sortable, wrappable] }),\n    }));\n\nconst reducer = (state, payload) => ({ ...state, ...payload });\n\nconst initialState = (columns) => ({\n  rows: [],\n  sortBy: {},\n  isLoaded: false,\n  cells: prepareColumnsCells(columns),\n});\n\nexport const insertEditAction = (actions, intl, push, isOrgAdmin, disabledProps) =>\n  actions.splice(1, 0, {\n    title: intl.formatMessage({\n      id: 'sources.edit',\n      defaultMessage: 'Edit',\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesDetail.path, id)),\n    ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n  });\n\nexport const actionResolver = (intl, push, isOrgAdmin) => (rowData) => {\n  const tooltip = intl.formatMessage({\n    id: 'sources.notAdminButton',\n    defaultMessage: 'To perform this action, you must be granted write permissions from your Organization Administrator.',\n  });\n\n  const disabledProps = {\n    tooltip,\n    isDisabled: true,\n    className: 'ins-c-sources__disabled-drodpown-item',\n  };\n\n  const actions = [];\n\n  const isSourceEditable = !rowData.imported;\n\n  if (isSourceEditable) {\n    insertEditAction(actions, intl, push, isOrgAdmin, disabledProps);\n  }\n\n  actions.push({\n    title: intl.formatMessage({\n      id: 'sources.remove',\n      defaultMessage: 'Remove',\n    }),\n    onClick: (_ev, _i, { id }) => push(replaceRouteId(routes.sourcesRemove.path, id)),\n    ...(!isOrgAdmin ? disabledProps : { component: 'button' }),\n  });\n\n  return actions;\n};\n\nconst SourcesTable = () => {\n  const { push } = useHistory();\n  const intl = useIntl();\n\n  const loaded = useIsLoaded();\n  const writePermissions = useHasWritePermissions();\n\n  const {\n    appTypes,\n    entities,\n    sourceTypes,\n    sourceTypesLoaded,\n    appTypesLoaded,\n    sortBy,\n    sortDirection,\n    numberOfEntities,\n    removingSources,\n  } = useSelector(({ sources }) => sources, shallowEqual);\n  const reduxDispatch = useDispatch();\n\n  const notSortable = numberOfEntities === 0 || !loaded;\n\n  const [state, dispatch] = useReducer(reducer, initialState(sourcesColumns(intl, notSortable)));\n\n  const refreshColumns = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  const refreshSources = () => {\n    const columns = sourcesColumns(intl, notSortable);\n\n    return dispatch({\n      rows: renderSources(entities, columns, sourceTypes, appTypes, removingSources),\n      cells: prepareColumnsCells(columns),\n    });\n  };\n\n  useEffect(() => {\n    if (loaded && sourceTypesLoaded && appTypesLoaded) {\n      dispatch({ isLoaded: true });\n      refreshSources();\n    } else {\n      dispatch({ isLoaded: false });\n      refreshColumns();\n    }\n  }, [loaded, sourceTypesLoaded, appTypesLoaded]);\n\n  useEffect(() => {\n    if (state.isLoaded) {\n      refreshSources();\n    }\n  }, [entities, removingSources]);\n\n  let shownRows = state.rows;\n  if (numberOfEntities === 0 && state.isLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: { colSpan: COLUMN_COUNT },\n            title: <EmptyStateTable />,\n          },\n        ],\n      },\n    ];\n  } else if (!loaded || !appTypesLoaded || !sourceTypesLoaded) {\n    shownRows = [\n      {\n        heightAuto: true,\n        cells: [\n          {\n            props: {\n              colSpan: COLUMN_COUNT,\n              className: 'sources-placeholder-row',\n            },\n            title: <PlaceHolderTable />,\n          },\n        ],\n      },\n    ];\n  }\n\n  return (\n    <Table\n      gridBreakPoint=\"grid-lg\"\n      aria-label={intl.formatMessage({\n        id: 'sources.list',\n        defaultMessage: 'List of Sources',\n      })}\n      onSort={(_event, key, direction) => reduxDispatch(sortEntities(state.cells[key].value, direction))}\n      sortBy={{\n        index: state.cells.map((cell) => (cell.hidden ? 'hidden' : cell.value)).indexOf(sortBy),\n        direction: sortDirection,\n      }}\n      rows={shownRows}\n      cells={state.cells}\n      actionResolver={loaded && numberOfEntities > 0 ? actionResolver(intl, push, writePermissions) : undefined}\n      rowWrapper={RowWrapperLoader}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default SourcesTable;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { EmptyState } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyState';\nimport { EmptyStateIcon } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateIcon';\nimport { EmptyStateBody } from '@patternfly/react-core/dist/js/components/EmptyState/EmptyStateBody';\nimport { Bullseye } from '@patternfly/react-core/dist/js/layouts/Bullseye/Bullseye';\nimport { Title } from '@patternfly/react-core/dist/js/components/Title/Title';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\n\nconst SourcesErrorState = () => {\n  const intl = useIntl();\n\n  return (\n    <Bullseye>\n      <EmptyState className=\"ins-c-sources__empty-state\">\n        <EmptyStateIcon icon={ExclamationCircleIcon} color=\"var(--pf-global--danger-color--100)\" />\n        <Title headingLevel=\"h5\" size=\"lg\">\n          {intl.formatMessage({\n            id: 'sources.errorStateTitle',\n            defaultMessage: 'Something went wrong',\n          })}\n        </Title>\n        <EmptyStateBody>\n          {intl.formatMessage(\n            {\n              id: 'sources.errorStateBody',\n              defaultMessage:\n                'There was a problem processing the request. Try refreshing the page. If the problem persists, contact <a>Red Hat support.</a>',\n            },\n            {\n              // eslint-disable-next-line react/display-name\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href=\"https://access.redhat.com/support\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            }\n          )}\n        </EmptyStateBody>\n        <Button className=\"pf-u-mt-xl\" variant=\"primary\" component=\"a\" href={window.location.href}>\n          {intl.formatMessage({\n            id: 'sources.retry',\n            defaultMessage: 'Retry',\n          })}\n        </Button>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nexport default SourcesErrorState;\n","import awesomeDebounce from 'awesome-debounce-promise';\nimport { loadEntities, filterSources } from '../../redux/sources/actions';\nimport { CLOUD_VENDOR, CLOUD_VENDORS, REDHAT_VENDOR } from '../../utilities/constants';\nimport { AVAILABLE } from '../../views/formatters';\n\nexport const debouncedFiltering = awesomeDebounce((refresh) => refresh(), 500);\n\nexport const afterSuccessLoadParameters = {\n  pageNumber: 1,\n  sortBy: 'created_at',\n  sortDirection: 'desc',\n};\n\nexport const afterSuccess = (dispatch) => dispatch(loadEntities(afterSuccessLoadParameters));\n\nexport const prepareSourceTypeSelection = (sourceTypes, activeVendor) =>\n  sourceTypes\n    .filter(({ vendor }) => (activeVendor === CLOUD_VENDOR ? CLOUD_VENDORS.includes(vendor) : vendor === REDHAT_VENDOR))\n    .map(({ id, product_name }) => ({ label: product_name, value: id }))\n    .sort((a, b) => a.label.localeCompare(b.label));\n\nexport const prepareApplicationTypeSelection = (appTypes) =>\n  appTypes.map(({ id, display_name }) => ({ label: display_name, value: id })).sort((a, b) => a.label.localeCompare(b.label));\n\nexport const setFilter = (column, value, dispatch) =>\n  dispatch(\n    filterSources({\n      [column]: value,\n    })\n  );\n\nexport const chipsFormatters = (key, filterValue, sourceTypes, appTypes, intl) =>\n  ({\n    name: () => ({ name: filterValue[key], key }),\n    source_type_id: () => ({\n      category: 'Source Type',\n      key,\n      chips: filterValue[key].map((id) => {\n        const sourceType = sourceTypes.find((type) => type.id === id);\n\n        return { name: sourceType ? sourceType.product_name : id, value: id };\n      }),\n    }),\n    applications: () => ({\n      category: 'Application',\n      key,\n      chips: filterValue[key].map((id) => {\n        const appType = appTypes.find((type) => type.id === id);\n\n        return { name: appType ? appType.display_name : id, value: id };\n      }),\n    }),\n    availability_status: () => ({\n      category: 'Status',\n      key,\n      chips: [\n        {\n          value: filterValue[key][0],\n          name:\n            filterValue[key][0] === AVAILABLE\n              ? intl.formatMessage({\n                  id: 'sources.available',\n                  defaultMessage: 'Available',\n                })\n              : intl.formatMessage({\n                  id: 'sources.unavailable',\n                  defaultMessage: 'Unavailable',\n                }),\n        },\n      ],\n    }),\n  }[key] || (() => ({ name: key })));\n\nexport const prepareChips = (filterValue, sourceTypes, appTypes, intl) =>\n  Object.keys(filterValue)\n    .map((key) =>\n      filterValue[key] && filterValue[key].length > 0\n        ? chipsFormatters(key, filterValue, sourceTypes, appTypes, intl)()\n        : undefined\n    )\n    .filter(Boolean);\n\nexport const removeChips = (chips, filterValue, deleteAll) => {\n  if (deleteAll) {\n    return Object.keys(filterValue).reduce(\n      (acc, curr) => ({\n        ...acc,\n        [curr]: undefined,\n      }),\n      {}\n    );\n  }\n\n  const chip = chips[0];\n\n  return {\n    ...filterValue,\n    [chip.key]: chip.chips ? filterValue[chip.key].filter((value) => value !== chip.chips[0].value) : undefined,\n  };\n};\n\nexport const loadedTypes = (types, loaded) => (loaded && types.length > 0 ? types : undefined);\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Tabs } from '@patternfly/react-core/dist/js/components/Tabs/Tabs';\nimport { Tab } from '@patternfly/react-core/dist/js/components/Tabs/Tab';\nimport { TabTitleIcon } from '@patternfly/react-core/dist/js/components/Tabs/TabTitleIcon';\nimport { TabTitleText } from '@patternfly/react-core/dist/js/components/Tabs/TabTitleText';\nimport RedhatIcon from '@patternfly/react-icons/dist/js/icons/redhat-icon';\nimport CloudIcon from '@patternfly/react-icons/dist/js/icons/cloud-icon';\n\nimport { setActiveVendor } from '../redux/sources/actions';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\n\nconst TabNavigation = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const activeVendor = useSelector(({ sources }) => sources.activeVendor);\n\n  return (\n    <Tabs activeKey={activeVendor} onSelect={(_e, key) => dispatch(setActiveVendor(key))} className=\"pf-u-mt-md\" isFilled>\n      <Tab\n        eventKey={CLOUD_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <CloudIcon />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.cloudSources', defaultMessage: 'Cloud sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n      <Tab\n        eventKey={REDHAT_VENDOR}\n        title={\n          <React.Fragment>\n            <TabTitleIcon>\n              <RedhatIcon />\n            </TabTitleIcon>\n            <TabTitleText>{intl.formatMessage({ id: 'sources.redhatSources', defaultMessage: 'Red Hat sources' })}</TabTitleText>\n          </React.Fragment>\n        }\n      />\n    </Tabs>\n  );\n};\n\nexport default TabNavigation;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { CardTitle } from '@patternfly/react-core/dist/js/components/Card/CardTitle';\nimport { CardFooter } from '@patternfly/react-core/dist/js/components/Card/CardFooter';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nimport CloudTiles from './CloudTiles';\nimport ProvidersLink from './ProvidersLink';\n\nconst CLOUD_CATALOG_HREF = 'https://catalog.redhat.com/cloud';\n\nconst CloudEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"ins-c-sources__cloud-empty-state-card pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'cloud.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your public clouds',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'cloud.emptystate.cardDescription',\n            defaultMessage: 'Choose a provider to begin.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <CloudTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n      <CardFooter className=\"cloud-footer\">\n        <ProvidersLink />\n        <Text className=\"catalog-link pf-u-mt-md\">\n          {intl.formatMessage(\n            {\n              id: 'cloud.emptystate.catalogLink',\n              defaultMessage: 'Not set up with a Cloud provider? <a>Find a Cloud & Service Provider with Red Hat Ecosystem</a>',\n            },\n            {\n              a: (chunks) => (\n                <Text key=\"link\" component=\"a\" href={CLOUD_CATALOG_HREF} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {chunks}\n                </Text>\n              ),\n            }\n          )}\n        </Text>\n      </CardFooter>\n    </Card>\n  );\n};\n\nCloudEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default CloudEmptyState;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { routes } from '../../Routes';\n\nimport { Tile } from '@patternfly/react-core/dist/js/components/Tile/Tile';\n\nimport ImageWithPlaceholder from '../TilesShared/ImageWithPlaceholder';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport DisabledTile from '../TilesShared/DisabledTile';\n\nconst RedHatTiles = ({ setSelectedType }) => {\n  const { push } = useHistory();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const openWizard = (type) => {\n    setSelectedType(type);\n    push(routes.sourcesNew.path);\n  };\n\n  const TileComponent = hasWritePermissions ? Tile : DisabledTile;\n\n  const icon = (\n    <ImageWithPlaceholder className=\"redhat-icon\" src=\"/apps/frontend-assets/red-hat-logos/stacked.svg\" alt=\"red hat logo\" />\n  );\n\n  return (\n    <React.Fragment>\n      <TileComponent\n        isStacked\n        title=\"Ansible Automation Platform\"\n        onClick={() => openWizard('ansible-tower')}\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        icon={icon}\n      />\n      <TileComponent\n        isStacked\n        title=\"OpenShift Container Platfrom\"\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        onClick={() => openWizard('openshift')}\n        icon={icon}\n      />\n      <TileComponent\n        isStacked\n        title=\"Satellite\"\n        onClick={() => openWizard('satellite')}\n        className=\"tile pf-u-mr-md-on-md pf-u-mt-md pf-u-mt-0-on-md\"\n        icon={icon}\n      />\n    </React.Fragment>\n  );\n};\n\nRedHatTiles.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default RedHatTiles;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport { Card } from '@patternfly/react-core/dist/js/components/Card/Card';\nimport { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';\nimport { CardTitle } from '@patternfly/react-core/dist/js/components/Card/CardTitle';\nimport { Text } from '@patternfly/react-core/dist/js/components/Text/Text';\n\nimport RedHatTiles from './RedHatTiles';\n\nconst RedHatEmptyState = ({ setSelectedType }) => {\n  const intl = useIntl();\n\n  return (\n    <Card className=\"ins-c-sources__cloud-empty-state-card pf-u-mt-md pf-u-mt-0-on-md\">\n      <CardTitle>\n        {intl.formatMessage({\n          id: 'redhat.emptystate.cardTitle',\n          defaultMessage: 'Get started by connecting to your Red Hat applications',\n        })}\n      </CardTitle>\n      <CardBody>\n        <Text>\n          {intl.formatMessage({\n            id: 'redhat.emptystate.cardDescription',\n            defaultMessage: 'Select an available application.',\n          })}\n        </Text>\n        <div className=\"provider-tiles pf-u-mt-md pf-u-mb-lg\">\n          <RedHatTiles setSelectedType={setSelectedType} />\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nRedHatEmptyState.propTypes = {\n  setSelectedType: PropTypes.func.isRequired,\n};\n\nexport default RedHatEmptyState;\n","import React, { useEffect, useState, lazy, Suspense } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button } from '@patternfly/react-core/dist/js/components/Button/Button';\nimport { useIntl } from 'react-intl';\n\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/components/cjs/PageHeader';\nimport { Section } from '@redhat-cloud-services/frontend-components/components/cjs/Section';\nimport { filterVendorAppTypes } from '@redhat-cloud-services/frontend-components-sources/cjs/filterApps';\n\nimport { filterSources, pageAndSize } from '../redux/sources/actions';\nimport SourcesTable from '../components/SourcesTable/SourcesTable';\nimport SourcesErrorState from '../components/SourcesErrorState';\nimport { routes } from '../Routes';\n\nconst SourceRemoveModal = lazy(() =>\n  import(\n    /* webpackChunkName: \"remove\" */\n    '../components/SourceRemoveModal/SourceRemoveModal'\n  )\n);\nconst AddSourceWizard = lazy(() =>\n  import(\n    /* webpackChunkName: \"addSource\" */ '@redhat-cloud-services/frontend-components-sources/cjs/addSourceWizard'\n  ).then((module) => ({ default: module.AddSourceWizard }))\n);\n\nimport {\n  prepareChips,\n  removeChips,\n  setFilter,\n  debouncedFiltering,\n  prepareSourceTypeSelection,\n  afterSuccess,\n  loadedTypes,\n  prepareApplicationTypeSelection,\n} from './Sources/helpers';\nimport { useIsLoaded } from '../hooks/useIsLoaded';\nimport { useHasWritePermissions } from '../hooks/useHasWritePermissions';\nimport CustomRoute from '../components/CustomRoute/CustomRoute';\nimport { Tooltip } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\nimport { PaginationLoader } from '../components/SourcesTable/loaders';\nimport TabNavigation from '../components/TabNavigation';\nimport CloudCards from '../components/CloudTiles/CloudCards';\nimport { CLOUD_VENDOR, REDHAT_VENDOR } from '../utilities/constants';\nimport CloudEmptyState from '../components/CloudTiles/CloudEmptyState';\nimport { AVAILABLE, UNAVAILABLE } from '../views/formatters';\nimport RedHatEmptyState from '../components/RedHatTiles/RedHatEmptyState';\n\nconst SourcesPage = () => {\n  const [filter, setFilterValue] = useState();\n  const [selectedType, setSelectedType] = useState();\n\n  const entitiesLoaded = useIsLoaded();\n  const hasWritePermissions = useHasWritePermissions();\n\n  const history = useHistory();\n  const intl = useIntl();\n\n  const sources = useSelector(({ sources }) => sources, shallowEqual);\n\n  const {\n    filterValue,\n    numberOfEntities,\n    appTypes,\n    pageSize,\n    pageNumber,\n    fetchingError,\n    sourceTypes,\n    paginationClicked,\n    appTypesLoaded,\n    sourceTypesLoaded,\n    activeVendor,\n  } = sources;\n\n  const loaded = entitiesLoaded && sourceTypesLoaded && appTypesLoaded;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (filter !== filterValue.name) {\n      setFilterValue(filterValue.name);\n    }\n  }, [filterValue.name]);\n\n  const onSetPage = (_e, page) => dispatch(pageAndSize(page, pageSize));\n\n  const onPerPageSelect = (_e, perPage) => dispatch(pageAndSize(1, perPage));\n\n  const maximumPageNumber = Math.ceil(numberOfEntities / pageSize);\n\n  useEffect(() => {\n    if (loaded && numberOfEntities > 0 && pageNumber > Math.max(maximumPageNumber, 1)) {\n      onSetPage({}, maximumPageNumber);\n    }\n  });\n\n  const paginationConfig = {\n    itemCount: numberOfEntities,\n    page: pageNumber,\n    perPage: pageSize,\n    onSetPage,\n    onPerPageSelect,\n    className: 'top-pagination',\n  };\n\n  const paginationConfigBottom = {\n    ...paginationConfig,\n    dropDirection: 'up',\n    variant: 'bottom',\n    isCompact: false,\n    className: 'bottom-pagination',\n  };\n\n  const showPaginationLoader = (!loaded || !appTypesLoaded || !sourceTypesLoaded) && !paginationClicked;\n\n  const mainContent = () => (\n    <React.Fragment>\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfig : undefined}\n        actionsConfig={\n          hasWritePermissions\n            ? {\n                actions: [\n                  <Link to={routes.sourcesNew.path} key=\"addSourceButton\">\n                    <Button variant=\"primary\" id=\"addSourceButton\">\n                      {intl.formatMessage({\n                        id: 'sources.addSource',\n                        defaultMessage: 'Add source',\n                      })}\n                    </Button>\n                  </Link>,\n                ],\n              }\n            : {\n                actions: [\n                  <Tooltip\n                    content={intl.formatMessage({\n                      id: 'sources.notAdminAddButton',\n                      defaultMessage:\n                        'To add a source, you must be granted write permissions from your Organization Administrator.',\n                    })}\n                    key=\"addSourceButton\"\n                  >\n                    <span tabIndex=\"0\">\n                      <Button variant=\"primary\" isDisabled id=\"addSourceButton\">\n                        {intl.formatMessage({\n                          id: 'sources.addSource',\n                          defaultMessage: 'Add source',\n                        })}\n                      </Button>\n                    </span>\n                  </Tooltip>,\n                ],\n              }\n        }\n        filterConfig={{\n          items: [\n            {\n              label: intl.formatMessage({\n                id: 'sources.name',\n                defaultMessage: 'Name',\n              }),\n              filterValues: {\n                'aria-label': intl.formatMessage({\n                  id: 'sources.filterByName',\n                  defaultMessage: 'Filter by name',\n                }),\n                onChange: (_event, value) => {\n                  setFilterValue(value);\n                  debouncedFiltering(() => setFilter('name', value, dispatch));\n                },\n                value: filter,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.type',\n                defaultMessage: 'Type',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('source_type_id', value, dispatch),\n                items: prepareSourceTypeSelection(sourceTypes || [], activeVendor),\n                value: filterValue.source_type_id,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.application',\n                defaultMessage: 'Application',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (_event, value) => setFilter('applications', value, dispatch),\n                items: prepareApplicationTypeSelection(appTypes?.filter(filterVendorAppTypes(sourceTypes)) || []),\n                value: filterValue.applications,\n              },\n            },\n            {\n              label: intl.formatMessage({\n                id: 'sources.availabilityStatus',\n                defaultMessage: 'Status',\n              }),\n              type: 'checkbox',\n              filterValues: {\n                onChange: (event, _value, selectedValue) =>\n                  setFilter('availability_status', event.target.checked ? [selectedValue] : [], dispatch),\n                items: [\n                  { label: intl.formatMessage({ id: 'sources.available', defaultMessage: 'Available' }), value: AVAILABLE },\n                  {\n                    label: intl.formatMessage({ id: 'sources.unavailable', defaultMessage: 'Unavailable' }),\n                    value: UNAVAILABLE,\n                  },\n                ],\n                value: filterValue.availability_status,\n              },\n            },\n          ],\n        }}\n        activeFiltersConfig={{\n          filters: prepareChips(filterValue, sourceTypes, appTypes, intl),\n          onDelete: (_event, chips, deleteAll) => dispatch(filterSources(removeChips(chips, filterValue, deleteAll))),\n        }}\n      />\n      <SourcesTable />\n      <PrimaryToolbar\n        pagination={showPaginationLoader ? <PaginationLoader /> : numberOfEntities > 0 ? paginationConfigBottom : undefined}\n      />\n    </React.Fragment>\n  );\n\n  const hasSomeFilter =\n    Object.entries(filterValue)\n      .map(([_key, value]) => value && (!Array.isArray(value) || (Array.isArray(value) && value.length > 0)))\n      .filter(Boolean).length > 0;\n\n  const showEmptyState = loaded && numberOfEntities === 0 && !hasSomeFilter;\n  const showInfoCards = activeVendor === CLOUD_VENDOR && !showEmptyState;\n\n  return (\n    <React.Fragment>\n      <Suspense fallback={null}>\n        <CustomRoute exact route={routes.sourcesRemove} Component={SourceRemoveModal} />\n        <CustomRoute\n          exact\n          route={routes.sourcesNew}\n          Component={AddSourceWizard}\n          componentProps={{\n            sourceTypes: loadedTypes(sourceTypes, sourceTypesLoaded),\n            applicationTypes: loadedTypes(appTypes, appTypesLoaded),\n            isOpen: true,\n            onClose: () => {\n              setSelectedType(undefined);\n              history.push(routes.sources.path);\n            },\n            afterSuccess: (source) => afterSuccess(dispatch, source),\n            hideSourcesButton: true,\n            selectedType,\n          }}\n        />\n      </Suspense>\n      <PageHeader className=\"pf-u-pb-0\">\n        <PageHeaderTitle\n          title={intl.formatMessage({\n            id: 'sources.sources',\n            defaultMessage: 'Sources',\n          })}\n        />\n        <TabNavigation />\n      </PageHeader>\n      <Section type=\"content\">\n        {showInfoCards && <CloudCards setSelectedType={setSelectedType} />}\n        {fetchingError && <SourcesErrorState />}\n        {!fetchingError && showEmptyState && activeVendor === CLOUD_VENDOR && (\n          <CloudEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && showEmptyState && activeVendor === REDHAT_VENDOR && (\n          <RedHatEmptyState setSelectedType={setSelectedType} />\n        )}\n        {!fetchingError && !showEmptyState && mainContent()}\n      </Section>\n    </React.Fragment>\n  );\n};\n\nexport default SourcesPage;\n","import { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nexport const useSource = () => {\n  const { id } = useParams();\n  const source = useSelector(({ sources }) => sources.entities.find((source) => source.id === id));\n\n  return source;\n};\n","import { useSelector } from 'react-redux';\n\nexport const useIsLoaded = () => {\n  const isLoaded = useSelector(({ sources }) => sources.loaded);\n\n  return isLoaded <= 0;\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { useParams, Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage, addHiddenSource } from '../../redux/sources/actions';\nimport { doLoadSource } from '../../api/entities';\nimport { useIsLoaded } from '../../hooks/useIsLoaded';\nimport { routes } from '../../Routes';\nimport { useSource } from '../../hooks/useSource';\n\nconst RedirectNoId = () => {\n  const { id } = useParams();\n  const intl = useIntl();\n  const source = useSource();\n\n  const loaded = useIsLoaded();\n\n  const { appTypesLoaded, sourceTypesLoaded } = useSelector(({ sources }) => sources, shallowEqual);\n  const dispatch = useDispatch();\n\n  const [applicationIsLoaded, setIsApplicationLoaded] = useState(false);\n\n  useEffect(() => {\n    if (loaded && appTypesLoaded && sourceTypesLoaded) {\n      doLoadSource(id)\n        .then(({ sources: [source] }) => {\n          dispatch(addHiddenSource(source));\n          return source;\n        })\n        .then((source) => {\n          if (!source) {\n            dispatch(\n              addMessage(\n                intl.formatMessage({\n                  id: 'sources.sourceNotFoundTitle',\n                  defaultMessage: 'Requested source was not found',\n                }),\n                'danger',\n                intl.formatMessage(\n                  {\n                    id: 'sources.sourceNotFoundTitleDescription',\n                    defaultMessage: 'Source with { id } was not found. Try it again later.',\n                  },\n                  { id }\n                )\n              )\n            );\n          }\n\n          setIsApplicationLoaded(true);\n        });\n    }\n  }, [loaded, appTypesLoaded, sourceTypesLoaded]);\n\n  if (applicationIsLoaded && !source) {\n    return <Redirect to={routes.sources.path} />;\n  }\n\n  return null;\n};\n\nexport default RedirectNoId;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\n\nimport { addMessage } from '../../redux/sources/actions';\nimport { useHasWritePermissions } from '../../hooks/useHasWritePermissions';\nimport { routes } from '../../Routes';\n\nconst RedirectNoWriteAccess = () => {\n  const intl = useIntl();\n\n  const writePermissions = useHasWritePermissions();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (writePermissions === false) {\n      const title = intl.formatMessage({\n        id: 'sources.insufficietnPerms',\n        defaultMessage: 'Insufficient permissions',\n      });\n      const description = intl.formatMessage({\n        id: 'sources.notAdminButton',\n        defaultMessage: 'To perform this action, you must be granted write permissions from your Organization Administrator.',\n      });\n\n      dispatch(addMessage(title, 'danger', description));\n    }\n  }, [writePermissions]);\n\n  if (writePermissions === false) {\n    return <Redirect to={routes.sources.path} />;\n  }\n\n  return null;\n};\n\nexport default RedirectNoWriteAccess;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport RedirectNoWriteAccess from '../RedirectNoWriteAccess/RedirectNoWriteAccess';\nimport { useSource } from '../../hooks/useSource';\nimport RedirectNoId from '../RedirectNoId/RedirectNoId';\n\nconst CustomRouteInternal = ({ route, children }) => {\n  const source = route.redirectNoId && useSource();\n\n  if (!source && route.redirectNoId) {\n    return <RedirectNoId />;\n  }\n\n  return (\n    <React.Fragment>\n      {route.writeAccess && <RedirectNoWriteAccess />}\n      {children}\n    </React.Fragment>\n  );\n};\n\nCustomRouteInternal.propTypes = {\n  route: PropTypes.shape({\n    path: PropTypes.string.isRequired,\n    redirectNoId: PropTypes.bool,\n    writeAccess: PropTypes.bool,\n  }).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst CustomRoute = ({ route, componentProps, Component, ...props }) => (\n  <Route {...props} path={route.path}>\n    <CustomRouteInternal route={route}>\n      <Component {...componentProps} />\n    </CustomRouteInternal>\n  </Route>\n);\n\nCustomRoute.propTypes = {\n  route: PropTypes.shape({\n    path: PropTypes.string.isRequired,\n    redirectNoId: PropTypes.bool,\n    writeAccess: PropTypes.bool,\n  }).isRequired,\n  componentProps: PropTypes.any,\n  Component: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n};\n\nexport default CustomRoute;\n"],"sourceRoot":""}